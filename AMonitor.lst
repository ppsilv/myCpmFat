# file opened: cpm.asm
   1  0000              ; This monitor & loader has two functions:
   2  0000              ; (1) The monitor part enables you to view ram, rom and various config parameters.
   3  0000              ; (2) The Loader part loads CP/M
   4  0000
   5  0000              ; CP/M v2.2 was implemented at the BDOS level by John Squires.
   6  0000              ; The CORE, BIOS & BDOS are my own work.
   7  0000              ;
   8  0000              ; How the CP/M loader works:
   9  0000              ; The 4 main sections need to end up at the top of memory.
  10  0000              ; For now let's say at $C000, $D000 and $E000 & $F000.
  11  0000              ; The CORE goes at the top of ram. This contains the routines to use the hardware.
  12  0000              ; The BIOS is just a stub of a BIOS and does very little.
  13  0000              ; The BDOS is the heart of CP/M and implements all the function.
  14  0000              ; The CCP is the face of CP/M. The current one is the original from Digital Research 1978.
  15  0000              ; In order to load CP/M we need a loader that grabs them from somewhere and copies them
  16  0000              ; to those locations. That loader is this program, and is located in ROM at $0000.
  17  0000              ; The CP/M loader's job is to:
  18  0000              ; (1) Configure the Z80 Playground.
  19  0000              ; (2) Load the CORE and BIOS from disk and put them in their corresponding locations.
  20  0000              ; (3) Put the tiny jump table in place at the bottom of memory.
  21  0000              ; (4) Switch off the ROM.
  22  0000              ; (5) Jump into CP/M by calling BIOS cold boot.
  23  0000              ; From there the BIOS loads the BDOS & CCP.
  24  0000
  25  0000                  org $0000
  26  0000
  27  0000              ; RST 00
  28  0000              ;
  29  0000 F3           			DI
  30  0001 C3 3A 00     			JP loader_entry
  31  0004 00 00 00 00  			DS 4
  32  0008              ;
  33  0008              ; RST 08 - Read char from I/O
  34  0008              ;
  35  0008 C3 29 07     			JP Read_Char_NB
  36  000B 00 00 00...  			DS 5
  37  0010                          ;DS  8
  38  0010              ;
  39  0010              ; RST 10 - Output char to I/O
  40  0010              ;
  41  0010 C3 2C 07     			JP print_a
  42  0013 00 00 00...  			DS 5
  43  0018                          ;DS  8
  44  0018              ;
  45  0018              ; RST 18
  46  0018              ;
  47  0018 00 00 00...  			DS 8
  48  0020              ;
  49  0020              ; RST 20
  50  0020              ;
  51  0020 00 00 00...  			DS 8
  52  0028              ;
  53  0028              ; RST 28
  54  0028              ;
  55  0028 00 00 00...  			DS 8
  56  0030              ;
  57  0030              ; RST 30
  58  0030              ;
  59  0030 00 00 00...  			DS 8
  60  0038              ;
  61  0038              ; RST 38 - NMI
  62  0038              ;
  63  0038 FB           			EI
  64  0039 C9           			RET
  65  003A
  66  003A
  67  003A
  68  003A              ; INT routine. This runs when you press the /INT button. All it does is toggle the USER led.
  69  003A              ;	org $0038
  70  003A              ;int:
  71  003A              ;	ex af, af'
  72  003A              ;	exx
  73  003A              ;	call disk_toggle
  74  003A              ;	call short_pause
  75  003A              ;	exx
  76  003A              ;	ex af, af'
  77  003A              ;	ei
  78  003A              ;	reti
  79  003A
  80  003A              ; NMI routine
  81  003A              ;	org $0066
  82  003A              ;nmi:
  83  003A              ;	ex af, af'
  84  003A              ;	exx
  85  003A              ;	call user_toggle
  86  003A              ;	call short_pause
  87  003A              ;	exx
  88  003A              ;	ex af, af'
  89  003A              ;	retn
  90  003A              loader_entry:
  91  003A F3               di
  92  003B 21 6A C0         ld  hl, loader_stack
  93  003E F9               ld  sp, hl
  94  003F                  ;jp skip_over_int_and_nmi
  95  003F
  96  003F              skip_over_int_and_nmi:
  97  003F 3E 80        	LD      A, 0x80 			; All ports output A,B and C
  98  0041 D3 AB        	OUT     (PIO_M), A		;
  99  0043 3E A0        	LD      A, 0xA0
 100  0045 D3 A8        	OUT     (PIO_A), A
 101  0047 21 F6 06         LD  HL, UART_BAUD_38400
 102  004A 3E 03            LD  A,  0x03
 103  004C CD FF 06         call configure_uart         ; Put these settings into the UART
 104  004F CD 84 07         call    long_pause
 105  0052
 106  0052 CD D4 07         call message
 107  0055 1B 5B 32 4A     	db 27,'[2J',27,'[H'
 107  0059 1B 5B 48
 108  005C 5A 38 30 20      db 'Z80 Playground Monitor & CP/M Loader v1.03',13,10,0
 108  0060 50 6C 61 79
 108  0064 67 72 6F 75
 108  0068 6E 64 20 4D
 108  006C 6F 6E 69 74
 108  0070 6F 72 20 26
 108  0074 20 43 50 2F
 108  0078 4D 20 4C 6F
 108  007C 61 64 65 72
 108  0080 20 76 31 2E
 108  0084 30 33 0D 0A
 108  0088 00
 109  0089
 110  0089
 111  0089
 112  0089                  ; Check MCR
 113  0089 3E 22            ld a, %00100010
 114  008B D3 BC            out (uart_MCR), a
 115  008D CD D4 07         call message
 116  0090 31 36 43 35      db '16C550: ',0
 116  0094 35 30 3A 20
 116  0098 00
 117  0099 DB BC            in a, (uart_MCR)
 118  009B CD F2 07         call show_a_as_hex
 119  009E CD 59 07         call newline
 120  00A1
 121  00A1 CD D4 07         call message
 122  00A4 43 6F 6E 66      db 'Configure USB Drive...',13,10,0
 122  00A8 69 67 75 72
 122  00AC 65 20 55 53
 122  00B0 42 20 44 72
 122  00B4 69 76 65 2E
 122  00B8 2E 2E 0D 0A
 122  00BC 00
 123  00BD CD 51 0C         call configure_memorystick
 124  00C0 CD D4 07         call message
 125  00C3 43 68 65 63      db 'Check CH376 module exists...',13,10,0
 125  00C7 6B 20 43 48
 125  00CB 33 37 36 20
 125  00CF 6D 6F 64 75
 125  00D3 6C 65 20 65
 125  00D7 78 69 73 74
 125  00DB 73 2E 2E 2E
 125  00DF 0D 0A 00
 126  00E2 CD 90 0C         call check_module_exists
 127  00E5 CD D4 07         call message
 128  00E8 47 65 74 20      db 'Get CH376 module version...',13,10,0
 128  00EC 43 48 33 37
 128  00F0 36 20 6D 6F
 128  00F4 64 75 6C 65
 128  00F8 20 76 65 72
 128  00FC 73 69 6F 6E
 128  0100 2E 2E 2E 0D
 128  0104 0A 00
 129  0106 CD C6 0C         call get_module_version
 130  0109
 131  0109                  ; Now read the baud rate configuration from uart.cfg
 132  0109 3E FF            ld a, $FF
 133  010B 32 AF FF         ld (baud_rate_divisor), a           ; Reset the two UART parameters
 134  010E 32 AE FF         ld (flow_control_value), a
 135  0111 3E 00            ld a, 0
 136  0113 32 FF 8F         ld (auto_run_char), a               ; Reset the auto-run character
 137  0116 21 DB 06         ld hl, UART_CFG_NAME
 138  0119 CD 9A 02         call load_config_file
 139  011C CD 8F 03         call parse_uart_config_file         ; this gets b=baud and c=flowcontrol
 140  011F
 141  011F 3A AF FF         ld a, (baud_rate_divisor)           ; Check if we managed to get both baudrate and flowcontrol
 142  0122 FE FF            cp $FF
 143  0124 28 77            jr z, failed_to_read_uart_config    ; If not, don't reconfigure uart
 144  0126 47               ld b, a
 145  0127
 146  0127 3A AE FF         ld a, (flow_control_value)
 147  012A FE FF            cp $FF
 148  012C 28 6F            jr z, failed_to_read_uart_config
 149  012E 4F               ld c, a
 150  012F
 151  012F CD D4 07         call message
 152  0132 43 6F 6E 66      db 'Configuring UART to settings in UART.CFG',13,10,0
 152  0136 69 67 75 72
 152  013A 69 6E 67 20
 152  013E 55 41 52 54
 152  0142 20 74 6F 20
 152  0146 73 65 74 74
 152  014A 69 6E 67 73
 152  014E 20 69 6E 20
 152  0152 55 41 52 54
 152  0156 2E 43 46 47
 152  015A 0D 0A 00
 153  015D
 154  015D C5               push bc
 155  015E CD D4 07         call message
 156  0161 42 41 55 44      db 'BAUD ',0
 156  0165 20 00
 157  0167 78               ld a, b
 158  0168 CD F2 07         call show_a_as_hex
 159  016B C1               pop bc
 160  016C
 161  016C C5               push bc
 162  016D CD D4 07         call message
 163  0170 2C 20 46 4C      db ', FLOW ',0
 163  0174 4F 57 20 00
 164  0178 79               ld a, c
 165  0179 CD F2 07         call show_a_as_hex
 166  017C CD 59 07         call newline
 167  017F C1               pop bc
 168  0180
 169  0180 CD FF 06         call configure_uart                 ; Put these settings into the UART
 170  0183
 171  0183                  ; Report on the AUTO-RUN-CHAR and start the monitor
 172  0183 3A FF 8F         ld a, (auto_run_char)
 173  0186 FE 00            cp 0
 174  0188 CA BA 01         jp z, start_monitor
 175  018B CD D4 07         call message
 176  018E 41 55 54 4F      db 'AUTO ',0
 176  0192 20 00
 177  0194 CD 1C 1B         call show_a_safe
 178  0197 CD 59 07         call newline
 179  019A C3 BA 01         jp start_monitor
 180  019D
 181  019D              failed_to_read_uart_config:
 182  019D CD D4 07         call message
 183  01A0 43 6F 75 6C      db 'Could not read UART.CFG',13,10,0
 183  01A4 64 20 6E 6F
 183  01A8 74 20 72 65
 183  01AC 61 64 20 55
 183  01B0 41 52 54 2E
 183  01B4 43 46 47 0D
 183  01B8 0A 00
 184  01BA
 185  01BA              start_monitor:
 186  01BA C3 92 10         jp monitor_start
 187  01BD
 188  01BD              start_cpm:
 189  01BD CD D4 07         call message
 190  01C0 43 68 65 63      db 'Checking disks...',13,10,0
 190  01C4 6B 69 6E 67
 190  01C8 20 64 69 73
 190  01CC 6B 73 2E 2E
 190  01D0 2E 0D 0A 00
 191  01D4 CD 31 0B         call check_cpmdisks_structure
 192  01D7
 193  01D7                  ; Copy 8 byte bootstrap sequence into Low Storage at location 0
 194  01D7                  ; but note that we patch it up in a bit with the real jump locations.
 195  01D7 11 00 00         ld de, 0
 196  01DA 21 E4 06         ld hl, first_eight_bytes
 197  01DD 01 08 00         ld bc, 8
 198  01E0 ED B0            ldir
 199  01E2
 200  01E2                  ; Load CPM config file into memory
 201  01E2 21 D3 06         ld hl, CPM_CFG_NAME
 202  01E5 CD 9A 02         call load_config_file
 203  01E8 CD D4 07         call message
 204  01EB 43 46 47 20      db 'CFG loaded!',13,10,0
 204  01EF 6C 6F 61 64
 204  01F3 65 64 21 0D
 204  01F7 0A 00
 205  01F9                  ; Parse it to get out the locations
 206  01F9 CD C5 02         call parse_cpm_config_file
 207  01FC CD D4 07         call message
 208  01FF 43 46 47 20      db 'CFG parsed!',13,10,0
 208  0203 70 61 72 73
 208  0207 65 64 21 0D
 208  020B 0A 00
 209  020D
 210  020D CD 0A 06         call show_config
 211  0210 CD 70 06         call validate_config
 212  0213
 213  0213 CD D4 07         call message
 214  0216 43 46 47 20      db 'CFG validated!',13,10,0
 214  021A 76 61 6C 69
 214  021E 64 61 74 65
 214  0222 64 21 0D 0A
 214  0226 00
 215  0227
 216  0227
 217  0227                  ; Load CORE.BIN into its proper location
 218  0227 21 C1 06         ld hl, NAME_OF_CORE
 219  022A CD 75 0E         call copy_filename_to_buffer
 220  022D ED 5B C3 FF      ld de, (core_location)
 221  0231 CD 88 09         call load_bin_file
 222  0234 CD D4 07         call message
 223  0237 43 4F 52 45      db 'CORE loaded!',13,10,0
 223  023B 20 6C 6F 61
 223  023F 64 65 64 21
 223  0243 0D 0A 00
 224  0246
 225  0246                  ; Load the BIOS to the proper location
 226  0246 21 B8 06         ld hl, NAME_OF_BIOS
 227  0249 CD 75 0E         call copy_filename_to_buffer
 228  024C ED 5B C1 FF      ld de, (bios_location)
 229  0250 CD 88 09         call load_bin_file
 230  0253 CD D4 07         call message
 231  0256 42 49 4F 53      db 'BIOS loaded!',13,10,0
 231  025A 20 6C 6F 61
 231  025E 64 65 64 21
 231  0262 0D 0A 00
 232  0265
 233  0265                  ; copy bios_start into bytes 1 & 2 after adding 3 to it
 234  0265 2A C1 FF         ld hl, (bios_location)
 235  0268 23               inc hl
 236  0269 23               inc hl
 237  026A 23               inc hl                              ; hl now point to BIOS warm boot
 238  026B 22 01 00         ld (1), hl
 239  026E
 240  026E                  ; copy bdos_start into bytes 6 & 7
 241  026E 2A BF FF         ld hl, (bdos_location)
 242  0271 22 06 00         ld (6), hl
 243  0274
 244  0274                  ; OK, let's go!
 245  0274 CD D4 07         call message
 246  0277 42 69 6F 73      db 'Bios location: ',0
 246  027B 20 6C 6F 63
 246  027F 61 74 69 6F
 246  0283 6E 3A 20 00
 247  0287 2A C1 FF         ld hl, (bios_location)
 248  028A
 249  028A 7C               ld  a, h
 250  028B CD F2 07         call show_a_as_hex
 251  028E 7D               ld  a, l
 252  028F CD F2 07         call show_a_as_hex
 253  0292 CD 59 07         call newline
 254  0295
 255  0295 2A C1 FF         ld hl, (bios_location)
 256  0298
 257  0298 E9               jp (hl) ; BIOS COLD BOOT - Note that this is PC=HL not PC=(HL). Confusing eh?
 258  0299 76               halt    ; Just in case we ever get back here somehow
 259  029A
 260  029A
 261  029A              load_config_file:
 262  029A CD D4 07         call message
 263  029D 4C 6F 61 64      db 'Loading config file...',13,10,0
 263  02A1 69 6E 67 20
 263  02A5 63 6F 6E 66
 263  02A9 69 67 20 66
 263  02AD 69 6C 65 2E
 263  02B1 2E 2E 0D 0A
 263  02B5 00
 264  02B6                  ; Opens the file such as /CPM/cpm.cfg or /CPM/uart.cfg. Point to one of these names in hl.
 265  02B6                  ; Read it into an area of memory starting at config_file_loc
 266  02B6                  ; and puts \0 at the end so we can spot the end of the file later
 267  02B6 CD 75 0E         call copy_filename_to_buffer
 268  02B9 11 00 90         ld de, config_file_loc
 269  02BC CD 88 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 270  02BF C2 44 03         jp nz, load_config_file_error
 271  02C2 36 00            ld (hl), 0
 272  02C4 C9               ret
 273  02C5
 274  02C5              parse_cpm_config_file:
 275  02C5 CD D4 07         call message
 276  02C8 50 61 72 73      db 'Parsing the CPM config file...',13,10,0
 276  02CC 69 6E 67 20
 276  02D0 74 68 65 20
 276  02D4 43 50 4D 20
 276  02D8 63 6F 6E 66
 276  02DC 69 67 20 66
 276  02E0 69 6C 65 2E
 276  02E4 2E 2E 0D 0A
 276  02E8 00
 277  02E9                  ; Go through the config file one line at a time.
 278  02E9                  ; If we encounter a \0 then the file has ended.
 279  02E9                  ; If a line starts with ";" then ignore it.
 280  02E9                  ; If a line starts with "CORE" then read in the bex value for CORE_START
 281  02E9 21 00 90         ld hl, config_file_loc
 282  02EC              parse_cpm_config_file_loop:
 283  02EC CD E2 05         call has_file_ended
 284  02EF CA 43 03         jp z, parse_config_file_end
 285  02F2
 286  02F2 CD 88 04         call is_this_line_a_comment
 287  02F5 C2 FD 02         jp nz, not_a_comment
 288  02F8 CD ED 05         call go_to_next_line
 289  02FB 18 EF            jr parse_cpm_config_file_loop
 290  02FD
 291  02FD              not_a_comment:
 292  02FD CD 90 04         call is_this_line_the_core_location
 293  0300 20 0B            jr nz, not_core_location
 294  0302 11 C3 FF         ld de, core_location
 295  0305              consume_location:
 296  0305 CD FA 03         call parse_4_digit_hex_value
 297  0308 CD ED 05         call go_to_next_line
 298  030B 18 DF            jr parse_cpm_config_file_loop
 299  030D
 300  030D              not_core_location:
 301  030D CD 3C 05         call is_this_line_the_bios_location
 302  0310 20 05            jr nz, not_bios_location
 303  0312 11 C1 FF         ld de, bios_location
 304  0315 18 EE            jr consume_location
 305  0317
 306  0317              not_bios_location:
 307  0317 CD 67 05         call is_this_line_the_bdos_location
 308  031A 20 05            jr nz, not_bdos_location
 309  031C 11 BF FF         ld de, bdos_location
 310  031F 18 E4            jr consume_location
 311  0321
 312  0321              not_bdos_location:
 313  0321 CD 92 05         call is_this_line_the_ccp_location
 314  0324 20 05            jr nz, not_ccp_location
 315  0326 11 BD FF         ld de, ccp_location
 316  0329 18 DA            jr consume_location
 317  032B
 318  032B              not_ccp_location:
 319  032B CD B8 05         call is_this_line_the_ccp_name
 320  032E 20 05            jr nz, not_ccp_name
 321  0330 11 B0 FF         ld de, ccp_name
 322  0333 18 06            jr consume_name
 323  0335
 324  0335              not_ccp_name:
 325  0335                  ; Unknown line so ignore it
 326  0335 CD ED 05         call go_to_next_line
 327  0338 C3 EC 02         jp parse_cpm_config_file_loop
 328  033B
 329  033B              consume_name:
 330  033B                  ; hl points to the name in the file
 331  033B                  ; de points to where we want to store it
 332  033B CD 64 03         call parse_name
 333  033E CD ED 05         call go_to_next_line
 334  0341 18 A9            jr parse_cpm_config_file_loop
 335  0343
 336  0343              parse_config_file_end:
 337  0343 C9               ret
 338  0344
 339  0344              load_config_file_error:
 340  0344 CD D4 07         call message
 341  0347 45 72 72 6F      db 'Error loading config file',13,10,0
 341  034B 72 20 6C 6F
 341  034F 61 64 69 6E
 341  0353 67 20 63 6F
 341  0357 6E 66 69 67
 341  035B 20 66 69 6C
 341  035F 65 0D 0A 00
 342  0363 76               halt
 343  0364
 344  0364              parse_name:
 345  0364                  ; hl = current location in file
 346  0364                  ; de = where we want to put the parsed filename
 347  0364 06 09            ld b, 9                 ; max 8 chars in filename
 348  0366              parse_name_loop:
 349  0366 CD E6 05         call get_cfg_char
 350  0369 FE 21            cp ' '+1
 351  036B DA 85 04         jp c, bad_hex_digit
 352  036E FE 2E            cp '.'
 353  0370 28 07            jr z, parse_extension
 354  0372 12               ld (de), a
 355  0373 13               inc de
 356  0374 10 F0            djnz parse_name_loop
 357  0376 C3 85 04         jp bad_hex_digit
 358  0379              parse_extension:
 359  0379 3E 2E            ld a, '.'
 360  037B 12               ld (de), a
 361  037C 13               inc de
 362  037D
 363  037D 06 03            ld b, 3                 ; max 3 chars in filename
 364  037F              parse_extension_loop:
 365  037F CD E6 05         call get_cfg_char
 366  0382 FE 21            cp ' '+1
 367  0384 38 04            jr c, parse_name_done
 368  0386 12               ld (de), a
 369  0387 13               inc de
 370  0388 10 F5            djnz parse_extension_loop
 371  038A                  ; fall through to...
 372  038A
 373  038A              parse_name_done:
 374  038A 3E 00            ld a, 0                         ; null terminator for the name
 375  038C 12               ld (de), a
 376  038D BF               cp a                            ; Set zero flag for success
 377  038E C9               ret
 378  038F
 379  038F              parse_uart_config_file:
 380  038F CD D4 07         call message
 381  0392 50 61 72 73      db 'Parsing the UART config file...',13,10,0
 381  0396 69 6E 67 20
 381  039A 74 68 65 20
 381  039E 55 41 52 54
 381  03A2 20 63 6F 6E
 381  03A6 66 69 67 20
 381  03AA 66 69 6C 65
 381  03AE 2E 2E 2E 0D
 381  03B2 0A 00
 382  03B4                  ; Go through the config file one line at a time.
 383  03B4                  ; If we encounter a \0 then the file has ended.
 384  03B4                  ; If a line starts with ";" then ignore it.
 385  03B4                  ; If a line starts with "BAUD" or "FLOW" then read in the hex value.
 386  03B4                  ; If a line starts with "AUTO" then read in a char.
 387  03B4 21 00 90         ld hl, config_file_loc
 388  03B7              parse_uart_config_file_loop:
 389  03B7 CD E2 05         call has_file_ended
 390  03BA CA 43 03         jp z, parse_config_file_end
 391  03BD
 392  03BD CD 88 04         call is_this_line_a_comment
 393  03C0 C2 C8 03         jp nz, not_a_uart_comment
 394  03C3 CD ED 05         call go_to_next_line
 395  03C6 18 EF            jr parse_uart_config_file_loop
 396  03C8
 397  03C8              not_a_uart_comment:
 398  03C8 CD BB 04         call is_this_line_the_baud_rate
 399  03CB 20 13            jr nz, not_baud_rate
 400  03CD 11 AF FF         ld de, baud_rate_divisor
 401  03D0              consume_uart_value:
 402  03D0 CD 42 04         call parse_2_digit_hex_value
 403  03D3 CD ED 05         call go_to_next_line
 404  03D6 18 DF            jr parse_uart_config_file_loop
 405  03D8
 406  03D8              consume_char:
 407  03D8                  ; hl points to the char in the file
 408  03D8                  ; de points to where we want to store it
 409  03D8 CD 37 04         call parse_char
 410  03DB CD ED 05         call go_to_next_line
 411  03DE 18 D7            jr parse_uart_config_file_loop
 412  03E0
 413  03E0
 414  03E0              not_baud_rate:
 415  03E0 CD E6 04         call is_this_line_the_flow_control
 416  03E3 20 05            jr nz, not_flow_control
 417  03E5 11 AE FF         ld de, flow_control_value
 418  03E8 18 E6            jr consume_uart_value
 419  03EA
 420  03EA              not_flow_control:
 421  03EA CD 11 05         call is_this_line_the_auto_char
 422  03ED 20 05            jr nz, not_auto_char
 423  03EF 11 FF 8F         ld de, auto_run_char
 424  03F2 18 E4            jr consume_char
 425  03F4
 426  03F4              not_auto_char:
 427  03F4                  ; Unknown line so ignore it
 428  03F4 CD ED 05         call go_to_next_line
 429  03F7 C3 B7 03         jp parse_uart_config_file_loop
 430  03FA
 431  03FA              parse_4_digit_hex_value:
 432  03FA                  ; hl = current location in file
 433  03FA                  ; de = where we want to put the parsed value
 434  03FA 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 435  03FC 12               ld (de), a
 436  03FD 13               inc de
 437  03FE 12               ld (de), a                              ; de now pointing to high byte of result area
 438  03FF
 439  03FF CD E6 05         call get_cfg_char
 440  0402 CD 61 04         call parse_hex_digit
 441  0405 C2 44 03         jp nz, load_config_file_error
 442  0408 87               add a, a                                ; a = a * 2
 443  0409 87               add a, a                                ; a = a * 4
 444  040A 87               add a, a                                ; a = a * 8
 445  040B 87               add a, a                                ; a = a * 16
 446  040C 12               ld (de), a                              ; Store highest 4 bits of high byte
 447  040D
 448  040D CD E6 05         call get_cfg_char
 449  0410 CD 61 04         call parse_hex_digit
 450  0413 C2 44 03         jp nz, load_config_file_error
 451  0416 47               ld b, a
 452  0417 1A               ld a, (de)
 453  0418 80               add a, b
 454  0419 12               ld (de), a                              ; Stored all of high byte now
 455  041A 1B               dec de                                  ; de now points to low byte of result
 456  041B
 457  041B CD E6 05         call get_cfg_char
 458  041E CD 61 04         call parse_hex_digit
 459  0421 C2 44 03         jp nz, load_config_file_error
 460  0424 87               add a, a                                ; a = a * 2
 461  0425 87               add a, a                                ; a = a * 4
 462  0426 87               add a, a                                ; a = a * 8
 463  0427 87               add a, a                                ; a = a * 16
 464  0428 12               ld (de), a                              ; Store highest 4 bits of low byte
 465  0429
 466  0429 CD E6 05         call get_cfg_char
 467  042C CD 61 04         call parse_hex_digit
 468  042F C2 44 03         jp nz, load_config_file_error
 469  0432 47               ld b, a
 470  0433 1A               ld a, (de)
 471  0434 80               add a, b
 472  0435 12               ld (de), a                              ; Stored all of low byte now
 473  0436
 474  0436 C9               ret
 475  0437
 476  0437              parse_char:
 477  0437 7E               ld a, (hl)
 478  0438 FE 20            cp 32
 479  043A 38 02            jr c, parse_char_blank
 480  043C 12               ld (de), a
 481  043D C9               ret
 482  043E              parse_char_blank:
 483  043E 3E 00            ld a, 0
 484  0440 12               ld (de), a
 485  0441 C9               ret
 486  0442
 487  0442              parse_2_digit_hex_value:
 488  0442                  ; hl = current location in file
 489  0442                  ; de = where we want to put the parsed value
 490  0442 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 491  0444 12               ld (de), a
 492  0445
 493  0445 CD E6 05         call get_cfg_char
 494  0448 CD 61 04         call parse_hex_digit
 495  044B C2 44 03         jp nz, load_config_file_error
 496  044E 87               add a, a                                ; a = a * 2
 497  044F 87               add a, a                                ; a = a * 4
 498  0450 87               add a, a                                ; a = a * 8
 499  0451 87               add a, a                                ; a = a * 16
 500  0452 12               ld (de), a                              ; Store highest 4 bits of byte
 501  0453
 502  0453 CD E6 05         call get_cfg_char
 503  0456 CD 61 04         call parse_hex_digit
 504  0459 C2 44 03         jp nz, load_config_file_error
 505  045C 47               ld b, a
 506  045D 1A               ld a, (de)
 507  045E 80               add a, b
 508  045F 12               ld (de), a                              ; Stored all of byte now
 509  0460 C9               ret
 510  0461
 511  0461              parse_hex_digit:
 512  0461                  ; Parses the hex ascii char in A into a hex value 0-15 in A
 513  0461                  ; returns NZ if not valid
 514  0461                  ; Preserves hl & de
 515  0461 FE 30            cp '0'
 516  0463 38 20            jr c, bad_hex_digit
 517  0465 FE 3A            cp '9'+1
 518  0467 30 04            jr nc, not_09
 519  0469 D6 30            sub '0'
 520  046B 18 16            jr parse_hex_digit_done
 521  046D              not_09:
 522  046D FE 41            cp 'A'
 523  046F 38 14            jr c, bad_hex_digit
 524  0471 FE 47            cp 'F'+1
 525  0473 30 04            jr nc, not_AZ_uppercase
 526  0475 D6 37            sub 55
 527  0477 18 0A            jr parse_hex_digit_done
 528  0479              not_AZ_uppercase:
 529  0479 FE 61            cp 'a'
 530  047B 38 08            jr c, bad_hex_digit
 531  047D FE 67            cp 'f'+1
 532  047F 30 04            jr nc, bad_hex_digit
 533  0481 D6 57            sub 87
 534  0483                  ; fall through to...
 535  0483              parse_hex_digit_done:
 536  0483 BF               cp a                            ; Set zero flag for success
 537  0484 C9               ret
 538  0485
 539  0485              bad_hex_digit:
 540  0485 F6 01            or 1                            ; clear zero flag for failure
 541  0487 C9               ret
 542  0488
 543  0488              is_this_line_a_comment:
 544  0488                  ; Check if the line starts with ";"
 545  0488                  ; Returns Z if so.
 546  0488                  ; Always leaves hl at the start of the line
 547  0488 E5               push hl
 548  0489 CD E6 05         call get_cfg_char
 549  048C E1               pop hl
 550  048D FE 3B            cp ';'
 551  048F C9               ret
 552  0490
 553  0490              is_this_line_the_core_location:
 554  0490                  ; Checks if the line starts with "CORE"
 555  0490                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 556  0490                  ; If not returns NZ and leaves hl pointing to the start of the line
 557  0490 E5               push hl
 558  0491 CD E6 05         call get_cfg_char
 559  0494 FE 43            cp 'C'
 560  0496 C2 DE 05         jp nz, is_this_line_NO
 561  0499
 562  0499 CD E6 05         call get_cfg_char
 563  049C FE 4F            cp 'O'
 564  049E C2 DE 05         jp nz, is_this_line_NO
 565  04A1
 566  04A1 CD E6 05         call get_cfg_char
 567  04A4 FE 52            cp 'R'
 568  04A6 C2 DE 05         jp nz, is_this_line_NO
 569  04A9
 570  04A9 CD E6 05         call get_cfg_char
 571  04AC FE 45            cp 'E'
 572  04AE C2 DE 05         jp nz, is_this_line_NO
 573  04B1
 574  04B1 CD E6 05         call get_cfg_char
 575  04B4 FE 20            cp ' '
 576  04B6 C2 DE 05         jp nz, is_this_line_NO
 577  04B9 D1               pop de                          ; throw away the value we pushed
 578  04BA C9               ret                             ; returns Z
 579  04BB
 580  04BB              is_this_line_the_baud_rate:
 581  04BB                  ; Checks if the line starts with "BAUD"
 582  04BB                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 583  04BB                  ; If not returns NZ and leaves hl pointing to the start of the line
 584  04BB E5               push hl
 585  04BC CD E6 05         call get_cfg_char
 586  04BF FE 42            cp 'B'
 587  04C1 C2 DE 05         jp nz, is_this_line_NO
 588  04C4
 589  04C4 CD E6 05         call get_cfg_char
 590  04C7 FE 41            cp 'A'
 591  04C9 C2 DE 05         jp nz, is_this_line_NO
 592  04CC
 593  04CC CD E6 05         call get_cfg_char
 594  04CF FE 55            cp 'U'
 595  04D1 C2 DE 05         jp nz, is_this_line_NO
 596  04D4
 597  04D4 CD E6 05         call get_cfg_char
 598  04D7 FE 44            cp 'D'
 599  04D9 C2 DE 05         jp nz, is_this_line_NO
 600  04DC
 601  04DC CD E6 05         call get_cfg_char
 602  04DF FE 20            cp ' '
 603  04E1 C2 DE 05         jp nz, is_this_line_NO
 604  04E4 D1               pop de                          ; throw away the value we pushed
 605  04E5 C9               ret                             ; returns Z
 606  04E6
 607  04E6              is_this_line_the_flow_control:
 608  04E6                  ; Checks if the line starts with "FLOW"
 609  04E6                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 610  04E6                  ; If not returns NZ and leaves hl pointing to the start of the line
 611  04E6 E5               push hl
 612  04E7 CD E6 05         call get_cfg_char
 613  04EA FE 46            cp 'F'
 614  04EC C2 DE 05         jp nz, is_this_line_NO
 615  04EF
 616  04EF CD E6 05         call get_cfg_char
 617  04F2 FE 4C            cp 'L'
 618  04F4 C2 DE 05         jp nz, is_this_line_NO
 619  04F7
 620  04F7 CD E6 05         call get_cfg_char
 621  04FA FE 4F            cp 'O'
 622  04FC C2 DE 05         jp nz, is_this_line_NO
 623  04FF
 624  04FF CD E6 05         call get_cfg_char
 625  0502 FE 57            cp 'W'
 626  0504 C2 DE 05         jp nz, is_this_line_NO
 627  0507
 628  0507 CD E6 05         call get_cfg_char
 629  050A FE 20            cp ' '
 630  050C C2 DE 05         jp nz, is_this_line_NO
 631  050F D1               pop de                          ; throw away the value we pushed
 632  0510 C9               ret                             ; returns Z
 633  0511
 634  0511              is_this_line_the_auto_char:
 635  0511                  ; Checks if the line starts with "AUTO"
 636  0511                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 637  0511                  ; If not returns NZ and leaves hl pointing to the start of the line
 638  0511 E5               push hl
 639  0512 CD E6 05         call get_cfg_char
 640  0515 FE 41            cp 'A'
 641  0517 C2 DE 05         jp nz, is_this_line_NO
 642  051A
 643  051A CD E6 05         call get_cfg_char
 644  051D FE 55            cp 'U'
 645  051F C2 DE 05         jp nz, is_this_line_NO
 646  0522
 647  0522 CD E6 05         call get_cfg_char
 648  0525 FE 54            cp 'T'
 649  0527 C2 DE 05         jp nz, is_this_line_NO
 650  052A
 651  052A CD E6 05         call get_cfg_char
 652  052D FE 4F            cp 'O'
 653  052F C2 DE 05         jp nz, is_this_line_NO
 654  0532
 655  0532 CD E6 05         call get_cfg_char
 656  0535 FE 20            cp ' '
 657  0537 C2 DE 05         jp nz, is_this_line_NO
 658  053A D1               pop de                          ; throw away the value we pushed
 659  053B C9               ret                             ; returns Z
 660  053C
 661  053C              is_this_line_the_bios_location:
 662  053C                  ; Checks if the line starts with "BIOS "
 663  053C                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 664  053C                  ; If not returns NZ and leaves hl pointing to the start of the line
 665  053C E5               push hl
 666  053D CD E6 05         call get_cfg_char
 667  0540 FE 42            cp 'B'
 668  0542 C2 DE 05         jp nz, is_this_line_NO
 669  0545
 670  0545 CD E6 05         call get_cfg_char
 671  0548 FE 49            cp 'I'
 672  054A C2 DE 05         jp nz, is_this_line_NO
 673  054D
 674  054D CD E6 05         call get_cfg_char
 675  0550 FE 4F            cp 'O'
 676  0552 C2 DE 05         jp nz, is_this_line_NO
 677  0555
 678  0555 CD E6 05         call get_cfg_char
 679  0558 FE 53            cp 'S'
 680  055A C2 DE 05         jp nz, is_this_line_NO
 681  055D
 682  055D CD E6 05         call get_cfg_char
 683  0560 FE 20            cp ' '
 684  0562 C2 DE 05         jp nz, is_this_line_NO
 685  0565 D1               pop de
 686  0566 C9               ret                             ; returns Z
 687  0567
 688  0567              is_this_line_the_bdos_location:
 689  0567                  ; Checks if the line starts with "BDOS "
 690  0567                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 691  0567                  ; If not returns NZ and leaves hl pointing to the start of the line
 692  0567 E5               push hl
 693  0568 CD E6 05         call get_cfg_char
 694  056B FE 42            cp 'B'
 695  056D C2 DE 05         jp nz, is_this_line_NO
 696  0570
 697  0570 CD E6 05         call get_cfg_char
 698  0573 FE 44            cp 'D'
 699  0575 C2 DE 05         jp nz, is_this_line_NO
 700  0578
 701  0578 CD E6 05         call get_cfg_char
 702  057B FE 4F            cp 'O'
 703  057D C2 DE 05         jp nz, is_this_line_NO
 704  0580
 705  0580 CD E6 05         call get_cfg_char
 706  0583 FE 53            cp 'S'
 707  0585 C2 DE 05         jp nz, is_this_line_NO
 708  0588
 709  0588 CD E6 05         call get_cfg_char
 710  058B FE 20            cp ' '
 711  058D C2 DE 05         jp nz, is_this_line_NO
 712  0590 D1               pop de
 713  0591 C9               ret                             ; returns Z
 714  0592
 715  0592              is_this_line_the_ccp_location:
 716  0592                  ; Checks if the line starts with "CCPL "
 717  0592                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 718  0592                  ; If not returns NZ and leaves hl pointing to the start of the line
 719  0592 E5               push hl
 720  0593 CD E6 05         call get_cfg_char
 721  0596 FE 43            cp 'C'
 722  0598 20 44            jr nz, is_this_line_NO
 723  059A
 724  059A CD E6 05         call get_cfg_char
 725  059D FE 43            cp 'C'
 726  059F 20 3D            jr nz, is_this_line_NO
 727  05A1
 728  05A1 CD E6 05         call get_cfg_char
 729  05A4 FE 50            cp 'P'
 730  05A6 20 36            jr nz, is_this_line_NO
 731  05A8
 732  05A8 CD E6 05         call get_cfg_char
 733  05AB FE 4C            cp 'L'
 734  05AD 20 2F            jr nz, is_this_line_NO
 735  05AF
 736  05AF CD E6 05         call get_cfg_char
 737  05B2 FE 20            cp ' '
 738  05B4 20 28            jr nz, is_this_line_NO
 739  05B6 D1               pop de
 740  05B7 C9               ret                             ; returns Z
 741  05B8
 742  05B8              is_this_line_the_ccp_name:
 743  05B8                  ; Checks if the line starts with "CCPN "
 744  05B8                  ; Returns Z if so and leaves hl pointing to the start of the filename after the word.
 745  05B8                  ; If not returns NZ and leaves hl pointing to the start of the line
 746  05B8 E5               push hl
 747  05B9 CD E6 05         call get_cfg_char
 748  05BC FE 43            cp 'C'
 749  05BE 20 1E            jr nz, is_this_line_NO
 750  05C0
 751  05C0 CD E6 05         call get_cfg_char
 752  05C3 FE 43            cp 'C'
 753  05C5 20 17            jr nz, is_this_line_NO
 754  05C7
 755  05C7 CD E6 05         call get_cfg_char
 756  05CA FE 50            cp 'P'
 757  05CC 20 10            jr nz, is_this_line_NO
 758  05CE
 759  05CE CD E6 05         call get_cfg_char
 760  05D1 FE 4E            cp 'N'
 761  05D3 20 09            jr nz, is_this_line_NO
 762  05D5
 763  05D5 CD E6 05         call get_cfg_char
 764  05D8 FE 20            cp ' '
 765  05DA 20 02            jr nz, is_this_line_NO
 766  05DC D1               pop de
 767  05DD C9               ret                             ; returns Z
 768  05DE
 769  05DE              is_this_line_NO:
 770  05DE E1               pop hl
 771  05DF F6 01            or 1                            ; clear zero flag for failure
 772  05E1 C9               ret
 773  05E2
 774  05E2              has_file_ended:
 775  05E2                  ; The file has ended if the next char is a \0
 776  05E2 7E               ld a, (hl)
 777  05E3 FE 00            cp 0
 778  05E5 C9               ret
 779  05E6
 780  05E6              get_cfg_char:
 781  05E6                  ; Gets A from the next location in the config file, pointed to by HL.
 782  05E6                  ; Increases hl so we skip over the char.
 783  05E6                  ; If the char is a \0 then we are at the end of the file, so return \0 and don't increase hl
 784  05E6 7E               ld a, (hl)
 785  05E7 FE 00            cp 0                            ; Have we found the end of the file?
 786  05E9 C8               ret z                           ; and return
 787  05EA              get_cfg_char1:
 788  05EA 23               inc hl
 789  05EB BF               cp a                            ; Set zero flag for success
 790  05EC C9               ret
 791  05ED
 792  05ED              go_to_next_line:
 793  05ED 7E               ld a, (hl)
 794  05EE FE 00            cp 0                            ; Have we found the end of the file?
 795  05F0 C8               ret z                           ; if so return
 796  05F1
 797  05F1 FE 20            cp 32
 798  05F3 30 0A            jr nc, skip_letters
 799  05F5              skip_control_chars:
 800  05F5 23               inc hl
 801  05F6 7E               ld a, (hl)
 802  05F7 FE 00            cp 0
 803  05F9 C8               ret z
 804  05FA FE 20            cp 32
 805  05FC 38 F7            jr c, skip_control_chars
 806  05FE C9               ret
 807  05FF
 808  05FF              skip_letters:
 809  05FF 23               inc hl
 810  0600 7E               ld a, (hl)
 811  0601 FE 00            cp 0
 812  0603 C8               ret z
 813  0604 FE 20            cp 32
 814  0606 30 F7            jr nc, skip_letters
 815  0608 18 EB            jr skip_control_chars
 816  060A
 817  060A              show_config:
 818  060A CD D4 07         call message
 819  060D 43 4F 52 45      db 'CORE: ',0
 819  0611 3A 20 00
 820  0614 2A C3 FF         ld hl, (core_location)
 821  0617 CD E9 07         call show_hl_as_hex
 822  061A
 823  061A CD D4 07         call message
 824  061D 2C 20 42 49      db ', BIOS: ',0
 824  0621 4F 53 3A 20
 824  0625 00
 825  0626 2A C1 FF         ld hl, (bios_location)
 826  0629 CD E9 07         call show_hl_as_hex
 827  062C
 828  062C CD D4 07         call message
 829  062F 2C 20 42 44      db ', BDOS: ',0
 829  0633 4F 53 3A 20
 829  0637 00
 830  0638 2A BF FF         ld hl, (bdos_location)
 831  063B CD E9 07         call show_hl_as_hex
 832  063E
 833  063E CD D4 07         call message
 834  0641 2C 20 43 43      db ', CCPL: ',0
 834  0645 50 4C 3A 20
 834  0649 00
 835  064A 2A BD FF         ld hl, (ccp_location)
 836  064D CD E9 07         call show_hl_as_hex
 837  0650
 838  0650 CD D4 07         call message
 839  0653 2C 20 43 43      db ', CCPN: ',0
 839  0657 50 4E 3A 20
 839  065B 00
 840  065C 21 B0 FF         ld hl, ccp_name
 841  065F              show_name_loop:
 842  065F 7E               ld a, (hl)
 843  0660 FE 00            cp 0
 844  0662 28 08            jr z, finished_showing_name
 845  0664 E5               push hl
 846  0665 CD 2C 07         call print_a
 847  0668 E1               pop hl
 848  0669 23               inc hl
 849  066A 18 F3            jr show_name_loop
 850  066C              finished_showing_name:
 851  066C CD 59 07         call newline
 852  066F C9               ret
 853  0670
 854  0670              validate_config:
 855  0670 21 C3 FF         ld hl, core_location
 856  0673 CD 89 06         call must_not_be_zero
 857  0676 21 C1 FF         ld hl, bios_location
 858  0679 CD 89 06         call must_not_be_zero
 859  067C 21 BF FF         ld hl, bdos_location
 860  067F CD 89 06         call must_not_be_zero
 861  0682 21 BD FF         ld hl, ccp_location
 862  0685 CD 89 06         call must_not_be_zero
 863  0688 C9               ret
 864  0689
 865  0689              must_not_be_zero:
 866  0689 7E               ld a, (hl)
 867  068A FE 00            cp 0
 868  068C C0               ret nz
 869  068D 23               inc hl
 870  068E 7E               ld a, (hl)
 871  068F FE 00            cp 0
 872  0691 C0               ret nz
 873  0692 CD D4 07         call message
 874  0695 49 6E 76 61      db 'Invalid configuration',13,10,0
 874  0699 6C 69 64 20
 874  069D 63 6F 6E 66
 874  06A1 69 67 75 72
 874  06A5 61 74 69 6F
 874  06A9 6E 0D 0A 00
 875  06AD 76               halt
 876  06AE
 877  06AE
 878  06AE
 879  06AE              NAME_OF_BDOS:
 880  06AE 2F 42 44 4F      db '/BDOS.BIN',0
 880  06B2 53 2E 42 49
 880  06B6 4E 00
 881  06B8              NAME_OF_BIOS:
 882  06B8 42 49 4F 53      db 'BIOS.BIN',0
 882  06BC 2E 42 49 4E
 882  06C0 00
 883  06C1              NAME_OF_CORE:
 884  06C1 43 4F 52 45      db 'CORE.BIN',0
 884  06C5 2E 42 49 4E
 884  06C9 00
 885  06CA              NAME_OF_CCP:
 886  06CA 2F 43 43 50      db '/CCP.BIN',0
 886  06CE 2E 42 49 4E
 886  06D2 00
 887  06D3
 888  06D3              CPM_CFG_NAME:
 889  06D3 43 50 4D 2E      db 'CPM.CFG',0
 889  06D7 43 46 47 00
 890  06DB              UART_CFG_NAME:
 891  06DB 55 41 52 54      db 'UART.CFG',0
 891  06DF 2E 43 46 47
 891  06E3 00
 892  06E4
 893  06E4
 894  06E4              first_eight_bytes:
 895  06E4 C3 03 F4 00      db $C3, $03, $F4, $00, $00, $C3, $00, $EA
 895  06E8 00 C3 00 EA
 896  06EC              ; JP BIOS-warm-boot, 0, 0, JP BDOS
 897  06EC
 898  06EC
 899  06EC              filesize_buffer equ $C000
 900  06EC
 901  06EC              filesize_buffer_copy equ filesize_buffer+6
 902  06EC
 903  06EC              loader_stack equ filesize_buffer_copy+100
 904  06EC
 905  06EC
 906  06EC              filesize_units:
 907  06EC 00               ds 1
 908  06ED
 909  06ED              dma_address:
 910  06ED 00 00            ds 2
 911  06EF
 912  06EF              config_file_loc equ $9000
 913  06EF              auto_run_char   equ $8FFF
 914  06EF
 915  06EF              filename_buffer equ 65535-20
 916  06EF              DRIVE_NAME      equ filename_buffer-2
 917  06EF              disk_buffer     equ DRIVE_NAME-36
 918  06EF
 919  06EF              core_location   equ disk_buffer-2         ; Stores the core_start location
 920  06EF              bios_location   equ core_location-2       ; Stores the bios_start location
 921  06EF              bdos_location   equ bios_location-2       ; Stores the bdos_start location
 922  06EF              ccp_location    equ bdos_location-2        ; Stores the ccp_start location
 923  06EF              ccp_name        equ ccp_location-13            ; stores the name of the ccp file, e.g. MYCCP.BIN with a zero terminator
 924  06EF
 925  06EF              baud_rate_divisor   equ ccp_name-1
 926  06EF              flow_control_value  equ baud_rate_divisor-1
 927  06EF
 928  06EF                  include "uart.asm"
# file opened: uart.asm
   1+ 06EF              ; uart routines
   2+ 06EF              ; These are routines connected with the 16C550 uart.
   3+ 06EF
   4+ 06EF              unimplemented_start_monitor:
   5+ 06EF              	; Not implemented yet
   6+ 06EF C9           	ret
   7+ 06F0
   8+ 06F0              UART_FREQUENCY: EQU 19660800	; 82C50 | 16C550 CLOCK
   9+ 06F0
  10+ 06F0 80 00        UART_BAUD_9600:		DW	UART_FREQUENCY/(9600 * 16)
  11+ 06F2 55 00        UART_BAUD_14400:	DW	UART_FREQUENCY/(14400 * 16)
  12+ 06F4 40 00        UART_BAUD_19200:	DW	UART_FREQUENCY/(19200 * 16)
  13+ 06F6 20 00        UART_BAUD_38400:	DW	UART_FREQUENCY/(38400 * 16)
  14+ 06F8 15 00        UART_BAUD_57600:	DW	UART_FREQUENCY/(57600 * 16)
  15+ 06FA 0A 00        UART_BAUD_115200:	DW	UART_FREQUENCY/(115200 * 16)
  16+ 06FC
  17+ 06FC              ; Initialises the 16c550c UART for input/output
  18+ 06FC              ;configure_uart:
  19+ 06FC              	; Configure the UART 16550 after a reset.
  20+ 06FC              	; For the sake of definitely getting the job done, let's pause here for ages before doing it.
  21+ 06FC              	; Without this pause the Z80 can get started before the UART is ready.
  22+ 06FC              	; Don't ask me how I know this.
  23+ 06FC              	;
  24+ 06FC              	; Pass in the required BAUD rate divisor in b.
  25+ 06FC              	; Pass in the required hardware flow control in c.
  26+ 06FC              ;	push bc
  27+ 06FC              ;	call long_pause
  28+ 06FC              ;	pop bc
  29+ 06FC
  30+ 06FC              ;	LD		A,	0x00
  31+ 06FC              ;	OUT 	(uart_IER),A			; Disable interrupts
  32+ 06FC
  33+ 06FC              ;    ld 		A,	80H                 ; Go into "Divisor Latch Setting mode"
  34+ 06FC              ;    out 	(uart_LCR),a            ; by writing 1 into bit 7 of the Line Control register
  35+ 06FC              ;    nop								; These tiny "nop" pauses probably do nothing. TODO: Try removing them!
  36+ 06FC
  37+ 06FC              ;    ld 		A, b                    ; low byte of divisor
  38+ 06FC              ;    out 	(uart_tx_rx), A
  39+ 06FC              ;    nop
  40+ 06FC              ;    ld 		A, 0                          ; high byte
  41+ 06FC              ;    out 	(uart_IER), A
  42+ 06FC              ;    nop
  43+ 06FC
  44+ 06FC              ;    ld a,03H                        ; Configure stop bits etc, and exit
  45+ 06FC                                                  ; "Divisor latch setting mode"
  46+ 06FC
  47+ 06FC              ;    out (uart_LCR),a                ; 8 bits, no parity, 1 stop bit, bit 7 = 0
  48+ 06FC              ;	nop								; a slight pause to allow the UART to get going
  49+ 06FC
  50+ 06FC              ;	ld a, 0x81 						;%10000001					; Turn on FIFO, with trigger level of 8.
  51+ 06FC              ;	out (uart_ISR), a				; This definitely helps receive 16 chars very fast!
  52+ 06FC
  53+ 06FC              	;ld a, c
  54+ 06FC              	;cp 0
  55+ 06FC              	;jr z, flowcontrol_done
  56+ 06FC
  57+ 06FC              	;LD      A,0x00                  ;no flow control
  58+ 06FC              	;ld a, %00100010
  59+ 06FC              	;out (uart_MCR), a				; Enable auto flow control for /RTS and /CTS
  60+ 06FC              ;	ret
  61+ 06FC              flowcontrol_done:
  62+ 06FC 00           	nop
  63+ 06FD 00           	nop
  64+ 06FE C9               ret
  65+ 06FF
  66+ 06FF              configure_uart:
  67+ 06FF F5           UART_INIT:	PUSH	AF
  68+ 0700 7E           			LD		A,(HL)
  69+ 0701 23           			INC 	HL
  70+ 0702 66           			LD		H,(HL)
  71+ 0703 6F           			LD 		L,A
  72+ 0704 3E 00        			LD		A,0x00
  72+ 0706 D3 B9          OUT (uart_IER),A	; Disable interrupts
  73+ 0708 3E 80        			LD		A,0x80
  73+ 070A D3 BB          OUT (uart_LCR),A 	; Turn DLAB on
  74+ 070C 7D           			LD		A,L
  74+ 070D D3 B8         	OUT (uart_tx_rx),A	; Set divisor low
  75+ 070F 7C           			LD		A,H
  75+ 0710 D3 B9         	OUT (uart_IER),A	; Set divisor high
  76+ 0712 F1           			POP		AF
  76+ 0713 D3 BB         		OUT (uart_LCR),A	; Write out flow control bits 8,1,N
  77+ 0715 3E 81        			LD 		A, 0x81						; Turn on FIFO, with trigger level of 8.
  78+ 0717 D3 BA        			OUT (uart_ISR), A					; This turn on the 16bytes buffer!
  79+ 0719 C9           			RET
  80+ 071A
  81+ 071A              UART_TX_WAIT		EQU	600		; Count before a TX times out
  82+ 071A
  83+ 071A              ; A: Data read
  84+ 071A              ; Returns:
  85+ 071A              ; F = C if character read
  86+ 071A              ; F = NC if no character read
  87+ 071A              ;
  88+ 071A DB BD        UART_RX:	IN	A,(uart_LSR)		; Get the line status register
  89+ 071C E6 01        			AND 	0x01				; Check for characters in buffer
  90+ 071E C8           			ret	Z					; Just ret (with carry clear) if no characters
  91+ 071F DB B8        			IN	A,(uart_tx_rx)		; Read the character from the UART receive buffer
  92+ 0721 37           			SCF 						; Set the carry flag
  93+ 0722 C9           			RET
  94+ 0723
  95+ 0723              ; Read a character - waits for input
  96+ 0723              ; NB is the non-blocking variant
  97+ 0723              ;  A: ASCII character read
  98+ 0723              ;  F: NC if no character read (non-blocking)
  99+ 0723              ;  F:  C if character read (non-blocking)
 100+ 0723              ;
 101+ 0723 CD 1A 07     Read_Char:              CALL    UART_RX
 102+ 0726 30 FB                                JR      NC,Read_Char
 103+ 0728 C9                                   RET
 104+ 0729              ; Read a character - NO waits for input
 105+ 0729              ; NB is the non-blocking variant
 106+ 0729              ;  A: ASCII character read
 107+ 0729              ;  F: NC if no character read (non-blocking)
 108+ 0729              ;  F:  C if character read (non-blocking)
 109+ 0729 C3 1A 07     Read_Char_NB:           JP      UART_RX
 110+ 072C
 111+ 072C              ; Print A to the screen as an ASCII character, preserving all registers.
 112+ 072C              print_a:
 113+ 072C E5           UART_TX:	PUSH 	HL
 114+ 072D D5           			PUSH 	DE
 115+ 072E C5           			PUSH	BC						; Stack BC
 116+ 072F F5           			PUSH	AF 						; Stack AF
 117+ 0730 06 58        			LD	B,low  UART_TX_WAIT			; Set CB to the transmit timeout
 118+ 0732 0E 02        			LD	C,high UART_TX_WAIT
 119+ 0734 DB BD        1:			IN	A,(uart_LSR)			; Get the line status register
 120+ 0736 E6 60        			AND 	0x60					; Check for TX empty
 121+ 0738 20 0B        			JR	NZ,2F						; If set, then TX is empty, goto transmit
 122+ 073A 10 F8        			DJNZ	1B
 122+ 073C 0D             DEC	C
 122+ 073D 20 F5          JR NZ,1B		; Otherwise loop
 123+ 073F F1           			POP	AF							; We've timed out at this point so
 124+ 0740 B7           			OR	A							; Clear the carry flag and preserve A
 125+ 0741 C1           			POP	BC							; Restore the stack
 126+ 0742 D1           			POP DE
 127+ 0743 E1           			POP	HL
 128+ 0744 C9           			RET
 129+ 0745 F1           2:			POP	AF							; Good to send at this point, so
 130+ 0746 D3 B8        			OUT	(uart_tx_rx),A			; Write the character to the UART transmit buffer
 131+ 0748 CD 50 07     			call	delay2
 132+ 074B C1           			POP	BC							; Restore the stack
 133+ 074C D1           			POP DE
 134+ 074D E1           			POP	HL
 135+ 074E 37           			SCF								; Set the carry flag
 136+ 074F C9           			RET
 137+ 0750              ;******************************************************************
 138+ 0750              ; This routine delay 746us
 139+ 0750              delay2:
 140+ 0750 F5           			PUSH   AF
 141+ 0751 3E FF        			LD     A, 0xFF
 142+ 0753 3D           delay2loop: DEC    A
 143+ 0754 C2 53 07     			JP     NZ, delay2loop  ; JUMP TO DELAYLOOP2 IF A <> 0.
 144+ 0757 F1           			POP    AF
 145+ 0758 C9           			RET
 146+ 0759
 147+ 0759              ;    push af                         ; Store A for a bit
 148+ 0759              ;print_a1:
 149+ 0759              ;    in a,(uart_LSR)                 ; check UART is ready to send.
 150+ 0759              ;    bit 5,a                         ; zero flag set to true if bit 5 is 0
 151+ 0759              ;    jp z, print_a1                  ; non-zero = ready for next char.;
 152+ 0759
 153+ 0759              ;    pop af                          ; UART IS READY, GET OLD "A" BACK
 154+ 0759              ;    out (uart_tx_rx),a              ; AND SEND IT OUT
 155+ 0759              ;	ret
 156+ 0759
 157+ 0759              newline:
 158+ 0759 3E 0D        	ld a,13
 159+ 075B CD 2C 07     	call print_a
 160+ 075E 3E 0A        	ld a,10
 161+ 0760 CD 2C 07     	call print_a
 162+ 0763 C9           	ret
 163+ 0764
 164+ 0764              space:
 165+ 0764 3E 20        	ld a,32
 166+ 0766 CD 2C 07     	call print_a
 167+ 0769 C9           	ret
 168+ 076A
 169+ 076A              ; To receive a char over Serial we need to check if there is one. If not we return 0.
 170+ 076A              ; If there is, we get it and return it (in a).
 171+ 076A              char_in:
 172+ 076A DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 173+ 076C CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 174+ 076E              							; "logic 0 = no data in receive holding register."
 175+ 076E CA 74 07     	jp z,char_in1    		; zero = no char received
 176+ 0771 DB B8        	in a,(uart_tx_rx)		; Get the incoming char
 177+ 0773 C9           	ret						; Return it in A
 178+ 0774              char_in1:
 179+ 0774 3E 00        	ld a,0					; Return a zero in A
 180+ 0776 C9           	ret
 181+ 0777
 182+ 0777              char_available:
 183+ 0777 DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 184+ 0779 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 185+ 077B              							; "logic 0 = no data in receive holding register."
 186+ 077B CA 81 07     	jp z,char_available1	; zero = no char received
 187+ 077E 3E FF        	ld a, $FF		        ; return true
 188+ 0780 C9           	ret						; in A
 189+ 0781              char_available1:
 190+ 0781 3E 00        	ld a,0					; Return a zero in A
 191+ 0783 C9           	ret
 192+ 0784
 193+ 0784
 194+ 0784              long_pause:
 195+ 0784 01 E8 FD     	ld bc,65000
 196+ 0787 18 08            jr pause0
 197+ 0789              medium_pause:
 198+ 0789 01 C8 AF     	ld bc,45000
 199+ 078C 18 03            jr pause0
 200+ 078E              short_pause:
 201+ 078E 01 64 00     	ld bc,100
 202+ 0791              pause0:
 203+ 0791 0B           	dec bc
 204+ 0792 78           	ld a,b
 205+ 0793 B1           	or c
 206+ 0794 C2 91 07     	jp nz,pause0
 207+ 0797 C9           	ret
 208+ 0798
 209+ 0798              disk_toggle:
 210+ 0798 DB BC        	in a, (uart_MCR)
 211+ 079A E6 04        	and %00000100
 212+ 079C 28 07        	jr z, disk_on
 213+ 079E              	; fall through to...
 214+ 079E              disk_off:
 215+ 079E               	; disk light off
 216+ 079E DB BC        	in a, (uart_MCR)
 217+ 07A0 E6 FB        	and %11111011
 218+ 07A2 D3 BC        	out (uart_MCR), a
 219+ 07A4 C9           	ret
 220+ 07A5
 221+ 07A5              disk_on:
 222+ 07A5              	; disk light on
 223+ 07A5 DB BC        	in a, (uart_MCR)
 224+ 07A7 F6 04        	or %00000100
 225+ 07A9 D3 BC        	out (uart_MCR), a
 226+ 07AB C9           	ret
 227+ 07AC
 228+ 07AC              user_on:
 229+ 07AC              	; user light on
 230+ 07AC DB BC        	in a, (uart_MCR)
 231+ 07AE F6 01        	or %00000001
 232+ 07B0 D3 BC        	out (uart_MCR), a
 233+ 07B2 C9           	ret
 234+ 07B3
 235+ 07B3              user_toggle:
 236+ 07B3              	; user1 light invert
 237+ 07B3 DB BC        	in a, (uart_MCR)
 238+ 07B5 E6 01        	and %00000001
 239+ 07B7 28 F3        	jr z, user_on
 240+ 07B9              	; fall through to...
 241+ 07B9              user_off:
 242+ 07B9               	; user light off
 243+ 07B9 DB BC        	in a, (uart_MCR)
 244+ 07BB E6 FE        	and %11111110
 245+ 07BD D3 BC        	out (uart_MCR), a
 246+ 07BF C9           	ret
 247+ 07C0
 248+ 07C0              rom_toggle:
 249+ 07C0 DB BC        	in a, (uart_MCR)
 250+ 07C2 E6 08        	and %00001000
 251+ 07C4 28 07        	jr z, rom_off
 252+ 07C6              	; fall through to...
 253+ 07C6              rom_on:
 254+ 07C6              	; rom light on
 255+ 07C6 DB BC        	in a, (uart_MCR)
 256+ 07C8 E6 F7        	and %11110111
 257+ 07CA D3 BC        	out (uart_MCR), a
 258+ 07CC C9           	ret
 259+ 07CD
 260+ 07CD              rom_off:
 261+ 07CD              	; rom light off
 262+ 07CD DB BC        	in a, (uart_MCR)
 263+ 07CF F6 08        	or %00001000
 264+ 07D1 D3 BC        	out (uart_MCR), a
 265+ 07D3 C9           	ret
 266+ 07D4
 267+ 07D4              	include "port_numbers.asm"
# file opened: port_numbers.asm
   1++07D4              ; port_numbers.asm
   2++07D4
   3++07D4              ; Here are the port numbers for various UART registers:
   4++07D4              uart_tx_rx 		equ   0xB8   ; 	8
   5++07D4              uart_IER 		equ   0xB9   ; 	9
   6++07D4              uart_ISR 		equ   0xBA   ;  10  ; Also known as FCR
   7++07D4              uart_LCR 		equ   0xBB   ;  11
   8++07D4              uart_MCR 		equ   0xBC   ;  12  ; modem control reg
   9++07D4              uart_LSR 		equ   0xBD   ;  13
  10++07D4              uart_MSR 		equ   0xBE   ;  14
  11++07D4              uart_scratch 	equ   0xBF   ;  15
  12++07D4
  13++07D4              PIO_A	equ	0xA8		; CA80 user 8255 base address 	  (port A)
  14++07D4              PIO_B	equ	0xA9		; CA80 user 8255 base address + 1 (port B)
  15++07D4              PIO_C	equ	0xAA		; CA80 user 8255 base address + 2 (fport C)
  16++07D4              PIO_M	equ	0xAB		; CA80 user 8255 control register
  17++07D4
# file closed: port_numbers.asm
 268+ 07D4
# file closed: uart.asm
 929  07D4                  include "message.asm"
# file opened: message.asm
   1+ 07D4              ; message
   2+ 07D4              message:
   3+ 07D4 E3           	ex (sp), hl                   ; top of stack is now mangled, but hl is pointing to our message
   4+ 07D5 F5           	push	af
   5+ 07D6 C5           	push	bc
   6+ 07D7 D5           	push	de
   7+ 07D8
   8+ 07D8              message_loop_001:
   9+ 07D8 7E           	ld a, (hl)
  10+ 07D9 FE 00        	cp 0
  11+ 07DB 28 06        	jr z, message_complete_001
  12+ 07DD 23           	inc hl
  13+ 07DE CD 2C 07     	call print_a                  ; print a character (Mangles 2 items below top of stack)
  14+ 07E1 18 F5        	jr message_loop_001               ; Loop until done
  15+ 07E3
  16+ 07E3              message_complete_001:
  17+ 07E3 D1           	pop de
  18+ 07E4 C1           	pop bc
  19+ 07E5 F1           	pop af
  20+ 07E6 23           	inc hl
  21+ 07E7 E3           	ex (sp), hl
  22+ 07E8 C9           	ret
  23+ 07E9
  24+ 07E9
  25+ 07E9              ; -------------------------------------------------------------------------------------------------
  26+ 07E9
  27+ 07E9              ;message:
  28+ 07E9              ;	; Use this handy helper function to display an inline message easily.
  29+ 07E9              ;	; It preserves all registers (which was tricky to do).
  30+ 07E9              ;	; This expects to be called from code where the message follows the "call debug" in-line, like this:
  31+ 07E9              ;	;
  32+ 07E9              ;	; ld a, 10 ; (or whatever code you like)
  33+ 07E9              ;	; call message
  34+ 07E9              ;	; db "my message", 0
  35+ 07E9              ;	; ld b, 10 ; (or whatever code you like)
  36+ 07E9              ;	;
  37+ 07E9              ;	; When we return we make sure sp is pointing to the next line of code after the message.
  38+ 07E9              ;
  39+ 07E9              ;							; sp -> ret-addr
  40+ 07E9              ;
  41+ 07E9              ;	push af					; We have stored af
  42+ 07E9              ;	push af					; We do this 3 times
  43+ 07E9              ;	push af					; to allow spare stack space.
  44+ 07E9              ;							; sp -> AF, AF, AF, ret-addr
  45+ 07E9              ;	push bc					; sp -> BC, AF, AF, AF, ret-addr
  46+ 07E9              ;	push de					; sp -> DE, BC, AF, AF, AF, ret-addr
  47+ 07E9              ;	push hl					; sp -> HL, DE, BC, AF, AF, AF, ret-addr
  48+ 07E9              ;
  49+ 07E9              ;	inc sp
  50+ 07E9              ;	inc sp					; adjust the stack to overlook the stored afx3, BC, DE & HL
  51+ 07E9              ;							; HL, sp -> DE, BC, AF, AF, AF, ret-addr
  52+ 07E9              ;	inc sp
  53+ 07E9              ;	inc sp					; HL, DE, sp -> BC, AF, AF, AF, ret-addr
  54+ 07E9              ;
  55+ 07E9              ;	inc sp
  56+ 07E9              ;	inc sp					; HL, DE, BC, sp -> AF, AF, AF, ret-addr
  57+ 07E9              ;
  58+ 07E9              ;	inc sp
  59+ 07E9              ;	inc sp
  60+ 07E9              ;
  61+ 07E9              ;	inc sp
  62+ 07E9              ;	inc sp
  63+ 07E9              ;
  64+ 07E9              ;	inc sp
  65+ 07E9              ;	inc sp					; HL, DE, BC, AF, AF, AF, sp -> ret-addr
  66+ 07E9              ;
  67+ 07E9              ;	ex (sp), hl				; top of stack is now mangled, but hl is pointing to our message
  68+ 07E9              ;							; HL, DE, BC, AF, AF, AF, sp -> HL
  69+ 07E9              ;
  70+ 07E9              ;message_loop:
  71+ 07E9              ;	ld a, (hl)
  72+ 07E9              ;	cp 0
  73+ 07E9              ;	jr z,message_complete
  74+ 07E9              ;	inc hl
  75+ 07E9              ;	call print_a			; print a character (Mangles 2 items below top of stack)
  76+ 07E9              ;	jr message_loop			; Loop until done
  77+ 07E9              ;							; HL, DE, BC, AF, XX, XX, sp -> HL
  78+ 07E9              ;
  79+ 07E9              ;message_complete:
  80+ 07E9              ;	inc hl
  81+ 07E9              ;	ex (sp), hl				; restore top of stack, after we have incremented it so it points to the subsequent instruction
  82+ 07E9              ;							; HL, DE, BC, AF, XX, XX, sp -> new-ret-addr
  83+ 07E9              ;	dec sp
  84+ 07E9              ;	dec sp
  85+ 07E9              ;
  86+ 07E9              ;	dec sp
  87+ 07E9              ;	dec sp
  88+ 07E9              ;
  89+ 07E9              ;	dec sp
  90+ 07E9              ;	dec sp					; adjust stack because of our pushed "af"
  91+ 07E9              ;							; HL, DE, BC, sp -> AF, XX, XX, new-ret-addr
  92+ 07E9              ;	dec sp
  93+ 07E9              ;	dec sp					; adjust stack because of our pushed "BC"
  94+ 07E9              ;							; HL, DE, sp -> BC, AF, XX, XX, new-ret-addr
  95+ 07E9              ;	dec sp
  96+ 07E9              ;	dec sp					; adjust stack because of our pushed "DE"
  97+ 07E9              ;							; HL, sp -> DE, BC, AF, XX, XX, new-ret-addr
  98+ 07E9              ;	dec sp
  99+ 07E9              ;	dec sp					; adjust stack because of our pushed "HL"
 100+ 07E9              ;							; sp -> HL, DE, BC, AF, XX, XX, new-ret-addr
 101+ 07E9              ;
 102+ 07E9              ;	pop hl					; HL is restored
 103+ 07E9              ;							; sp -> DE, BC, AF, XX, XX, new-ret-addr
 104+ 07E9              ;	pop de					; DE is restored
 105+ 07E9              ;							; sp -> BC, AF, XX, XX, new-ret-addr
 106+ 07E9              ;	pop bc					; BC is restored
 107+ 07E9              ;							; sp -> AF, XX, XX, new-ret-addr
 108+ 07E9              ;	pop af					; we have restored af
 109+ 07E9              ;							; sp -> XX, XX, new-ret-addr
 110+ 07E9              ;
 111+ 07E9              ;	inc sp
 112+ 07E9              ;	inc sp
 113+ 07E9              ;	inc sp
 114+ 07E9              ;	inc sp
 115+ 07E9              ;							; sp -> new-ret-addr
 116+ 07E9              ;
 117+ 07E9              ;	ret						; return to the instruction after the message
 118+ 07E9
 119+ 07E9              show_hl_as_hex:
 120+ 07E9 7C               ld a, h
 121+ 07EA CD F2 07         call show_a_as_hex
 122+ 07ED 7D               ld a, l
 123+ 07EE CD F2 07         call show_a_as_hex
 124+ 07F1 C9               ret
 125+ 07F2
 126+ 07F2              show_a_as_hex:
 127+ 07F2 F5               push af
 128+ 07F3 CB 3F            srl a
 129+ 07F5 CB 3F            srl a
 130+ 07F7 CB 3F            srl a
 131+ 07F9 CB 3F            srl a
 132+ 07FB C6 30            add a,'0'
 133+ 07FD FE 3A        	cp ':'
 134+ 07FF 38 02        	jr c, show_a_as_hex1
 135+ 0801 C6 07        	add a, 7
 136+ 0803              show_a_as_hex1:
 137+ 0803 CD 2C 07         call print_a
 138+ 0806 F1               pop af
 139+ 0807 E6 0F            and %00001111
 140+ 0809 C6 30            add a,'0'
 141+ 080B FE 3A        	cp ':'
 142+ 080D 38 02        	jr c, show_a_as_hex2
 143+ 080F C6 07        	add a, 7
 144+ 0811              show_a_as_hex2:
 145+ 0811 CD 2C 07         call print_a
 146+ 0814 C9               ret
 147+ 0815
 148+ 0815              ;---------------------------------------------------
 149+ 0815              ; show_all shows all the CPU registers!
 150+ 0815
 151+ 0815              show_all:
 152+ 0815 ED 73 74 08  	ld (store_sp), sp
 153+ 0819 F5           	push af
 154+ 081A E5           	push hl
 155+ 081B D5           	push de
 156+ 081C C5           	push bc
 157+ 081D
 158+ 081D CD D4 07     	call message
 159+ 0820 41 3D 00     	db 'A=',0
 160+ 0823 CD F2 07     	call show_a_as_hex
 161+ 0826
 162+ 0826 E1           	pop hl
 163+ 0827 CD D4 07     	call message
 164+ 082A 2C 20 42 43  	db ', BC=',0
 164+ 082E 3D 00
 165+ 0830 CD E9 07     	call show_hl_as_hex
 166+ 0833 C5           	push bc
 167+ 0834
 168+ 0834 C1           	pop bc
 169+ 0835 E1           	pop hl
 170+ 0836 CD D4 07     	call message
 171+ 0839 2C 20 44 45  	db ', DE=',0
 171+ 083D 3D 00
 172+ 083F CD E9 07     	call show_hl_as_hex
 173+ 0842 D5           	push de
 174+ 0843 C5           	push bc
 175+ 0844
 176+ 0844 C1           	pop bc
 177+ 0845 D1           	pop de
 178+ 0846 E1           	pop hl
 179+ 0847 CD D4 07     	call message
 180+ 084A 2C 20 48 4C  	db ', HL=',0
 180+ 084E 3D 00
 181+ 0850 CD E9 07     	call show_hl_as_hex
 182+ 0853 E5           	push hl
 183+ 0854 D5           	push de
 184+ 0855 C5           	push bc
 185+ 0856
 186+ 0856 CD D4 07     	call message
 187+ 0859 2C 20 53 50  	db ', SP=',0
 187+ 085D 3D 00
 188+ 085F 2A 74 08     	ld hl, (store_sp)
 189+ 0862 CD E9 07     	call show_hl_as_hex
 190+ 0865
 191+ 0865 3E 0D        	ld a, 13
 192+ 0867 CD 2C 07     	call print_a
 193+ 086A 3E 0A        	ld a, 10
 194+ 086C CD 2C 07     	call print_a
 195+ 086F
 196+ 086F C1           	pop bc
 197+ 0870 D1           	pop de
 198+ 0871 E1           	pop hl
 199+ 0872 F1           	pop af
 200+ 0873 C9           	ret
 201+ 0874
 202+ 0874              store_sp:
 203+ 0874 00 00        	 ds 2
# file closed: message.asm
 930  0876                  include "memorystick.asm"
# file opened: memorystick.asm
   1+ 0876              ; memorystick.asm
   2+ 0876
   3+ 0876              store_de:
   4+ 0876 00 00            dw 0
   5+ 0878              store_a:
   6+ 0878 00               db 0
   7+ 0879              ;-----------------------------------------------------------------
   8+ 0879              ; For DIRectory listing, the filename is passed in the filename_buffer.
   9+ 0879              ; DE -> DMA AREA
  10+ 0879              ; a = Current User
  11+ 0879              ; It will be something like A/ffffffff.xxx
  12+ 0879              ; A result gets put into the area pointed to by DE, normally the DMA area, in 8.3 format
  13+ 0879              dir:
  14+ 0879 ED 53 76 08      ld (store_de), de
  15+ 087D 32 78 08         ld (store_a), a
  16+ 0880
  17+ 0880 CD A5 07         call disk_on
  18+ 0883
  19+ 0883 21 F3 0E         ld hl, CPM_FOLDER_NAME                    ; Start at /CPM
  20+ 0886 CD ED 0D         call open_file
  21+ 0889 21 00 0F         ld hl, CPM_DISKS_NAME                    ; Then DISKS
  22+ 088C CD ED 0D         call open_file
  23+ 088F
  24+ 088F 21 EB FF         ld hl, filename_buffer
  25+ 0892 7E               ld a, (hl)
  26+ 0893 21 E9 FF         ld hl, DRIVE_NAME                       ; Move to "A" .. "P" for required disk
  27+ 0896 77               ld (hl), a
  28+ 0897 23               inc hl
  29+ 0898 36 00            ld (hl), 0
  30+ 089A 2B               dec hl
  31+ 089B CD ED 0D         call open_file
  32+ 089E
  33+ 089E                  ; Now user number (if greater than 0)
  34+ 089E 3A 78 08         ld a, (store_a)
  35+ 08A1 FE 00            cp 0
  36+ 08A3 28 0E            jr z, ignore_user
  37+ 08A5
  38+ 08A5 CD 47 0C         call convert_user_number_to_folder_name
  39+ 08A8 21 E9 FF         ld hl, DRIVE_NAME                   ; Move to "1" .. "F" for required user
  40+ 08AB 77               ld (hl), a
  41+ 08AC 23               inc hl
  42+ 08AD 36 00            ld (hl), 0
  43+ 08AF 2B               dec hl
  44+ 08B0 CD ED 0D         call open_file
  45+ 08B3
  46+ 08B3              ignore_user:
  47+ 08B3 21 F1 0E         ld hl, STAR_DOT_STAR                    ; Specify search pattern "*"
  48+ 08B6 CD ED 0D         call open_file
  49+ 08B9
  50+ 08B9                  ; Read a file if there is something to read
  51+ 08B9              dir_loop:
  52+ 08B9                  ; at this point DE is in store_de, containing address of dma-area
  53+ 08B9 FE 1D            cp USB_INT_DISK_READ
  54+ 08BB 28 2E            jr z, dir_loop_good
  55+ 08BD
  56+ 08BD FE 42            cp ERR_MISS_FILE    ; This is what you normally get at the end of a dir listing
  57+ 08BF 28 24            jr z, dir_no_file
  58+ 08C1
  59+ 08C1 FE A1            cp ERR_BPB_ERROR    ; This means a disk format error
  60+ 08C3 20 20            jr nz, dir_no_file
  61+ 08C5
  62+ 08C5 CD D4 07         call message
  63+ 08C8 55 53 42 20      db 'USB Drive ERROR: FAT only!',13,10,0
  63+ 08CC 44 72 69 76
  63+ 08D0 65 20 45 52
  63+ 08D4 52 4F 52 3A
  63+ 08D8 20 46 41 54
  63+ 08DC 20 6F 6E 6C
  63+ 08E0 79 21 0D 0A
  63+ 08E4 00
  64+ 08E5              dir_no_file:
  65+ 08E5 CD 9E 07         call disk_off
  66+ 08E8 3E FF            ld a, 255
  67+ 08EA C9               ret
  68+ 08EB
  69+ 08EB              dir_loop_good:
  70+ 08EB                  ; at this point DE is on stack, containing address of dma-area
  71+ 08EB 3E 27            ld a, RD_USB_DATA0
  72+ 08ED CD 9D 0E         call send_command_byte
  73+ 08F0 CD A6 0E         call read_data_byte                 ; Find out how many bytes there are to read
  74+ 08F3
  75+ 08F3 CD AC 0E         call read_data_bytes_into_buffer    ; read them into disk_buffer
  76+ 08F6 FE 20            cp 32                               ; Did we read at least 32 bytes?
  77+ 08F8 30 03            jr nc, good_length
  78+ 08FA C3 7D 09         jp dir_next
  79+ 08FD
  80+ 08FD              good_length:
  81+ 08FD                  ; at this point DE is in store_de, containing address of dma-area
  82+ 08FD                  ; Get the attributes for this entry. $02 = system, $04 = hidden, $10 = directory
  83+ 08FD CD 9E 07         call disk_off
  84+ 0900 3A D0 FF         ld a, (disk_buffer+11)
  85+ 0903 E6 16            and $16                         ; Check for hidden or system files, or directories
  86+ 0905 CA 0B 09         jp z, it_is_not_system
  87+ 0908 C3 7D 09         jp dir_next                     ; and skip accordingly.
  88+ 090B
  89+ 090B              it_is_not_system:
  90+ 090B                  ; Does it match the search pattern?
  91+ 090B 06 0B            ld b, 11
  92+ 090D 21 C5 FF         ld hl, disk_buffer
  93+ 0910 11 ED FF         ld de, filename_buffer+2
  94+ 0913              matching_loop:
  95+ 0913                  ; If the filename_buffer has a '.' then skip over it
  96+ 0913                  ; and move disk_buffer to start of extension
  97+ 0913 1A               ld a, (de)
  98+ 0914 FE 2E            cp '.'
  99+ 0916 20 06            jr nz, matching_loop1
 100+ 0918
 101+ 0918 13               inc de
 102+ 0919 21 CD FF         ld hl, disk_buffer+8
 103+ 091C 06 03            ld b, 3
 104+ 091E
 105+ 091E              matching_loop1
 106+ 091E 1A               ld a, (de)
 107+ 091F FE 3F            cp '?'
 108+ 0921 28 05            jr z, matching_loop_good
 109+ 0923 BE               cp (hl)
 110+ 0924 28 02            jr z, matching_loop_good
 111+ 0926 18 55            jr dir_next
 112+ 0928
 113+ 0928              matching_loop_good:
 114+ 0928 13               inc de
 115+ 0929 23               inc hl
 116+ 092A 10 E7            djnz matching_loop
 117+ 092C
 118+ 092C                  ; Copy 11 byte filename + extension
 119+ 092C 01 0B 00         ld bc, 11
 120+ 092F 21 C5 FF         ld hl, disk_buffer
 121+ 0932 ED 5B 76 08      ld de, (store_de)
 122+ 0936
 123+ 0936                  ; The Usernumber goes into the first byte of the FCB
 124+ 0936 3A 78 08         ld a, (store_a)
 125+ 0939 E6 0F            and %00001111
 126+ 093B 12               ld (de), a                      ; Store user number in FCB result
 127+ 093C 13               inc de
 128+ 093D ED B0            ldir                            ; Copy filename & extension
 129+ 093F
 130+ 093F                  ; Fill in a few more details. File size into normal place, plus random record info.
 131+ 093F                  ; The filesize is a 32 bit number in FAT_DIR_INFO at loc $1C, 1D, 1E and 1F.
 132+ 093F                  ; We want it in 128 byte sectors, so need to divide by 128.
 133+ 093F 21 E1 FF         ld hl, disk_buffer+$1C
 134+ 0942 5E               ld e, (hl)
 135+ 0943 23               inc hl
 136+ 0944 56               ld d, (hl)
 137+ 0945 23               inc hl
 138+ 0946 4E               ld c, (hl)
 139+ 0947 23               inc hl
 140+ 0948 46               ld b, (hl)                          ; BCDE has file size
 141+ 0949 EB               ex de, hl                           ; 32-bit filesize now in BCHL
 142+ 094A
 143+ 094A                  ; Divide by 128
 144+ 094A CB 25            sla l                               ; Shift all left by 1 bit
 145+ 094C CB 14            rl h
 146+ 094E CB 11            rl c
 147+ 0950 CB 10            rl b
 148+ 0952
 149+ 0952 6C               ld l, h
 150+ 0953 61               ld h, c
 151+ 0954 48               ld c, b
 152+ 0955 06 00            ld b, 0                             ; We've shifted right 8 bits, so effectively divided by 128!
 153+ 0957
 154+ 0957 ED 5B 76 08      ld de, (store_de)
 155+ 095B
 156+ 095B C5               push bc                             ; Store the size that is in bchl
 157+ 095C E5               push hl
 158+ 095D CD F7 0B         call set_random_pointer_in_fcb      ; store hl in FCB random pointer (bc is thrown away!)
 159+ 0960 E1               pop hl
 160+ 0961 C1               pop bc                              ; restore bchl
 161+ 0962
 162+ 0962 EB               ex de, hl                           ; hl = fcb, bcde = filesize
 163+ 0963 2A 76 08         ld hl, (store_de)
 164+ 0966 CD 06 0C         call set_file_size_in_fcb
 165+ 0969
 166+ 0969                  ; Clear all 16 disk allocation bytes. TODO: Actually, fill with sensible values
 167+ 0969 ED 5B 76 08      ld de, (store_de)
 168+ 096D 21 10 00         ld hl, 16
 169+ 0970 19               add hl, de
 170+ 0971 EB               ex de, hl
 171+ 0972 06 14            ld b, 16+4
 172+ 0974 3E 00            ld a, 0
 173+ 0976              clear_allocation_loop:
 174+ 0976 12               ld (de), a
 175+ 0977 13               inc de
 176+ 0978 10 FC            djnz clear_allocation_loop
 177+ 097A              good_length1:
 178+ 097A 3E 00            ld a, 0                                 ; 0 = success
 179+ 097C C9               ret
 180+ 097D
 181+ 097D              dir_next:
 182+ 097D 3E 33            ld a, FILE_ENUM_GO                      ; Go to next entry in the directory
 183+ 097F CD 9D 0E         call send_command_byte
 184+ 0982 CD E2 0E         call read_status_byte
 185+ 0985 C3 B9 08         jp dir_loop
 186+ 0988
 187+ 0988              ;-----------------------------------------
 188+ 0988              ; Load bin File
 189+ 0988              ; The filename needs to be in the filename buffer.
 190+ 0988              ; The file must be in the /CPM folder.
 191+ 0988              ; DE points to the location to load it into.
 192+ 0988              ; The file is loaded into the workspace.
 193+ 0988              ; There is no check whether the file is too big!!!!
 194+ 0988              ; Returns zero flag set if success, zero flag cleared on file-not-found.
 195+ 0988
 196+ 0988              load_bin_file:
 197+ 0988 D5               push de                             ; Store target location for later
 198+ 0989 CD A5 07         call disk_on
 199+ 098C CD 13 0D         call connect_to_disk
 200+ 098F CD 42 0D         call mount_disk
 201+ 0992
 202+ 0992 21 F3 0E         ld hl, CPM_FOLDER_NAME              ; Start at /CPM
 203+ 0995 CD ED 0D         call open_file
 204+ 0998
 205+ 0998 21 EB FF         ld hl, filename_buffer              ; Specify filename
 206+ 099B CD ED 0D         call open_file
 207+ 099E
 208+ 099E 28 2B            jr z, load_file_found
 209+ 09A0 CD 9E 07         call disk_off
 210+ 09A3 CD D4 07         call message
 211+ 09A6 46 69 6C 65      db 'File not found ',0
 211+ 09AA 20 6E 6F 74
 211+ 09AE 20 66 6F 75
 211+ 09B2 6E 64 20 00
 212+ 09B6 21 EB FF         ld hl, filename_buffer
 213+ 09B9              load_file1:
 214+ 09B9 7E               ld a, (hl)
 215+ 09BA FE 00            cp 0
 216+ 09BC 28 06            jr z, load_file2
 217+ 09BE CD 2C 07         call print_a
 218+ 09C1 23               inc hl
 219+ 09C2 18 F5            jr load_file1
 220+ 09C4              load_file2:
 221+ 09C4 CD 59 07         call newline
 222+ 09C7 D1               pop de                              ; Keep stack clear!
 223+ 09C8 F6 01            or 1                                ; Clear zero flag for failure
 224+ 09CA C9               ret
 225+ 09CB              load_file_found:
 226+ 09CB CD 9E 07         call disk_off
 227+ 09CE 3E 3A            ld a, BYTE_READ
 228+ 09D0 CD 9D 0E         call send_command_byte
 229+ 09D3 3E FF            ld a, 255                           ; Request all of the file
 230+ 09D5 CD 81 0E         call send_data_byte
 231+ 09D8 3E FF            ld a, 255                           ; Yes, all!
 232+ 09DA CD 81 0E         call send_data_byte
 233+ 09DD
 234+ 09DD 3E 22            ld a, GET_STATUS
 235+ 09DF CD 9D 0E         call send_command_byte
 236+ 09E2 CD A6 0E         call read_data_byte
 237+ 09E5 E1               pop hl                              ; Get back the target address
 238+ 09E6              load_loop1:
 239+ 09E6 FE 1D            cp USB_INT_DISK_READ
 240+ 09E8 20 25            jr nz, load_finished
 241+ 09EA
 242+ 09EA E5               push hl
 243+ 09EB CD A5 07         call disk_on
 244+ 09EE 3E 27            ld a, RD_USB_DATA0
 245+ 09F0 CD 9D 0E         call send_command_byte
 246+ 09F3 CD A6 0E         call read_data_byte
 247+ 09F6 E1               pop hl
 248+ 09F7 CD AF 0E         call read_data_bytes_into_hl        ; Read this block of data
 249+ 09FA E5               push hl
 250+ 09FB CD 9E 07         call disk_off
 251+ 09FE 3E 3B            ld a, BYTE_RD_GO
 252+ 0A00 CD 9D 0E         call send_command_byte
 253+ 0A03 3E 22            ld a, GET_STATUS
 254+ 0A05 CD 9D 0E         call send_command_byte
 255+ 0A08 CD A6 0E         call read_data_byte
 256+ 0A0B E1               pop hl
 257+ 0A0C C3 E6 09         jp load_loop1
 258+ 0A0F              load_finished:
 259+ 0A0F E5               push hl
 260+ 0A10 CD 00 0E         call close_file
 261+ 0A13 E1               pop hl
 262+ 0A14 BF               cp a                                ; set zero flag for success
 263+ 0A15 C9               ret
 264+ 0A16
 265+ 0A16              ; ---------------------------------
 266+ 0A16              ; Directory info read.
 267+ 0A16              ; Reads a directory entry (of the currently open file) into disk_buffer
 268+ 0A16              ; Returns ZERO FLAG = set if ok
 269+ 0A16              dir_info_read:
 270+ 0A16 3E 37            ld a, DIR_INFO_READ
 271+ 0A18 CD 9D 0E         call send_command_byte
 272+ 0A1B 3E FF            ld a, $FF                           ; Current open file
 273+ 0A1D CD 81 0E         call send_data_byte
 274+ 0A20
 275+ 0A20 CD E2 0E         call read_status_byte
 276+ 0A23 FE 14            cp USB_INT_SUCCESS
 277+ 0A25 C0               ret nz
 278+ 0A26
 279+ 0A26 3E 27            ld a, RD_USB_DATA0
 280+ 0A28 CD 9D 0E         call send_command_byte
 281+ 0A2B CD A6 0E         call read_data_byte                 ; Find out how many bytes there are to read
 282+ 0A2E
 283+ 0A2E CD AC 0E         call read_data_bytes_into_buffer
 284+ 0A31 FE 20            cp $20                              ; Must have read 32 bytes
 285+ 0A33 C0               ret nz                              ; or else it is an error
 286+ 0A34              ;     call message
 287+ 0A34              ;     db 'Read this many bytes: ',0
 288+ 0A34              ;     call show_a_as_hex
 289+ 0A34              ;     call newline
 290+ 0A34
 291+ 0A34              ;     ld b, $20
 292+ 0A34              ;     ld hl, disk_buffer
 293+ 0A34              ; dir_info_read1:
 294+ 0A34              ;     ld a, (hl)
 295+ 0A34              ;     push hl
 296+ 0A34              ;     push bc
 297+ 0A34              ;     call show_a_as_hex
 298+ 0A34              ;     ld a, ','
 299+ 0A34              ;     call print_a
 300+ 0A34              ;     pop bc
 301+ 0A34              ;     pop hl
 302+ 0A34              ;     inc hl
 303+ 0A34              ;     djnz dir_info_read1
 304+ 0A34              ;     call newline
 305+ 0A34
 306+ 0A34 BF               cp a                                ; set zero flag for success
 307+ 0A35 C9               ret
 308+ 0A36
 309+ 0A36              ; DIR_INFO_WRITE
 310+ 0A36              ; writes a dir_info block from disk_buffer to the USB drive
 311+ 0A36              ; for the currently open file
 312+ 0A36              dir_info_write:
 313+ 0A36 3E 37            ld a, DIR_INFO_READ
 314+ 0A38 CD 9D 0E         call send_command_byte
 315+ 0A3B 3E FF            ld a, $FF                           ; Current open file
 316+ 0A3D CD 81 0E         call send_data_byte
 317+ 0A40
 318+ 0A40 CD E2 0E         call read_status_byte
 319+ 0A43                  ;call report_on_status
 320+ 0A43 FE 14            cp USB_INT_SUCCESS
 321+ 0A45 20 28            jr nz, dir_info_write2
 322+ 0A47
 323+ 0A47 3E 2E            ld a, WR_OFS_DATA
 324+ 0A49 CD 9D 0E         call send_command_byte
 325+ 0A4C 3E 00            ld a, 0
 326+ 0A4E CD 81 0E         call send_data_byte
 327+ 0A51 3E 20            ld a, $20
 328+ 0A53 CD 81 0E         call send_data_byte
 329+ 0A56 06 20            ld b, $20
 330+ 0A58 21 C5 FF         ld hl, disk_buffer
 331+ 0A5B              dir_info_write1:
 332+ 0A5B 7E               ld a, (hl)
 333+ 0A5C E5               push hl
 334+ 0A5D C5               push bc
 335+ 0A5E CD 81 0E         call send_data_byte
 336+ 0A61 C1               pop bc
 337+ 0A62 E1               pop hl
 338+ 0A63 23               inc hl
 339+ 0A64 10 F5            djnz dir_info_write1
 340+ 0A66
 341+ 0A66 3E 38            ld a, DIR_INFO_SAVE
 342+ 0A68 CD 9D 0E         call send_command_byte
 343+ 0A6B CD A6 0E         call read_data_byte
 344+ 0A6E                  ;call report_on_status
 345+ 0A6E C9               ret
 346+ 0A6F
 347+ 0A6F              dir_info_write2:
 348+ 0A6F C9               ret
 349+ 0A70
 350+ 0A70              ;----------------------------------
 351+ 0A70              ; WRITE TO FILE
 352+ 0A70
 353+ 0A70              write_to_file:
 354+ 0A70                  ; writes 128 bytes from current location pointed to by DE, to the open file
 355+ 0A70 D5               push de
 356+ 0A71 3E 3C            ld a, BYTE_WRITE
 357+ 0A73 CD 9D 0E         call send_command_byte
 358+ 0A76
 359+ 0A76                  ; Send number of bytes we are about to write, as 16 bit number, low first
 360+ 0A76 3E 80            ld a, 128
 361+ 0A78 CD 81 0E         call send_data_byte
 362+ 0A7B 3E 00            ld a, 0
 363+ 0A7D CD 81 0E         call send_data_byte
 364+ 0A80
 365+ 0A80 E1               pop hl                              ; hl -> the data
 366+ 0A81
 367+ 0A81              write_loop
 368+ 0A81 CD E2 0E         call read_status_byte
 369+ 0A84 FE 1E            cp USB_INT_DISK_WRITE
 370+ 0A86 20 24            jr nz, write_finished
 371+ 0A88
 372+ 0A88 E5               push hl
 373+ 0A89                  ; Ask if we can send some bytes
 374+ 0A89 3E 2D            ld a, WR_REQ_DATA
 375+ 0A8B CD 9D 0E         call send_command_byte
 376+ 0A8E CD A6 0E         call read_data_byte
 377+ 0A91 E1               pop hl
 378+ 0A92 FE 00            cp 0
 379+ 0A94 28 16            jr z, write_finished
 380+ 0A96
 381+ 0A96                  ; push hl
 382+ 0A96                  ; push af
 383+ 0A96                  ; call message
 384+ 0A96                  ; db 'Bytes to send: ',0
 385+ 0A96                  ; pop af
 386+ 0A96                  ; push af
 387+ 0A96                  ; call show_a_as_hex
 388+ 0A96                  ; call newline
 389+ 0A96                  ; pop af
 390+ 0A96                  ; pop hl
 391+ 0A96
 392+ 0A96 47               ld b, a
 393+ 0A97              block_loop:
 394+ 0A97 7E               ld a, (hl)
 395+ 0A98 E5               push hl
 396+ 0A99 C5               push bc
 397+ 0A9A CD 81 0E         call send_data_byte
 398+ 0A9D C1               pop bc
 399+ 0A9E E1               pop hl
 400+ 0A9F 23               inc hl
 401+ 0AA0 10 F5            djnz block_loop
 402+ 0AA2
 403+ 0AA2 E5               push hl
 404+ 0AA3 3E 3D            ld a, BYTE_WR_GO
 405+ 0AA5 CD 9D 0E         call send_command_byte
 406+ 0AA8 E1               pop hl
 407+ 0AA9 C3 81 0A         jp write_loop
 408+ 0AAC
 409+ 0AAC              write_finished:
 410+ 0AAC C9               ret
 411+ 0AAD
 412+ 0AAD
 413+ 0AAD              ;-------------------------------------------
 414+ 0AAD              ; ERASE FILE
 415+ 0AAD
 416+ 0AAD              erase_file:
 417+ 0AAD 3E 2F            ld a, SET_FILE_NAME
 418+ 0AAF CD 9D 0E         call send_command_byte
 419+ 0AB2 21 EB FF         ld hl, filename_buffer
 420+ 0AB5 CD 87 0E         call send_data_string
 421+ 0AB8 3E 35            ld a, FILE_ERASE
 422+ 0ABA CD 9D 0E         call send_command_byte
 423+ 0ABD CD E2 0E         call read_status_byte
 424+ 0AC0 C9               ret
 425+ 0AC1
 426+ 0AC1              show_filename_buffer:
 427+ 0AC1 21 EB FF         ld hl, filename_buffer
 428+ 0AC4 06 14            ld b, 20
 429+ 0AC6              show_filename_buffer1:
 430+ 0AC6 7E               ld a, (hl)
 431+ 0AC7 FE 20            cp 32
 432+ 0AC9 38 0A            jr c, control_char
 433+ 0ACB              show_filename_buffer2
 434+ 0ACB CD 2C 07         call print_a
 435+ 0ACE 23               inc hl
 436+ 0ACF 10 F5            djnz show_filename_buffer1
 437+ 0AD1 CD 59 07         call newline
 438+ 0AD4 C9               ret
 439+ 0AD5
 440+ 0AD5              control_char:
 441+ 0AD5 C6 40            add a, 64
 442+ 0AD7 4F               ld c, a
 443+ 0AD8 3E 5E            ld a, '^'
 444+ 0ADA CD 2C 07         call print_a
 445+ 0ADD 79               ld a, c
 446+ 0ADE 18 EB            jr show_filename_buffer2
 447+ 0AE0
 448+ 0AE0              check_tbasic_structure:
 449+ 0AE0                  ; Check that there is a /TBASIC folder
 450+ 0AE0                  ; and if not, make it!
 451+ 0AE0 CD D4 07         call message
 452+ 0AE3 43 68 65 63      db 'Checking /TBASIC',13,10,0
 452+ 0AE7 6B 69 6E 67
 452+ 0AEB 20 2F 54 42
 452+ 0AEF 41 53 49 43
 452+ 0AF3 0D 0A 00
 453+ 0AF6
 454+ 0AF6 21 F8 0E         ld hl, TINY_BASIC_FOLDER_NAME
 455+ 0AF9 CD 75 0E         call copy_filename_to_buffer
 456+ 0AFC 21 EB FF         ld hl, filename_buffer
 457+ 0AFF CD ED 0D         call open_file
 458+ 0B02 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 459+ 0B04 C8               ret z                               ; If found, job done.
 460+ 0B05 CD 0E 0E         call create_directory
 461+ 0B08 C8               ret z                               ; If created ok, job done.
 462+ 0B09 CD D4 07         call message
 463+ 0B0C 45 52 52 4F      db 'ERROR creating Tiny Basic folder!',13,10,0
 463+ 0B10 52 20 63 72
 463+ 0B14 65 61 74 69
 463+ 0B18 6E 67 20 54
 463+ 0B1C 69 6E 79 20
 463+ 0B20 42 61 73 69
 463+ 0B24 63 20 66 6F
 463+ 0B28 6C 64 65 72
 463+ 0B2C 21 0D 0A 00
 464+ 0B30 C9               ret
 465+ 0B31
 466+ 0B31              check_cpmdisks_structure:
 467+ 0B31                  ; Check that we have a disk structure like this:
 468+ 0B31                  ; /CPMDISKS
 469+ 0B31                  ;          /A
 470+ 0B31                  ;          /B
 471+ 0B31                  ;          /C
 472+ 0B31                  ;          :
 473+ 0B31                  ;          /P
 474+ 0B31
 475+ 0B31                  ; Loop over A..P
 476+ 0B31 06 10            ld b, 16
 477+ 0B33              check_cpmdisk_loop:
 478+ 0B33 C5               push bc
 479+ 0B34                  ; Go to /CPM
 480+ 0B34 CD D4 07         call message
 481+ 0B37 43 68 65 63      db 'Checking /CPM',13,10,0
 481+ 0B3B 6B 69 6E 67
 481+ 0B3F 20 2F 43 50
 481+ 0B43 4D 0D 0A 00
 482+ 0B47
 483+ 0B47 21 F3 0E         ld hl, CPM_FOLDER_NAME
 484+ 0B4A CD 75 0E         call copy_filename_to_buffer
 485+ 0B4D 21 EB FF         ld hl, filename_buffer
 486+ 0B50 CD ED 0D         call open_file
 487+ 0B53 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 488+ 0B55 20 42            jr nz, check_cpmdisks_structure2
 489+ 0B57
 490+ 0B57 CD D4 07         call message
 491+ 0B5A 43 68 65 63      db 'Checking /CPM/DISKS',13,10,0
 491+ 0B5E 6B 69 6E 67
 491+ 0B62 20 2F 43 50
 491+ 0B66 4D 2F 44 49
 491+ 0B6A 53 4B 53 0D
 491+ 0B6E 0A 00
 492+ 0B70 21 00 0F         ld hl, CPM_DISKS_NAME
 493+ 0B73 CD 75 0E         call copy_filename_to_buffer
 494+ 0B76 21 EB FF         ld hl, filename_buffer
 495+ 0B79 CD ED 0D         call open_file
 496+ 0B7C FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 497+ 0B7E 20 19            jr nz, check_cpmdisks_structure2
 498+ 0B80
 499+ 0B80 C1               pop bc
 500+ 0B81 C5               push bc
 501+ 0B82 78               ld a, b
 502+ 0B83 C6 40            add a, 'A'-1
 503+ 0B85 32 EB FF         ld (filename_buffer), a
 504+ 0B88 3E 00            ld a, 0
 505+ 0B8A 32 EC FF         ld (filename_buffer+1),a
 506+ 0B8D 21 EB FF         ld hl, filename_buffer
 507+ 0B90 CD ED 0D         call open_file
 508+ 0B93 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 509+ 0B95 20 0B            jr nz, check_cpmdisks_structure3
 510+ 0B97
 511+ 0B97 C1               pop bc                              ; Let's say if we find disk "P" then they are all there!!!
 512+ 0B98                  ;djnz check_cpmdisk_loop
 513+ 0B98
 514+ 0B98 C9               ret
 515+ 0B99
 516+ 0B99              check_cpmdisks_structure2:
 517+ 0B99 C1               pop bc
 518+ 0B9A                  ; Try to create the missing folder
 519+ 0B9A                  ;ld hl, CPMDISKS_NAME
 520+ 0B9A                  ;call copy_filename_to_buffer
 521+ 0B9A CD 0E 0E         call create_directory
 522+ 0B9D 20 0D            jr nz, check_cpmdisks_structure_fail
 523+ 0B9F
 524+ 0B9F                  ; Start all over again
 525+ 0B9F C3 31 0B         jp check_cpmdisks_structure
 526+ 0BA2
 527+ 0BA2              check_cpmdisks_structure3:
 528+ 0BA2 CD 0E 0E         call create_directory
 529+ 0BA5 20 04            jr nz, check_cpmdisks_subdir_fail
 530+ 0BA7 C1               pop bc                                          ; All good, so do the next subdir
 531+ 0BA8 C3 33 0B         jp check_cpmdisk_loop
 532+ 0BAB
 533+ 0BAB              check_cpmdisks_subdir_fail:
 534+ 0BAB C1               pop bc
 535+ 0BAC                  ; Continue through to the next bit...
 536+ 0BAC              check_cpmdisks_structure_fail:
 537+ 0BAC CD D4 07         call message
 538+ 0BAF 45 52 52 4F      db 'ERROR creating CP/M disks!',13,10,0
 538+ 0BB3 52 20 63 72
 538+ 0BB7 65 61 74 69
 538+ 0BBB 6E 67 20 43
 538+ 0BBF 50 2F 4D 20
 538+ 0BC3 64 69 73 6B
 538+ 0BC7 73 21 0D 0A
 538+ 0BCB 00
 539+ 0BCC C9               ret
 540+ 0BCD
 541+ 0BCD              move_to_file_pointer:
 542+ 0BCD                  ; Set the BYTE_LOCATE file position in the currently open file.
 543+ 0BCD                  ; Value is passed in bcde.
 544+ 0BCD C5               push bc
 545+ 0BCE D5               push de
 546+ 0BCF 3E 39            ld a, BYTE_LOCATE
 547+ 0BD1 CD 9D 0E         call send_command_byte
 548+ 0BD4 D1               pop de
 549+ 0BD5 D5               push de
 550+ 0BD6 7B               ld a, e
 551+ 0BD7 CD 81 0E         call send_data_byte
 552+ 0BDA D1               pop de
 553+ 0BDB 7A               ld a, d
 554+ 0BDC CD 81 0E         call send_data_byte
 555+ 0BDF C1               pop bc
 556+ 0BE0 C5               push bc
 557+ 0BE1 79               ld a, c
 558+ 0BE2 CD 81 0E         call send_data_byte
 559+ 0BE5 C1               pop bc
 560+ 0BE6 78               ld a, b
 561+ 0BE7 CD 81 0E         call send_data_byte
 562+ 0BEA CD E2 0E         call read_status_byte
 563+ 0BED FE 14            cp USB_INT_SUCCESS
 564+ 0BEF 20 03            jr nz, move_to_file_pointer_fail        ; We expect USB_INT_SUCCESS here
 565+ 0BF1
 566+ 0BF1 3E 14            ld a, USB_INT_SUCCESS                   ; Return success
 567+ 0BF3 C9               ret
 568+ 0BF4              move_to_file_pointer_fail:
 569+ 0BF4 3E 1F            ld a, USB_INT_DISK_ERR                  ; Return fail
 570+ 0BF6 C9               ret
 571+ 0BF7
 572+ 0BF7              set_random_pointer_in_fcb:
 573+ 0BF7                  ; pass in de -> fcb
 574+ 0BF7                  ; Pass hl = random pointer value
 575+ 0BF7                  ; Random pointer goes to fcb + 33 & 34. fcb + 35 gets 0.
 576+ 0BF7                  ; preserve de
 577+ 0BF7 D5               push de
 578+ 0BF8 EB               ex de, hl
 579+ 0BF9 01 21 00         ld bc, 33
 580+ 0BFC 09               add hl, bc
 581+ 0BFD 73               ld (hl), e
 582+ 0BFE 23               inc hl
 583+ 0BFF 72               ld (hl), d
 584+ 0C00 23               inc hl
 585+ 0C01 36 00            ld (hl), 0
 586+ 0C03 EB               ex de, hl
 587+ 0C04 D1               pop de
 588+ 0C05 C9               ret
 589+ 0C06
 590+ 0C06              set_file_size_in_fcb:
 591+ 0C06                  ; Pass HL -> FCB (Note that this is an unusual way to pass it in)
 592+ 0C06                  ; Pass file pointer (in 128-byte records) in bcde.
 593+ 0C06                  ; Preserves hl
 594+ 0C06
 595+ 0C06                  ; The following details are from http://www.primrosebank.net/computers/cpm/cpm_software_mfs.htm
 596+ 0C06                  ; RC = record counter, goes from 0 to $80. $80 means full, and represents 128*128=16K.
 597+ 0C06                  ; EX = 0 for files < 16K, otherwise 1 - 31 for Extents of 16K each.
 598+ 0C06                  ; S2 = high byte for the EXc ounter, so if EX wants to be bigger than 31, overflow it into here.
 599+ 0C06
 600+ 0C06                  ; Split bcde into S2, EX & RC.
 601+ 0C06                  ; To do this:
 602+ 0C06                  ; RC = e & %0111 1111               (i.e. a number 0..127)
 603+ 0C06                  ; Divide bcde by 128                (Shift right 7 bits, or shift left 1 bit then right 8)
 604+ 0C06                  ; EX = e & %0001 1111               (i.e. it has a max of 31)
 605+ 0C06                  ; Shift left 3 places
 606+ 0C06                  ; S2 = d
 607+ 0C06
 608+ 0C06                  ; RC = e & %0111 1111
 609+ 0C06 E5               push hl
 610+ 0C07 7B               ld a, e
 611+ 0C08 E6 7F            and %01111111                       ; RC is in A
 612+ 0C0A
 613+ 0C0A CB 23            sla e                               ; Shift all left by 1 bit
 614+ 0C0C CB 12            rl d
 615+ 0C0E CB 11            rl c
 616+ 0C10 CB 10            rl b
 617+ 0C12
 618+ 0C12 5A               ld e, d                             ; Shift all right by 8 bits
 619+ 0C13 51               ld d, c
 620+ 0C14 48               ld c, b
 621+ 0C15 06 00            ld b, 0                             ; We've effectively shifted right by 7 bits
 622+ 0C17
 623+ 0C17 01 0F 00         ld bc, 15                           ; ex is as FCB+12, s2 is at FCB+14, rc is at FCB + 15
 624+ 0C1A 09               add hl, bc                          ; hl -> FCB.RC
 625+ 0C1B 77               ld (hl), a                          ; RC is now stored in FCB
 626+ 0C1C
 627+ 0C1C 2B               dec hl
 628+ 0C1D 2B               dec hl
 629+ 0C1E 2B               dec hl                              ; hl -> FCB.EX
 630+ 0C1F 7B               ld a, e
 631+ 0C20 E6 1F            and %00011111                       ; EX is in A
 632+ 0C22 77               ld (hl), a
 633+ 0C23
 634+ 0C23 CB 23            sla e                               ; Shift all left by 1 bit
 635+ 0C25 CB 12            rl d
 636+ 0C27 CB 11            rl c
 637+ 0C29 CB 10            rl b
 638+ 0C2B CB 23            sla e                               ; Shift all left by 1 bit
 639+ 0C2D CB 12            rl d
 640+ 0C2F CB 11            rl c
 641+ 0C31 CB 10            rl b
 642+ 0C33 CB 23            sla e                               ; Shift all left by 1 bit
 643+ 0C35 CB 12            rl d
 644+ 0C37 CB 11            rl c
 645+ 0C39 CB 10            rl b
 646+ 0C3B
 647+ 0C3B 23               inc hl
 648+ 0C3C 3E 00            ld a, 0
 649+ 0C3E 36 00            ld (hl), 0                          ; Blank out the mystery byte called "unused"
 650+ 0C40 23               inc hl                              ; hl -> FCB.S2
 651+ 0C41
 652+ 0C41 7A               ld a, d
 653+ 0C42 E6 1F            and %00011111                       ; S2 is in A
 654+ 0C44 77               ld (hl), a
 655+ 0C45
 656+ 0C45 E1               pop hl
 657+ 0C46 C9               ret
 658+ 0C47
 659+ 0C47              convert_user_number_to_folder_name:
 660+ 0C47                  ; Pass in 1 to 15 in A.
 661+ 0C47                  ; This returns "1" to "F"
 662+ 0C47 E6 0F            and %00001111
 663+ 0C49 C6 30            add a, '0'                             ; Convert 1-9 => "1".."9"
 664+ 0C4B FE 3A            cp ':'
 665+ 0C4D D8               ret c
 666+ 0C4E C6 07            add a, 7
 667+ 0C50 C9               ret
 668+ 0C51
 669+ 0C51                  include "memorystick_low_level.asm"
# file opened: memorystick_low_level.asm
   1++0C51              ; memorystick_low_level.asm
   2++0C51              ;--------------------;
   3++0C51              ; LOW LEVEL ROUTINES ;
   4++0C51              ;--------------------;
   5++0C51
   6++0C51              configure_memorystick:
   7++0C51 06 05            ld b, 5                                 ; Have 5 attempts at configuring the module before giving up
   8++0C53              configure_memorystick1:
   9++0C53 C5               push bc
  10++0C54 CD CF 0D         call connect_to_usb_drive
  11++0C57 20 08            jr nz, failed_to_setup
  12++0C59 CD 13 0D         call connect_to_disk
  13++0C5C CD 42 0D         call mount_disk
  14++0C5F C1               pop bc
  15++0C60 C9               ret
  16++0C61              failed_to_setup:
  17++0C61 CD 84 07         call long_pause
  18++0C64 CD 84 07         call long_pause
  19++0C67 CD 84 07         call long_pause
  20++0C6A CD 84 07         call long_pause
  21++0C6D C1               pop bc
  22++0C6E 10 E3            djnz configure_memorystick1
  23++0C70 CD D4 07         call message
  24++0C73 43 48 33 37      db 'CH376S error.',13,10,0
  24++0C77 36 53 20 65
  24++0C7B 72 72 6F 72
  24++0C7F 2E 0D 0A 00
  25++0C83 C9               ret
  26++0C84
  27++0C84              ;----------------------------------------------------------------
  28++0C84              ; Call this once at startup
  29++0C84              reset_ch376_module:
  30++0C84 3E 05            ld a, RESET_ALL
  31++0C86 CD 9D 0E         call send_command_byte
  32++0C89 CD 84 07         call long_pause
  33++0C8C CD 84 07         call long_pause
  34++0C8F C9               ret
  35++0C90
  36++0C90              ;-----------------------------------------------------------------
  37++0C90              check_module_exists:
  38++0C90 3E 06            ld a, CHECK_EXIST
  39++0C92 CD 9D 0E         call send_command_byte
  40++0C95
  41++0C95 3E 7B            ld a, 123               ; We send an arbitrary number
  42++0C97 CD 81 0E         call send_data_byte
  43++0C9A
  44++0C9A CD A6 0E         call read_data_byte
  45++0C9D
  46++0C9D FE 84            cp 255-123      ; The result is 255 minus what we sent in
  47++0C9F C8               ret z
  48++0CA0 CD D4 07         call message
  49++0CA3 45 52 52 4F      db 'ERROR: CH376S module not found.',13,10,0
  49++0CA7 52 3A 20 43
  49++0CAB 48 33 37 36
  49++0CAF 53 20 6D 6F
  49++0CB3 64 75 6C 65
  49++0CB7 20 6E 6F 74
  49++0CBB 20 66 6F 75
  49++0CBF 6E 64 2E 0D
  49++0CC3 0A 00
  50++0CC5 C9               ret
  51++0CC6
  52++0CC6              ;-----------------------------------------------------------------
  53++0CC6              get_module_version:
  54++0CC6 3E 01            ld a, GET_IC_VER
  55++0CC8 CD 9D 0E         call send_command_byte
  56++0CCB
  57++0CCB CD A6 0E         call read_data_byte
  58++0CCE E6 1F            and %00011111
  59++0CD0
  60++0CD0 CD D4 07         call message
  61++0CD3 46 6F 75 6E      db 'Found CH376S v',0 ; Mine is v3!!!
  61++0CD7 64 20 43 48
  61++0CDB 33 37 36 53
  61++0CDF 20 76 00
  62++0CE2 CD F2 07         call show_a_as_hex
  63++0CE5 CD 59 07         call newline
  64++0CE8 C9               ret
  65++0CE9
  66++0CE9              ;-----------------------------------------------------------------
  67++0CE9              set_usb_host_mode:
  68++0CE9 3E 15            ld a, SET_USB_MODE
  69++0CEB CD 9D 0E         call send_command_byte
  70++0CEE 3E 06            ld a, 6
  71++0CF0 CD 81 0E         call send_data_byte
  72++0CF3 CD E2 0E         call read_status_byte
  73++0CF6 FE 15            cp USB_INT_CONNECT
  74++0CF8 C8               ret z
  75++0CF9 CD D4 07         call message
  76++0CFC 45 52 52 4F      db 'ERROR: No USB Disk?',13,10,0
  76++0D00 52 3A 20 4E
  76++0D04 6F 20 55 53
  76++0D08 42 20 44 69
  76++0D0C 73 6B 3F 0D
  76++0D10 0A 00
  77++0D12 C9               ret
  78++0D13
  79++0D13              ;-----------------------------------------------------------------
  80++0D13              connect_to_disk:
  81++0D13 3E 30            ld a, DISK_CONNECT
  82++0D15 CD 9D 0E         call send_command_byte
  83++0D18 3E 22            ld a, GET_STATUS
  84++0D1A CD E2 0E         call read_status_byte
  85++0D1D C8               ret z
  86++0D1E CD D4 07         call message
  87++0D21 45 52 52 4F      db 'ERROR connecting to USB Disk.',13,10,0
  87++0D25 52 20 63 6F
  87++0D29 6E 6E 65 63
  87++0D2D 74 69 6E 67
  87++0D31 20 74 6F 20
  87++0D35 55 53 42 20
  87++0D39 44 69 73 6B
  87++0D3D 2E 0D 0A 00
  88++0D41 C9               ret
  89++0D42
  90++0D42              ;-----------------------------------------------------------------
  91++0D42              mount_disk:
  92++0D42 3E 31            ld a, DISK_MOUNT
  93++0D44 CD 9D 0E         call send_command_byte
  94++0D47 3E 22            ld a, GET_STATUS
  95++0D49 CD E2 0E         call read_status_byte
  96++0D4C C8               ret z
  97++0D4D CD D4 07         call message
  98++0D50 45 52 52 4F      db 'ERROR mounting USB Disk.',13,10,0
  98++0D54 52 20 6D 6F
  98++0D58 75 6E 74 69
  98++0D5C 6E 67 20 55
  98++0D60 53 42 20 44
  98++0D64 69 73 6B 2E
  98++0D68 0D 0A 00
  99++0D6B C9               ret
 100++0D6C
 101++0D6C              ;-----------------------------------------------------------------
 102++0D6C              read_disk_signature:
 103++0D6C 3E 27            ld a, RD_USB_DATA0
 104++0D6E CD 9D 0E         call send_command_byte
 105++0D71 CD A6 0E         call read_data_byte                 ; A = length of bytes to now read
 106++0D74 FE 24            cp 36
 107++0D76 20 39            jr nz, could_not_read_disk_sig
 108++0D78
 109++0D78                  ; Ignore the first 8 bytes
 110++0D78 06 08            ld b, 8
 111++0D7A              read_disk_signature1:
 112++0D7A C5               push bc
 113++0D7B CD A9 0E         call read_data_byte_silent
 114++0D7E C1               pop bc
 115++0D7F 10 F9            djnz read_disk_signature1
 116++0D81
 117++0D81                  ; Display the next 8 bytes (Manufacturer)
 118++0D81 06 08            ld b, 8
 119++0D83              read_disk_signature2:
 120++0D83 C5               push bc
 121++0D84 CD A9 0E         call read_data_byte_silent
 122++0D87 CD 2C 07         call print_a
 123++0D8A C1               pop bc
 124++0D8B 10 F6            djnz read_disk_signature2
 125++0D8D CD 59 07         call newline
 126++0D90
 127++0D90                  ; Display the next 16 bytes (Model)
 128++0D90 06 10            ld b, 16
 129++0D92              read_disk_signature3:
 130++0D92 C5               push bc
 131++0D93 CD A9 0E         call read_data_byte_silent
 132++0D96 CD 2C 07         call print_a
 133++0D99 C1               pop bc
 134++0D9A 10 F6            djnz read_disk_signature3
 135++0D9C
 136++0D9C 3E 20            ld a, ' '
 137++0D9E CD 2C 07         call print_a
 138++0DA1
 139++0DA1                  ; Display the next 4 bytes (Version)
 140++0DA1 06 04            ld b, 4
 141++0DA3              read_disk_signature4:
 142++0DA3 C5               push bc
 143++0DA4 CD A9 0E         call read_data_byte_silent
 144++0DA7 CD 2C 07         call print_a
 145++0DAA C1               pop bc
 146++0DAB 10 F6            djnz read_disk_signature4
 147++0DAD CD 59 07         call newline
 148++0DB0 C9               ret
 149++0DB1
 150++0DB1              could_not_read_disk_sig:
 151++0DB1 CD D4 07         call message
 152++0DB4 45 52 52 4F      db 'ERROR reading disk sig.',13,10,0
 152++0DB8 52 20 72 65
 152++0DBC 61 64 69 6E
 152++0DC0 67 20 64 69
 152++0DC4 73 6B 20 73
 152++0DC8 69 67 2E 0D
 152++0DCC 0A 00
 153++0DCE C9               ret
 154++0DCF
 155++0DCF              connect_to_usb_drive:
 156++0DCF                  ; Connects us up to the USB Drive.
 157++0DCF                  ; Returns Zero flag = true if we can connect ok.
 158++0DCF CD 84 0C         call reset_ch376_module
 159++0DD2 CD E9 0C         call set_usb_host_mode
 160++0DD5 FE 15            cp USB_INT_CONNECT
 161++0DD7 C9               ret
 162++0DD8
 163++0DD8              create_file:
 164++0DD8                  ; pass in DE = pointer to filename
 165++0DD8 D5               push de
 166++0DD9 3E 2F            ld a, SET_FILE_NAME
 167++0DDB CD 9D 0E         call send_command_byte
 168++0DDE E1               pop hl
 169++0DDF CD 87 0E         call send_data_string
 170++0DE2
 171++0DE2 3E 34            ld a, FILE_CREATE
 172++0DE4 CD 9D 0E         call send_command_byte
 173++0DE7
 174++0DE7 CD E2 0E         call read_status_byte
 175++0DEA FE 14            cp USB_INT_SUCCESS
 176++0DEC C9               ret
 177++0DED
 178++0DED              open_file:
 179++0DED                  ; Tells the module to use the filename from the filename_buffer.
 180++0DED                  ; Returns z=true if ok to proceed.
 181++0DED                  ; Pass in hl -> directory string, e.g. "/folder"
 182++0DED              ;      push hl
 183++0DED              ;      call message
 184++0DED              ;      db 'open_file:[',0
 185++0DED              ;  open_file1:
 186++0DED              ;      ld a, (hl)
 187++0DED              ;      cp 0
 188++0DED              ;      jr z, open_file2
 189++0DED              ;      call print_a
 190++0DED              ;      inc hl
 191++0DED              ;      jr open_file1
 192++0DED
 193++0DED              ;  open_file2:
 194++0DED              ;      ld a, ']'
 195++0DED              ;      call print_a
 196++0DED              ;      call newline
 197++0DED              ;      pop hl
 198++0DED
 199++0DED 3E 2F            ld a, SET_FILE_NAME
 200++0DEF CD 9D 0E         call send_command_byte
 201++0DF2 CD 87 0E         call send_data_string
 202++0DF5 3E 32            ld a, FILE_OPEN
 203++0DF7 CD 9D 0E         call send_command_byte
 204++0DFA CD E2 0E         call read_status_byte
 205++0DFD FE 14            cp USB_INT_SUCCESS
 206++0DFF C9               ret
 207++0E00
 208++0E00              close_file:
 209++0E00 3E 36            ld a, FILE_CLOSE
 210++0E02 CD 9D 0E         call send_command_byte
 211++0E05 3E 01            ld a, 1                             ; 1 = update file size if necessary
 212++0E07 CD 81 0E         call send_data_byte
 213++0E0A CD E2 0E         call read_status_byte
 214++0E0D C9               ret
 215++0E0E
 216++0E0E              create_directory:
 217++0E0E                  ; Tells the module to use the filename from the filename_buffer to create a directory of that name.
 218++0E0E                  ; Returns z=true if ok to proceed.
 219++0E0E 21 EB FF         ld hl, filename_buffer
 220++0E11              ; create_directory1:
 221++0E11              ;     ld a, (hl)
 222++0E11              ;     cp 0
 223++0E11              ;     jr z, create_directory2
 224++0E11              ;     inc hl
 225++0E11              ;     call print_a
 226++0E11              ;     jr create_directory1
 227++0E11
 228++0E11              create_directory2:
 229++0E11
 230++0E11 3E 2F            ld a, SET_FILE_NAME
 231++0E13 CD 9D 0E         call send_command_byte
 232++0E16 21 EB FF         ld hl, filename_buffer
 233++0E19 CD 87 0E         call send_data_string
 234++0E1C 3E 40            ld a, DIR_CREATE
 235++0E1E CD 9D 0E         call send_command_byte
 236++0E21 CD E2 0E         call read_status_byte
 237++0E24 FE 14            cp USB_INT_SUCCESS
 238++0E26 C9               ret
 239++0E27
 240++0E27              read_from_file:
 241++0E27                  ; Ask to read 128 bytes from the current file into the dma_address area pointed to by DE.
 242++0E27                  ; Returns Zero flag set for success, clear for fail.
 243++0E27 D5               push de
 244++0E28 3E 3A            ld a, BYTE_READ
 245++0E2A CD 9D 0E         call send_command_byte
 246++0E2D 3E 80            ld a, 128                           ; Request 128 bytes
 247++0E2F CD 81 0E         call send_data_byte
 248++0E32 3E 00            ld a, 0
 249++0E34 CD 81 0E         call send_data_byte
 250++0E37
 251++0E37 CD E2 0E         call read_status_byte
 252++0E3A              read_from_file1:
 253++0E3A FE 1D            cp USB_INT_DISK_READ                    ; This means "go ahead and read"
 254++0E3C 28 07            jr z, read_from_file3
 255++0E3E FE 14            cp USB_INT_SUCCESS                      ; Bizarrely this means we are finished
 256++0E40 CA 71 0E         jp z, read_from_file_cannot
 257++0E43 18 2C            jr read_from_file_cannot
 258++0E45
 259++0E45              read_from_file3:
 260++0E45 3E 27            ld a, RD_USB_DATA0                      ; Find out how many bytes are available to read
 261++0E47 CD 9D 0E         call send_command_byte
 262++0E4A CD A6 0E         call read_data_byte                     ; A = number of bytes available to read
 263++0E4D
 264++0E4D                  ; If there are less than 128 bytes to read, fill the buffer with 0s first
 265++0E4D FE 80            cp 128
 266++0E4F 30 0B            jr nc, read_from_file_128
 267++0E51 E1               pop hl
 268++0E52 E5               push hl
 269++0E53 F5               push af
 270++0E54 06 80            ld b, 128
 271++0E56              read_from_file_padding:
 272++0E56 36 00            ld (hl), 0
 273++0E58 23               inc hl
 274++0E59 10 FB            djnz read_from_file_padding
 275++0E5B F1               pop af
 276++0E5C
 277++0E5C              read_from_file_128:
 278++0E5C E1               pop hl
 279++0E5D CD AF 0E         call read_data_bytes_into_hl        ; Read this block of data
 280++0E60 E5               push hl
 281++0E61 3E 3B            ld a, BYTE_RD_GO
 282++0E63 CD 9D 0E         call send_command_byte
 283++0E66 3E 22            ld a, GET_STATUS
 284++0E68 CD 9D 0E         call send_command_byte
 285++0E6B CD A6 0E         call read_data_byte
 286++0E6E E1               pop hl
 287++0E6F                  ; All done, so return ZERO for success
 288++0E6F BF               cp a                                ; set zero flag for success
 289++0E70 C9               ret
 290++0E71
 291++0E71              read_from_file_cannot:
 292++0E71 D1               pop de
 293++0E72 F6 01            or 1                                ; clear zero flag
 294++0E74 C9               ret
 295++0E75
 296++0E75              copy_filename_to_buffer:
 297++0E75                  ; Enter with hl->zero-terminated-filename-string
 298++0E75                  ; Copies this to filename_buffer
 299++0E75 11 EB FF         ld de, filename_buffer
 300++0E78              copy_filename_to_buffer1:
 301++0E78 7E               ld a, (hl)
 302++0E79 12               ld (de), a
 303++0E7A 23               inc hl
 304++0E7B 13               inc de
 305++0E7C FE 00            cp 0
 306++0E7E C8               ret z
 307++0E7F 18 F7            jr copy_filename_to_buffer1
 308++0E81
 309++0E81              send_data_byte:
 310++0E81                  ; push af
 311++0E81                  ; call message
 312++0E81                  ; db 'send_data_byte ', 0
 313++0E81                  ; pop af
 314++0E81                  ; push af
 315++0E81                  ; call show_a_as_hex
 316++0E81                  ; call newline
 317++0E81                  ; pop af
 318++0E81 D3 A0            out (mem_stick_data_port), a
 319++0E83                  ;call tiny_pause
 320++0E83 CD B7 0E         call wait_til_not_busy
 321++0E86 C9               ret
 322++0E87
 323++0E87              send_data_string:
 324++0E87                  ; The string is pointed to by HL
 325++0E87 7E               ld a, (hl)
 326++0E88 FE 00            cp 0
 327++0E8A 28 0B            jr z, send_data_string_done
 328++0E8C F5               push af
 329++0E8D E5               push hl
 330++0E8E CD 81 0E         call send_data_byte
 331++0E91 E1               pop hl
 332++0E92 F1               pop af
 333++0E93 23               inc hl
 334++0E94 C3 87 0E         jp send_data_string
 335++0E97              send_data_string_done:
 336++0E97 3E 00            ld a, 0
 337++0E99 CD 81 0E         call send_data_byte
 338++0E9C C9               ret
 339++0E9D
 340++0E9D              send_command_byte:
 341++0E9D                  ; push af
 342++0E9D                  ; call message
 343++0E9D                  ; db 'send_command_byte ',0
 344++0E9D                  ; pop af
 345++0E9D                  ; push af
 346++0E9D                  ; call show_a_as_hex
 347++0E9D                  ; call newline
 348++0E9D                  ; pop af
 349++0E9D D3 A1            out (mem_stick_command_port), a
 350++0E9F                  ;call tiny_pause
 351++0E9F CD B7 0E         call wait_til_not_busy
 352++0EA2 C9               ret
 353++0EA3
 354++0EA3              read_command_byte:
 355++0EA3                  ; call message
 356++0EA3                  ; db 'read_command_byte: ', 0
 357++0EA3 DB A1            in a, (mem_stick_command_port)
 358++0EA5                  ; push af
 359++0EA5                  ; call show_a_as_hex
 360++0EA5                  ; call newline
 361++0EA5                  ; pop af
 362++0EA5 C9               ret
 363++0EA6
 364++0EA6              read_data_byte:
 365++0EA6                  ; call message
 366++0EA6                  ; db 'read_data_byte: ', 0
 367++0EA6 DB A0            in a, (mem_stick_data_port)
 368++0EA8                  ; push af
 369++0EA8                  ; call show_a_as_hex
 370++0EA8                  ; call newline
 371++0EA8                  ; pop af
 372++0EA8 C9               ret
 373++0EA9
 374++0EA9              read_data_byte_silent:
 375++0EA9 DB A0            in a, (mem_stick_data_port)
 376++0EAB C9               ret
 377++0EAC
 378++0EAC              read_data_bytes_into_buffer:
 379++0EAC                  ; The number of bytes should be in A.
 380++0EAC                  ; Read that many bytes into the buffer.
 381++0EAC                  ; The value of A is retained.
 382++0EAC 21 C5 FF         ld hl, disk_buffer
 383++0EAF              read_data_bytes_into_hl:
 384++0EAF                  ; This entry point will read A bytes into the area pointed to by HL.
 385++0EAF                  ; On exit HL will point to the location after where the bytes were added.
 386++0EAF F5               push af
 387++0EB0 47               ld b, a
 388++0EB1 0E A0            ld c, mem_stick_data_port
 389++0EB3              read_data_bytes_into_buffer1:
 390++0EB3 ED B2            inir                    ; A rare use of In, Increase & Repeat!!!
 391++0EB5 F1               pop af
 392++0EB6 C9               ret
 393++0EB7
 394++0EB7              wait_til_not_busy:
 395++0EB7                  ; call message
 396++0EB7                  ; db 'waiting...', 13, 10, 0
 397++0EB7 01 60 EA         ld bc, 60000            ; retry max 60000 times!!!
 398++0EBA              wait_til_not_busy1:
 399++0EBA C5               push bc
 400++0EBB CD A3 0E         call read_command_byte
 401++0EBE E6 10            and %00010000
 402++0EC0 C2 C5 0E         jp nz, wait_til_not_busy2
 403++0EC3 C1               pop bc
 404++0EC4 C9               ret
 405++0EC5              wait_til_not_busy2:
 406++0EC5 CD 8E 07         call short_pause
 407++0EC8 C1               pop bc
 408++0EC9 0B               dec bc
 409++0ECA 78               ld a, b
 410++0ECB B1               or c
 411++0ECC 20 EC            jr nz, wait_til_not_busy1
 412++0ECE CD D4 07         call message
 413++0ED1 5B 55 53 42      db '[USB TIMEOUT]', 13, 10, 0
 413++0ED5 20 54 49 4D
 413++0ED9 45 4F 55 54
 413++0EDD 5D 0D 0A 00
 414++0EE1 C9               ret
 415++0EE2
 416++0EE2              read_status_byte:
 417++0EE2 3E 22            ld a, GET_STATUS
 418++0EE4 CD 9D 0E         call send_command_byte
 419++0EE7 CD A6 0E         call read_data_byte
 420++0EEA C9               ret
 421++0EEB
 422++0EEB              ; show_status:
 423++0EEB              ;     call read_status_byte
 424++0EEB              ;     push af
 425++0EEB              ;     call report_on_status
 426++0EEB              ;     pop af
 427++0EEB              ;     ret                     ; The status is returned in A
 428++0EEB
 429++0EEB              ; report_on_status:
 430++0EEB              ;     cp USB_INT_SUCCESS
 431++0EEB              ;     jr nz, ros1
 432++0EEB              ;     call message
 433++0EEB              ;     db 'USB_INT_SUCCESS',13,10,0
 434++0EEB              ;     ret
 435++0EEB              ; ros1:
 436++0EEB              ;     cp USB_INT_CONNECT
 437++0EEB              ;     jr nz, ros2
 438++0EEB              ;     call message
 439++0EEB              ;     db 'USB_INT_CONNECT',13,10,0
 440++0EEB              ;     ret
 441++0EEB              ; ros2:
 442++0EEB              ;     cp USB_INT_DISCONNECT
 443++0EEB              ;     jr nz, ros3
 444++0EEB              ;     call message
 445++0EEB              ;     db 'USB_INT_DISCONNECT',13,10,0
 446++0EEB              ;     ret
 447++0EEB              ; ros3:
 448++0EEB              ;     cp USB_INT_BUF_OVER
 449++0EEB              ;     jr nz, ros4
 450++0EEB              ;     call message
 451++0EEB              ;     db 'USB_INT_BUF_OVER',13,10,0
 452++0EEB              ;     ret
 453++0EEB              ; ros4:
 454++0EEB              ;     cp USB_INT_USB_READY
 455++0EEB              ;     jr nz, ros5
 456++0EEB              ;     call message
 457++0EEB              ;     db 'USB_INT_USB_READY',13,10,0
 458++0EEB              ;     ret
 459++0EEB              ; ros5:
 460++0EEB              ;     cp USB_INT_DISK_READ
 461++0EEB              ;     jr nz, ros6
 462++0EEB              ;     call message
 463++0EEB              ;     db 'USB_INT_DISK_READ',13,10,0
 464++0EEB              ;     ret
 465++0EEB              ; ros6:
 466++0EEB              ;     cp USB_INT_DISK_WRITE
 467++0EEB              ;     jr nz, ros7
 468++0EEB              ;     call message
 469++0EEB              ;     db 'USB_INT_DISK_WRITE',13,10,0
 470++0EEB              ;     ret
 471++0EEB              ; ros7:
 472++0EEB              ;     cp USB_INT_DISK_ERR
 473++0EEB              ;     jr nz, ros8
 474++0EEB              ;     call message
 475++0EEB              ;     db 'USB_INT_DISK_ERR',13,10,0
 476++0EEB              ;     ret
 477++0EEB              ; ros8:
 478++0EEB              ;     cp YES_OPEN_DIR
 479++0EEB              ;     jr nz, ros9
 480++0EEB              ;     call message
 481++0EEB              ;     db 'YES_OPEN_DIR',13,10,0
 482++0EEB              ;     ret
 483++0EEB              ; ros9:
 484++0EEB              ;     cp ERR_MISS_FILE
 485++0EEB              ;     jr nz, ros10
 486++0EEB              ;     call message
 487++0EEB              ;     db 'ERR_MISS_FILE',13,10,0
 488++0EEB              ;     ret
 489++0EEB              ; ros10:
 490++0EEB              ;     cp ERR_FOUND_NAME
 491++0EEB              ;     jr nz, ros11
 492++0EEB              ;     call message
 493++0EEB              ;     db 'ERR_FOUND_NAME',13,10,0
 494++0EEB              ;     ret
 495++0EEB              ; ros11:
 496++0EEB              ;     cp ERR_DISK_DISCON
 497++0EEB              ;     jr nz, ros12
 498++0EEB              ;     call message
 499++0EEB              ;     db 'ERR_DISK_DISCON',13,10,0
 500++0EEB              ;     ret
 501++0EEB              ; ros12:
 502++0EEB              ;     cp ERR_LARGE_SECTOR
 503++0EEB              ;     jr nz, ros13
 504++0EEB              ;     call message
 505++0EEB              ;     db 'ERR_LARGE_SECTOR',13,10,0
 506++0EEB              ;     ret
 507++0EEB              ; ros13:
 508++0EEB              ;     cp ERR_TYPE_ERROR
 509++0EEB              ;     jr nz, ros14
 510++0EEB              ;     call message
 511++0EEB              ;     db 'ERR_TYPE_ERROR',13,10,0
 512++0EEB              ;     ret
 513++0EEB              ; ros14:
 514++0EEB              ;     cp ERR_BPB_ERROR
 515++0EEB              ;     jr nz, ros15
 516++0EEB              ;     call message
 517++0EEB              ;     db 'ERR_BPB_ERROR',13,10,0
 518++0EEB              ;     ret
 519++0EEB              ; ros15:
 520++0EEB              ;     cp ERR_DISK_FULL
 521++0EEB              ;     jr nz, ros16
 522++0EEB              ;     call message
 523++0EEB              ;     db 'ERR_DISK_FULL',13,10,0
 524++0EEB              ;     ret
 525++0EEB              ; ros16:
 526++0EEB              ;     cp ERR_FDT_OVER
 527++0EEB              ;     jr nz, ros17
 528++0EEB              ;     call message
 529++0EEB              ;     db 'ERR_FDT_OVER',13,10,0
 530++0EEB              ;     ret
 531++0EEB              ; ros17:
 532++0EEB              ;     cp ERR_FILE_CLOSE
 533++0EEB              ;     jr nz, ros18
 534++0EEB              ;     call message
 535++0EEB              ;     db 'ERR_FILE_CLOSE',13,10,0
 536++0EEB              ;     ret
 537++0EEB              ; ros18:
 538++0EEB              ;     call message
 539++0EEB              ;     db 'UNKNOWN STATUS: ',0
 540++0EEB              ;     call show_a_as_hex
 541++0EEB              ;     call newline
 542++0EEB              ;     ret
 543++0EEB
 544++0EEB
 545++0EEB              mem_stick_data_port     equ 0xA0
 546++0EEB              mem_stick_command_port  equ 0xA1
 547++0EEB
 548++0EEB              GET_IC_VER equ $01
 549++0EEB              SET_BAUDRATE equ $02
 550++0EEB              RESET_ALL equ $05
 551++0EEB              CHECK_EXIST equ $06
 552++0EEB              GET_FILE_SIZE equ $0C
 553++0EEB              SET_USB_MODE equ $15
 554++0EEB              GET_STATUS equ $22
 555++0EEB              RD_USB_DATA0 equ $27
 556++0EEB              WR_USB_DATA equ $2C
 557++0EEB              WR_REQ_DATA equ $2D
 558++0EEB              WR_OFS_DATA equ $2E
 559++0EEB              SET_FILE_NAME equ $2F
 560++0EEB              DISK_CONNECT equ $30
 561++0EEB              DISK_MOUNT equ $31
 562++0EEB              FILE_OPEN equ $32
 563++0EEB              FILE_ENUM_GO equ $33
 564++0EEB              FILE_CREATE equ $34
 565++0EEB              FILE_ERASE equ $35
 566++0EEB              FILE_CLOSE equ $36
 567++0EEB              DIR_INFO_READ equ $37
 568++0EEB              DIR_INFO_SAVE equ $38
 569++0EEB              BYTE_LOCATE equ $39
 570++0EEB              BYTE_READ equ $3A
 571++0EEB              BYTE_RD_GO equ $3B
 572++0EEB              BYTE_WRITE equ $3C
 573++0EEB              BYTE_WR_GO equ $3D
 574++0EEB              DISK_CAPACITY equ $3E
 575++0EEB              DISK_QUERY equ $3F
 576++0EEB              DIR_CREATE equ $40
 577++0EEB
 578++0EEB
 579++0EEB              ; Statuses
 580++0EEB              USB_INT_SUCCESS equ $14
 581++0EEB              USB_INT_CONNECT equ $15
 582++0EEB              USB_INT_DISCONNECT equ $16
 583++0EEB              USB_INT_BUF_OVER equ $17
 584++0EEB              USB_INT_USB_READY equ $18
 585++0EEB              USB_INT_DISK_READ equ $1D
 586++0EEB              USB_INT_DISK_WRITE equ $1E
 587++0EEB              USB_INT_DISK_ERR equ $1F
 588++0EEB              YES_OPEN_DIR equ $41
 589++0EEB              ERR_MISS_FILE equ $42
 590++0EEB              ERR_FOUND_NAME equ $43
 591++0EEB              ERR_DISK_DISCON equ $82
 592++0EEB              ERR_LARGE_SECTOR equ $84
 593++0EEB              ERR_TYPE_ERROR equ $92
 594++0EEB              ERR_BPB_ERROR equ $A1
 595++0EEB              ERR_DISK_FULL equ $B1
 596++0EEB              ERR_FDT_OVER equ $B2
 597++0EEB              ERR_FILE_CLOSE equ $B4
 598++0EEB
 599++0EEB              ROOT_DIRECTORY:
 600++0EEB 2A 00            db '*',0
 601++0EED
 602++0EED              SLASH:
 603++0EED 2F 00            db '/',0
 604++0EEF
 605++0EEF              ;SAVE_FILENAME:
 606++0EEF              ;    db 'TESTING',0
 607++0EEF
 608++0EEF              ;TARGET_FILENAME:
 609++0EEF              ;    db '/TARGET2.TXT',0
 610++0EEF
 611++0EEF              ;NO_EXTENSION:
 612++0EEF              ;    db '   ',0
 613++0EEF
 614++0EEF              ;TXT_EXTENSION:
 615++0EEF              ;    db 'TXT',0
 616++0EEF
# file closed: memorystick_low_level.asm
 670+ 0EEF
 671+ 0EEF              ROOT_NAME:
 672+ 0EEF 2F 00            db '/',0
 673+ 0EF1
 674+ 0EF1              STAR_DOT_STAR:
 675+ 0EF1 2A 00            db '*',0
 676+ 0EF3
 677+ 0EF3              CPM_FOLDER_NAME:
 678+ 0EF3 2F 43 50 4D      db '/CPM',0
 678+ 0EF7 00
 679+ 0EF8
 680+ 0EF8              TINY_BASIC_FOLDER_NAME:
 681+ 0EF8 2F 54 42 41           db '/TBASIC',0
 681+ 0EFC 53 49 43 00
 682+ 0F00
 683+ 0F00              CPM_DISKS_NAME:
 684+ 0F00 44 49 53 4B      db 'DISKS',0
 684+ 0F04 53 00
 685+ 0F06
 686+ 0F06
 687+ 0F06
# file closed: memorystick.asm
 931  0F06                  include "filesize.asm"
# file opened: filesize.asm
   1+ 0F06              ; Routines to help print file sizes for DIR commands.
   2+ 0F06              ; 1KB = 1024 bytes (00 00 04 00 h)
   3+ 0F06              ; 1MB = 1024 KB = 1,048,576 bytes (00 10 00 00 h)
   4+ 0F06              ; 1GB = 1024 MB = 40 00 00 00 h
   5+ 0F06              ; Largest 32 bit number is FFFFFFFF which is 4,294,967,295 which is 4.2GB
   6+ 0F06              ; So this routine can only display file sizes up to 4.2GB.
   7+ 0F06              ; However, I've allowed a 6 byte buffer to store it in for 2 reasons:
   8+ 0F06              ; (1) In the future I may want to use more digits (but probably not!!!)
   9+ 0F06              ; (2) We multiply in incoming number by 10 to show 1 decimal place later in the process.
  10+ 0F06              ; The largest number we ever need to actually show is 1023 because we
  11+ 0F06              ; always divide the number down into larger units.
  12+ 0F06              ; For example, 1023 would be shown as 1023 bytes
  13+ 0F06              ; but 1024 would be shown as 1K.
  14+ 0F06              ; This means we need a divide-by-1024 routine, which is simply Right Shift 10 times!
  15+ 0F06              ; Which is simplified by shifting the whole number right by one byte, then Right Shift twice.
  16+ 0F06              ; This is of course integer maths, so no decimal places.
  17+ 0F06              ; However, we use a trick! First we multiply the number by 10 so that once we have done all
  18+ 0F06              ; the calculations we can simply insert a dot before the last digit to give ourselves 1 decimal place.
  19+ 0F06              ; Therefore 2000 would be shown as 1.9K, but 2048 would be shown as 2.0K.
  20+ 0F06              ; We also do some post-processing to get rid of the leading zeros.
  21+ 0F06              ;
  22+ 0F06              ; Any number less than 00000400h is shown in bytes.
  23+ 0F06              ; Any number less than 00100000h is shown in KB.
  24+ 0F06              ; Any number less than 40000000h is shown in MB.
  25+ 0F06              ; Higher numbers are show in GB.
  26+ 0F06
  27+ 0F06              show_filesize:
  28+ 0F06                  ; Pass in 32 bit filesize in the lowest 4 bytes of the 6 byte filesize_buffer.
  29+ 0F06                  ; First work out the units
  30+ 0F06 3A 02 C0         ld a, (filesize_buffer+2)
  31+ 0F09 67               ld h, a
  32+ 0F0A 3A 03 C0         ld a, (filesize_buffer+3)
  33+ 0F0D 6F               ld l, a
  34+ 0F0E 11 00 40         ld de, $4000
  35+ 0F11 B7               or a
  36+ 0F12 ED 52            sbc hl,de                   ; Compare hl with de
  37+ 0F14 30 4A            jr nc, show_gigabytes
  38+ 0F16
  39+ 0F16 3A 02 C0         ld a, (filesize_buffer+2)
  40+ 0F19 67               ld h, a
  41+ 0F1A 3A 03 C0         ld a, (filesize_buffer+3)
  42+ 0F1D 6F               ld l, a
  43+ 0F1E 11 10 00         ld de, $0010
  44+ 0F21 B7               or a
  45+ 0F22 ED 52            sbc hl,de                   ; Compare hl with de
  46+ 0F24 30 29            jr nc, show_megabytes
  47+ 0F26
  48+ 0F26 3A 04 C0         ld a, (filesize_buffer+4)
  49+ 0F29 67               ld h, a
  50+ 0F2A 3A 05 C0         ld a, (filesize_buffer+5)
  51+ 0F2D 6F               ld l, a
  52+ 0F2E 11 00 04         ld de, $0400
  53+ 0F31 B7               or a
  54+ 0F32 ED 52            sbc hl,de                   ; Compare hl with de
  55+ 0F34 30 0B            jr nc, show_kilobytes
  56+ 0F36
  57+ 0F36              show_bytes:
  58+ 0F36 CD D6 0F         call multiply_filesize_by_10
  59+ 0F39 3E 42            ld a, 'B'
  60+ 0F3B 32 EC 06         ld (filesize_units),a
  61+ 0F3E C3 74 0F         jp show_filesize1
  62+ 0F41              show_kilobytes:
  63+ 0F41 CD D6 0F         call multiply_filesize_by_10
  64+ 0F44 3E 4B            ld a, 'K'
  65+ 0F46 32 EC 06         ld (filesize_units),a
  66+ 0F49 CD 16 10         call divide_filesize_by_1024
  67+ 0F4C C3 74 0F         jp show_filesize1
  68+ 0F4F              show_megabytes:
  69+ 0F4F CD D6 0F         call multiply_filesize_by_10
  70+ 0F52 3E 4D            ld a, 'M'
  71+ 0F54 32 EC 06         ld (filesize_units),a
  72+ 0F57 CD 16 10         call divide_filesize_by_1024
  73+ 0F5A CD 16 10         call divide_filesize_by_1024
  74+ 0F5D C3 74 0F         jp show_filesize1
  75+ 0F60              show_gigabytes:
  76+ 0F60 CD D6 0F         call multiply_filesize_by_10
  77+ 0F63 3E 47            ld a, 'G'
  78+ 0F65 32 EC 06         ld (filesize_units),a
  79+ 0F68 CD 16 10         call divide_filesize_by_1024
  80+ 0F6B CD 16 10         call divide_filesize_by_1024
  81+ 0F6E CD 16 10         call divide_filesize_by_1024
  82+ 0F71 C3 74 0F         jp show_filesize1
  83+ 0F74
  84+ 0F74              show_filesize1:
  85+ 0F74                  ; We now have a number from 0 to 1023 in the filesize_buffer bytes 4 & 5.
  86+ 0F74 3A 04 C0         ld a, (filesize_buffer+4)
  87+ 0F77 67               ld h, a
  88+ 0F78 3A 05 C0         ld a, (filesize_buffer+5)
  89+ 0F7B 6F               ld l, a
  90+ 0F7C CD 6B 10         call show_hl_as_decimal_to_buffer
  91+ 0F7F
  92+ 0F7F                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading zeros
  93+ 0F7F
  94+ 0F7F CD B4 0F         call remove_leading_zeros
  95+ 0F82
  96+ 0F82                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading spaces
  97+ 0F82
  98+ 0F82 11 00 C0         ld de, filesize_buffer
  99+ 0F85 06 04            ld b, 4                         ; show first 4 digits of filesize
 100+ 0F87              show_filesize2:
 101+ 0F87 1A               ld a, (de)
 102+ 0F88 CD 2C 07         call print_a
 103+ 0F8B 13               inc de
 104+ 0F8C 10 F9            djnz show_filesize2
 105+ 0F8E 3E 2E            ld a, '.'                       ; then a dot
 106+ 0F90 CD 2C 07         call print_a
 107+ 0F93 1A               ld a, (de)                      ; then the last digit
 108+ 0F94 CD 2C 07         call print_a
 109+ 0F97 CD 64 07         call space
 110+ 0F9A
 111+ 0F9A 3A EC 06         ld a, (filesize_units)
 112+ 0F9D FE 42            cp 'B'
 113+ 0F9F 20 0A            jr nz, show_filesize3
 114+ 0FA1 CD D4 07         call message
 115+ 0FA4 62 79 74 65      db 'bytes',0
 115+ 0FA8 73 00
 116+ 0FAA C9               ret
 117+ 0FAB
 118+ 0FAB              show_filesize3:
 119+ 0FAB CD 2C 07         call print_a
 120+ 0FAE 3E 42            ld a, 'B'
 121+ 0FB0 CD 2C 07         call print_a
 122+ 0FB3 C9               ret
 123+ 0FB4
 124+ 0FB4              remove_leading_zeros:
 125+ 0FB4 3A 00 C0         ld a, (filesize_buffer)
 126+ 0FB7 FE 30            cp '0'
 127+ 0FB9 C0               ret nz
 128+ 0FBA 3E 20            ld a, ' '
 129+ 0FBC 32 00 C0         ld (filesize_buffer), a
 130+ 0FBF
 131+ 0FBF 3A 01 C0         ld a, (filesize_buffer+1)
 132+ 0FC2 FE 30            cp '0'
 133+ 0FC4 C0               ret nz
 134+ 0FC5 3E 20            ld a, ' '
 135+ 0FC7 32 01 C0         ld (filesize_buffer+1), a
 136+ 0FCA
 137+ 0FCA 3A 02 C0         ld a, (filesize_buffer+2)
 138+ 0FCD FE 30            cp '0'
 139+ 0FCF C0               ret nz
 140+ 0FD0 3E 20            ld a, ' '
 141+ 0FD2 32 02 C0         ld (filesize_buffer+2), a
 142+ 0FD5 C9               ret
 143+ 0FD6
 144+ 0FD6              multiply_filesize_by_10:
 145+ 0FD6                  ; To multiply N by 10 we do this:
 146+ 0FD6                  ; Shift-left to get N x 2
 147+ 0FD6                  ; Shift-left twice more to get N x 8
 148+ 0FD6                  ; Add the two totals together
 149+ 0FD6 CD 55 10         call shift_left_filesize_buffer
 150+ 0FD9 CD 0A 10         call copy_filesize_buffer               ; This is N x 2
 151+ 0FDC CD 55 10         call shift_left_filesize_buffer
 152+ 0FDF CD 55 10         call shift_left_filesize_buffer         ; Buffer has N x 8
 153+ 0FE2 CD E6 0F         call add_filesize_buffer_copy           ; Add N*8 and N*2
 154+ 0FE5 C9               ret
 155+ 0FE6
 156+ 0FE6              add_filesize_buffer_copy:
 157+ 0FE6                  ; Add the copy of the filesize_buffer back onto the real one
 158+ 0FE6 11 05 C0         ld de, filesize_buffer+5
 159+ 0FE9 21 0B C0         ld hl, filesize_buffer_copy+5
 160+ 0FEC 1A               ld a, (de)
 161+ 0FED B7               or a                        ; clear carry
 162+ 0FEE 8E               adc a, (hl)
 163+ 0FEF 12               ld (de), a
 164+ 0FF0 1B               dec de
 165+ 0FF1 2B               dec hl
 166+ 0FF2
 167+ 0FF2 1A               ld a, (de)
 168+ 0FF3 8E               adc a, (hl)
 169+ 0FF4 12               ld (de), a
 170+ 0FF5 1B               dec de
 171+ 0FF6 2B               dec hl
 172+ 0FF7
 173+ 0FF7 1A               ld a, (de)
 174+ 0FF8 8E               adc a, (hl)
 175+ 0FF9 12               ld (de), a
 176+ 0FFA 1B               dec de
 177+ 0FFB 2B               dec hl
 178+ 0FFC
 179+ 0FFC 1A               ld a, (de)
 180+ 0FFD 8E               adc a, (hl)
 181+ 0FFE 12               ld (de), a
 182+ 0FFF 1B               dec de
 183+ 1000 2B               dec hl
 184+ 1001
 185+ 1001 1A               ld a, (de)
 186+ 1002 8E               adc a, (hl)
 187+ 1003 12               ld (de), a
 188+ 1004 1B               dec de
 189+ 1005 2B               dec hl
 190+ 1006
 191+ 1006 1A               ld a, (de)
 192+ 1007 8E               adc a, (hl)
 193+ 1008 12               ld (de), a
 194+ 1009
 195+ 1009 C9               ret
 196+ 100A
 197+ 100A              copy_filesize_buffer:
 198+ 100A 11 06 C0         ld de, filesize_buffer_copy
 199+ 100D 21 00 C0         ld hl, filesize_buffer
 200+ 1010 01 06 00         ld bc, 6
 201+ 1013 ED B0            ldir
 202+ 1015 C9               ret
 203+ 1016
 204+ 1016              divide_filesize_by_1024:
 205+ 1016                  ; Shift everything right by 1 byte
 206+ 1016 3A 04 C0         ld a, (filesize_buffer+4)
 207+ 1019 32 05 C0         ld (filesize_buffer+5), a
 208+ 101C 3A 03 C0         ld a, (filesize_buffer+3)
 209+ 101F 32 04 C0         ld (filesize_buffer+4), a
 210+ 1022 3A 02 C0         ld a, (filesize_buffer+2)
 211+ 1025 32 03 C0         ld (filesize_buffer+3), a
 212+ 1028 3A 01 C0         ld a, (filesize_buffer+1)
 213+ 102B 32 02 C0         ld (filesize_buffer+2), a
 214+ 102E 3A 00 C0         ld a, (filesize_buffer+0)
 215+ 1031 32 01 C0         ld (filesize_buffer+1), a
 216+ 1034 97               sub a                       ; Put zero in top byte
 217+ 1035 32 00 C0         ld (filesize_buffer+0), a
 218+ 1038
 219+ 1038                  ; Then SHIFT-RIGHT by two bits
 220+ 1038 CD 3F 10         call shift_right_filesize_buffer
 221+ 103B CD 3F 10         call shift_right_filesize_buffer
 222+ 103E C9               ret
 223+ 103F
 224+ 103F              shift_right_filesize_buffer:
 225+ 103F 21 00 C0         ld hl, filesize_buffer
 226+ 1042 B7               or a                        ; clear carry
 227+ 1043 CB 1E            rr (hl)
 228+ 1045 23               inc hl
 229+ 1046 CB 1E            rr (hl)
 230+ 1048 23               inc hl
 231+ 1049 CB 1E            rr (hl)
 232+ 104B 23               inc hl
 233+ 104C CB 1E            rr (hl)
 234+ 104E 23               inc hl
 235+ 104F CB 1E            rr (hl)
 236+ 1051 23               inc hl
 237+ 1052 CB 1E            rr (hl)
 238+ 1054 C9               ret
 239+ 1055
 240+ 1055              shift_left_filesize_buffer:
 241+ 1055 21 05 C0         ld hl, filesize_buffer+5
 242+ 1058 B7               or a                        ; clear carry
 243+ 1059 CB 16            rl (hl)
 244+ 105B 2B               dec hl
 245+ 105C CB 16            rl (hl)
 246+ 105E 2B               dec hl
 247+ 105F CB 16            rl (hl)
 248+ 1061 2B               dec hl
 249+ 1062 CB 16            rl (hl)
 250+ 1064 2B               dec hl
 251+ 1065 CB 16            rl (hl)
 252+ 1067 2B               dec hl
 253+ 1068 CB 16            rl (hl)
 254+ 106A C9               ret
 255+ 106B
 256+ 106B              show_hl_as_decimal_to_buffer:
 257+ 106B                  ; Routine adapted from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 258+ 106B 11 00 C0         ld de, filesize_buffer  ; We put the result here as a string
 259+ 106E 01 F0 D8     	ld	bc,-10000
 260+ 1071 CD 87 10     	call	show_hl_as_decimal_to_buffer1
 261+ 1074 01 18 FC     	ld	bc,-1000
 262+ 1077 CD 87 10     	call	show_hl_as_decimal_to_buffer1
 263+ 107A 01 9C FF     	ld	bc,-100
 264+ 107D CD 87 10     	call	show_hl_as_decimal_to_buffer1
 265+ 1080 0E F6        	ld	c,-10
 266+ 1082 CD 87 10     	call	show_hl_as_decimal_to_buffer1
 267+ 1085 0E FF        	ld	c,-1
 268+ 1087              show_hl_as_decimal_to_buffer1:
 269+ 1087 3E 2F            ld	a,'0'-1
 270+ 1089              show_hl_as_decimal_to_buffer2:
 271+ 1089 3C               inc	a
 272+ 108A 09           	add	hl,bc
 273+ 108B 38 FC        	jr	c,show_hl_as_decimal_to_buffer2
 274+ 108D ED 42        	sbc	hl,bc
 275+ 108F 12           	ld (de), a
 276+ 1090 13               inc de
 277+ 1091 C9           	ret
 278+ 1092
# file closed: filesize.asm
 932  1092                  include "monitor.asm"
# file opened: monitor.asm
   1+ 1092              ; monitor.asm
   2+ 1092              ; The low-level monitor
   3+ 1092
   4+ 1092              monitor_start:
   5+ 1092 CD 79 14         call monitor_init
   6+ 1095
   7+ 1095              monitor_restart:
   8+ 1095 CD D7 1A     	call clear_screen
   9+ 1098 CD 84 12     	call show_welcome_message
  10+ 109B
  11+ 109B              	; If there is an auto-run-character defined, use that instead of a key press.
  12+ 109B 3A FF 8F     	ld a, (auto_run_char)
  13+ 109E FE 00        	cp 0
  14+ 10A0 20 08        	jr nz, monitor_loop2
  15+ 10A2
  16+ 10A2              monitor_loop:
  17+ 10A2 3E 3E        	ld a, '>'
  18+ 10A4 CD 2C 07     	call print_a
  19+ 10A7              monitor_loop1:
  20+ 10A7 CD 6A 07     	call char_in			; get a char from keyboard
  21+ 10AA              monitor_loop2:
  22+ 10AA FE 00        	cp 0					; If it's null, ignore it
  23+ 10AC 28 F9        	jr z,monitor_loop1
  24+ 10AE FE 30        	cp '0'					; '0' = go to page 0
  25+ 10B0 20 06        	jr nz,not0
  26+ 10B2 CD C7 17     	call goto_page_0
  27+ 10B5 C3 A2 10     	jp monitor_loop
  28+ 10B8              not0:
  29+ 10B8 FE 75        	cp 'u'					; User light toggle
  30+ 10BA 20 1D        	jr nz,notu
  31+ 10BC CD D4 07     	call message
  32+ 10BF 55 73 65 72  	db 'User LED toggled!',13,10,0
  32+ 10C3 20 4C 45 44
  32+ 10C7 20 74 6F 67
  32+ 10CB 67 6C 65 64
  32+ 10CF 21 0D 0A 00
  33+ 10D3 CD B3 07     	call user_toggle
  34+ 10D6 C3 A2 10     	jp monitor_loop
  35+ 10D9              notu:
  36+ 10D9 FE 33        	cp '3'					; ROM light on
  37+ 10DB 20 1F        	jr nz,not3
  38+ 10DD CD D4 07     	call message
  39+ 10E0 52 4F 4D 20  	db 'ROM light is now ON',13,10,0
  39+ 10E4 6C 69 67 68
  39+ 10E8 74 20 69 73
  39+ 10EC 20 6E 6F 77
  39+ 10F0 20 4F 4E 0D
  39+ 10F4 0A 00
  40+ 10F6 CD C6 07     	call rom_on
  41+ 10F9 C3 A2 10     	jp monitor_loop
  42+ 10FC              not3:
  43+ 10FC FE 34        	cp '4'					; ROM light off
  44+ 10FE 20 20        	jr nz,not4
  45+ 1100 CD D4 07     	call message
  46+ 1103 52 4F 4D 20  	db 'ROM light is now OFF',13,10,0
  46+ 1107 6C 69 67 68
  46+ 110B 74 20 69 73
  46+ 110F 20 6E 6F 77
  46+ 1113 20 4F 46 46
  46+ 1117 0D 0A 00
  47+ 111A CD CD 07     	call rom_off
  48+ 111D C3 A2 10     	jp monitor_loop
  49+ 1120              not4:
  50+ 1120 FE 64        	cp 'd'					; Disk LED toggle
  51+ 1122 20 1D        	jr nz,not5
  52+ 1124 CD D4 07     	call message
  53+ 1127 44 49 53 4B  	db 'DISK LED toggled!',13,10,0
  53+ 112B 20 4C 45 44
  53+ 112F 20 74 6F 67
  53+ 1133 67 6C 65 64
  53+ 1137 21 0D 0A 00
  54+ 113B CD 98 07     	call disk_toggle
  55+ 113E C3 A2 10     	jp monitor_loop
  56+ 1141              not5:
  57+ 1141 FE 35        	cp '5'					; ROM light off
  58+ 1143 20 19        	jr nz,notd
  59+ 1145 CD D4 07     	call message
  60+ 1148 52 41 4D 20  	db 'RAM copied...',13,10,0
  60+ 114C 63 6F 70 69
  60+ 1150 65 64 2E 2E
  60+ 1154 2E 0D 0A 00
  61+ 1158 CD A4 14     	call copy_ram
  62+ 115B C3 A2 10     	jp monitor_loop
  63+ 115E              notd:
  64+ 115E FE 68        	cp 'h'					; Higher page
  65+ 1160 20 0D        	jr nz,not66
  66+ 1162 3A 64 EA     	ld a,(current_page)
  67+ 1165 3C           	inc a
  68+ 1166 32 64 EA     	ld (current_page),a
  69+ 1169 CD E3 1A     	call show_page
  70+ 116C C3 A2 10     	jp monitor_loop
  71+ 116F              not66:
  72+ 116F FE 36        	cp '6'					; Higher page
  73+ 1171 20 0B        	jr nz,noth
  74+ 1173 3E 80        	ld a, 0x80
  75+ 1175 32 64 EA     	ld (current_page),a
  76+ 1178 CD E3 1A     	call show_page
  77+ 117B C3 A2 10     	jp monitor_loop
  78+ 117E              noth:
  79+ 117E FE 6C        	cp 'l'					; Lower page
  80+ 1180 20 0D        	jr nz,notl
  81+ 1182 3A 64 EA     	ld a,(current_page)
  82+ 1185 3D           	dec a
  83+ 1186 32 64 EA     	ld (current_page),a
  84+ 1189 CD E3 1A     	call show_page
  85+ 118C C3 A2 10     	jp monitor_loop
  86+ 118F              notl:
  87+ 118F FE 6D        	cp 'm'					; Memory map
  88+ 1191 20 06        	jr nz,notm
  89+ 1193 CD C3 14     	call show_memory_map
  90+ 1196 C3 A2 10     	jp monitor_loop
  91+ 1199
  92+ 1199              notm:
  93+ 1199 FE 2F        	cp '/'					; Show Menu
  94+ 119B 20 09        	jr nz,not_slash
  95+ 119D CD D7 1A     	call clear_screen
  96+ 11A0 CD 84 12     	call show_welcome_message
  97+ 11A3 C3 A2 10     	jp monitor_loop
  98+ 11A6
  99+ 11A6              not_slash:
 100+ 11A6 FE 36        	cp '6'					; Test Uart
 101+ 11A8 20 0F        	jr nz,not6
 102+ 11AA CD D7 1A     	call clear_screen
 103+ 11AD CD 71 1B     	call test_uart
 104+ 11B0 CD D7 1A     	call clear_screen
 105+ 11B3 CD 84 12     	call show_welcome_message
 106+ 11B6 C3 A2 10     	jp monitor_loop
 107+ 11B9
 108+ 11B9              not6:
 109+ 11B9 FE 23        	cp '#'					; HALT
 110+ 11BB 20 3C        	jr nz,not_hash
 111+ 11BD CD D4 07     	call message
 112+ 11C0 48 41 4C 54  	db 'HALTing Z80. You will need to press Reset after this!',13,10,0
 112+ 11C4 69 6E 67 20
 112+ 11C8 5A 38 30 2E
 112+ 11CC 20 59 6F 75
 112+ 11D0 20 77 69 6C
 112+ 11D4 6C 20 6E 65
 112+ 11D8 65 64 20 74
 112+ 11DC 6F 20 70 72
 112+ 11E0 65 73 73 20
 112+ 11E4 52 65 73 65
 112+ 11E8 74 20 61 66
 112+ 11EC 74 65 72 20
 112+ 11F0 74 68 69 73
 112+ 11F4 21 0D 0A 00
 113+ 11F8 76           	halt
 114+ 11F9
 115+ 11F9              not_hash:
 116+ 11F9 FE 63        	cp 'c'					; CP/M
 117+ 11FB 20 56        	jr nz, not_c
 118+ 11FD CD D4 07         call message
 119+ 1200 53 74 61 72      db 'Starting CP/M... Make sure you have selected MSX proper slot memory decoder".',13,10,0
 119+ 1204 74 69 6E 67
 119+ 1208 20 43 50 2F
 119+ 120C 4D 2E 2E 2E
 119+ 1210 20 4D 61 6B
 119+ 1214 65 20 73 75
 119+ 1218 72 65 20 79
 119+ 121C 6F 75 20 68
 119+ 1220 61 76 65 20
 119+ 1224 73 65 6C 65
 119+ 1228 63 74 65 64
 119+ 122C 20 4D 53 58
 119+ 1230 20 70 72 6F
 119+ 1234 70 65 72 20
 119+ 1238 73 6C 6F 74
 119+ 123C 20 6D 65 6D
 119+ 1240 6F 72 79 20
 119+ 1244 64 65 63 6F
 119+ 1248 64 65 72 22
 119+ 124C 2E 0D 0A 00
 120+ 1250 C3 BD 01         jp start_cpm
 121+ 1253
 122+ 1253              not_c:
 123+ 1253 FE 74        	cp 't'					; Tiny Basic
 124+ 1255 20 09        	jr nz, not_t
 125+ 1257 CD E0 0A         call check_tbasic_structure
 126+ 125A CD 32 25         call TBSTART
 127+ 125D C3 95 10     	jp monitor_restart
 128+ 1260
 129+ 1260              not_t:
 130+ 1260 FE 67        	cp 'g'					; Game-of-Life
 131+ 1262 20 06        	jr nz, not_g
 132+ 1264 CD 4C 31         call GOFL_Begin
 133+ 1267 C3 95 10     	jp monitor_restart
 134+ 126A
 135+ 126A              not_g:
 136+ 126A FE 62        	cp 'b'					; Burn-in test
 137+ 126C 20 06        	jr nz, not_b
 138+ 126E CD D3 17         call burn_in
 139+ 1271 C3 95 10     	jp monitor_restart
 140+ 1274
 141+ 1274              not_b:
 142+ 1274 FE 6A        	cp 'j'					; Load jupiter.bin
 143+ 1276 20 03        	jr nz, unknown_char
 144+ 1278 C3 4A 24         jp load_jupiter_ace
 145+ 127B
 146+ 127B              unknown_char:
 147+ 127B CD 2C 07     	call print_a			; If we don't understand it, show it!
 148+ 127E CD 59 07     	call newline
 149+ 1281 C3 A2 10     	jp monitor_loop
 150+ 1284
 151+ 1284              show_welcome_message:
 152+ 1284 CD D4 07     	call message
 153+ 1287 0D 0A        	db 13,10
 154+ 1289 1B 5B 34 32  	db 27,'[42m','+------------------+',13,10
 154+ 128D 6D 2B 2D 2D
 154+ 1291 2D 2D 2D 2D
 154+ 1295 2D 2D 2D 2D
 154+ 1299 2D 2D 2D 2D
 154+ 129D 2D 2D 2D 2D
 154+ 12A1 2B 0D 0A
 155+ 12A4 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 155+ 12A8 6D 7C 1B 5B
 155+ 12AC 34 30 6D 20
 155+ 12B0 20 20 20 20
 155+ 12B4 20 20 20 20
 155+ 12B8 20 20 20 20
 155+ 12BC 20 20 20 20
 155+ 12C0 20 1B 5B 34
 155+ 12C4 32 6D 7C 0D
 155+ 12C8 0A
 156+ 12C9 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','  Z80 Playground  ',27,'[42m','|',13,10
 156+ 12CD 6D 7C 1B 5B
 156+ 12D1 34 30 6D 20
 156+ 12D5 20 5A 38 30
 156+ 12D9 20 50 6C 61
 156+ 12DD 79 67 72 6F
 156+ 12E1 75 6E 64 20
 156+ 12E5 20 1B 5B 34
 156+ 12E9 32 6D 7C 0D
 156+ 12ED 0A
 157+ 12EE 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 157+ 12F2 6D 7C 1B 5B
 157+ 12F6 34 30 6D 20
 157+ 12FA 20 20 20 20
 157+ 12FE 20 20 20 20
 157+ 1302 20 20 20 20
 157+ 1306 20 20 20 20
 157+ 130A 20 1B 5B 34
 157+ 130E 32 6D 7C 0D
 157+ 1312 0A
 158+ 1313 1B 5B 34 32  	db 27,'[42m','+------------------+',27,'[40m',13,10,13,10
 158+ 1317 6D 2B 2D 2D
 158+ 131B 2D 2D 2D 2D
 158+ 131F 2D 2D 2D 2D
 158+ 1323 2D 2D 2D 2D
 158+ 1327 2D 2D 2D 2D
 158+ 132B 2B 1B 5B 34
 158+ 132F 30 6D 0D 0A
 158+ 1333 0D 0A
 159+ 1335 4D 6F 6E 69  	db 'Monitor v1.05 February 2021',13,10,13,10
 159+ 1339 74 6F 72 20
 159+ 133D 76 31 2E 30
 159+ 1341 35 20 46 65
 159+ 1345 62 72 75 61
 159+ 1349 72 79 20 32
 159+ 134D 30 32 31 0D
 159+ 1351 0A 0D 0A
 160+ 1354 63 20 3D 20  	db 'c = CP/M', 13, 10
 160+ 1358 43 50 2F 4D
 160+ 135C 0D 0A
 161+ 135E 74 20 3D 20  	db 't = Tiny Basic',13,10
 161+ 1362 54 69 6E 79
 161+ 1366 20 42 61 73
 161+ 136A 69 63 0D 0A
 162+ 136E 67 20 3D 20  	db 'g = Game-of-Life',13,10
 162+ 1372 47 61 6D 65
 162+ 1376 2D 6F 66 2D
 162+ 137A 4C 69 66 65
 162+ 137E 0D 0A
 163+ 1380 6D 20 3D 20  	db 'm = Memory Map', 13, 10
 163+ 1384 4D 65 6D 6F
 163+ 1388 72 79 20 4D
 163+ 138C 61 70 0D 0A
 164+ 1390 30 20 3D 20  	db '0 = Show Page 0 of Memory', 13, 10
 164+ 1394 53 68 6F 77
 164+ 1398 20 50 61 67
 164+ 139C 65 20 30 20
 164+ 13A0 6F 66 20 4D
 164+ 13A4 65 6D 6F 72
 164+ 13A8 79 0D 0A
 165+ 13AB 68 20 3D 20  	db 'h = Move to Higher Page', 13, 10
 165+ 13AF 4D 6F 76 65
 165+ 13B3 20 74 6F 20
 165+ 13B7 48 69 67 68
 165+ 13BB 65 72 20 50
 165+ 13BF 61 67 65 0D
 165+ 13C3 0A
 166+ 13C4 6C 20 3D 20  	db 'l = Move to Lower Page', 13, 10
 166+ 13C8 4D 6F 76 65
 166+ 13CC 20 74 6F 20
 166+ 13D0 4C 6F 77 65
 166+ 13D4 72 20 50 61
 166+ 13D8 67 65 0D 0A
 167+ 13DC 75 20 3D 20  	db 'u = User LED toggle', 13, 10
 167+ 13E0 55 73 65 72
 167+ 13E4 20 4C 45 44
 167+ 13E8 20 74 6F 67
 167+ 13EC 67 6C 65 0D
 167+ 13F0 0A
 168+ 13F1 33 20 3D 20  	db '3 = ROM ON', 13, 10
 168+ 13F5 52 4F 4D 20
 168+ 13F9 4F 4E 0D 0A
 169+ 13FD 34 20 3D 20  	db '4 = ROM OFF', 13, 10
 169+ 1401 52 4F 4D 20
 169+ 1405 4F 46 46 0D
 169+ 1409 0A
 170+ 140A 35 20 3D 20  	db '5 = Copy ram', 13, 10
 170+ 140E 43 6F 70 79
 170+ 1412 20 72 61 6D
 170+ 1416 0D 0A
 171+ 1418 64 20 3D 20  	db 'd = Disk LED toggle', 13, 10
 171+ 141C 44 69 73 6B
 171+ 1420 20 4C 45 44
 171+ 1424 20 74 6F 67
 171+ 1428 67 6C 65 0D
 171+ 142C 0A
 172+ 142D 23 20 3D 20  	db '# = Execute HALT instruction',13,10
 172+ 1431 45 78 65 63
 172+ 1435 75 74 65 20
 172+ 1439 48 41 4C 54
 172+ 143D 20 69 6E 73
 172+ 1441 74 72 75 63
 172+ 1445 74 69 6F 6E
 172+ 1449 0D 0A
 173+ 144B 62 20 3D 20  	db 'b = Run burn-in test',13,10
 173+ 144F 52 75 6E 20
 173+ 1453 62 75 72 6E
 173+ 1457 2D 69 6E 20
 173+ 145B 74 65 73 74
 173+ 145F 0D 0A
 174+ 1461 2F 20 3D 20  	db '/ = Show this Menu',13,10
 174+ 1465 53 68 6F 77
 174+ 1469 20 74 68 69
 174+ 146D 73 20 4D 65
 174+ 1471 6E 75 0D 0A
 175+ 1475              	;db 'j = Poor-Man''s Jupiter Ace',13,10
 176+ 1475 0D 0A 00     	db 13,10,0
 177+ 1478 C9           	ret
 178+ 1479
 179+ 1479              monitor_init:
 180+ 1479                  ; Four flashes on the USER (blue) LED and disk (yellow) LED
 181+ 1479 06 04            ld b, 4
 182+ 147B              monitor_init1:
 183+ 147B C5               push bc
 184+ 147C CD B9 07     	call user_off
 185+ 147F CD A5 07     	call disk_on
 186+ 1482 CD 89 07     	call medium_pause
 187+ 1485 CD AC 07     	call user_on
 188+ 1488 CD 9E 07     	call disk_off
 189+ 148B CD 89 07     	call medium_pause
 190+ 148E C1               pop bc
 191+ 148F 10 EA            djnz monitor_init1
 192+ 1491 CD B9 07     	call user_off
 193+ 1494
 194+ 1494 CD 98 14         call ram_fill
 195+ 1497 C9               ret
 196+ 1498
 197+ 1498              ram_fill:
 198+ 1498                  ; Copy the first 16k of ROM down to ram
 199+ 1498 21 00 00     	ld hl,0
 200+ 149B 11 00 00     	ld de,0
 201+ 149E 01 00 40     	ld bc, 1024*16
 202+ 14A1 ED B0        	ldir
 203+ 14A3 C9               ret
 204+ 14A4
 205+ 14A4              copy_ram:
 206+ 14A4                  ; Copy the first 16k of ROM down to ram
 207+ 14A4 21 00 00     	ld hl,0
 208+ 14A7 11 00 80     	ld de,	0x8000
 209+ 14AA 01 00 40     	ld bc,	1024*16
 210+ 14AD ED B0        	ldir
 211+ 14AF C9               ret
 212+ 14B0
 213+ 14B0              ;--------------------------------------------------------------------------------------------------
 214+ 14B0
 215+ 14B0              	; If this memory crosses a 1K memory boundary there is the danger
 216+ 14B0              	; that the memory testing will corrupt the code that is running.
 217+ 14B0              	; If memory map crashes, this is why.
 218+ 14B0              	; TODO: Relocate this code to a safe location, such as 1024.
 219+ 14B0
 220+ 14B0 44 41 4E 47  	db 'DANGER AREA STARTS '
 220+ 14B4 45 52 20 41
 220+ 14B8 52 45 41 20
 220+ 14BC 53 54 41 52
 220+ 14C0 54 53 20
 221+ 14C3
 222+ 14C3              show_memory_map:
 223+ 14C3              	; Look at the first byte of each 1K block.
 224+ 14C3              	; If it is ROM show one char, if RAM show another.
 225+ 14C3 CD D7 1A     	call clear_screen
 226+ 14C6 CD 59 07     	call newline
 227+ 14C9 11 00 00     	ld de,0
 228+ 14CC 06 40        	ld b,64
 229+ 14CE
 230+ 14CE              map_loop:
 231+ 14CE C5           	push bc
 232+ 14CF
 233+ 14CF 1A           	ld a,(de)			; get initial value
 234+ 14D0 47           	ld b,a
 235+ 14D1
 236+ 14D1 3E 00        	ld a,0
 237+ 14D3 12           	ld (de),a			; see if a 0 stores
 238+ 14D4 1A           	ld a,(de)
 239+ 14D5 FE 00        	cp 0
 240+ 14D7 20 10        	jr nz,rom_location
 241+ 14D9
 242+ 14D9 3E FF        	ld a,255
 243+ 14DB 12           	ld (de),a			; see if a 255 stores
 244+ 14DC 1A           	ld a,(de)
 245+ 14DD FE FF        	cp 255
 246+ 14DF 20 08        	jr nz,rom_location
 247+ 14E1
 248+ 14E1              ram_location:
 249+ 14E1 CD D4 07     	call message
 250+ 14E4 20 00        	db ' ',0
 251+ 14E6 C3 F7 14     	jp shown_location
 252+ 14E9              rom_location:
 253+ 14E9 CD D4 07     	call message
 254+ 14EC 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',0
 254+ 14F0 6D 52 1B 5B
 254+ 14F4 30 6D 00
 255+ 14F7              shown_location:
 256+ 14F7
 257+ 14F7 78           	ld a,b				; restore initial value
 258+ 14F8 12           	ld (de),a
 259+ 14F9
 260+ 14F9 C1           	pop bc
 261+ 14FA 21 00 04     	ld hl, 1024
 262+ 14FD 19           	add hl,de
 263+ 14FE EB           	ex de,hl
 264+ 14FF 10 CD        	djnz map_loop
 265+ 1501
 266+ 1501 CD 59 07     	call newline
 267+ 1504              	; Now show a row all of ram
 268+ 1504 06 40        	ld b, 64
 269+ 1506              ram_loop:
 270+ 1506 C5           	push bc
 271+ 1507 CD D4 07     	call message
 272+ 150A 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',0
 272+ 150E 6D 72 1B 5B
 272+ 1512 30 6D 00
 273+ 1515 C1           	pop bc
 274+ 1516 10 EE        	djnz ram_loop
 275+ 1518
 276+ 1518 CD 59 07     	call newline
 277+ 151B CD D4 07     	call message
 278+ 151E 7C 20 20 20  	db '|       |       |       |       |       |       |       |      |',13,10
 278+ 1522 20 20 20 20
 278+ 1526 7C 20 20 20
 278+ 152A 20 20 20 20
 278+ 152E 7C 20 20 20
 278+ 1532 20 20 20 20
 278+ 1536 7C 20 20 20
 278+ 153A 20 20 20 20
 278+ 153E 7C 20 20 20
 278+ 1542 20 20 20 20
 278+ 1546 7C 20 20 20
 278+ 154A 20 20 20 20
 278+ 154E 7C 20 20 20
 278+ 1552 20 20 20 20
 278+ 1556 7C 20 20 20
 278+ 155A 20 20 20 7C
 278+ 155E 0D 0A
 279+ 1560 30 30 30 30  	db '0000    2000    4000    6000    8000    A000    C000    E000   FFFF',13,10
 279+ 1564 20 20 20 20
 279+ 1568 32 30 30 30
 279+ 156C 20 20 20 20
 279+ 1570 34 30 30 30
 279+ 1574 20 20 20 20
 279+ 1578 36 30 30 30
 279+ 157C 20 20 20 20
 279+ 1580 38 30 30 30
 279+ 1584 20 20 20 20
 279+ 1588 41 30 30 30
 279+ 158C 20 20 20 20
 279+ 1590 43 30 30 30
 279+ 1594 20 20 20 20
 279+ 1598 45 30 30 30
 279+ 159C 20 20 20 46
 279+ 15A0 46 46 46 0D
 279+ 15A4 0A
 280+ 15A5 30 4B 20 20  	db '0K      8K      16K     24K     32K     40K     48K     56K    64K',13,10,13,10
 280+ 15A9 20 20 20 20
 280+ 15AD 38 4B 20 20
 280+ 15B1 20 20 20 20
 280+ 15B5 31 36 4B 20
 280+ 15B9 20 20 20 20
 280+ 15BD 32 34 4B 20
 280+ 15C1 20 20 20 20
 280+ 15C5 33 32 4B 20
 280+ 15C9 20 20 20 20
 280+ 15CD 34 30 4B 20
 280+ 15D1 20 20 20 20
 280+ 15D5 34 38 4B 20
 280+ 15D9 20 20 20 20
 280+ 15DD 35 36 4B 20
 280+ 15E1 20 20 20 36
 280+ 15E5 34 4B 0D 0A
 280+ 15E9 0D 0A
 281+ 15EB 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',' = ROM    '
 281+ 15EF 6D 52 1B 5B
 281+ 15F3 30 6D 20 3D
 281+ 15F7 20 52 4F 4D
 281+ 15FB 20 20 20 20
 282+ 15FF 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',' = RAM',13,10
 282+ 1603 6D 72 1B 5B
 282+ 1607 30 6D 20 3D
 282+ 160B 20 52 41 4D
 282+ 160F 0D 0A
 283+ 1611 0D 0A            db 13,10
 284+ 1613 31 36 43 35  	db '16C550C UART Ports     CH376S Module Ports',13,10
 284+ 1617 35 30 43 20
 284+ 161B 55 41 52 54
 284+ 161F 20 50 6F 72
 284+ 1623 74 73 20 20
 284+ 1627 20 20 20 43
 284+ 162B 48 33 37 36
 284+ 162F 53 20 4D 6F
 284+ 1633 64 75 6C 65
 284+ 1637 20 50 6F 72
 284+ 163B 74 73 0D 0A
 285+ 163F 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 285+ 1643 2D 2D 2D 2D
 285+ 1647 2D 2D 2D 2D
 285+ 164B 2D 2D 2D 2D
 285+ 164F 2D 2D 2D 20
 285+ 1653 20 20 20 2D
 285+ 1657 2D 2D 2D 2D
 285+ 165B 2D 2D 2D 2D
 285+ 165F 2D 2D 2D 2D
 285+ 1663 2D 2D 2D 2D
 285+ 1667 2D 2D 0D 0A
 286+ 166B 54 58 20 2F  	db 'TX / RX           8    Data Port        16',13,10
 286+ 166F 20 52 58 20
 286+ 1673 20 20 20 20
 286+ 1677 20 20 20 20
 286+ 167B 20 20 38 20
 286+ 167F 20 20 20 44
 286+ 1683 61 74 61 20
 286+ 1687 50 6F 72 74
 286+ 168B 20 20 20 20
 286+ 168F 20 20 20 20
 286+ 1693 31 36 0D 0A
 287+ 1697 49 6E 74 65  	db 'Interrupt Enable  9    Command Port     17',13,10
 287+ 169B 72 72 75 70
 287+ 169F 74 20 45 6E
 287+ 16A3 61 62 6C 65
 287+ 16A7 20 20 39 20
 287+ 16AB 20 20 20 43
 287+ 16AF 6F 6D 6D 61
 287+ 16B3 6E 64 20 50
 287+ 16B7 6F 72 74 20
 287+ 16BB 20 20 20 20
 287+ 16BF 31 37 0D 0A
 288+ 16C3 49 6E 74 65  	db 'Interrup Status  10',13,10
 288+ 16C7 72 72 75 70
 288+ 16CB 20 53 74 61
 288+ 16CF 74 75 73 20
 288+ 16D3 20 31 30 0D
 288+ 16D7 0A
 289+ 16D8 4C 69 6E 65  	db 'Line Control     11',13,10
 289+ 16DC 20 43 6F 6E
 289+ 16E0 74 72 6F 6C
 289+ 16E4 20 20 20 20
 289+ 16E8 20 31 31 0D
 289+ 16EC 0A
 290+ 16ED 4D 6F 64 65  	db 'Modem Control    12 <---- 76543210',13,10
 290+ 16F1 6D 20 43 6F
 290+ 16F5 6E 74 72 6F
 290+ 16F9 6C 20 20 20
 290+ 16FD 20 31 32 20
 290+ 1701 3C 2D 2D 2D
 290+ 1705 2D 20 37 36
 290+ 1709 35 34 33 32
 290+ 170D 31 30 0D 0A
 291+ 1711 4C 69 6E 65  	db 'Line Status      13      Bit 0 = User LED',13,10
 291+ 1715 20 53 74 61
 291+ 1719 74 75 73 20
 291+ 171D 20 20 20 20
 291+ 1721 20 31 33 20
 291+ 1725 20 20 20 20
 291+ 1729 20 42 69 74
 291+ 172D 20 30 20 3D
 291+ 1731 20 55 73 65
 291+ 1735 72 20 4C 45
 291+ 1739 44 0D 0A
 292+ 173C 4D 6F 64 65  	db 'Modem Status     14      Bit 2 = Disk LED',13,10
 292+ 1740 6D 20 53 74
 292+ 1744 61 74 75 73
 292+ 1748 20 20 20 20
 292+ 174C 20 31 34 20
 292+ 1750 20 20 20 20
 292+ 1754 20 42 69 74
 292+ 1758 20 32 20 3D
 292+ 175C 20 44 69 73
 292+ 1760 6B 20 4C 45
 292+ 1764 44 0D 0A
 293+ 1767 53 63 72 61  	db 'Scratch          15      Bit 3 = ROM Enable',13,10
 293+ 176B 74 63 68 20
 293+ 176F 20 20 20 20
 293+ 1773 20 20 20 20
 293+ 1777 20 31 35 20
 293+ 177B 20 20 20 20
 293+ 177F 20 42 69 74
 293+ 1783 20 33 20 3D
 293+ 1787 20 52 4F 4D
 293+ 178B 20 45 6E 61
 293+ 178F 62 6C 65 0D
 293+ 1793 0A
 294+ 1794 0D 0A        	db 13,10
 295+ 1796 54 68 65 20  	db 'The EEPROM is an ATMEL AT28C256',13,10
 295+ 179A 45 45 50 52
 295+ 179E 4F 4D 20 69
 295+ 17A2 73 20 61 6E
 295+ 17A6 20 41 54 4D
 295+ 17AA 45 4C 20 41
 295+ 17AE 54 32 38 43
 295+ 17B2 32 35 36 0D
 295+ 17B6 0A
 296+ 17B7 0D 0A 00     	db 13,10,0
 297+ 17BA C9           	ret
 298+ 17BB
 299+ 17BB 44 41 4E 47  	db 'DANGER ENDS '
 299+ 17BF 45 52 20 45
 299+ 17C3 4E 44 53 20
 300+ 17C7
 301+ 17C7              ; -------------------------------------------------------------------------------------------------
 302+ 17C7              goto_page_0:
 303+ 17C7
 304+ 17C7 3E 00        	ld a, 0x0
 305+ 17C9 32 64 EA     	ld (current_page), a
 306+ 17CC CD 59 07     	call newline
 307+ 17CF CD E3 1A     	call show_page
 308+ 17D2 C9           	ret
 309+ 17D3
 310+ 17D3              ; -------------------------------------------------------------------------------------------------
 311+ 17D3
 312+ 17D3              ; This is the BURN-IN test.
 313+ 17D3              ; I use it on new Z80 Playground boards that I have assemmbled, to check them.
 314+ 17D3              ; It runs for about an hour, reads and writes files to the USB Drive,
 315+ 17D3              ; flashes the LEDs, prints things to the screen etc.
 316+ 17D3              ; The idea is that if it is still running after an hour, the board is good.
 317+ 17D3              burn_x equ 39000
 318+ 17D3              burn_y equ 39001
 319+ 17D3              burn_in_dump_area equ 39002
 320+ 17D3
 321+ 17D3              burn_in:
 322+ 17D3 CD CD 07     	call rom_off					; Needs to be off for ram-test to work
 323+ 17D6 CD B3 07     	call user_toggle
 324+ 17D9 CD D7 1A     	call clear_screen
 325+ 17DC CD D4 07     	call message
 326+ 17DF 53 74 61 72  	db 'Starting BURN-IN test. This takes about 30 minutes.',13,10,0
 326+ 17E3 74 69 6E 67
 326+ 17E7 20 42 55 52
 326+ 17EB 4E 2D 49 4E
 326+ 17EF 20 74 65 73
 326+ 17F3 74 2E 20 54
 326+ 17F7 68 69 73 20
 326+ 17FB 74 61 6B 65
 326+ 17FF 73 20 61 62
 326+ 1803 6F 75 74 20
 326+ 1807 33 30 20 6D
 326+ 180B 69 6E 75 74
 326+ 180F 65 73 2E 0D
 326+ 1813 0A 00
 327+ 1815
 328+ 1815              	; Draw empty box
 329+ 1815
 330+ 1815 3E 01        	ld a, 1
 331+ 1817 32 59 98     	ld (burn_y), a
 332+ 181A              draw_loop_y:
 333+ 181A CD 64 07     	call space
 334+ 181D 06 23        	ld b, 35
 335+ 181F              draw_loop_x:
 336+ 181F 3E B2        	ld a, 178
 337+ 1821 CD 2C 07     	call print_a
 338+ 1824 10 F9        	djnz draw_loop_x
 339+ 1826
 340+ 1826 CD 59 07     	call newline
 341+ 1829
 342+ 1829 3A 59 98     	ld a, (burn_y)
 343+ 182C 3C           	inc a
 344+ 182D 32 59 98     	ld (burn_y), a
 345+ 1830 FE 14        	cp 20
 346+ 1832 38 E6        	jr c, draw_loop_y
 347+ 1834
 348+ 1834              	; Now main burn in loop
 349+ 1834
 350+ 1834 3E 00        	ld a, 0
 351+ 1836 32 59 98     	ld (burn_y), a
 352+ 1839              burn_in_loop_y:
 353+ 1839 3E 00        	ld a, 0
 354+ 183B 32 58 98     	ld (burn_x), a
 355+ 183E              burn_in_loop_x:
 356+ 183E CD 9F 18     	call full_ram_test
 357+ 1841 C2 A7 19     	jp nz, burn_in_ram_error
 358+ 1844 CD B7 18     	call one_minute_burn_in
 359+ 1847 3A 58 98     	ld a, (burn_x)
 360+ 184A 3C           	inc a
 361+ 184B 32 58 98     	ld (burn_x), a
 362+ 184E FE 20        	cp 32
 363+ 1850 20 EC        	jr nz, burn_in_loop_x
 364+ 1852 3A 59 98     	ld a, (burn_y)
 365+ 1855 3C           	inc a
 366+ 1856 32 59 98     	ld (burn_y), a
 367+ 1859 FE 10        	cp 16
 368+ 185B 20 DC        	jr nz, burn_in_loop_y
 369+ 185D
 370+ 185D CD 59 07     	call newline
 371+ 1860 CD D4 07     	call message
 372+ 1863 0D 0A 59 41  	db 13,10,'YAY! All tests pass! Press a key to continue...',13,10,0
 372+ 1867 59 21 20 41
 372+ 186B 6C 6C 20 74
 372+ 186F 65 73 74 73
 372+ 1873 20 70 61 73
 372+ 1877 73 21 20 50
 372+ 187B 72 65 73 73
 372+ 187F 20 61 20 6B
 372+ 1883 65 79 20 74
 372+ 1887 6F 20 63 6F
 372+ 188B 6E 74 69 6E
 372+ 188F 75 65 2E 2E
 372+ 1893 2E 0D 0A 00
 373+ 1897              burn_in_wait:
 374+ 1897 CD 6A 07     	call char_in			; get a char from keyboard
 375+ 189A FE 00        	cp 0					; If it's null, ignore it
 376+ 189C 28 F9        	jr z,burn_in_wait
 377+ 189E C9           	ret
 378+ 189F
 379+ 189F              full_ram_test:
 380+ 189F              	; Tests all of ram.
 381+ 189F              	; Returns Z set if success.
 382+ 189F 21 FF FF     	ld hl, $FFFF
 383+ 18A2              full_ram_test1:
 384+ 18A2 46           	ld b, (hl)
 385+ 18A3
 386+ 18A3 36 55        	ld (hl), %01010101
 387+ 18A5 7E           	ld a, (hl)
 388+ 18A6 FE 55        	cp %01010101
 389+ 18A8 C0           	ret nz
 390+ 18A9
 391+ 18A9 36 AA        	ld (hl), %10101010
 392+ 18AB 7E           	ld a, (hl)
 393+ 18AC FE AA        	cp %10101010
 394+ 18AE C0           	ret nz
 395+ 18AF
 396+ 18AF 70           	ld (hl), b
 397+ 18B0 2B           	dec hl
 398+ 18B1 7C           	ld a, h
 399+ 18B2 B5           	or l
 400+ 18B3 20 ED        	jr nz, full_ram_test1
 401+ 18B5 BF               cp a                                ; set zero flag for success
 402+ 18B6 C9           	ret
 403+ 18B7
 404+ 18B7              one_minute_burn_in:
 405+ 18B7              	; set cursor position
 406+ 18B7 3E 1B            ld a, ESC
 407+ 18B9 CD 2C 07         call print_a
 408+ 18BC 3E 5B            ld a, '['
 409+ 18BE CD 2C 07         call print_a
 410+ 18C1 3A 59 98         ld a, (burn_y)
 411+ 18C4 C6 03        	add a, 3
 412+ 18C6 CD AE 1A         call print_a_as_decimal
 413+ 18C9 3E 3B            ld a, ';'
 414+ 18CB CD 2C 07         call print_a
 415+ 18CE 3A 58 98         ld a, (burn_x)
 416+ 18D1 C6 03        	add a, 3
 417+ 18D3 CD AE 1A         call print_a_as_decimal
 418+ 18D6 3E 48            ld a, 'H'
 419+ 18D8 CD 2C 07         call print_a
 420+ 18DB
 421+ 18DB              	; set foreground colour
 422+ 18DB 3E 1B            ld a, ESC
 423+ 18DD CD 2C 07         call print_a
 424+ 18E0 3E 5B            ld a, '['
 425+ 18E2 CD 2C 07         call print_a
 426+ 18E5 3E 33            ld a, '3'
 427+ 18E7 CD 2C 07         call print_a
 428+ 18EA 3A 58 98         ld a, (burn_x)
 429+ 18ED CB 3F        	srl a
 430+ 18EF CB 3F        	srl a
 431+ 18F1 C6 30        	add a, '0'
 432+ 18F3 CD 2C 07         call print_a
 433+ 18F6 3E 6D            ld a, 'm'
 434+ 18F8 CD 2C 07         call print_a
 435+ 18FB
 436+ 18FB              	; set background colour
 437+ 18FB 3E 1B            ld a, ESC
 438+ 18FD CD 2C 07         call print_a
 439+ 1900 3E 5B            ld a, '['
 440+ 1902 CD 2C 07         call print_a
 441+ 1905 3E 34            ld a, '4'
 442+ 1907 CD 2C 07         call print_a
 443+ 190A 3A 59 98         ld a, (burn_y)
 444+ 190D CB 3F        	srl a
 445+ 190F CB 3F        	srl a
 446+ 1911 C6 30        	add a, '0'
 447+ 1913 CD 2C 07         call print_a
 448+ 1916 3E 6D            ld a, 'm'
 449+ 1918 CD 2C 07         call print_a
 450+ 191B
 451+ 191B 3E DD        	ld a, 221
 452+ 191D CD 2C 07     	call print_a
 453+ 1920
 454+ 1920              	; Normal colour again
 455+ 1920 3E 1B            ld a, ESC
 456+ 1922 CD 2C 07         call print_a
 457+ 1925 3E 5B            ld a, '['
 458+ 1927 CD 2C 07         call print_a
 459+ 192A 3E 30            ld a, '0'
 460+ 192C CD 2C 07         call print_a
 461+ 192F 3E 6D            ld a, 'm'
 462+ 1931 CD 2C 07         call print_a
 463+ 1934
 464+ 1934 CD 3D 1A     	call burn_in_write_file
 465+ 1937
 466+ 1937              burn_in_inner_loop:
 467+ 1937 CD B3 07     	call user_toggle
 468+ 193A CD 98 07     	call disk_toggle
 469+ 193D
 470+ 193D CD 44 19     	call burn_in_read_file
 471+ 1940
 472+ 1940 CD 0C 1A     	call burn_in_erase_file
 473+ 1943 C9           	ret
 474+ 1944
 475+ 1944              burn_in_read_file:
 476+ 1944              	; Read the file and check the content.
 477+ 1944              	; If not good, halt the processor.
 478+ 1944 21 EF 0E     	ld hl, ROOT_NAME
 479+ 1947 CD ED 0D     	call open_file
 480+ 194A 21 CC 1A     	ld hl, BURN_IN_NAME
 481+ 194D CD ED 0D     	call open_file
 482+ 1950
 483+ 1950 3E 3A        	ld a, BYTE_READ
 484+ 1952 CD 9D 0E     	call send_command_byte
 485+ 1955 3E FF        	ld a, 255                           ; Request all of the file
 486+ 1957 CD 81 0E     	call send_data_byte
 487+ 195A 3E FF        	ld a, 255                           ; Yes, all!
 488+ 195C CD 81 0E     	call send_data_byte
 489+ 195F
 490+ 195F 3E 22        	ld a, GET_STATUS
 491+ 1961 CD 9D 0E     	call send_command_byte
 492+ 1964 CD A6 0E     	call read_data_byte
 493+ 1967 21 5A 98     	ld hl, burn_in_dump_area
 494+ 196A              burn_in_load_loop1:
 495+ 196A FE 1D        	cp USB_INT_DISK_READ
 496+ 196C 20 25        	jr nz, burn_in_load_finished
 497+ 196E
 498+ 196E E5           	push hl
 499+ 196F CD A5 07     	call disk_on
 500+ 1972 3E 27        	ld a, RD_USB_DATA0
 501+ 1974 CD 9D 0E     	call send_command_byte
 502+ 1977 CD A6 0E     	call read_data_byte
 503+ 197A E1           	pop hl
 504+ 197B CD AF 0E     	call read_data_bytes_into_hl
 505+ 197E E5           	push hl
 506+ 197F CD 9E 07     	call disk_off
 507+ 1982 3E 3B        	ld a, BYTE_RD_GO
 508+ 1984 CD 9D 0E     	call send_command_byte
 509+ 1987 3E 22        	ld a, GET_STATUS
 510+ 1989 CD 9D 0E     	call send_command_byte
 511+ 198C CD A6 0E     	call read_data_byte
 512+ 198F E1           	pop hl
 513+ 1990 C3 6A 19     	jp burn_in_load_loop1
 514+ 1993              burn_in_load_finished:
 515+ 1993 CD 00 0E     	call close_file
 516+ 1996
 517+ 1996              	; Now compare file content with what we wrote there originally
 518+ 1996 11 00 90     	ld de, config_file_loc
 519+ 1999 21 5A 98     	ld hl, burn_in_dump_area
 520+ 199C 06 0A        	ld b, 10
 521+ 199E              burn_in_compare_loop:
 522+ 199E 1A           	ld a, (de)
 523+ 199F BE           	cp (hl)
 524+ 19A0 20 20        	jr nz, burn_in_compare_failed
 525+ 19A2 13           	inc de
 526+ 19A3 23           	inc hl
 527+ 19A4 10 F8        	djnz burn_in_compare_loop
 528+ 19A6 C9           	ret
 529+ 19A7
 530+ 19A7              burn_in_ram_error:
 531+ 19A7 CD D4 07     	call message
 532+ 19AA 52 41 4D 20  	db 'RAM error at ',0
 532+ 19AE 65 72 72 6F
 532+ 19B2 72 20 61 74
 532+ 19B6 20 00
 533+ 19B8 CD E9 07     	call show_hl_as_hex
 534+ 19BB CD D4 07     	call message
 535+ 19BE 0D 0A 00     	db 13,10,0
 536+ 19C1 76           	halt
 537+ 19C2
 538+ 19C2              burn_in_compare_failed:
 539+ 19C2 CD D4 07     	call message
 540+ 19C5 46 69 6C 65  	db 'Files were different!',13,10,0
 540+ 19C9 73 20 77 65
 540+ 19CD 72 65 20 64
 540+ 19D1 69 66 66 65
 540+ 19D5 72 65 6E 74
 540+ 19D9 21 0D 0A 00
 541+ 19DD CD D4 07     	call message
 542+ 19E0 45 78 70 65  	db 'Expected: ',0
 542+ 19E4 63 74 65 64
 542+ 19E8 3A 20 00
 543+ 19EB 21 00 90     	ld hl, config_file_loc
 544+ 19EE CD 63 1B     	call show_string_at_hl
 545+ 19F1 CD 59 07     	call newline
 546+ 19F4
 547+ 19F4 CD D4 07     	call message
 548+ 19F7 41 63 74 75  	db 'Actual  : ',0
 548+ 19FB 61 6C 20 20
 548+ 19FF 3A 20 00
 549+ 1A02 21 5A 98     	ld hl, burn_in_dump_area
 550+ 1A05 CD 63 1B     	call show_string_at_hl
 551+ 1A08 CD 59 07     	call newline
 552+ 1A0B
 553+ 1A0B 76           	halt
 554+ 1A0C
 555+ 1A0C              burn_in_erase_file:
 556+ 1A0C              	; Try to open the test file
 557+ 1A0C CD 00 0E     	call close_file
 558+ 1A0F 21 EF 0E     	ld hl, ROOT_NAME
 559+ 1A12 CD ED 0D     	call open_file
 560+ 1A15 21 CC 1A     	ld hl, BURN_IN_NAME
 561+ 1A18 CD ED 0D     	call open_file
 562+ 1A1B 20 1C        	jr nz, burn_in_file_not_found
 563+ 1A1D CD 00 0E     	call close_file
 564+ 1A20
 565+ 1A20              	; Erase it if it exists
 566+ 1A20 21 EF 0E     	ld hl, ROOT_NAME
 567+ 1A23 CD ED 0D     	call open_file
 568+ 1A26 3E 2F        	ld a, SET_FILE_NAME
 569+ 1A28 CD 9D 0E     	call send_command_byte
 570+ 1A2B 21 CC 1A     	ld hl, BURN_IN_NAME
 571+ 1A2E CD 87 0E     	call send_data_string
 572+ 1A31 3E 35        	ld a, FILE_ERASE
 573+ 1A33 CD 9D 0E     	call send_command_byte
 574+ 1A36 CD E2 0E     	call read_status_byte
 575+ 1A39              burn_in_file_not_found:
 576+ 1A39 CD 00 0E     	call close_file
 577+ 1A3C C9           	ret
 578+ 1A3D
 579+ 1A3D              burn_in_write_file:
 580+ 1A3D CD 0C 1A     	call burn_in_erase_file
 581+ 1A40
 582+ 1A40              	; Create it and put a value in it
 583+ 1A40 21 EF 0E     	ld hl, ROOT_NAME
 584+ 1A43 CD ED 0D     	call open_file
 585+ 1A46 11 CC 1A     	ld de, BURN_IN_NAME
 586+ 1A49 CD D8 0D     	call create_file
 587+ 1A4C 28 23        	jr z, burnin_create_ok
 588+ 1A4E CD D4 07     	call message
 589+ 1A51 45 52 52 4F  	db 'ERROR creating burn-in file.',13,10,0
 589+ 1A55 52 20 63 72
 589+ 1A59 65 61 74 69
 589+ 1A5D 6E 67 20 62
 589+ 1A61 75 72 6E 2D
 589+ 1A65 69 6E 20 66
 589+ 1A69 69 6C 65 2E
 589+ 1A6D 0D 0A 00
 590+ 1A70 76           	halt
 591+ 1A71
 592+ 1A71              burnin_create_ok:
 593+ 1A71 3E 3C        	ld a, BYTE_WRITE
 594+ 1A73 CD 9D 0E     	call send_command_byte
 595+ 1A76
 596+ 1A76              	; Send number of bytes we are about to write, as 16 bit number, low first
 597+ 1A76 CD 81 27     	call get_program_size
 598+ 1A79 3E 0A        	ld a, 10
 599+ 1A7B CD 81 0E     	call send_data_byte
 600+ 1A7E 3E 00        	ld a, 0
 601+ 1A80 CD 81 0E     	call send_data_byte
 602+ 1A83
 603+ 1A83 21 00 90     	ld hl, config_file_loc
 604+ 1A86 36 48        	ld (hl), 'H'
 605+ 1A88 23           	inc hl
 606+ 1A89 36 65        	ld (hl), 'e'
 607+ 1A8B 23           	inc hl
 608+ 1A8C 36 6C        	ld (hl), 'l'
 609+ 1A8E 23           	inc hl
 610+ 1A8F 36 6C        	ld (hl), 'l'
 611+ 1A91 23           	inc hl
 612+ 1A92 36 6F        	ld (hl), 'o'
 613+ 1A94 23           	inc hl
 614+ 1A95 3A 58 98     	ld a, (burn_x)
 615+ 1A98 C6 21        	add a, 33
 616+ 1A9A 77           	ld (hl), a
 617+ 1A9B 23           	inc hl
 618+ 1A9C 77           	ld (hl), a
 619+ 1A9D 23           	inc hl
 620+ 1A9E 77           	ld (hl), a
 621+ 1A9F 23           	inc hl
 622+ 1AA0 77           	ld (hl), a
 623+ 1AA1 23           	inc hl
 624+ 1AA2 36 00        	ld (hl), 0
 625+ 1AA4
 626+ 1AA4 21 00 90     	ld hl, config_file_loc			; Write the bytes that are in this temp area
 627+ 1AA7 CD 81 0A     	call write_loop
 628+ 1AAA CD 00 0E     	call close_file
 629+ 1AAD C9           	ret
 630+ 1AAE
 631+ 1AAE              print_a_as_decimal:
 632+ 1AAE 06 00        	ld b, 0
 633+ 1AB0              print_a_as_decimal1:
 634+ 1AB0 FE 0A        	cp 10
 635+ 1AB2 38 06        	jr c, print_a_as_decimal_units
 636+ 1AB4 04           	inc b
 637+ 1AB5 0E 0A        	ld c, 10
 638+ 1AB7 91           	sub c
 639+ 1AB8 18 F6        	jr print_a_as_decimal1
 640+ 1ABA
 641+ 1ABA              print_a_as_decimal_units:
 642+ 1ABA F5           	push af
 643+ 1ABB 78           	ld a, b
 644+ 1ABC FE 00        	cp 0
 645+ 1ABE 28 05        	jr z, print_a_as_decimal_units1
 646+ 1AC0 C6 30        	add a, '0'
 647+ 1AC2 CD 2C 07     	call print_a
 648+ 1AC5              print_a_as_decimal_units1:
 649+ 1AC5 F1           	pop af
 650+ 1AC6 C6 30        	add a, '0'
 651+ 1AC8 CD 2C 07     	call print_a
 652+ 1ACB C9           	ret
 653+ 1ACC
 654+ 1ACC              BURN_IN_NAME:
 655+ 1ACC 42 55 52 4E  	db 'BURNIN.TXT',0
 655+ 1AD0 49 4E 2E 54
 655+ 1AD4 58 54 00
 656+ 1AD7
 657+ 1AD7              	include "printing.asm"
# file opened: printing.asm
   1++1AD7              ; printing.asm
   2++1AD7
   3++1AD7              ; -------------------------------------------------------------------------------------------------
   4++1AD7
   5++1AD7              clear_screen:
   6++1AD7 CD D4 07     	call message
   7++1ADA 1B 5B 32 4A  	db 27,'[2J',27,'[H',0
   7++1ADE 1B 5B 48 00
   8++1AE2 C9           	ret
   9++1AE3
  10++1AE3              show_page:
  11++1AE3 CD D7 1A     	call clear_screen
  12++1AE6
  13++1AE6 3A 64 EA     	ld a,(current_page)
  14++1AE9 57           	ld d,a
  15++1AEA 1E 00        	ld e,0					; de holds address of start of page to show
  16++1AEC
  17++1AEC 0E 10        	ld c,16					; rows to show
  18++1AEE              row_loop:
  19++1AEE D5           	push de
  20++1AEF CD 5A 1B     	call show_de_as_hex		; show the address
  21++1AF2 CD 64 07     	call space
  22++1AF5 D1           	pop de
  23++1AF6
  24++1AF6 D5           	push de
  25++1AF7 06 10        	ld b,16					; bytes per row
  26++1AF9              col_loop:
  27++1AF9 1A           	ld a,(de)				; get the byte
  28++1AFA CD F2 07     	call show_a_as_hex
  29++1AFD 3E 20        	ld a,' '
  30++1AFF CD 2C 07     	call print_a			; leave a space
  31++1B02 13           	inc de					; continue to next byte
  32++1B03 10 F4        	djnz col_loop			; continue to next column
  33++1B05
  34++1B05 D1           	pop de					; now go over the line again in ASCII
  35++1B06 06 10        	ld b,16					; bytes per row
  36++1B08              ascii_loop:
  37++1B08 1A           	ld a,(de)				; get the byte
  38++1B09 CD 30 1B     	call show_a_as_char
  39++1B0C 13           	inc de					; continue to next char
  40++1B0D 10 F9        	djnz ascii_loop			; continue to next column
  41++1B0F
  42++1B0F CD 59 07     	call newline
  43++1B12 0D           	dec c
  44++1B13 79           	ld a,c
  45++1B14 FE 00        	cp 0
  46++1B16 20 D6        	jr nz,row_loop			; continue to next row
  47++1B18 CD 59 07     	call newline
  48++1B1B C9           	ret
  49++1B1C
  50++1B1C              show_a_safe:
  51++1B1C FE 20        	cp 32
  52++1B1E 38 08        	jr c,show_blank			; jr c = jump if less than ( < )
  53++1B20 FE 7F        	cp 127
  54++1B22 30 04        	jr nc,show_blank		; jr nc = jump if equal to or greater than ( >= )
  55++1B24 CD 2C 07     	call print_a
  56++1B27 C9           	ret
  57++1B28              show_blank:
  58++1B28 F5           	push af
  59++1B29 3E 2D        	ld a, '-'
  60++1B2B CD 30 1B     	call show_a_as_char
  61++1B2E F1           	pop af
  62++1B2F C9           	ret
  63++1B30
  64++1B30              show_a_as_char:
  65++1B30              	;cp 10
  66++1B30              	;jr z, show_as_char1
  67++1B30              	;cp 13
  68++1B30              	;jr z, show_as_char1
  69++1B30 FE 20        	cp 32
  70++1B32 38 08        	jr c,show_ctrl		; jr c = jump if less than ( < )
  71++1B34 FE 7F        	cp 127
  72++1B36 30 1C        	jr nc,show_unknown		; jr nc = jump if equal to or greater than ( >= )
  73++1B38              show_as_char1:
  74++1B38 CD 2C 07     	call print_a
  75++1B3B C9           	ret
  76++1B3C              show_ctrl:
  77++1B3C F5           	push af
  78++1B3D CD D4 07     	call message
  79++1B40 1B 5B 37 6D  	db 27,'[7m',0
  79++1B44 00
  80++1B45 F1           	pop af
  81++1B46 C6 40        	add a, 64
  82++1B48 CD 2C 07     	call print_a
  83++1B4B CD D4 07     	call message
  84++1B4E 1B 5B 30 6D  	db 27,'[0m',0
  84++1B52 00
  85++1B53 C9           	ret
  86++1B54              show_unknown:
  87++1B54 3E 3F        	ld a,'?'
  88++1B56 CD 2C 07     	call print_a
  89++1B59 C9           	ret
  90++1B5A
  91++1B5A              ; SHOW_DE_AS_HEX
  92++1B5A              ; Pass in a number in DE.
  93++1B5A              ; It will be displayed in this format: FFFF
  94++1B5A              show_de_as_hex:
  95++1B5A 7A           	ld a,d
  96++1B5B CD F2 07     	call show_a_as_hex
  97++1B5E 7B           	ld a,e
  98++1B5F CD F2 07     	call show_a_as_hex
  99++1B62 C9           	ret
 100++1B63
 101++1B63              ; SHOW_STRING_AT_HL
 102++1B63              ; Pass in hl containing a pointer to a zero terminated string.
 103++1B63              ; It will be printed.
 104++1B63              show_string_at_hl:
 105++1B63 E5           	push hl
 106++1B64              show_string_at_hl_loop:
 107++1B64 7E           	ld a, (hl)
 108++1B65 FE 00        	cp 0
 109++1B67 28 06        	jr z,show_string_at_hl_complete
 110++1B69 23           	inc hl
 111++1B6A CD 2C 07     	call print_a			; print it
 112++1B6D 18 F5        	jr show_string_at_hl_loop
 113++1B6F              show_string_at_hl_complete:
 114++1B6F E1           	pop hl
 115++1B70 C9           	ret
 116++1B71
# file closed: printing.asm
 658+ 1B71              	include "test_uart.asm"
# file opened: test_uart.asm
   1++1B71              ; test_uart.asm
   2++1B71
   3++1B71              test_uart:
   4++1B71 CD D4 07         call message
   5++1B74 54 79 70 65      db 'Type some characters to test sending keys from the Z80 Playground over Serial,',13,10
   5++1B78 20 73 6F 6D
   5++1B7C 65 20 63 68
   5++1B80 61 72 61 63
   5++1B84 74 65 72 73
   5++1B88 20 74 6F 20
   5++1B8C 74 65 73 74
   5++1B90 20 73 65 6E
   5++1B94 64 69 6E 67
   5++1B98 20 6B 65 79
   5++1B9C 73 20 66 72
   5++1BA0 6F 6D 20 74
   5++1BA4 68 65 20 5A
   5++1BA8 38 30 20 50
   5++1BAC 6C 61 79 67
   5++1BB0 72 6F 75 6E
   5++1BB4 64 20 6F 76
   5++1BB8 65 72 20 53
   5++1BBC 65 72 69 61
   5++1BC0 6C 2C 0D 0A
   6++1BC4 6F 72 20 73      db 'or send some characters from the other end of the Serial connection to test',13,10
   6++1BC8 65 6E 64 20
   6++1BCC 73 6F 6D 65
   6++1BD0 20 63 68 61
   6++1BD4 72 61 63 74
   6++1BD8 65 72 73 20
   6++1BDC 66 72 6F 6D
   6++1BE0 20 74 68 65
   6++1BE4 20 6F 74 68
   6++1BE8 65 72 20 65
   6++1BEC 6E 64 20 6F
   6++1BF0 66 20 74 68
   6++1BF4 65 20 53 65
   6++1BF8 72 69 61 6C
   6++1BFC 20 63 6F 6E
   6++1C00 6E 65 63 74
   6++1C04 69 6F 6E 20
   6++1C08 74 6F 20 74
   6++1C0C 65 73 74 0D
   6++1C10 0A
   7++1C11 68 6F 77 20      db 'how many are received. Whatever you send will be echoed after a carriage-return.',13,10
   7++1C15 6D 61 6E 79
   7++1C19 20 61 72 65
   7++1C1D 20 72 65 63
   7++1C21 65 69 76 65
   7++1C25 64 2E 20 57
   7++1C29 68 61 74 65
   7++1C2D 76 65 72 20
   7++1C31 79 6F 75 20
   7++1C35 73 65 6E 64
   7++1C39 20 77 69 6C
   7++1C3D 6C 20 62 65
   7++1C41 20 65 63 68
   7++1C45 6F 65 64 20
   7++1C49 61 66 74 65
   7++1C4D 72 20 61 20
   7++1C51 63 61 72 72
   7++1C55 69 61 67 65
   7++1C59 2D 72 65 74
   7++1C5D 75 72 6E 2E
   7++1C61 0D 0A
   8++1C63 4A 75 73 74      db 'Just type "quit" to go back to the main monitor menu.',13,10
   8++1C67 20 74 79 70
   8++1C6B 65 20 22 71
   8++1C6F 75 69 74 22
   8++1C73 20 74 6F 20
   8++1C77 67 6F 20 62
   8++1C7B 61 63 6B 20
   8++1C7F 74 6F 20 74
   8++1C83 68 65 20 6D
   8++1C87 61 69 6E 20
   8++1C8B 6D 6F 6E 69
   8++1C8F 74 6F 72 20
   8++1C93 6D 65 6E 75
   8++1C97 2E 0D 0A
   9++1C9A 4F 72 20 74      db 'Or type "Z" to print a special message.',13,10,0
   9++1C9E 79 70 65 20
   9++1CA2 22 5A 22 20
   9++1CA6 74 6F 20 70
   9++1CAA 72 69 6E 74
   9++1CAE 20 61 20 73
   9++1CB2 70 65 63 69
   9++1CB6 61 6C 20 6D
   9++1CBA 65 73 73 61
   9++1CBE 67 65 2E 0D
   9++1CC2 0A 00
  10++1CC4
  11++1CC4              test_uart0:
  12++1CC4 11 66 EA         ld de, test_buffer
  13++1CC7 3E 00            ld a, 0
  14++1CC9 12               ld (de), a              ; Always make sure the buffer ends in null
  15++1CCA 06 FF            ld b, 255               ; max buffer length
  16++1CCC
  17++1CCC              test_uart1:
  18++1CCC CD 6A 07         call char_in
  19++1CCF FE 00            cp 0
  20++1CD1 28 F9            jr z, test_uart1
  21++1CD3 FE 0D            cp 13
  22++1CD5 28 14            jr z, test_uart2
  23++1CD7 CD 2C 07         call print_a
  24++1CDA FE 61            cp 'a'
  25++1CDC 38 06            jr c, test_uart_ok
  26++1CDE FE 7B            cp 'z'+1
  27++1CE0 30 02            jr nc, test_uart_ok
  28++1CE2 D6 20            sub 32
  29++1CE4              test_uart_ok:
  30++1CE4 12               ld (de), a
  31++1CE5 13               inc de
  32++1CE6 3E 00            ld a, 0
  33++1CE8 12               ld (de), a              ; Always make sure the buffer ends in null
  34++1CE9 10 E1            djnz test_uart1         ; Keep going until we run out of buffer
  35++1CEB
  36++1CEB              test_uart2:
  37++1CEB CD D4 07         call message
  38++1CEE 0D 0A 00         db 13,10,0
  39++1CF1
  40++1CF1 CD 1C 24         call did_they_type_quit
  41++1CF4 C8               ret z
  42++1CF5
  43++1CF5 CD 32 24         call did_they_type_Z
  44++1CF8 28 0E            jr z, show_z80_message
  45++1CFA
  46++1CFA 21 66 EA         ld hl, test_buffer
  47++1CFD CD 63 1B         call show_string_at_hl
  48++1D00
  49++1D00 CD D4 07         call message
  50++1D03 0D 0A 00         db 13,10,0
  51++1D06
  52++1D06 18 BC            jr test_uart0
  53++1D08
  54++1D08              show_z80_message:
  55++1D08 CD D4 07         call message
  56++1D0B
  57++1D0B 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  57++1D0F 2D 2D 2D 2D
  57++1D13 2D 2D 2D 2D
  57++1D17 2D 2D 2D 2D
  57++1D1B 2D 2D 2D 2D
  57++1D1F 2D 2D 2D 2D
  57++1D23 2D 2D 2D 2D
  57++1D27 2D 2D 2D 2D
  57++1D2B 2D 2D 2D 2D
  57++1D2F 2D 2D 2D 2D
  57++1D33 2D 2D 2D 2D
  57++1D37 2D 2D 2D 2D
  57++1D3B 2D 2D 2D 2D
  57++1D3F 2D 2D 2D 2D
  57++1D43 2D 2D 2D 2D
  57++1D47 2D 2D 2D 2D
  57++1D4B 2D 2D 2D 2D
  57++1D4F 2D 2D 2D 2D
  57++1D53 2D 2D 2D 2D
  57++1D57 2D 2D 2D 2D
  57++1D5B 2B 0D 0A
  58++1D5E 7C 20 20 20      db '|   _________   ___    _____  _                                             _   |',13,10
  58++1D62 5F 5F 5F 5F
  58++1D66 5F 5F 5F 5F
  58++1D6A 5F 20 20 20
  58++1D6E 5F 5F 5F 20
  58++1D72 20 20 20 5F
  58++1D76 5F 5F 5F 5F
  58++1D7A 20 20 5F 20
  58++1D7E 20 20 20 20
  58++1D82 20 20 20 20
  58++1D86 20 20 20 20
  58++1D8A 20 20 20 20
  58++1D8E 20 20 20 20
  58++1D92 20 20 20 20
  58++1D96 20 20 20 20
  58++1D9A 20 20 20 20
  58++1D9E 20 20 20 20
  58++1DA2 20 20 20 20
  58++1DA6 20 20 20 20
  58++1DAA 5F 20 20 20
  58++1DAE 7C 0D 0A
  59++1DB1 7C 20 20 7C      db '|  |___  / _ \ / _ \  |  __ \| |                                           | |  |',13,10
  59++1DB5 5F 5F 5F 20
  59++1DB9 20 2F 20 5F
  59++1DBD 20 5C 20 2F
  59++1DC1 20 5F 20 5C
  59++1DC5 20 20 7C 20
  59++1DC9 20 5F 5F 20
  59++1DCD 5C 7C 20 7C
  59++1DD1 20 20 20 20
  59++1DD5 20 20 20 20
  59++1DD9 20 20 20 20
  59++1DDD 20 20 20 20
  59++1DE1 20 20 20 20
  59++1DE5 20 20 20 20
  59++1DE9 20 20 20 20
  59++1DED 20 20 20 20
  59++1DF1 20 20 20 20
  59++1DF5 20 20 20 20
  59++1DF9 20 20 20 7C
  59++1DFD 20 7C 20 20
  59++1E01 7C 0D 0A
  60++1E04 7C 20 20 20      db '|     / / (_) | | | | | |__) | | __ _ _   _  __ _ _ __ ___  _   _ _ __   __| |  |',13,10
  60++1E08 20 20 2F 20
  60++1E0C 2F 20 28 5F
  60++1E10 29 20 7C 20
  60++1E14 7C 20 7C 20
  60++1E18 7C 20 7C 20
  60++1E1C 7C 5F 5F 29
  60++1E20 20 7C 20 7C
  60++1E24 20 5F 5F 20
  60++1E28 5F 20 5F 20
  60++1E2C 20 20 5F 20
  60++1E30 20 5F 5F 20
  60++1E34 5F 20 5F 20
  60++1E38 5F 5F 20 5F
  60++1E3C 5F 5F 20 20
  60++1E40 5F 20 20 20
  60++1E44 5F 20 5F 20
  60++1E48 5F 5F 20 20
  60++1E4C 20 5F 5F 7C
  60++1E50 20 7C 20 20
  60++1E54 7C 0D 0A
  61++1E57 7C 20 20 20      db '|    / / > _ <| | | | |  ___/| |/ _` | | | |/ _` | ''__/ _ \| | | | ''_ \ / _` |  |',13,10
  61++1E5B 20 2F 20 2F
  61++1E5F 20 3E 20 5F
  61++1E63 20 3C 7C 20
  61++1E67 7C 20 7C 20
  61++1E6B 7C 20 7C 20
  61++1E6F 20 5F 5F 5F
  61++1E73 2F 7C 20 7C
  61++1E77 2F 20 5F 60
  61++1E7B 20 7C 20 7C
  61++1E7F 20 7C 20 7C
  61++1E83 2F 20 5F 60
  61++1E87 20 7C 20 27
  61++1E8B 5F 5F 2F 20
  61++1E8F 5F 20 5C 7C
  61++1E93 20 7C 20 7C
  61++1E97 20 7C 20 27
  61++1E9B 5F 20 5C 20
  61++1E9F 2F 20 5F 60
  61++1EA3 20 7C 20 20
  61++1EA7 7C 0D 0A
  62++1EAA 7C 20 20 20      db '|   / /_| (_) | |_| | | |    | | (_| | |_| | (_| | | | (_) | |_| | | | | (_| |  |',13,10
  62++1EAE 2F 20 2F 5F
  62++1EB2 7C 20 28 5F
  62++1EB6 29 20 7C 20
  62++1EBA 7C 5F 7C 20
  62++1EBE 7C 20 7C 20
  62++1EC2 7C 20 20 20
  62++1EC6 20 7C 20 7C
  62++1ECA 20 28 5F 7C
  62++1ECE 20 7C 20 7C
  62++1ED2 5F 7C 20 7C
  62++1ED6 20 28 5F 7C
  62++1EDA 20 7C 20 7C
  62++1EDE 20 7C 20 28
  62++1EE2 5F 29 20 7C
  62++1EE6 20 7C 5F 7C
  62++1EEA 20 7C 20 7C
  62++1EEE 20 7C 20 7C
  62++1EF2 20 28 5F 7C
  62++1EF6 20 7C 20 20
  62++1EFA 7C 0D 0A
  63++1EFD 7C 20 20 2F      db '|  /_____\___/ \___/  |_|    |_|\__,_|\__, |\__, |_|  \___/ \__,_|_| |_|\__,_|  |',13,10
  63++1F01 5F 5F 5F 5F
  63++1F05 5F 5C 5F 5F
  63++1F09 5F 2F 20 5C
  63++1F0D 5F 5F 5F 2F
  63++1F11 20 20 7C 5F
  63++1F15 7C 20 20 20
  63++1F19 20 7C 5F 7C
  63++1F1D 5C 5F 5F 2C
  63++1F21 5F 7C 5C 5F
  63++1F25 5F 2C 20 7C
  63++1F29 5C 5F 5F 2C
  63++1F2D 20 7C 5F 7C
  63++1F31 20 20 5C 5F
  63++1F35 5F 5F 2F 20
  63++1F39 5C 5F 5F 2C
  63++1F3D 5F 7C 5F 7C
  63++1F41 20 7C 5F 7C
  63++1F45 5C 5F 5F 2C
  63++1F49 5F 7C 20 20
  63++1F4D 7C 0D 0A
  64++1F50 7C 20 20 20      db '|                                      __/ | __/ |                              |',13,10
  64++1F54 20 20 20 20
  64++1F58 20 20 20 20
  64++1F5C 20 20 20 20
  64++1F60 20 20 20 20
  64++1F64 20 20 20 20
  64++1F68 20 20 20 20
  64++1F6C 20 20 20 20
  64++1F70 20 20 20 20
  64++1F74 20 20 20 5F
  64++1F78 5F 2F 20 7C
  64++1F7C 20 5F 5F 2F
  64++1F80 20 7C 20 20
  64++1F84 20 20 20 20
  64++1F88 20 20 20 20
  64++1F8C 20 20 20 20
  64++1F90 20 20 20 20
  64++1F94 20 20 20 20
  64++1F98 20 20 20 20
  64++1F9C 20 20 20 20
  64++1FA0 7C 0D 0A
  65++1FA3 7C 20 20 20      db '|                                     |___/ |___/                               |',13,10
  65++1FA7 20 20 20 20
  65++1FAB 20 20 20 20
  65++1FAF 20 20 20 20
  65++1FB3 20 20 20 20
  65++1FB7 20 20 20 20
  65++1FBB 20 20 20 20
  65++1FBF 20 20 20 20
  65++1FC3 20 20 20 20
  65++1FC7 20 20 7C 5F
  65++1FCB 5F 5F 2F 20
  65++1FCF 7C 5F 5F 5F
  65++1FD3 2F 20 20 20
  65++1FD7 20 20 20 20
  65++1FDB 20 20 20 20
  65++1FDF 20 20 20 20
  65++1FE3 20 20 20 20
  65++1FE7 20 20 20 20
  65++1FEB 20 20 20 20
  65++1FEF 20 20 20 20
  65++1FF3 7C 0D 0A
  66++1FF6 7C 20 20 20      db '|                                                                               |',13,10
  66++1FFA 20 20 20 20
  66++1FFE 20 20 20 20
  66++2002 20 20 20 20
  66++2006 20 20 20 20
  66++200A 20 20 20 20
  66++200E 20 20 20 20
  66++2012 20 20 20 20
  66++2016 20 20 20 20
  66++201A 20 20 20 20
  66++201E 20 20 20 20
  66++2022 20 20 20 20
  66++2026 20 20 20 20
  66++202A 20 20 20 20
  66++202E 20 20 20 20
  66++2032 20 20 20 20
  66++2036 20 20 20 20
  66++203A 20 20 20 20
  66++203E 20 20 20 20
  66++2042 20 20 20 20
  66++2046 7C 0D 0A
  67++2049 7C 20 20 20      db '|        _    _         _____ _______   _            _   _                      |',13,10
  67++204D 20 20 20 20
  67++2051 20 5F 20 20
  67++2055 20 20 5F 20
  67++2059 20 20 20 20
  67++205D 20 20 20 20
  67++2061 5F 5F 5F 5F
  67++2065 5F 20 5F 5F
  67++2069 5F 5F 5F 5F
  67++206D 5F 20 20 20
  67++2071 5F 20 20 20
  67++2075 20 20 20 20
  67++2079 20 20 20 20
  67++207D 20 5F 20 20
  67++2081 20 5F 20 20
  67++2085 20 20 20 20
  67++2089 20 20 20 20
  67++208D 20 20 20 20
  67++2091 20 20 20 20
  67++2095 20 20 20 20
  67++2099 7C 0D 0A
  68++209C 7C 20 20 20      db '|       | |  | |  /\   |  __ \__   __| | |          | | (_)                     |',13,10
  68++20A0 20 20 20 20
  68++20A4 7C 20 7C 20
  68++20A8 20 7C 20 7C
  68++20AC 20 20 2F 5C
  68++20B0 20 20 20 7C
  68++20B4 20 20 5F 5F
  68++20B8 20 5C 5F 5F
  68++20BC 20 20 20 5F
  68++20C0 5F 7C 20 7C
  68++20C4 20 7C 20 20
  68++20C8 20 20 20 20
  68++20CC 20 20 20 20
  68++20D0 7C 20 7C 20
  68++20D4 28 5F 29 20
  68++20D8 20 20 20 20
  68++20DC 20 20 20 20
  68++20E0 20 20 20 20
  68++20E4 20 20 20 20
  68++20E8 20 20 20 20
  68++20EC 7C 0D 0A
  69++20EF 7C 20 20 20      db '|       | |  | | /  \  | |__) | | |    | |_ ___  ___| |_ _ _ __   __ _          |',13,10
  69++20F3 20 20 20 20
  69++20F7 7C 20 7C 20
  69++20FB 20 7C 20 7C
  69++20FF 20 2F 20 20
  69++2103 5C 20 20 7C
  69++2107 20 7C 5F 5F
  69++210B 29 20 7C 20
  69++210F 7C 20 7C 20
  69++2113 20 20 20 7C
  69++2117 20 7C 5F 20
  69++211B 5F 5F 5F 20
  69++211F 20 5F 5F 5F
  69++2123 7C 20 7C 5F
  69++2127 20 5F 20 5F
  69++212B 20 5F 5F 20
  69++212F 20 20 5F 5F
  69++2133 20 5F 20 20
  69++2137 20 20 20 20
  69++213B 20 20 20 20
  69++213F 7C 0D 0A
  70++2142 7C 20 20 20      db '|       | |  | |/ /\ \ |  _  /  | |    | __/ _ \/ __| __| | ''_ \ / _` |         |',13,10
  70++2146 20 20 20 20
  70++214A 7C 20 7C 20
  70++214E 20 7C 20 7C
  70++2152 2F 20 2F 5C
  70++2156 20 5C 20 7C
  70++215A 20 20 5F 20
  70++215E 20 2F 20 20
  70++2162 7C 20 7C 20
  70++2166 20 20 20 7C
  70++216A 20 5F 5F 2F
  70++216E 20 5F 20 5C
  70++2172 2F 20 5F 5F
  70++2176 7C 20 5F 5F
  70++217A 7C 20 7C 20
  70++217E 27 5F 20 5C
  70++2182 20 2F 20 5F
  70++2186 60 20 7C 20
  70++218A 20 20 20 20
  70++218E 20 20 20 20
  70++2192 7C 0D 0A
  71++2195 7C 20 20 20      db '|       | |__| / ____ \| | \ \  | |    | ||  __/\__ \ |_| | | | | (_| |         |',13,10
  71++2199 20 20 20 20
  71++219D 7C 20 7C 5F
  71++21A1 5F 7C 20 2F
  71++21A5 20 5F 5F 5F
  71++21A9 5F 20 5C 7C
  71++21AD 20 7C 20 5C
  71++21B1 20 5C 20 20
  71++21B5 7C 20 7C 20
  71++21B9 20 20 20 7C
  71++21BD 20 7C 7C 20
  71++21C1 20 5F 5F 2F
  71++21C5 5C 5F 5F 20
  71++21C9 5C 20 7C 5F
  71++21CD 7C 20 7C 20
  71++21D1 7C 20 7C 20
  71++21D5 7C 20 28 5F
  71++21D9 7C 20 7C 20
  71++21DD 20 20 20 20
  71++21E1 20 20 20 20
  71++21E5 7C 0D 0A
  72++21E8 7C 20 20 20      db '|        \____/_/    \_\_|  \_\ |_|     \__\___||___/\__|_|_| |_|\__, |         |',13,10
  72++21EC 20 20 20 20
  72++21F0 20 5C 5F 5F
  72++21F4 5F 5F 2F 5F
  72++21F8 2F 20 20 20
  72++21FC 20 5C 5F 5C
  72++2200 5F 7C 20 20
  72++2204 5C 5F 5C 20
  72++2208 7C 5F 7C 20
  72++220C 20 20 20 20
  72++2210 5C 5F 5F 5C
  72++2214 5F 5F 5F 7C
  72++2218 7C 5F 5F 5F
  72++221C 2F 5C 5F 5F
  72++2220 7C 5F 7C 5F
  72++2224 7C 20 7C 5F
  72++2228 7C 5C 5F 5F
  72++222C 2C 20 7C 20
  72++2230 20 20 20 20
  72++2234 20 20 20 20
  72++2238 7C 0D 0A
  73++223B 7C 20 20 20      db '|                                                                 __/ |         |',13,10
  73++223F 20 20 20 20
  73++2243 20 20 20 20
  73++2247 20 20 20 20
  73++224B 20 20 20 20
  73++224F 20 20 20 20
  73++2253 20 20 20 20
  73++2257 20 20 20 20
  73++225B 20 20 20 20
  73++225F 20 20 20 20
  73++2263 20 20 20 20
  73++2267 20 20 20 20
  73++226B 20 20 20 20
  73++226F 20 20 20 20
  73++2273 20 20 20 20
  73++2277 20 20 20 20
  73++227B 20 20 5F 5F
  73++227F 2F 20 7C 20
  73++2283 20 20 20 20
  73++2287 20 20 20 20
  73++228B 7C 0D 0A
  74++228E 7C 20 20 20      db '|                                                                |___/          |',13,10
  74++2292 20 20 20 20
  74++2296 20 20 20 20
  74++229A 20 20 20 20
  74++229E 20 20 20 20
  74++22A2 20 20 20 20
  74++22A6 20 20 20 20
  74++22AA 20 20 20 20
  74++22AE 20 20 20 20
  74++22B2 20 20 20 20
  74++22B6 20 20 20 20
  74++22BA 20 20 20 20
  74++22BE 20 20 20 20
  74++22C2 20 20 20 20
  74++22C6 20 20 20 20
  74++22CA 20 20 20 20
  74++22CE 20 7C 5F 5F
  74++22D2 5F 2F 20 20
  74++22D6 20 20 20 20
  74++22DA 20 20 20 20
  74++22DE 7C 0D 0A
  75++22E1 7C 20 20 20      db '|                                                                               |',13,10
  75++22E5 20 20 20 20
  75++22E9 20 20 20 20
  75++22ED 20 20 20 20
  75++22F1 20 20 20 20
  75++22F5 20 20 20 20
  75++22F9 20 20 20 20
  75++22FD 20 20 20 20
  75++2301 20 20 20 20
  75++2305 20 20 20 20
  75++2309 20 20 20 20
  75++230D 20 20 20 20
  75++2311 20 20 20 20
  75++2315 20 20 20 20
  75++2319 20 20 20 20
  75++231D 20 20 20 20
  75++2321 20 20 20 20
  75++2325 20 20 20 20
  75++2329 20 20 20 20
  75++232D 20 20 20 20
  75++2331 7C 0D 0A
  76++2334 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  76++2338 2D 2D 2D 2D
  76++233C 2D 2D 2D 2D
  76++2340 2D 2D 2D 2D
  76++2344 2D 2D 2D 2D
  76++2348 2D 2D 2D 2D
  76++234C 2D 2D 2D 2D
  76++2350 2D 2D 2D 2D
  76++2354 2D 2D 2D 2D
  76++2358 2D 2D 2D 2D
  76++235C 2D 2D 2D 2D
  76++2360 2D 2D 2D 2D
  76++2364 2D 2D 2D 2D
  76++2368 2D 2D 2D 2D
  76++236C 2D 2D 2D 2D
  76++2370 2D 2D 2D 2D
  76++2374 2D 2D 2D 2D
  76++2378 2D 2D 2D 2D
  76++237C 2D 2D 2D 2D
  76++2380 2D 2D 2D 2D
  76++2384 2B 0D 0A
  77++2387 0D 0A 0D 0A      db 13,10,13,10
  78++238B 54 68 69 73      db 'This is a long text to test whether we can send a large amount of text to the',13,10
  78++238F 20 69 73 20
  78++2393 61 20 6C 6F
  78++2397 6E 67 20 74
  78++239B 65 78 74 20
  78++239F 74 6F 20 74
  78++23A3 65 73 74 20
  78++23A7 77 68 65 74
  78++23AB 68 65 72 20
  78++23AF 77 65 20 63
  78++23B3 61 6E 20 73
  78++23B7 65 6E 64 20
  78++23BB 61 20 6C 61
  78++23BF 72 67 65 20
  78++23C3 61 6D 6F 75
  78++23C7 6E 74 20 6F
  78++23CB 66 20 74 65
  78++23CF 78 74 20 74
  78++23D3 6F 20 74 68
  78++23D7 65 0D 0A
  79++23DA 53 65 72 69      db 'Serial port and still receive it correctly at the other end.',13,10
  79++23DE 61 6C 20 70
  79++23E2 6F 72 74 20
  79++23E6 61 6E 64 20
  79++23EA 73 74 69 6C
  79++23EE 6C 20 72 65
  79++23F2 63 65 69 76
  79++23F6 65 20 69 74
  79++23FA 20 63 6F 72
  79++23FE 72 65 63 74
  79++2402 6C 79 20 61
  79++2406 74 20 74 68
  79++240A 65 20 6F 74
  79++240E 68 65 72 20
  79++2412 65 6E 64 2E
  79++2416 0D 0A
  80++2418 00               db 0
  81++2419 C3 C4 1C         jp test_uart0
  82++241C
  83++241C              did_they_type_quit:
  84++241C 21 66 EA         ld hl, test_buffer
  85++241F
  86++241F 7E               ld a, (hl)
  87++2420 FE 51            cp 'Q'
  88++2422 C0               ret nz
  89++2423 23               inc hl
  90++2424
  91++2424 7E               ld a, (hl)
  92++2425 FE 55            cp 'U'
  93++2427 C0               ret nz
  94++2428 23               inc hl
  95++2429
  96++2429 7E               ld a, (hl)
  97++242A FE 49            cp 'I'
  98++242C C0               ret nz
  99++242D 23               inc hl
 100++242E
 101++242E 7E               ld a, (hl)
 102++242F FE 54            cp 'T'
 103++2431 C9               ret
 104++2432
 105++2432              did_they_type_Z:
 106++2432 21 66 EA         ld hl, test_buffer
 107++2435 7E               ld a, (hl)
 108++2436 FE 5A            cp 'Z'
 109++2438 C0               ret nz
 110++2439 23               inc hl
 111++243A
 112++243A 7E               ld a, (hl)
 113++243B FE 00            cp 0
 114++243D C9               ret
 115++243E
 116++243E              did_they_type_J:
 117++243E 21 66 EA         ld hl, test_buffer
 118++2441 7E               ld a, (hl)
 119++2442 FE 4A            cp 'J'
 120++2444 C0               ret nz
 121++2445 23               inc hl
 122++2446
 123++2446 7E               ld a, (hl)
 124++2447 FE 00            cp 0
 125++2449 C9               ret
 126++244A
# file closed: test_uart.asm
 659+ 244A
 660+ 244A              load_jupiter_ace:
 661+ 244A                  ; Load CORE.BIN into its proper location
 662+ 244A 21 C1 06         ld hl, NAME_OF_CORE
 663+ 244D CD 75 0E         call copy_filename_to_buffer
 664+ 2450 11 00 F6         ld de, $F600 							; TODO: This can't be hardcoded, can it???
 665+ 2453 CD 88 09         call load_bin_file
 666+ 2456 28 1E        	jr z, loaded_core_file
 667+ 2458 CD D4 07     	call message
 668+ 245B 46 61 69 6C  	db 'Failed to load CORE.BIN',13,10,0
 668+ 245F 65 64 20 74
 668+ 2463 6F 20 6C 6F
 668+ 2467 61 64 20 43
 668+ 246B 4F 52 45 2E
 668+ 246F 42 49 4E 0D
 668+ 2473 0A 00
 669+ 2475 76           	halt
 670+ 2476
 671+ 2476              loaded_core_file:
 672+ 2476 CD D4 07         call message
 673+ 2479 43 4F 52 45      db 'CORE loaded!',13,10,0
 673+ 247D 20 6C 6F 61
 673+ 2481 64 65 64 21
 673+ 2485 0D 0A 00
 674+ 2488
 675+ 2488              	; Get the file Jupiter.bin into memory at location 0.
 676+ 2488 21 00 25         ld hl, JUPITER_ACE_NAME
 677+ 248B CD 75 0E         call copy_filename_to_buffer
 678+ 248E 11 00 00         ld de, 0								; Load it into location $0000
 679+ 2491 CD 88 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 680+ 2494 28 27        	jr z, load_jupiter_ace1
 681+ 2496 CD D4 07     	call message
 682+ 2499 46 61 69 6C  	db 'Failed to load jupiter ace file.',13,10,0
 682+ 249D 65 64 20 74
 682+ 24A1 6F 20 6C 6F
 682+ 24A5 61 64 20 6A
 682+ 24A9 75 70 69 74
 682+ 24AD 65 72 20 61
 682+ 24B1 63 65 20 66
 682+ 24B5 69 6C 65 2E
 682+ 24B9 0D 0A 00
 683+ 24BC 76           	halt
 684+ 24BD              load_jupiter_ace1:
 685+ 24BD CD D4 07     	call message
 686+ 24C0 4C 6F 61 64  	db 'Loaded jupiter ace file!',13,10,0
 686+ 24C4 65 64 20 6A
 686+ 24C8 75 70 69 74
 686+ 24CC 65 72 20 61
 686+ 24D0 63 65 20 66
 686+ 24D4 69 6C 65 21
 686+ 24D8 0D 0A 00
 687+ 24DB              	; Just a quick test:
 688+ 24DB CD 39 F6     	call $F600+57
 689+ 24DE 53 74 61 72  	db 'Starting Juniper Deuce...',13,10,0
 689+ 24E2 74 69 6E 67
 689+ 24E6 20 4A 75 6E
 689+ 24EA 69 70 65 72
 689+ 24EE 20 44 65 75
 689+ 24F2 63 65 2E 2E
 689+ 24F6 2E 0D 0A 00
 690+ 24FA
 691+ 24FA              	; Clear the screen
 692+ 24FA              	; ld hl, $2400
 693+ 24FA              	; ld (hl), '#'
 694+ 24FA              	; ld de, $2401
 695+ 24FA              	; ld bc, 767
 696+ 24FA              	; ldir
 697+ 24FA
 698+ 24FA              	; Now run it.
 699+ 24FA              	; Now we need the ROM turned off:
 700+ 24FA CD CD 07     	call rom_off
 701+ 24FD C3 00 00     	jp 0
 702+ 2500
 703+ 2500              JUPITER_ACE_NAME:
 704+ 2500 4A 55 50 49      db 'JUPITER.BIN',0
 704+ 2504 54 45 52 2E
 704+ 2508 42 49 4E 00
 705+ 250C
 706+ 250C
 707+ 250C
 708+ 250C              the_end:
 709+ 250C 41 20 6D 65  	db 'A message at the end ****************',0
 709+ 2510 73 73 61 67
 709+ 2514 65 20 61 74
 709+ 2518 20 74 68 65
 709+ 251C 20 65 6E 64
 709+ 2520 20 2A 2A 2A
 709+ 2524 2A 2A 2A 2A
 709+ 2528 2A 2A 2A 2A
 709+ 252C 2A 2A 2A 2A
 709+ 2530 2A 00
 710+ 2532
 711+ 2532              ; ---------------------------------------------------------
 712+ 2532              ; These are variables so need to be in RAM.
 713+ 2532              ; Unfortunately I am dumb and initially put them in ROM.
 714+ 2532              ; I have learned my lesson!
 715+ 2532
 716+ 2532              ;store_hl		equ	60000					; Temporary store for hl
 717+ 2532              ;store_de 		equ 60002					; Temporary store for de
 718+ 2532              current_page 	equ 60004					; Currently displayed monitor page
 719+ 2532
 720+ 2532              test_buffer 	equ 60006					; 32 x 24 char buffer (768 bytes)
 721+ 2532
# file closed: monitor.asm
 933  2532
 934  2532                  include "tiny-basic.asm"
# file opened: tiny-basic.asm
   1+ 2532              ; *************************************************************
   2+ 2532              ;
   3+ 2532              ;                 TINY BASIC FOR INTEL 8080
   4+ 2532              ;                       VERSION 2.1
   5+ 2532              ;                     BY LI-CHEN WANG
   6+ 2532              ;                 MODIFIED AND TRANSLATED
   7+ 2532              ;                   TO INTEL MNEMONICS
   8+ 2532              ;                    BY ROGER RAUSKOLB
   9+ 2532              ;                     10 OCTOBER,1976
  10+ 2532              ;                        @COPYLEFT
  11+ 2532              ;                   ALL WRONGS RESERVED
  12+ 2532              ;
  13+ 2532              ; *************************************************************
  14+ 2532
  15+ 2532              ; Converted to Z80 mneumonics
  16+ 2532              ; and styled for PASMO assembler
  17+ 2532              ; ready to run on my "Z80 Playground" SBC
  18+ 2532              ; by John Squires, October 2020
  19+ 2532
  20+ 2532              ; TODO:
  21+ 2532              ; * Tell the user that ctrl-c is break, etc.
  22+ 2532              ; * Make a nicer intro screen.
  23+ 2532
  24+ 2532              ; *** ZERO PAGE SUBROUTINES ***
  25+ 2532              ; The original code used the zero page calls, "rst 08h"
  26+ 2532              ; thru "rst 38h" for some functions, in order to keep the
  27+ 2532              ; code size even smaller. However, the use of the "RST" commands
  28+ 2532              ; means that this program always has to run from location 0
  29+ 2532              ; and can never be assembled to a different location.
  30+ 2532              ; I decided to remove all the RST stuff, so that this code
  31+ 2532              ; could eventually be run under CP/M or loaded at a different
  32+ 2532              ; location in memory.
  33+ 2532
  34+ 2532              ; How to assemble:
  35+ 2532              ; Use PASMO
  36+ 2532              ; This version is intended for inclusion in the Z80 Playground EEPROM as a demo
  37+ 2532              ; of what wonders can be performed!
  38+ 2532              ; So it will begin at whatever address the EEPROM boot loader sets it to.
  39+ 2532              ; It will be living in the bottom 32K of EEROM, and have
  40+ 2532              ; access to the top 32K of RAM.
  41+ 2532
  42+ 2532              CR      equ  0DH
  43+ 2532              LF      equ  0AH
  44+ 2532
  45+ 2532              ; Define a macro called DWA to store addresses in a special format.
  46+ 2532              ; Hi-byte is stored first (big-endian) with bit 7 set.
  47+ 2532              ; Lo-byte is stored second, with no special modification.
  48+ 2532              DWA     MACRO     v
  49+ 2532 ~                    DB v>>8+128
  50+ 2532 ~                    DB v&0FFH
  51+ 2532                      ENDM
  52+ 2532
  53+ 2532              TBSTART:
  54+ 2532 31 00 FF             LD  SP,TBSTACK                     ; *** COLD START ***
  55+ 2535 3E FF                LD   A,0FFH
  56+ 2537 C3 EE 2D             JP  INIT
  57+ 253A
  58+ 253A E3           TSTC:   EX (SP),HL                       ; *** TSTC (was "rst 08h") ***
  59+ 253B CD 82 25             CALL IGNBLK                      ; IGNORE BLANKS AND
  60+ 253E BE                   CP  (HL)                         ; TEST CHARACTER
  61+ 253F 23           TC1:    INC  HL                          ; COMPARE THE BYTE THAT
  62+ 2540 CA 4A 25             JP Z,TC2                         ; FOLLOWS THE CALL to this function
  63+ 2543 C5                   PUSH BC                          ; WITH THE TEXT (DE->)
  64+ 2544 4E                   LD   C,(HL)                      ; IF NOT =, ADD THE 2ND
  65+ 2545 06 00                LD   B,0                         ; BYTE THAT FOLLOWS THE
  66+ 2547 09                   ADD HL,BC                        ; RST TO THE OLD PC
  67+ 2548 C1                   POP  BC                          ; I.E., DO A RELATIVE
  68+ 2549 1B                   DEC  DE                          ; JUMP IF NOT =
  69+ 254A 13           TC2:    INC  DE                          ; IF =, SKIP THOSE BYTES
  70+ 254B 23                   INC  HL                          ; AND CONTINUE
  71+ 254C E3                   EX (SP),HL
  72+ 254D C9                   RET
  73+ 254E
  74+ 254E 3E 0D        CRLF:   LD   A,CR                        ; *** CRLF ***
  75+ 2550
  76+ 2550 F5           OUTC:   PUSH AF                          ; *** OUTC (was "rst 10h") ***
  77+ 2551 3A 00 80             LD  A,(OCSW)                     ; PRINT CHARACTER ONLY
  78+ 2554 B7                   OR  A                            ; IF OCSW SWITCH IS ON
  79+ 2555 C2 5A 25     OC2:    JP NZ,OC3                        ; IT IS ON
  80+ 2558 F1                   POP  AF                          ; IT IS OFF
  81+ 2559 C9                   RET                              ; RESTORE AF AND RETURN
  82+ 255A              OC3:
  83+ 255A DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  84+ 255C CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  85+ 255E CA 5A 25             jp z,OC3                         ; zero = not ready for next char yet.
  86+ 2561 F1                   POP  AF                          ; UART IS READY, GET OLD "A" BACK
  87+ 2562 D3 B8                OUT  (uart_tx_rx),A              ; AND SEND IT OUT
  88+ 2564 FE 0D                CP  CR                           ; WAS IT CR?
  89+ 2566 C0                   RET NZ                           ; NO, FINISHED
  90+ 2567              OC4:
  91+ 2567 DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  92+ 2569 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  93+ 256B CA 67 25             jp z,OC4                         ; zero = not ready for next char yet.
  94+ 256E 3E 0A                LD   A,LF                        ; YES, WE SEND LF TOO
  95+ 2570 D3 B8                out (uart_tx_rx),a
  96+ 2572 3E 0D                LD   A,CR                        ; GET CR BACK IN A
  97+ 2574 C9                   RET
  98+ 2575
  99+ 2575 CD CC 2A     EXPR:   CALL EXPR2                       ; *** EXPR (was "rst 18h") ***
 100+ 2578 E5                   PUSH HL                          ; EVALUATE AN EXPRESSION
 101+ 2579 C3 88 2A             JP  EXPR1                        ; REST OF IT AT EXPR1
 102+ 257C
 103+ 257C 7C           COMP:   LD   A,H                         ; *** COMP (was "rst 20h") ***
 104+ 257D BA                   CP  D                            ; COMPARE HL WITH DE
 105+ 257E C0                   RET NZ                           ; RETURN CORRECT C AND
 106+ 257F 7D                   LD   A,L                         ; Z FLAGS
 107+ 2580 BB                   CP  E                            ; BUT OLD A IS LOST
 108+ 2581 C9                   RET
 109+ 2582
 110+ 2582              IGNBLK:
 111+ 2582 1A                   LD A,(DE)                        ; *** IGNBLK (was "rst 28h") ***
 112+ 2583 FE 20                CP  20H                          ; IGNORE BLANKS
 113+ 2585 C0                   RET NZ                           ; IN TEXT (WHERE DE->)
 114+ 2586 13                   INC  DE                          ; AND RETURN THE FIRST
 115+ 2587 C3 82 25             JP  IGNBLK                      ; NON-BLANK CHAR. IN A
 116+ 258A
 117+ 258A              FINISH:
 118+ 258A F1                   POP  AF                          ; *** FINISH (was "rst 30h") ***
 119+ 258B CD 34 2C             CALL FIN                         ; CHECK END OF COMMAND
 120+ 258E C3 4D 2C             JP  QWHAT                        ; PRINT "WHAT?" IF WRONG
 121+ 2591
 122+ 2591              TSTV:
 123+ 2591 CD 82 25             CALL IGNBLK                      ; *** TSTV (was "rst 38h") ***
 124+ 2594 D6 40                SUB  '@'                         ; TEST VARIABLES.
 125+ 2596 D8                   RET C                            ; < @ means NOT A VARIABLE
 126+ 2597 C2 B5 25             JP NZ,TV1                        ; NOT "@" ARRAY
 127+ 259A 13                   INC  DE                          ; IT IS THE "@" ARRAY
 128+ 259B CD 83 2B             CALL PARN                        ; @ SHOULD BE FOLLOWED
 129+ 259E 29                   ADD HL,HL                        ; BY (EXPR) AS ITS INDEX
 130+ 259F DA F9 25             JP C,QHOW                        ; IS INDEX TOO BIG?
 131+ 25A2 D5                   PUSH DE                          ; WILL IT OVERWRITE
 132+ 25A3 EB                   EX DE,HL                         ; TEXT?
 133+ 25A4 CD D2 2B             CALL SIZE                        ; FIND SIZE OF FREE
 134+ 25A7 CD 7C 25             CALL COMP                          ; AND CHECK THAT
 135+ 25AA DA 7D 2C             JP C,ASORRY                      ; IF SO, SAY "SORRY"
 136+ 25AD 21 89 FD             LD  HL,VARBGN                    ; IF NOT GET ADDRESS
 137+ 25B0 CD F5 2B             CALL SUBDE                       ; OF @(EXPR) AND PUT IT
 138+ 25B3 D1                   POP  DE                          ; IN HL
 139+ 25B4 C9                   RET                              ; C FLAG IS CLEARED
 140+ 25B5              TV1:
 141+ 25B5                      ; by this point A holds the index
 142+ 25B5                      ; of the variable
 143+ 25B5                      ; 0 = the array "@"
 144+ 25B5                      ; 1  - 26 = A - Z
 145+ 25B5                      ; 33 - 58 = a - z
 146+ 25B5                      ; lowercase needs adjusting to be uppercase
 147+ 25B5 FE 21                cp 33
 148+ 25B7 38 06                jr c,upper_var
 149+ 25B9 FE 3B                cp 59
 150+ 25BB 30 02                jr nc,upper_var
 151+ 25BD D6 20                sub 32                           ; lowercase it
 152+ 25BF              upper_var:
 153+ 25BF FE 1B                CP  1BH                          ; NOT @, IS IT A TO Z?
 154+ 25C1 3F                   CCF                              ; IF NOT RETURN C FLAG
 155+ 25C2 D8                   RET C
 156+ 25C3 13                   INC  DE                          ; IF A THROUGH Z
 157+ 25C4 21 89 FD             LD  HL,VARBGN                    ; COMPUTE ADDRESS OF
 158+ 25C7 07                   RLCA                             ; THAT VARIABLE
 159+ 25C8 85                   ADD  A,L                         ; AND RETURN IT IN HL
 160+ 25C9 6F                   LD   L,A                         ; WITH C FLAG CLEARED
 161+ 25CA 3E 00                LD   A,0
 162+ 25CC 8C                   ADC  A,H
 163+ 25CD 67                   LD   H,A
 164+ 25CE C9                   RET
 165+ 25CF
 166+ 25CF 21 00 00     TSTNUM: LD  HL,0                         ; *** TSTNUM ***
 167+ 25D2 44                   LD   B,H                         ; TEST IF THE TEXT IS
 168+ 25D3 CD 82 25             CALL IGNBLK                          ; A NUMBER
 169+ 25D6 FE 30        TN1:    CP  30H                          ; IF NOT, RETURN 0 IN
 170+ 25D8 D8                   RET C                            ; B AND HL
 171+ 25D9 FE 3A                CP  3AH                          ; IF NUMBERS, CONVERT
 172+ 25DB D0                   RET NC                           ; TO BINARY IN HL AND
 173+ 25DC 3E F0                LD   A,0F0H                      ; SET B TO # OF DIGITS
 174+ 25DE A4                   AND  H                           ; IF H>255, THERE IS NO
 175+ 25DF C2 F9 25             JP NZ,QHOW                       ; ROOM FOR NEXT DIGIT
 176+ 25E2 04                   INC  B                           ; B COUNTS # OF DIGITS
 177+ 25E3 C5                   PUSH BC
 178+ 25E4 44                   LD   B,H                         ; HL=10*HL+(NEW DIGIT)
 179+ 25E5 4D                   LD   C,L
 180+ 25E6 29                   ADD HL,HL                        ; WHERE 10* IS DONE BY
 181+ 25E7 29                   ADD HL,HL                        ; SHIFT AND ADD
 182+ 25E8 09                   ADD HL,BC
 183+ 25E9 29                   ADD HL,HL
 184+ 25EA 1A                   LD A,(DE)                        ; AND (DIGIT) IS FROM
 185+ 25EB 13                   INC  DE                          ; STRIPPING THE ASCII
 186+ 25EC E6 0F                AND  0FH                         ; CODE
 187+ 25EE 85                   ADD  A,L
 188+ 25EF 6F                   LD   L,A
 189+ 25F0 3E 00                LD   A,0
 190+ 25F2 8C                   ADC  A,H
 191+ 25F3 67                   LD   H,A
 192+ 25F4 C1                   POP  BC
 193+ 25F5 1A                   LD A,(DE)                        ; DO THIS DIGIT AFTER
 194+ 25F6 F2 D6 25             JP P,TN1                         ; DIGIT. S SAYS OVERFLOW
 195+ 25F9 D5           QHOW:   PUSH DE                          ; *** ERROR "HOW?" ***
 196+ 25FA 11 00 26     AHOW:   LD  DE,HOW
 197+ 25FD C3 51 2C             JP  ERROR
 198+ 2600 48 4F 57 3F  HOW:    DB   'HOW?'
 199+ 2604 0D                   DB   CR
 200+ 2605 4F 4B        OK:     DB   'OK'
 201+ 2607 0D                   DB   CR
 202+ 2608 57 48 41 54  WHAT:   DB   'WHAT?'
 202+ 260C 3F
 203+ 260D 0D                   DB   CR
 204+ 260E 53 4F 52 52  SORRY:  DB   'SORRY'
 204+ 2612 59
 205+ 2613 0D                   DB   CR
 206+ 2614
 207+ 2614                      ; *************************************************************
 208+ 2614
 209+ 2614                      ; *** MAIN ***
 210+ 2614
 211+ 2614                      ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 212+ 2614                      ; AND STORES IT IN THE MEMORY.
 213+ 2614
 214+ 2614                      ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 215+ 2614                      ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 216+ 2614                      ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 217+ 2614                      ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 218+ 2614                      ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 219+ 2614                      ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 220+ 2614                      ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 221+ 2614                      ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 222+ 2614                      ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 223+ 2614
 224+ 2614                      ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 225+ 2614                      ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 226+ 2614                      ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 227+ 2614                      ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 228+ 2614
 229+ 2614                      ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 230+ 2614                      ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 231+ 2614                      ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 232+ 2614                      ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 233+ 2614
 234+ 2614                      ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 235+ 2614                      ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 236+ 2614                      ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 237+ 2614                      ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 238+ 2614
 239+ 2614 31 00 FF     RSTART: LD  SP,TBSTACK
 240+ 2617 CD 4E 25     ST1:    CALL CRLF                        ; AND JUMP TO HERE
 241+ 261A 11 05 26             LD  DE,OK                        ; DE->STRING
 242+ 261D 97                   SUB  A                           ; A=0
 243+ 261E CD FB 2C             CALL PRTSTG                      ; PRINT STRING UNTIL CR
 244+ 2621 21 28 26             LD  HL,ST2+1                     ; LITERAL 0
 245+ 2624 22 01 80             LD (CURRNT),HL                   ; CURRENT->LINE # = 0
 246+ 2627 21 00 00     ST2:    LD  HL,0
 247+ 262A 22 09 80             LD (LOPVAR),HL
 248+ 262D 22 03 80             LD (STKGOS),HL
 249+ 2630 3E 3E        ST3:    LD   A,3EH                       ; PROMPT '>' AND
 250+ 2632 CD 83 2C             CALL GETLN                       ; READ A LINE
 251+ 2635 D5                   PUSH DE                          ; DE->END OF LINE
 252+ 2636 11 C0 FD             LD  DE,BUFFER                    ; DE->BEGINNING OF LINE
 253+ 2639 CD CF 25             CALL TSTNUM                      ; TEST IF IT IS A NUMBER
 254+ 263C CD 82 25             CALL IGNBLK
 255+ 263F 7C                   LD   A,H                         ; HL=VALUE OF THE # OR
 256+ 2640 B5                   OR  L                            ; 0 IF NO # WAS FOUND
 257+ 2641 C1                   POP  BC                          ; BC->END OF LINE
 258+ 2642 CA 54 30             JP Z,DIRECT
 259+ 2645 1B                   DEC  DE                          ; BACKUP DE AND SAVE
 260+ 2646 7C                   LD   A,H                         ; VALUE OF LINE # THERE
 261+ 2647 12                   LD (DE),A
 262+ 2648 1B                   DEC  DE
 263+ 2649 7D                   LD   A,L
 264+ 264A 12                   LD (DE),A
 265+ 264B C5                   PUSH BC                          ; BC,DE->BEGIN, END
 266+ 264C D5                   PUSH DE
 267+ 264D 79                   LD   A,C
 268+ 264E 93                   SUB  E
 269+ 264F F5                   PUSH AF                          ; A=# OF BYTES IN LINE
 270+ 2650 CD D1 2C             CALL FNDLN                       ; FIND THIS LINE IN SAVE
 271+ 2653 D5                   PUSH DE                          ; AREA, DE->SAVE AREA
 272+ 2654 C2 67 26             JP NZ,ST4                        ; NZ:NOT FOUND, INSERT
 273+ 2657 D5                   PUSH DE                          ; Z:FOUND, DELETE IT
 274+ 2658 CD EF 2C             CALL FNDNXT                      ; FIND NEXT LINE
 275+ 265B                                                       ; DE->NEXT LINE
 276+ 265B C1                   POP  BC                          ; BC->LINE TO BE DELETED
 277+ 265C 2A 15 80             LD HL,(TXTUNF)                   ; HL->UNFILLED SAVE AREA
 278+ 265F CD 8F 2D             CALL MVUP                        ; MOVE UP TO DELETE
 279+ 2662 60                   LD   H,B                         ; TXTUNF->UNFILLED AREA
 280+ 2663 69                   LD   L,C
 281+ 2664 22 15 80             LD (TXTUNF),HL                   ; UPDATE
 282+ 2667 C1           ST4:    POP  BC                          ; GET READY TO INSERT
 283+ 2668 2A 15 80             LD HL,(TXTUNF)                   ; BUT FIRST CHECK IF
 284+ 266B F1                   POP  AF                          ; THE LENGTH OF NEW LINE
 285+ 266C E5                   PUSH HL                          ; IS 3 (LINE # AND CR)
 286+ 266D FE 03                CP  3                            ; THEN DO NOT INSERT
 287+ 266F CA 14 26             JP Z,RSTART                      ; MUST CLEAR THE STACK
 288+ 2672 85                   ADD  A,L                         ; COMPUTE NEW TXTUNF
 289+ 2673 6F                   LD   L,A
 290+ 2674 3E 00                LD   A,0
 291+ 2676 8C                   ADC  A,H
 292+ 2677 67                   LD   H,A                         ; HL->NEW UNFILLED AREA
 293+ 2678 11 87 FD             LD  DE,TXTEND                    ; CHECK TO SEE IF THERE
 294+ 267B CD 7C 25             CALL COMP                          ; IS ENOUGH SPACE
 295+ 267E D2 7C 2C             JP NC,QSORRY                     ; SORRY, NO ROOM FOR IT
 296+ 2681 22 15 80             LD (TXTUNF),HL                   ; OK, UPDATE TXTUNF
 297+ 2684 D1                   POP  DE                          ; DE->OLD UNFILLED AREA
 298+ 2685 CD 9A 2D             CALL MVDOWN
 299+ 2688 D1                   POP  DE                          ; DE->BEGIN, HL->END
 300+ 2689 E1                   POP  HL
 301+ 268A CD 8F 2D             CALL MVUP                        ; MOVE NEW LINE TO SAVE
 302+ 268D C3 30 26             JP  ST3                          ; AREA
 303+ 2690
 304+ 2690                                                       ; *************************************************************
 305+ 2690
 306+ 2690                                                       ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 307+ 2690                                                       ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 308+ 2690                                                       ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 309+ 2690                                                       ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 310+ 2690                                                       ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 311+ 2690
 312+ 2690                                                       ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
 313+ 2690                                                       ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 314+ 2690                                                       ; GO BACK TO 'RSTART'.
 315+ 2690                                                       ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 316+ 2690                                                       ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 317+ 2690                                                       ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
 318+ 2690                                                       ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 319+ 2690                                                       ; *************************************************************
 320+ 2690
 321+ 2690                                                       ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 322+ 2690
 323+ 2690                                                       ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 324+ 2690
 325+ 2690                                                       ; 'STOP(CR)' GOES BACK TO 'RSTART'
 326+ 2690
 327+ 2690                                                       ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 328+ 2690                                                       ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 329+ 2690                                                       ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 330+ 2690
 331+ 2690                                                       ; THERE ARE 3 MORE ENTRIES IN 'RUN':
 332+ 2690                                                       ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 333+ 2690                                                       ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 334+ 2690                                                       ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 335+ 2690
 336+ 2690                                                       ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 337+ 2690                                                       ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 338+ 2690
 339+ 2690 CD 47 2C     NEW:    CALL ENDCHK                      ; *** NEW(CR) ***
 340+ 2693 21 19 80             LD  HL,TXTBGN
 341+ 2696 22 15 80             LD (TXTUNF),HL
 342+ 2699
 343+ 2699 CD 47 2C     STOP:   CALL ENDCHK                      ; *** STOP(CR) ***
 344+ 269C C3 14 26             JP  RSTART
 345+ 269F
 346+ 269F              TBDIR:                                    ; *** DIR(CR) ***
 347+ 269F                                                      ; This does a directory listing.
 348+ 269F CD 47 2C             call ENDCHK
 349+ 26A2
 350+ 26A2                      ; Clear files counter
 351+ 26A2 3E 00                ld a, 0
 352+ 26A4 32 88 FD             ld (tb_dir_count), a
 353+ 26A7
 354+ 26A7                      ; Open /TBASIC folder
 355+ 26A7 21 F8 0E             ld hl, TINY_BASIC_FOLDER_NAME
 356+ 26AA CD ED 0D             call open_file
 357+ 26AD
 358+ 26AD                      ; Then open *
 359+ 26AD 21 F1 0E             ld hl, STAR_DOT_STAR
 360+ 26B0 CD ED 0D             call open_file
 361+ 26B3
 362+ 26B3                      ; Loop through, printing the file names, one per line
 363+ 26B3              tb_dir_loop:
 364+ 26B3 FE 1D                cp USB_INT_DISK_READ
 365+ 26B5 28 20                jr z, tbasic_dir_loop_good
 366+ 26B7
 367+ 26B7 3A 88 FD             ld a, (tb_dir_count)
 368+ 26BA FE 00                cp 0
 369+ 26BC C2 14 26             jp nz, RSTART
 370+ 26BF
 371+ 26BF CD D4 07             call message
 372+ 26C2 4E 6F 20 66          db 'No files found.',13,10,0
 372+ 26C6 69 6C 65 73
 372+ 26CA 20 66 6F 75
 372+ 26CE 6E 64 2E 0D
 372+ 26D2 0A 00
 373+ 26D4
 374+ 26D4 C3 14 26             jp RSTART
 375+ 26D7
 376+ 26D7              tbasic_dir_loop_good:
 377+ 26D7 3E 27                ld a, RD_USB_DATA0
 378+ 26D9 CD 9D 0E             call send_command_byte
 379+ 26DC CD A6 0E             call read_data_byte                 ; Find out how many bytes there are to read
 380+ 26DF
 381+ 26DF CD AC 0E             call read_data_bytes_into_buffer    ; read them into disk_buffer
 382+ 26E2 FE 20                cp 32                               ; Did we read at least 32 bytes?
 383+ 26E4 30 0B                jr nc, tb_dir_good_length
 384+ 26E6              tb_dir_next:
 385+ 26E6 3E 33                ld a, FILE_ENUM_GO                  ; Go to next entry in the directory
 386+ 26E8 CD 9D 0E             call send_command_byte
 387+ 26EB CD E2 0E             call read_status_byte
 388+ 26EE C3 B3 26             jp tb_dir_loop
 389+ 26F1
 390+ 26F1              tb_dir_good_length:
 391+ 26F1 3A D0 FF             ld a, (disk_buffer+11)
 392+ 26F4 E6 16                and $16                             ; Check for hidden or system files, or directories
 393+ 26F6 C2 E6 26             jp nz, tb_dir_next                  ; and skip accordingly.
 394+ 26F9
 395+ 26F9              tb_it_is_not_system:
 396+ 26F9 21 88 FD             ld hl, tb_dir_count
 397+ 26FC 34                   inc (hl)
 398+ 26FD
 399+ 26FD                      ; Show filename from diskbuffer
 400+ 26FD 06 08                ld b, 8
 401+ 26FF 21 C5 FF             ld hl, disk_buffer
 402+ 2702              tb_dir_show_name_loop:
 403+ 2702 7E                   ld a, (hl)
 404+ 2703 CD 2C 07             call print_a
 405+ 2706 23                   inc hl
 406+ 2707 10 F9                djnz tb_dir_show_name_loop
 407+ 2709
 408+ 2709 3E 2E                ld a, '.'
 409+ 270B CD 2C 07             call print_a
 410+ 270E
 411+ 270E 06 03                ld b, 3
 412+ 2710              tb_dir_show_extension_loop:
 413+ 2710 7E                   ld a, (hl)
 414+ 2711 CD 2C 07             call print_a
 415+ 2714 23                   inc hl
 416+ 2715 10 F9                djnz tb_dir_show_extension_loop
 417+ 2717
 418+ 2717 CD 59 07             call newline
 419+ 271A
 420+ 271A C3 E6 26             jp tb_dir_next
 421+ 271D
 422+ 271D              SAVE:                                   ; *** SAVE "filename" ***
 423+ 271D                                                      ; This Saves the current program to USB Drive with the given name.
 424+ 271D D5                   push de
 425+ 271E CD 81 27             call get_program_size
 426+ 2721 D1                   pop de
 427+ 2722 7C                   ld a, h
 428+ 2723 B5                   or l
 429+ 2724 FE 00                cp 0
 430+ 2726 20 20                jr nz, save_continue
 431+ 2728 CD D4 07             call message
 432+ 272B 4E 6F 20 70          db 'No program yet to save!',13,10,0
 432+ 272F 72 6F 67 72
 432+ 2733 61 6D 20 79
 432+ 2737 65 74 20 74
 432+ 273B 6F 20 73 61
 432+ 273F 76 65 21 0D
 432+ 2743 0A 00
 433+ 2745 C3 14 26             jp RSTART
 434+ 2748              save_continue:
 435+ 2748 CD 8D 30             call READ_QUOTED_FILENAME
 436+ 274B CD 41 28             call does_file_exist
 437+ 274E CC 2D 28             call z, tb_erase_file
 438+ 2751
 439+ 2751 CD 00 0E             call close_file
 440+ 2754
 441+ 2754                      ;call message
 442+ 2754                      ;db 'Creating file...',13,10,0
 443+ 2754
 444+ 2754 21 F8 0E             ld hl, TINY_BASIC_FOLDER_NAME
 445+ 2757 CD ED 0D             call open_file
 446+ 275A 11 EB FF             ld de, filename_buffer
 447+ 275D CD D8 0D             call create_file
 448+ 2760 28 29                jr z, tb_save_continue
 449+ 2762 CD D4 07             call message
 450+ 2765 43 6F 75 6C          db 'Could not create file.',13,10,0
 450+ 2769 64 20 6E 6F
 450+ 276D 74 20 63 72
 450+ 2771 65 61 74 65
 450+ 2775 20 66 69 6C
 450+ 2779 65 2E 0D 0A
 450+ 277D 00
 451+ 277E C3 14 26             jp RSTART
 452+ 2781
 453+ 2781              get_program_size:
 454+ 2781                      ; Gets the total size of the program, in bytes, into hl
 455+ 2781 11 19 80             ld de,TXTBGN
 456+ 2784 2A 15 80             ld hl, (TXTUNF)
 457+ 2787 B7                   or a
 458+ 2788 ED 52                sbc hl, de
 459+ 278A C9                   ret
 460+ 278B
 461+ 278B              tb_save_continue:
 462+ 278B 3E 3C                ld a, BYTE_WRITE
 463+ 278D CD 9D 0E             call send_command_byte
 464+ 2790
 465+ 2790                      ; Send number of bytes we are about to write, as 16 bit number, low first
 466+ 2790 CD 81 27             call get_program_size
 467+ 2793 7D                   ld a, l
 468+ 2794 CD 81 0E             call send_data_byte
 469+ 2797 7C                   ld a, h
 470+ 2798 CD 81 0E             call send_data_byte
 471+ 279B
 472+ 279B 21 19 80             ld hl, TXTBGN
 473+ 279E CD 81 0A             call write_loop
 474+ 27A1
 475+ 27A1 CD 00 0E             call close_file
 476+ 27A4
 477+ 27A4 C3 14 26             jp RSTART
 478+ 27A7
 479+ 27A7              LOAD:                                   ; *** LOAD "filename" ***
 480+ 27A7                                                      ; This Loads a program from USB Drive
 481+ 27A7 CD 8D 30             call READ_QUOTED_FILENAME
 482+ 27AA CD 41 28             call does_file_exist
 483+ 27AD 28 18                jr z, load_can_do
 484+ 27AF              tb_file_not_found
 485+ 27AF CD D4 07             call message
 486+ 27B2 46 69 6C 65          db 'File not found.',13,10,0
 486+ 27B6 20 6E 6F 74
 486+ 27BA 20 66 6F 75
 486+ 27BE 6E 64 2E 0D
 486+ 27C2 0A 00
 487+ 27C4 C3 14 26             jp RSTART
 488+ 27C7
 489+ 27C7              load_can_do:
 490+ 27C7 21 F8 0E             ld hl, TINY_BASIC_FOLDER_NAME
 491+ 27CA CD ED 0D             call open_file
 492+ 27CD 21 EB FF             ld hl, filename_buffer
 493+ 27D0 CD ED 0D             call open_file
 494+ 27D3
 495+ 27D3 3E 3A                ld a, BYTE_READ
 496+ 27D5 CD 9D 0E             call send_command_byte
 497+ 27D8 3E FF                ld a, 255                           ; Request all of the file
 498+ 27DA CD 81 0E             call send_data_byte
 499+ 27DD 3E FF                ld a, 255                           ; Yes, all!
 500+ 27DF CD 81 0E             call send_data_byte
 501+ 27E2
 502+ 27E2 3E 22                ld a, GET_STATUS
 503+ 27E4 CD 9D 0E             call send_command_byte
 504+ 27E7 CD A6 0E             call read_data_byte
 505+ 27EA 21 19 80             ld hl, TXTBGN                       ; Get back the target address
 506+ 27ED              tb_load_loop1:
 507+ 27ED FE 1D                cp USB_INT_DISK_READ
 508+ 27EF 20 25                jr nz, tb_load_finished
 509+ 27F1
 510+ 27F1 E5                   push hl
 511+ 27F2 CD A5 07             call disk_on
 512+ 27F5 3E 27                ld a, RD_USB_DATA0
 513+ 27F7 CD 9D 0E             call send_command_byte
 514+ 27FA CD A6 0E             call read_data_byte
 515+ 27FD E1                   pop hl
 516+ 27FE CD AF 0E             call read_data_bytes_into_hl
 517+ 2801 E5                   push hl
 518+ 2802 CD 9E 07             call disk_off
 519+ 2805 3E 3B                ld a, BYTE_RD_GO
 520+ 2807 CD 9D 0E             call send_command_byte
 521+ 280A 3E 22                ld a, GET_STATUS
 522+ 280C CD 9D 0E             call send_command_byte
 523+ 280F CD A6 0E             call read_data_byte
 524+ 2812 E1                   pop hl
 525+ 2813 C3 ED 27             jp tb_load_loop1
 526+ 2816              tb_load_finished:
 527+ 2816 22 15 80             ld (TXTUNF), hl
 528+ 2819 CD 00 0E             call close_file
 529+ 281C C3 14 26             jp RSTART
 530+ 281F
 531+ 281F              ERASE:                                   ; *** ERASE "filename" ***
 532+ 281F                                                      ; This erases a file
 533+ 281F CD 8D 30             call READ_QUOTED_FILENAME
 534+ 2822 CD 41 28             call does_file_exist
 535+ 2825 20 88                jr nz, tb_file_not_found
 536+ 2827 CD 2D 28             call tb_erase_file
 537+ 282A C3 14 26             jp RSTART
 538+ 282D
 539+ 282D              tb_erase_file:
 540+ 282D                      ;call message
 541+ 282D                      ;db 'Erasing file...',13,10,0
 542+ 282D 3E 2F                ld a, SET_FILE_NAME
 543+ 282F CD 9D 0E             call send_command_byte
 544+ 2832 21 EB FF             ld hl, filename_buffer
 545+ 2835 CD 87 0E             call send_data_string
 546+ 2838 3E 35                ld a, FILE_ERASE
 547+ 283A CD 9D 0E             call send_command_byte
 548+ 283D CD E2 0E             call read_status_byte
 549+ 2840 C9                   ret
 550+ 2841
 551+ 2841              does_file_exist:
 552+ 2841                      ; Looks on disk for a file. Returns Z if file exists.
 553+ 2841 21 F8 0E             ld hl, TINY_BASIC_FOLDER_NAME
 554+ 2844 CD ED 0D             call open_file
 555+ 2847 21 EB FF             ld hl, filename_buffer
 556+ 284A C3 ED 0D             jp open_file
 557+ 284D
 558+ 284D CD 47 2C     RUN:    CALL ENDCHK                      ; *** RUN(CR) ***
 559+ 2850 11 19 80             LD  DE,TXTBGN                    ; FIRST SAVED LINE
 560+ 2853
 561+ 2853 21 00 00     RUNNXL: LD  HL,0                         ; *** RUNNXL ***
 562+ 2856 CD D9 2C             CALL FNDLP                       ; FIND WHATEVER LINE #
 563+ 2859 DA 14 26             JP C,RSTART                      ; C:PASSED TXTUNF, QUIT
 564+ 285C
 565+ 285C EB           RUNTSL: EX DE,HL                         ; *** RUNTSL ***
 566+ 285D 22 01 80             LD (CURRNT),HL                   ; SET 'CURRENT'->LINE #
 567+ 2860 EB                   EX DE,HL
 568+ 2861 13                   INC  DE                          ; BUMP PASS LINE #
 569+ 2862 13                   INC  DE
 570+ 2863
 571+ 2863 CD 8B 2F     RUNSML: CALL CHKIO                       ; *** RUNSML ***
 572+ 2866 21 D3 2F             LD  HL,TAB2-1                    ; FIND COMMAND IN TAB2
 573+ 2869 C3 57 30             JP  EXEC                         ; AND EXECUTE IT
 574+ 286C
 575+ 286C CD 75 25     GOTO:   CALL EXPR                          ; *** GOTO EXPR ***
 576+ 286F D5                   PUSH DE                          ; SAVE FOR ERROR ROUTINE
 577+ 2870 CD 47 2C             CALL ENDCHK                      ; MUST FIND A CR
 578+ 2873 CD D1 2C             CALL FNDLN                       ; FIND THE TARGET LINE
 579+ 2876 C2 FA 25             JP NZ,AHOW                       ; NO SUCH LINE #
 580+ 2879 F1                   POP  AF                          ; CLEAR THE PUSH DE
 581+ 287A C3 5C 28             JP  RUNTSL                       ; GO DO IT
 582+ 287D
 583+ 287D                                                       ; *************************************************************
 584+ 287D
 585+ 287D                                                       ; *** LIST *** & PRINT ***
 586+ 287D
 587+ 287D                                                       ; LIST HAS TWO FORMS:
 588+ 287D                                                       ; 'LIST(CR)' LISTS ALL SAVED LINES
 589+ 287D                                                       ; 'LIST #(CR)' START LIST AT THIS LINE #
 590+ 287D                                                       ; YOU CAN STOP THE LISTING BY CONTROL C KEY
 591+ 287D
 592+ 287D                                                       ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 593+ 287D                                                       ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 594+ 287D                                                       ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 595+ 287D
 596+ 287D                                                       ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 597+ 287D                                                       ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 598+ 287D                                                       ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 599+ 287D                                                       ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 600+ 287D                                                       ; SPECIFIED, 6 POSITIONS WILL BE USED.
 601+ 287D
 602+ 287D                                                       ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 603+ 287D                                                       ; DOUBLE QUOTES.
 604+ 287D
 605+ 287D                                                       ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
 606+ 287D
 607+ 287D                                                       ; A $ means print an ascii character, so 'PRINT $72,$107' will print "Hi"
 608+ 287D
 609+ 287D                                                       ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 610+ 287D                                                       ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 611+ 287D                                                       ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 612+ 287D
 613+ 287D CD CF 25     LIST:   CALL TSTNUM                      ; TEST IF THERE IS A #
 614+ 2880 CD 47 2C             CALL ENDCHK                      ; IF NO # WE GET A 0
 615+ 2883 CD D1 2C             CALL FNDLN                       ; FIND THIS OR NEXT LINE
 616+ 2886 DA 14 26     LS1:    JP C,RSTART                      ; C:PASSED TXTUNF
 617+ 2889 CD 7A 2D             CALL PRTLN                       ; PRINT THE LINE
 618+ 288C CD 8B 2F             CALL CHKIO                       ; STOP IF HIT CONTROL-C
 619+ 288F CD D9 2C             CALL FNDLP                       ; FIND NEXT LINE
 620+ 2892 C3 86 28             JP  LS1                          ; AND LOOP BACK
 621+ 2895
 622+ 2895 0E 06        PRINT:  LD   C,6                         ; C = # OF SPACES
 623+ 2897 CD 3A 25             CALL TSTC                          ; Test for ";"
 624+ 289A 3B                   DB   3BH
 625+ 289B 06                   DB   PR2-$-1
 626+ 289C CD 4E 25             CALL CRLF                        ; GIVE CR-LF AND
 627+ 289F C3 63 28             JP  RUNSML                       ; CONTINUE SAME LINE
 628+ 28A2 CD 3A 25     PR2:    CALL TSTC                          ; Test for (CR)
 629+ 28A5 0D                   DB   CR
 630+ 28A6 06                   DB   PR0-$-1
 631+ 28A7 CD 4E 25             CALL CRLF                        ; ALSO GIVE CR-LF AND
 632+ 28AA C3 53 28             JP  RUNNXL                       ; GO TO NEXT LINE
 633+ 28AD CD 3A 25     PR0:    CALL TSTC                          ; ELSE IS IT FORMAT? e.g. #4 = format 4 digits long
 634+ 28B0 23                   DB   '#'
 635+ 28B1 07                   DB   PR1-$-1
 636+ 28B2 CD 75 25             CALL EXPR                          ; YES, EVALUATE EXPR.
 637+ 28B5 4D                   LD   C,L                         ; AND SAVE IT IN C
 638+ 28B6 C3 DC 28             JP  PR3                          ; LOOK FOR MORE TO PRINT
 639+ 28B9 CD 3A 25     PR1:    CALL TSTC                         ; Is it a "$"? e.g. $65 will print 'A'
 640+ 28BC 24                   DB   '$'
 641+ 28BD 18                   DB   PRNOTDOLLAR-$-1
 642+ 28BE CD 75 25             CALL EXPR                         ; Evaluate the expression, which will result in an 16 bit number in hl
 643+ 28C1 7C                   ld a, h                         ; If hl > 255 show error
 644+ 28C2 B7                   or a
 645+ 28C3 20 09                jr nz, PR_ERROR
 646+ 28C5 7D                   ld a, l                         ; Get just bottom 8 bits
 647+ 28C6 FE 20                cp 32
 648+ 28C8 38 04                jr c, PR_ERROR
 649+ 28CA FE 7F                cp 127
 650+ 28CC 38 02                jr c, PR_ASCII
 651+ 28CE              PR_ERROR:
 652+ 28CE 3E 2A                ld a, '*'
 653+ 28D0              PR_ASCII:
 654+ 28D0 CD 50 25             CALL OUTC
 655+ 28D3 C3 DC 28             jp PR3                          ; Look for more to print
 656+ 28D6
 657+ 28D6              PRNOTDOLLAR:
 658+ 28D6 CD 09 2D             CALL QTSTG                       ; OR IS IT A STRING?
 659+ 28D9 C3 ED 28             JP  PR8                          ; IF NOT, MUST BE EXPR.
 660+ 28DC CD 3A 25     PR3:    CALL TSTC                          ; IF ",", GO FIND NEXT
 661+ 28DF 2C                   DB   ','
 662+ 28E0 06                   DB   PR6-$-1
 663+ 28E1 CD 34 2C             CALL FIN                         ; IN THE LIST.
 664+ 28E4 C3 AD 28             JP  PR0                          ; LIST CONTINUES
 665+ 28E7 CD 4E 25     PR6:    CALL CRLF                        ; LIST ENDS
 666+ 28EA CD 8A 25             CALL FINISH
 667+ 28ED CD 75 25     PR8:    CALL EXPR                          ; EVALUATE THE EXPR
 668+ 28F0 C5                   PUSH BC
 669+ 28F1 CD 36 2D             CALL PRTNUM                      ; PRINT THE VALUE
 670+ 28F4 C1                   POP  BC
 671+ 28F5 C3 DC 28             JP  PR3                          ; MORE TO PRINT?
 672+ 28F8
 673+ 28F8                                                       ; *************************************************************
 674+ 28F8
 675+ 28F8                                                       ; *** GOSUB *** & RETURN ***
 676+ 28F8
 677+ 28F8                                                       ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 678+ 28F8                                                       ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 679+ 28F8                                                       ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 680+ 28F8                                                       ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 681+ 28F8                                                       ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 682+ 28F8                                                       ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 683+ 28F8                                                       ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 684+ 28F8                                                       ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 685+ 28F8                                                       ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 686+ 28F8
 687+ 28F8                                                       ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 688+ 28F8                                                       ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 689+ 28F8                                                       ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 690+ 28F8                                                       ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 691+ 28F8
 692+ 28F8 CD C5 2D     GOSUB:  CALL PUSHA                       ; SAVE THE CURRENT "FOR"
 693+ 28FB CD 75 25             CALL EXPR                          ; PARAMETERS
 694+ 28FE D5                   PUSH DE                          ; AND TEXT POINTER
 695+ 28FF CD D1 2C             CALL FNDLN                       ; FIND THE TARGET LINE
 696+ 2902 C2 FA 25             JP NZ,AHOW                       ; NOT THERE. SAY "HOW?"
 697+ 2905 2A 01 80             LD HL,(CURRNT)                   ; FOUND IT, SAVE OLD
 698+ 2908 E5                   PUSH HL                          ; 'CURRNT' OLD 'STKGOS'
 699+ 2909 2A 03 80             LD HL,(STKGOS)
 700+ 290C E5                   PUSH HL
 701+ 290D 21 00 00             LD  HL,0                         ; AND LOAD NEW ONES
 702+ 2910 22 09 80             LD (LOPVAR),HL
 703+ 2913 39                   ADD HL,SP
 704+ 2914 22 03 80             LD (STKGOS),HL
 705+ 2917 C3 5C 28             JP  RUNTSL                       ; THEN RUN THAT LINE
 706+ 291A CD 47 2C     RETURN: CALL ENDCHK                      ; THERE MUST BE A CR
 707+ 291D 2A 03 80             LD HL,(STKGOS)                   ; OLD STACK POINTER
 708+ 2920 7C                   LD   A,H                         ; 0 MEANS NOT EXIST
 709+ 2921 B5                   OR  L
 710+ 2922 CA 4D 2C             JP Z,QWHAT                       ; SO, WE SAY: "WHAT?"
 711+ 2925 F9                   LD SP,HL                         ; ELSE, RESTORE IT
 712+ 2926 E1                   POP  HL
 713+ 2927 22 03 80             LD (STKGOS),HL                   ; AND THE OLD 'STKGOS'
 714+ 292A E1                   POP  HL
 715+ 292B 22 01 80             LD (CURRNT),HL                   ; AND THE OLD 'CURRNT'
 716+ 292E D1                   POP  DE                          ; OLD TEXT POINTER
 717+ 292F CD A9 2D             CALL POPA                        ; OLD "FOR" PARAMETERS
 718+ 2932 CD 8A 25             CALL FINISH                          ; AND WE ARE BACK HOME
 719+ 2935
 720+ 2935                                                       ; *************************************************************
 721+ 2935
 722+ 2935                                                       ; *** FOR *** & NEXT ***
 723+ 2935
 724+ 2935                                                       ; 'FOR' HAS TWO FORMS:
 725+ 2935                                                       ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 726+ 2935                                                       ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 727+ 2935                                                       ; EXP3=1.  (I.E., WITH A STEP OF +1.)
 728+ 2935                                                       ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 729+ 2935                                                       ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 730+ 2935                                                       ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 731+ 2935                                                       ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 732+ 2935                                                       ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 733+ 2935                                                       ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 734+ 2935                                                       ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 735+ 2935                                                       ; BEFORE THE NEW ONE OVERWRITES IT.
 736+ 2935                                                       ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 737+ 2935                                                       ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 738+ 2935                                                       ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 739+ 2935                                                       ; (PURGED FROM THE STACK..)
 740+ 2935
 741+ 2935                                                       ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 742+ 2935                                                       ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 743+ 2935                                                       ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 744+ 2935                                                       ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 745+ 2935                                                       ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 746+ 2935                                                       ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 747+ 2935                                                       ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 748+ 2935                                                       ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 749+ 2935                                                       ; IS PURGED AND EXECUTION CONTINUES.
 750+ 2935
 751+ 2935 CD C5 2D     FOR:    CALL PUSHA                       ; SAVE THE OLD SAVE AREA
 752+ 2938 CD 1B 2C             CALL SETVAL                      ; SET THE CONTROL VAR.
 753+ 293B 2B                   DEC  HL                          ; HL IS ITS ADDRESS
 754+ 293C 22 09 80             LD (LOPVAR),HL                   ; SAVE THAT
 755+ 293F 21 2F 30             LD  HL,TAB5-1                    ; USE 'EXEC' TO LOOK
 756+ 2942 C3 57 30             JP  EXEC                         ; FOR THE WORD 'TO'
 757+ 2945 CD 75 25     FR1:    CALL EXPR                          ; EVALUATE THE LIMIT
 758+ 2948 22 0D 80             LD (LOPLMT),HL                   ; SAVE THAT
 759+ 294B 21 35 30             LD  HL,TAB6-1                    ; USE 'EXEC' TO LOOK
 760+ 294E C3 57 30             JP EXEC                          ; FOR THE WORD 'STEP'
 761+ 2951 CD 75 25     FR2:    CALL EXPR                          ; FOUND IT, GET STEP
 762+ 2954 C3 5A 29             JP  FR4
 763+ 2957 21 01 00     FR3:    LD  HL,1H                        ; NOT FOUND, SET TO 1
 764+ 295A 22 0B 80     FR4:    LD (LOPINC),HL                   ; SAVE THAT TOO
 765+ 295D 2A 01 80     FR5:    LD HL,(CURRNT)                   ; SAVE CURRENT LINE #
 766+ 2960 22 0F 80             LD (LOPLN),HL
 767+ 2963 EB                   EX DE,HL                         ; AND TEXT POINTER
 768+ 2964 22 11 80             LD (LOPPT),HL
 769+ 2967 01 0A 00             LD  BC,0AH                       ; DIG INTO STACK TO
 770+ 296A 2A 09 80             LD HL,(LOPVAR)                   ; FIND 'LOPVAR'
 771+ 296D EB                   EX DE,HL
 772+ 296E 60                   LD   H,B
 773+ 296F 68                   LD   L,B                         ; HL=0 NOW
 774+ 2970 39                   ADD HL,SP                        ; HERE IS THE STACK
 775+ 2971 3E                   DB   3EH
 776+ 2972 09           FR7:    ADD HL,BC                        ; EACH LEVEL IS 10 DEEP
 777+ 2973 7E                   LD   A,(HL)                      ; GET THAT OLD 'LOPVAR'
 778+ 2974 23                   INC  HL
 779+ 2975 B6                   OR  (HL)
 780+ 2976 CA 93 29             JP Z,FR8                         ; 0 SAYS NO MORE IN IT
 781+ 2979 7E                   LD   A,(HL)
 782+ 297A 2B                   DEC  HL
 783+ 297B BA                   CP  D                            ; SAME AS THIS ONE?
 784+ 297C C2 72 29             JP NZ,FR7
 785+ 297F 7E                   LD   A,(HL)                      ; THE OTHER HALF?
 786+ 2980 BB                   CP  E
 787+ 2981 C2 72 29             JP NZ,FR7
 788+ 2984 EB                   EX DE,HL                         ; YES, FOUND ONE
 789+ 2985 21 00 00             LD  HL,0H
 790+ 2988 39                   ADD HL,SP                        ; TRY TO MOVE SP
 791+ 2989 44                   LD   B,H
 792+ 298A 4D                   LD   C,L
 793+ 298B 21 0A 00             LD  HL,0AH
 794+ 298E 19                   ADD HL,DE
 795+ 298F CD 9A 2D             CALL MVDOWN                      ; AND PURGE 10 WORDS
 796+ 2992 F9                   LD SP,HL                         ; IN THE STACK
 797+ 2993 2A 11 80     FR8:    LD HL,(LOPPT)                    ; JOB DONE, RESTORE DE
 798+ 2996 EB                   EX DE,HL
 799+ 2997 CD 8A 25             CALL FINISH                          ; AND CONTINUE
 800+ 299A
 801+ 299A CD 91 25     NEXT:   CALL TSTV                          ; GET ADDRESS OF VAR.
 802+ 299D DA 4D 2C             JP C,QWHAT                       ; NO VARIABLE, "WHAT?"
 803+ 29A0 22 05 80             LD (VARNXT),HL                   ; YES, SAVE IT
 804+ 29A3 D5           NX0:    PUSH DE                          ; SAVE TEXT POINTER
 805+ 29A4 EB                   EX DE,HL
 806+ 29A5 2A 09 80             LD HL,(LOPVAR)                   ; GET VAR. IN 'FOR'
 807+ 29A8 7C                   LD   A,H
 808+ 29A9 B5                   OR  L                            ; 0 SAYS NEVER HAD ONE
 809+ 29AA CA 4E 2C             JP Z,AWHAT                       ; SO WE ASK: "WHAT?"
 810+ 29AD CD 7C 25             CALL COMP                          ; ELSE WE CHECK THEM
 811+ 29B0 CA BD 29             JP Z,NX3                         ; OK, THEY AGREE
 812+ 29B3 D1                   POP  DE                          ; NO, LET'S SEE
 813+ 29B4 CD A9 2D             CALL POPA                        ; PURGE CURRENT LOOP
 814+ 29B7 2A 05 80             LD HL,(VARNXT)                   ; AND POP ONE LEVEL
 815+ 29BA C3 A3 29             JP  NX0                          ; GO CHECK AGAIN
 816+ 29BD 5E           NX3:    LD   E,(HL)                      ; COME HERE WHEN AGREED
 817+ 29BE 23                   INC  HL
 818+ 29BF 56                   LD   D,(HL)                      ; DE=VALUE OF VAR.
 819+ 29C0 2A 0B 80             LD HL,(LOPINC)
 820+ 29C3 E5                   PUSH HL
 821+ 29C4 7C                   LD   A,H
 822+ 29C5 AA                   XOR  D
 823+ 29C6 7A                   LD   A,D
 824+ 29C7 19                   ADD HL,DE                        ; ADD ONE STEP
 825+ 29C8 FA CF 29             JP M,NX4
 826+ 29CB AC                   XOR  H
 827+ 29CC FA F3 29             JP M,NX5
 828+ 29CF EB           NX4:    EX DE,HL
 829+ 29D0 2A 09 80             LD HL,(LOPVAR)                   ; PUT IT BACK
 830+ 29D3 73                   LD   (HL),E
 831+ 29D4 23                   INC  HL
 832+ 29D5 72                   LD   (HL),D
 833+ 29D6 2A 0D 80             LD HL,(LOPLMT)                   ; HL->LIMIT
 834+ 29D9 F1                   POP  AF                          ; OLD HL
 835+ 29DA B7                   OR  A
 836+ 29DB F2 DF 29             JP P,NX1                         ; STEP > 0
 837+ 29DE EB                   EX DE,HL                         ; STEP < 0
 838+ 29DF CD 11 2C     NX1:    CALL CKHLDE                      ; COMPARE WITH LIMIT
 839+ 29E2 D1                   POP  DE                          ; RESTORE TEXT POINTER
 840+ 29E3 DA F5 29             JP C,NX2                         ; OUTSIDE LIMIT
 841+ 29E6 2A 0F 80             LD HL,(LOPLN)                    ; WITHIN LIMIT, GO
 842+ 29E9 22 01 80             LD (CURRNT),HL                   ; BACK TO THE SAVED
 843+ 29EC 2A 11 80             LD HL,(LOPPT)                    ; 'CURRNT' AND TEXT
 844+ 29EF EB                   EX DE,HL                         ; POINTER
 845+ 29F0 CD 8A 25             CALL FINISH
 846+ 29F3 E1           NX5:    POP  HL
 847+ 29F4 D1                   POP  DE
 848+ 29F5 CD A9 2D     NX2:    CALL POPA                        ; PURGE THIS LOOP
 849+ 29F8 CD 8A 25             CALL FINISH
 850+ 29FB
 851+ 29FB                      ; *************************************************************
 852+ 29FB
 853+ 29FB                      ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 854+ 29FB
 855+ 29FB                      ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 856+ 29FB                      ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 857+ 29FB
 858+ 29FB                      ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 859+ 29FB                      ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 860+ 29FB                      ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 861+ 29FB                      ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 862+ 29FB                      ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 863+ 29FB                      ; EXECUTION CONTINUES AT THE NEXT LINE.
 864+ 29FB
 865+ 29FB                      ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 866+ 29FB                      ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 867+ 29FB                      ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 868+ 29FB                      ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 869+ 29FB                      ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 870+ 29FB                      ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 871+ 29FB                      ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 872+ 29FB                      ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 873+ 29FB                      ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 874+ 29FB                      ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 875+ 29FB
 876+ 29FB                      ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 877+ 29FB                      ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 878+ 29FB                      ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 879+ 29FB                      ; THIS IS HANDLED IN 'INPERR'.
 880+ 29FB
 881+ 29FB                      ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 882+ 29FB                      ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 883+ 29FB                      ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 884+ 29FB                      ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 885+ 29FB                      ; THIS IS DONE BY 'DEFLT'.
 886+ 29FB
 887+ 29FB 21 00 00     REM:    LD  HL,0H                        ; *** REM ***
 888+ 29FE 3E                   DB   3EH                         ; THIS IS LIKE 'IF 0'
 889+ 29FF
 890+ 29FF CD 75 25     IFF:    CALL EXPR                          ; *** IF ***
 891+ 2A02 7C                   LD   A,H                         ; IS THE EXPR.=0?
 892+ 2A03 B5                   OR  L
 893+ 2A04 C2 63 28             JP NZ,RUNSML                     ; NO, CONTINUE
 894+ 2A07 CD F1 2C             CALL FNDSKP                      ; YES, SKIP REST OF LINE
 895+ 2A0A D2 5C 28             JP NC,RUNTSL                     ; AND RUN THE NEXT LINE
 896+ 2A0D C3 14 26             JP  RSTART                       ; IF NO NEXT, RE-START
 897+ 2A10
 898+ 2A10 2A 07 80     INPERR: LD HL,(STKINP)                   ; *** INPERR ***
 899+ 2A13 F9                   LD SP,HL                         ; RESTORE OLD SP
 900+ 2A14 E1                   POP  HL                          ; AND OLD 'CURRNT'
 901+ 2A15 22 01 80             LD (CURRNT),HL
 902+ 2A18 D1                   POP  DE                          ; AND OLD TEXT POINTER
 903+ 2A19 D1                   POP  DE                          ; REDO INPUT
 904+ 2A1A
 905+ 2A1A              INPUT:                                   ; *** INPUT ***
 906+ 2A1A D5           IP1:    PUSH DE                          ; SAVE IN CASE OF ERROR
 907+ 2A1B CD 09 2D             CALL QTSTG                       ; IS NEXT ITEM A STRING?
 908+ 2A1E C3 2A 2A             JP  IP2                          ; NO
 909+ 2A21 CD 91 25             CALL TSTV                          ; YES, BUT FOLLOWED BY A
 910+ 2A24 DA 68 2A             JP C,IP4                         ; VARIABLE?   NO.
 911+ 2A27 C3 3C 2A             JP  IP3                          ; YES.  INPUT VARIABLE
 912+ 2A2A D5           IP2:    PUSH DE                          ; SAVE FOR 'PRTSTG'
 913+ 2A2B CD 91 25             CALL TSTV                          ; MUST BE VARIABLE NOW
 914+ 2A2E DA 4D 2C             JP C,QWHAT                       ; "WHAT?" IT IS NOT?
 915+ 2A31 1A                   LD A,(DE)                        ; GET READY FOR 'PRTSTR'
 916+ 2A32 4F                   LD   C,A
 917+ 2A33 97                   SUB  A
 918+ 2A34 12                   LD (DE),A
 919+ 2A35 D1                   POP  DE
 920+ 2A36 CD FB 2C             CALL PRTSTG                      ; PRINT STRING AS PROMPT
 921+ 2A39 79                   LD   A,C                         ; RESTORE TEXT
 922+ 2A3A 1B                   DEC  DE
 923+ 2A3B 12                   LD (DE),A
 924+ 2A3C D5           IP3:    PUSH DE                          ; SAVE TEXT POINTER
 925+ 2A3D EB                   EX DE,HL
 926+ 2A3E 2A 01 80             LD HL,(CURRNT)                   ; ALSO SAVE 'CURRNT'
 927+ 2A41 E5                   PUSH HL
 928+ 2A42 21 1A 2A             LD  HL,IP1                       ; A NEGATIVE NUMBER
 929+ 2A45 22 01 80             LD (CURRNT),HL                   ; AS A FLAG
 930+ 2A48 21 00 00             LD  HL,0H                        ; SAVE SP TOO
 931+ 2A4B 39                   ADD HL,SP
 932+ 2A4C 22 07 80             LD (STKINP),HL
 933+ 2A4F D5                   PUSH DE                          ; OLD HL
 934+ 2A50 3E 3A                LD   A,3AH                       ; PRINT THIS TOO
 935+ 2A52 CD 83 2C             CALL GETLN                       ; AND GET A LINE
 936+ 2A55 11 C0 FD             LD  DE,BUFFER                    ; POINTS TO BUFFER
 937+ 2A58 CD 75 25             CALL EXPR                          ; EVALUATE INPUT
 938+ 2A5B 00                   NOP                              ; CAN BE 'CALL ENDCHK'
 939+ 2A5C 00                   NOP
 940+ 2A5D 00                   NOP
 941+ 2A5E D1                   POP  DE                          ; OK, GET OLD HL
 942+ 2A5F EB                   EX DE,HL
 943+ 2A60 73                   LD   (HL),E                      ; SAVE VALUE IN VAR.
 944+ 2A61 23                   INC  HL
 945+ 2A62 72                   LD   (HL),D
 946+ 2A63 E1                   POP  HL                          ; GET OLD 'CURRNT'
 947+ 2A64 22 01 80             LD (CURRNT),HL
 948+ 2A67 D1                   POP  DE                          ; AND OLD TEXT POINTER
 949+ 2A68 F1           IP4:    POP  AF                          ; PURGE JUNK IN STACK
 950+ 2A69 CD 3A 25             CALL TSTC                          ; IS NEXT CH. ','?
 951+ 2A6C 2C                   DB   ','
 952+ 2A6D 03                   DB   IP5-$-1
 953+ 2A6E C3 1A 2A             JP  IP1                          ; YES, MORE ITEMS.
 954+ 2A71 CD 8A 25     IP5:    CALL FINISH
 955+ 2A74
 956+ 2A74 1A           DEFLT:  LD A,(DE)                        ; ***  DEFLT ***
 957+ 2A75 FE 0D                CP  CR                           ; EMPTY LINE IS OK
 958+ 2A77 CA 85 2A             JP Z,LT1                         ; ELSE IT IS 'LET'
 959+ 2A7A
 960+ 2A7A CD 1B 2C     LET:    CALL SETVAL                      ; *** LET ***
 961+ 2A7D CD 3A 25             CALL TSTC                          ; SET VALUE TO VAR.
 962+ 2A80 2C                   DB   ','
 963+ 2A81 03                   DB   LT1-$-1
 964+ 2A82 C3 7A 2A             JP  LET                          ; ITEM BY ITEM
 965+ 2A85 CD 8A 25     LT1:    CALL FINISH                          ; UNTIL FINISH
 966+ 2A88
 967+ 2A88                                                       ; *************************************************************
 968+ 2A88
 969+ 2A88                                                       ; *** EXPR ***
 970+ 2A88
 971+ 2A88                                                       ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 972+ 2A88                                                       ; <EXPR>::<EXPR2>
 973+ 2A88                                                       ; <EXPR2><REL.OP.><EXPR2>
 974+ 2A88                                                       ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 975+ 2A88                                                       ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 976+ 2A88                                                       ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 977+ 2A88                                                       ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 978+ 2A88                                                       ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 979+ 2A88                                                       ; <EXPR4>::=<VARIABLE>
 980+ 2A88                                                       ; <FUNCTION>
 981+ 2A88                                                       ; (<EXPR>)
 982+ 2A88                                                       ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 983+ 2A88                                                       ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 984+ 2A88                                                       ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 985+ 2A88
 986+ 2A88 21 3D 30     EXPR1:  LD  HL,TAB8-1                    ; LOOKUP REL.OP.
 987+ 2A8B C3 57 30             JP  EXEC                         ; GO DO IT
 988+ 2A8E CD B7 2A     XP11:   CALL XP18                        ; REL.OP.">="
 989+ 2A91 D8                   RET C                            ; NO, RETURN HL=0
 990+ 2A92 6F                   LD   L,A                         ; YES, RETURN HL=1
 991+ 2A93 C9                   RET
 992+ 2A94 CD B7 2A     XP12:   CALL XP18                        ; REL.OP."#"
 993+ 2A97 C8                   RET Z                            ; FALSE, RETURN HL=0
 994+ 2A98 6F                   LD   L,A                         ; TRUE, RETURN HL=1
 995+ 2A99 C9                   RET
 996+ 2A9A CD B7 2A     XP13:   CALL XP18                        ; REL.OP.">"
 997+ 2A9D C8                   RET Z                            ; FALSE
 998+ 2A9E D8                   RET C                            ; ALSO FALSE, HL=0
 999+ 2A9F 6F                   LD   L,A                         ; TRUE, HL=1
1000+ 2AA0 C9                   RET
1001+ 2AA1 CD B7 2A     XP14:   CALL XP18                        ; REL.OP."<="
1002+ 2AA4 6F                   LD   L,A                         ; SET HL=1
1003+ 2AA5 C8                   RET Z                            ; REL. TRUE, RETURN
1004+ 2AA6 D8                   RET C
1005+ 2AA7 6C                   LD   L,H                         ; ELSE SET HL=0
1006+ 2AA8 C9                   RET
1007+ 2AA9 CD B7 2A     XP15:   CALL XP18                        ; REL.OP."="
1008+ 2AAC C0                   RET NZ                           ; FALSE, RETURN HL=0
1009+ 2AAD 6F                   LD   L,A                         ; ELSE SET HL=1
1010+ 2AAE C9                   RET
1011+ 2AAF CD B7 2A     XP16:   CALL XP18                        ; REL.OP."<"
1012+ 2AB2 D0                   RET NC                           ; FALSE, RETURN HL=0
1013+ 2AB3 6F                   LD   L,A                         ; ELSE SET HL=1
1014+ 2AB4 C9                   RET
1015+ 2AB5 E1           XP17:   POP  HL                          ; NOT .REL.OP
1016+ 2AB6 C9                   RET                              ; RETURN HL=<EXPR2>
1017+ 2AB7 79           XP18:   LD   A,C                         ; SUBROUTINE FOR ALL
1018+ 2AB8 E1                   POP  HL                          ; REL.OP.'S
1019+ 2AB9 C1                   POP  BC
1020+ 2ABA E5                   PUSH HL                          ; REVERSE TOP OF STACK
1021+ 2ABB C5                   PUSH BC
1022+ 2ABC 4F                   LD   C,A
1023+ 2ABD CD CC 2A             CALL EXPR2                       ; GET 2ND <EXPR2>
1024+ 2AC0 EB                   EX DE,HL                         ; VALUE IN DE NOW
1025+ 2AC1 E3                   EX (SP),HL                       ; 1ST <EXPR2> IN HL
1026+ 2AC2 CD 11 2C             CALL CKHLDE                      ; COMPARE 1ST WITH 2ND
1027+ 2AC5 D1                   POP  DE                          ; RESTORE TEXT POINTER
1028+ 2AC6 21 00 00             LD  HL,0H                        ; SET HL=0, A=1
1029+ 2AC9 3E 01                LD   A,1
1030+ 2ACB C9                   RET
1031+ 2ACC
1032+ 2ACC CD 3A 25     EXPR2:  CALL TSTC                          ; NEGATIVE SIGN?
1033+ 2ACF 2D                   DB   '-'
1034+ 2AD0 06                   DB   XP21-$-1
1035+ 2AD1 21 00 00             LD  HL,0H                        ; YES, FAKE '0-'
1036+ 2AD4 C3 FE 2A             JP  XP26                         ; TREAT LIKE SUBTRACT
1037+ 2AD7 CD 3A 25     XP21:   CALL TSTC                          ; POSITIVE SIGN? IGNORE
1038+ 2ADA 2B                   DB   '+'
1039+ 2ADB 00                   DB   XP22-$-1
1040+ 2ADC CD 08 2B     XP22:   CALL EXPR3                       ; 1ST <EXPR3>
1041+ 2ADF CD 3A 25     XP23:   CALL TSTC                          ; ADD?
1042+ 2AE2 2B                   DB   '+'
1043+ 2AE3 15                   DB   XP25-$-1
1044+ 2AE4 E5                   PUSH HL                          ; YES, SAVE VALUE
1045+ 2AE5 CD 08 2B             CALL EXPR3                       ; GET 2ND <EXPR3>
1046+ 2AE8 EB           XP24:   EX DE,HL                         ; 2ND IN DE
1047+ 2AE9 E3                   EX (SP),HL                       ; 1ST IN HL
1048+ 2AEA 7C                   LD   A,H                         ; COMPARE SIGN
1049+ 2AEB AA                   XOR  D
1050+ 2AEC 7A                   LD   A,D
1051+ 2AED 19                   ADD HL,DE
1052+ 2AEE D1                   POP  DE                          ; RESTORE TEXT POINTER
1053+ 2AEF FA DF 2A             JP M,XP23                        ; 1ST AND 2ND SIGN DIFFER
1054+ 2AF2 AC                   XOR  H                           ; 1ST AND 2ND SIGN EQUAL
1055+ 2AF3 F2 DF 2A             JP P,XP23                        ; SO IS RESULT
1056+ 2AF6 C3 F9 25             JP  QHOW                         ; ELSE WE HAVE OVERFLOW
1057+ 2AF9 CD 3A 25     XP25:   CALL TSTC                          ; SUBTRACT?
1058+ 2AFC 2D                   DB   '-'
1059+ 2AFD 92                   DB   XP42-$-1
1060+ 2AFE E5           XP26:   PUSH HL                          ; YES, SAVE 1ST <EXPR3>
1061+ 2AFF CD 08 2B             CALL EXPR3                       ; GET 2ND <EXPR3>
1062+ 2B02 CD FF 2B             CALL CHGSGN                      ; NEGATE
1063+ 2B05 C3 E8 2A             JP  XP24                         ; AND ADD THEM
1064+ 2B08
1065+ 2B08 CD 6C 2B     EXPR3:  CALL EXPR4                       ; GET 1ST <EXPR4>
1066+ 2B0B CD 3A 25     XP31:   CALL TSTC                          ; MULTIPLY?
1067+ 2B0E 2A                   DB   '*'
1068+ 2B0F 2D                   DB   XP34-$-1
1069+ 2B10 E5                   PUSH HL                          ; YES, SAVE 1ST
1070+ 2B11 CD 6C 2B             CALL EXPR4                       ; AND GET 2ND <EXPR4>
1071+ 2B14 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1072+ 2B16 CD FC 2B             CALL CHKSGN                      ; CHECK SIGN
1073+ 2B19 E3                   EX (SP),HL                       ; 1ST IN HL
1074+ 2B1A CD FC 2B             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1075+ 2B1D EB                   EX DE,HL
1076+ 2B1E E3                   EX (SP),HL
1077+ 2B1F 7C                   LD   A,H                         ; IS HL > 255 ?
1078+ 2B20 B7                   OR  A
1079+ 2B21 CA 2A 2B             JP Z,XP32                        ; NO
1080+ 2B24 7A                   LD   A,D                         ; YES, HOW ABOUT DE
1081+ 2B25 B2                   OR  D
1082+ 2B26 EB                   EX DE,HL                         ; PUT SMALLER IN HL
1083+ 2B27 C2 FA 25             JP NZ,AHOW                       ; ALSO >, WILL OVERFLOW
1084+ 2B2A 7D           XP32:   LD   A,L                         ; THIS IS DUMB
1085+ 2B2B 21 00 00             LD  HL,0H                        ; CLEAR RESULT
1086+ 2B2E B7                   OR  A                            ; ADD AND COUNT
1087+ 2B2F CA 5E 2B             JP Z,XP35
1088+ 2B32 19           XP33:   ADD HL,DE
1089+ 2B33 DA FA 25             JP C,AHOW                        ; OVERFLOW
1090+ 2B36 3D                   DEC  A
1091+ 2B37 C2 32 2B             JP NZ,XP33
1092+ 2B3A C3 5E 2B             JP  XP35                         ; FINISHED
1093+ 2B3D CD 3A 25     XP34:   CALL TSTC                          ; DIVIDE?
1094+ 2B40 2F                   DB   '/'
1095+ 2B41 4E                   DB   XP42-$-1
1096+ 2B42 E5                   PUSH HL                          ; YES, SAVE 1ST <EXPR4>
1097+ 2B43 CD 6C 2B             CALL EXPR4                       ; AND GET THE SECOND ONE
1098+ 2B46 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1099+ 2B48 CD FC 2B             CALL CHKSGN                      ; CHECK SIGN OF 2ND
1100+ 2B4B E3                   EX (SP),HL                       ; GET 1ST IN HL
1101+ 2B4C CD FC 2B             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1102+ 2B4F EB                   EX DE,HL
1103+ 2B50 E3                   EX (SP),HL
1104+ 2B51 EB                   EX DE,HL
1105+ 2B52 7A                   LD   A,D                         ; DIVIDE BY 0?
1106+ 2B53 B3                   OR  E
1107+ 2B54 CA FA 25             JP Z,AHOW                        ; SAY "HOW?"
1108+ 2B57 C5                   PUSH BC                          ; ELSE SAVE SIGN
1109+ 2B58 CD DF 2B             CALL DIVIDE                      ; USE SUBROUTINE
1110+ 2B5B 60                   LD   H,B                         ; RESULT IN HL NOW
1111+ 2B5C 69                   LD   L,C
1112+ 2B5D C1                   POP  BC                          ; GET SIGN BACK
1113+ 2B5E D1           XP35:   POP  DE                          ; AND TEXT POINTER
1114+ 2B5F 7C                   LD   A,H                         ; HL MUST BE +
1115+ 2B60 B7                   OR  A
1116+ 2B61 FA F9 25             JP M,QHOW                        ; ELSE IT IS OVERFLOW
1117+ 2B64 78                   LD   A,B
1118+ 2B65 B7                   OR  A
1119+ 2B66 FC FF 2B             CALL M,CHGSGN                    ; CHANGE SIGN IF NEEDED
1120+ 2B69 C3 0B 2B             JP  XP31                         ; LOOK FOR MORE TERMS
1121+ 2B6C
1122+ 2B6C 21 17 30     EXPR4:  LD  HL,TAB4-1                    ; FIND FUNCTION IN TAB4
1123+ 2B6F C3 57 30             JP  EXEC                         ; AND GO DO IT
1124+ 2B72 CD 91 25     XP40:   CALL TSTV                          ; NO, NOT A FUNCTION
1125+ 2B75 DA 7D 2B             JP C,XP41                        ; NOR A VARIABLE
1126+ 2B78 7E                   LD   A,(HL)                      ; VARIABLE
1127+ 2B79 23                   INC  HL
1128+ 2B7A 66                   LD   H,(HL)                      ; VALUE IN HL
1129+ 2B7B 6F                   LD   L,A
1130+ 2B7C C9                   RET
1131+ 2B7D CD CF 25     XP41:   CALL TSTNUM                      ; OR IS IT A NUMBER
1132+ 2B80 78                   LD   A,B                         ; # OF DIGIT
1133+ 2B81 B7                   OR  A
1134+ 2B82 C0                   RET NZ                           ; OK
1135+ 2B83 CD 3A 25     PARN:   CALL TSTC
1136+ 2B86 28                   DB   '('
1137+ 2B87 09                   DB   XP43-$-1
1138+ 2B88 CD 75 25             CALL EXPR                          ; "(EXPR)"
1139+ 2B8B CD 3A 25             CALL TSTC
1140+ 2B8E 29                   DB   ')'
1141+ 2B8F 01                   DB   XP43-$-1
1142+ 2B90 C9           XP42:   RET
1143+ 2B91 C3 4D 2C     XP43:   JP  QWHAT                        ; ELSE SAY: "WHAT?"
1144+ 2B94
1145+ 2B94 CD 83 2B     RND:    CALL PARN                        ; *** RND(EXPR) ***
1146+ 2B97 7C                   LD   A,H                         ; EXPR MUST BE +
1147+ 2B98 B7                   OR  A
1148+ 2B99 FA F9 25             JP M,QHOW
1149+ 2B9C B5                   OR  L                            ; AND NON-ZERO
1150+ 2B9D CA F9 25             JP Z,QHOW
1151+ 2BA0 D5                   PUSH DE                          ; SAVE BOTH
1152+ 2BA1 E5                   PUSH HL
1153+ 2BA2 2A 13 80             LD HL,(RANPNT)                   ; GET MEMORY AS RANDOM
1154+ 2BA5 11 4C 31             LD  DE,LSTROM                    ; NUMBER
1155+ 2BA8 CD 7C 25             CALL COMP
1156+ 2BAB DA B1 2B             JP C,RA1                         ; WRAP AROUND IF LAST
1157+ 2BAE 21 32 25             LD  HL,TBSTART
1158+ 2BB1 5E           RA1:    LD   E,(HL)
1159+ 2BB2 23                   INC  HL
1160+ 2BB3 56                   LD   D,(HL)
1161+ 2BB4 22 13 80             LD (RANPNT),HL
1162+ 2BB7 E1                   POP  HL
1163+ 2BB8 EB                   EX DE,HL
1164+ 2BB9 C5                   PUSH BC
1165+ 2BBA CD DF 2B             CALL DIVIDE                      ; RND(N)=MOD(M,N)+1
1166+ 2BBD C1                   POP  BC
1167+ 2BBE D1                   POP  DE
1168+ 2BBF 23                   INC  HL
1169+ 2BC0 C9                   RET
1170+ 2BC1
1171+ 2BC1 CD 83 2B     ABS:    CALL PARN                        ; *** ABS(EXPR) ***
1172+ 2BC4 1B                   DEC  DE
1173+ 2BC5 CD FC 2B             CALL CHKSGN                      ; CHECK SIGN
1174+ 2BC8 13                   INC  DE
1175+ 2BC9 C9                   RET
1176+ 2BCA
1177+ 2BCA CD 83 2B     PEEK:   CALL PARN                        ; *** PEEK(EXPR) ***
1178+ 2BCD 7E                   ld a, (hl)                      ; We got a location into hl, so read from it
1179+ 2BCE 6F                   ld l,a
1180+ 2BCF 26 00                ld h,0
1181+ 2BD1 C9                   RET
1182+ 2BD2
1183+ 2BD2 2A 15 80     SIZE:   LD HL,(TXTUNF)                   ; *** SIZE ***
1184+ 2BD5 D5                   PUSH DE                          ; GET THE NUMBER OF FREE
1185+ 2BD6 EB                   EX DE,HL                         ; BYTES BETWEEN 'TXTUNF'
1186+ 2BD7 21 89 FD             LD  HL,VARBGN                    ; AND 'VARBGN'
1187+ 2BDA CD F5 2B             CALL SUBDE
1188+ 2BDD D1                   POP  DE
1189+ 2BDE C9                   RET
1190+ 2BDF
1191+ 2BDF                      ; *************************************************************
1192+ 2BDF
1193+ 2BDF                      ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1194+ 2BDF
1195+ 2BDF                      ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1196+ 2BDF
1197+ 2BDF                      ; 'SUBDE' SUBSTRACTS DE FROM HL
1198+ 2BDF
1199+ 2BDF                      ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1200+ 2BDF                      ; SIGN AND FLIP SIGN OF B.
1201+ 2BDF
1202+ 2BDF                      ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1203+ 2BDF
1204+ 2BDF                      ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1205+ 2BDF                      ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1206+ 2BDF                      ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1207+ 2BDF
1208+ 2BDF E5           DIVIDE: PUSH HL                          ; *** DIVIDE ***
1209+ 2BE0 6C                   ld   l,h                         ; DIVIDE H BY DE
1210+ 2BE1 26 00                LD   H,0
1211+ 2BE3 CD EA 2B             CALL DV1
1212+ 2BE6 41                   LD   B,C                         ; SAVE RESULT IN B
1213+ 2BE7 7D                   LD   A,L                         ; (REMINDER+L)/DE
1214+ 2BE8 E1                   POP  HL
1215+ 2BE9 67                   LD   H,A
1216+ 2BEA 0E FF        DV1:    LD   C,0FFH                      ; RESULT IN C
1217+ 2BEC 0C           DV2:    INC  C                           ; DUMB ROUTINE
1218+ 2BED CD F5 2B             CALL SUBDE                       ; DIVIDE BY SUBTRACT
1219+ 2BF0 D2 EC 2B             JP NC,DV2                        ; AND COUNT
1220+ 2BF3 19                   ADD HL,DE
1221+ 2BF4 C9                   RET
1222+ 2BF5
1223+ 2BF5 7D           SUBDE:  LD   A,L                         ; *** SUBDE ***
1224+ 2BF6 93                   SUB  E                           ; SUBSTRACT DE FROM
1225+ 2BF7 6F                   LD   L,A                         ; HL
1226+ 2BF8 7C                   LD   A,H
1227+ 2BF9 9A                   sbc a,D
1228+ 2BFA 67                   LD   H,A
1229+ 2BFB C9                   RET
1230+ 2BFC
1231+ 2BFC 7C           CHKSGN: LD   A,H                         ; *** CHKSGN ***
1232+ 2BFD B7                   OR  A                            ; CHECK SIGN OF HL
1233+ 2BFE F0                   RET P                            ; IF -, CHANGE SIGN
1234+ 2BFF
1235+ 2BFF 7C           CHGSGN: LD   A,H                         ; *** CHGSGN ***
1236+ 2C00 F5                   PUSH AF
1237+ 2C01 2F                   CPL                              ; CHANGE SIGN OF HL
1238+ 2C02 67                   LD   H,A
1239+ 2C03 7D                   LD   A,L
1240+ 2C04 2F                   CPL
1241+ 2C05 6F                   LD   L,A
1242+ 2C06 23                   INC  HL
1243+ 2C07 F1                   POP  AF
1244+ 2C08 AC                   XOR  H
1245+ 2C09 F2 F9 25             JP P,QHOW
1246+ 2C0C 78                   LD   A,B                         ; AND ALSO FLIP B
1247+ 2C0D EE 80                XOR  80H
1248+ 2C0F 47                   LD   B,A
1249+ 2C10 C9                   RET
1250+ 2C11
1251+ 2C11 7C           CKHLDE: LD   A,H
1252+ 2C12 AA                   XOR  D                           ; SAME SIGN?
1253+ 2C13 F2 17 2C             JP P,CK1                         ; YES, COMPARE
1254+ 2C16 EB                   EX DE,HL                         ; NO, XCH AND COMP
1255+ 2C17 CD 7C 25     CK1:    CALL COMP
1256+ 2C1A C9                   RET;,5                          ; No idea if this was a typo but it said ret,5 which didn't assemble.
1257+ 2C1B
1258+ 2C1B                      ; *************************************************************
1259+ 2C1B
1260+ 2C1B                      ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1261+ 2C1B
1262+ 2C1B                      ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1263+ 2C1B                      ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1264+ 2C1B                      ; TO THAT VALUE.
1265+ 2C1B
1266+ 2C1B                      ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1267+ 2C1B                      ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1268+ 2C1B                      ; NEXT LINE AND CONTINUE FROM THERE.
1269+ 2C1B
1270+ 2C1B                      ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1271+ 2C1B                      ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1272+ 2C1B
1273+ 2C1B                      ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1274+ 2C1B                      ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1275+ 2C1B                      ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1276+ 2C1B                      ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1277+ 2C1B                      ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1278+ 2C1B                      ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1279+ 2C1B                      ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1280+ 2C1B                      ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1281+ 2C1B                      ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1282+ 2C1B
1283+ 2C1B                      ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1284+ 2C1B                      ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1285+ 2C1B                      ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1286+ 2C1B                      ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1287+ 2C1B                      ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1288+ 2C1B
1289+ 2C1B CD 91 25     SETVAL: CALL TSTV                          ; *** SETVAL ***
1290+ 2C1E DA 4D 2C             JP C,QWHAT                       ; "WHAT?" NO VARIABLE
1291+ 2C21 E5                   PUSH HL                          ; SAVE ADDRESS OF VAR.
1292+ 2C22 CD 3A 25             CALL TSTC                          ; PASS "=" SIGN
1293+ 2C25 3D                   DB   '='
1294+ 2C26 0A                   DB   SV1-$-1
1295+ 2C27 CD 75 25             CALL EXPR                          ; EVALUATE EXPR.
1296+ 2C2A 44                   LD   B,H                         ; VALUE IS IN BC NOW
1297+ 2C2B 4D                   LD   C,L
1298+ 2C2C E1                   POP  HL                          ; GET ADDRESS
1299+ 2C2D 71                   LD   (HL),C                      ; SAVE VALUE
1300+ 2C2E 23                   INC  HL
1301+ 2C2F 70                   LD   (HL),B
1302+ 2C30 C9                   RET
1303+ 2C31 C3 4D 2C     SV1:    JP  QWHAT                        ; NO "=" SIGN
1304+ 2C34
1305+ 2C34 CD 3A 25     FIN:    CALL TSTC                          ; *** FIN ***
1306+ 2C37 3B                   DB   3BH
1307+ 2C38 04                   DB   FI1-$-1
1308+ 2C39 F1                   POP  AF                          ; ";", PURGE RET. ADDR.
1309+ 2C3A C3 63 28             JP  RUNSML                       ; CONTINUE SAME LINE
1310+ 2C3D CD 3A 25     FI1:    CALL TSTC                          ; NOT ";", IS IT CR?
1311+ 2C40 0D                   DB   CR
1312+ 2C41 04                   DB   FI2-$-1
1313+ 2C42 F1                   POP  AF                          ; YES, PURGE RET. ADDR.
1314+ 2C43 C3 53 28             JP  RUNNXL                       ; RUN NEXT LINE
1315+ 2C46 C9           FI2:    RET                              ; ELSE RETURN TO CALLER
1316+ 2C47
1317+ 2C47 CD 82 25     ENDCHK: CALL IGNBLK                          ; *** ENDCHK ***
1318+ 2C4A FE 0D                CP  CR                           ; END WITH CR?
1319+ 2C4C C8                   RET Z                            ; OK, ELSE SAY: "WHAT?"
1320+ 2C4D
1321+ 2C4D D5           QWHAT:  PUSH DE                          ; *** QWHAT ***
1322+ 2C4E 11 08 26     AWHAT:  LD  DE,WHAT                      ; *** AWHAT ***
1323+ 2C51 97           ERROR:  SUB  A                           ; *** ERROR ***
1324+ 2C52 CD FB 2C             CALL PRTSTG                      ; PRINT 'WHAT?', 'HOW?'
1325+ 2C55 D1                   POP  DE                          ; OR 'SORRY'
1326+ 2C56 1A                   LD A,(DE)                        ; SAVE THE CHARACTER
1327+ 2C57 F5                   PUSH AF                          ; AT WHERE OLD DE ->
1328+ 2C58 97                   SUB  A                           ; AND PUT A 0 THERE
1329+ 2C59 12                   LD (DE),A
1330+ 2C5A 2A 01 80             LD HL,(CURRNT)                   ; GET CURRENT LINE #
1331+ 2C5D E5                   PUSH HL
1332+ 2C5E 7E                   LD   A,(HL)                      ; CHECK THE VALUE
1333+ 2C5F 23                   INC  HL
1334+ 2C60 B6                   OR  (HL)
1335+ 2C61 D1                   POP  DE
1336+ 2C62 CA 14 26             JP Z,RSTART                      ; IF ZERO, JUST RESTART
1337+ 2C65 7E                   LD   A,(HL)                      ; IF NEGATIVE,
1338+ 2C66 B7                   OR  A
1339+ 2C67 FA 10 2A             JP M,INPERR                      ; REDO INPUT
1340+ 2C6A CD 7A 2D             CALL PRTLN                       ; ELSE PRINT THE LINE
1341+ 2C6D 1B                   DEC  DE                          ; UPTO WHERE THE 0 IS
1342+ 2C6E F1                   POP  AF                          ; RESTORE THE CHARACTER
1343+ 2C6F 12                   LD (DE),A
1344+ 2C70 3E 3F                LD   A,3FH                       ; PRINT A "?"
1345+ 2C72 CD 50 25             CALL OUTC
1346+ 2C75 97                   SUB  A                           ; AND THE REST OF THE
1347+ 2C76 CD FB 2C             CALL PRTSTG                      ; LINE
1348+ 2C79 C3 14 26             JP  RSTART                       ; THEN RESTART
1349+ 2C7C
1350+ 2C7C D5           QSORRY: PUSH DE                          ; *** QSORRY ***
1351+ 2C7D 11 0E 26     ASORRY: LD  DE,SORRY                     ; *** ASORRY ***
1352+ 2C80 C3 51 2C             JP  ERROR
1353+ 2C83
1354+ 2C83                      ; *************************************************************
1355+ 2C83
1356+ 2C83                      ; *** GETLN *** FNDLN (& FRIENDS) ***
1357+ 2C83
1358+ 2C83                      ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1359+ 2C83                      ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1360+ 2C83                      ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1361+ 2C83                      ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1362+ 2C83                      ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1363+ 2C83                      ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1364+ 2C83                      ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1365+ 2C83
1366+ 2C83                      ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1367+ 2C83                      ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1368+ 2C83                      ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1369+ 2C83                      ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1370+ 2C83                      ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1371+ 2C83                      ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1372+ 2C83                      ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1373+ 2C83                      ; LINE, FLAGS ARE C & NZ.
1374+ 2C83                      ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1375+ 2C83                      ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1376+ 2C83                      ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1377+ 2C83                      ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1378+ 2C83                      ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1379+ 2C83                      ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1380+ 2C83
1381+ 2C83 CD 50 25     GETLN:  CALL OUTC                          ; *** GETLN ***
1382+ 2C86 11 C0 FD             LD  DE,BUFFER                    ; PROMPT AND INIT.
1383+ 2C89 CD 8B 2F     GL1:    CALL CHKIO                       ; CHECK KEYBOARD
1384+ 2C8C CA 89 2C             JP Z,GL1                         ; NO INPUT, WAIT
1385+ 2C8F FE 08                CP  08H                          ; DELETE LAST CHARACTER?
1386+ 2C91 CA B0 2C             JP Z,GL3                         ; YES
1387+ 2C94 CD 50 25             CALL OUTC                          ; INPUT, ECHO BACK
1388+ 2C97 FE 0A                CP  0AH                          ; IGNORE LF
1389+ 2C99 CA 89 2C             JP Z,GL1
1390+ 2C9C B7                   OR  A                            ; IGNORE NULL
1391+ 2C9D CA 89 2C             JP Z,GL1
1392+ 2CA0 FE 7D                CP  7DH                          ; DELETE THE WHOLE LINE?
1393+ 2CA2 CA C9 2C             JP Z,GL4                         ; YES
1394+ 2CA5 12                   LD (DE),A                        ; ELSE SAVE INPUT
1395+ 2CA6 13                   INC  DE                          ; AND BUMP POINTER
1396+ 2CA7 FE 0D                CP  0DH                          ; WAS IT CR?
1397+ 2CA9 C8                   RET Z                            ; YES, END OF LINE
1398+ 2CAA 7B                   LD   A,E                         ; ELSE MORE FREE ROOM?
1399+ 2CAB FE 00                CP  BUFEND & 0FFH
1400+ 2CAD C2 89 2C             JP NZ,GL1                        ; YES, GET NEXT INPUT
1401+ 2CB0 7B           GL3:    LD   A,E                         ; DELETE LAST CHARACTER
1402+ 2CB1 FE C0                CP  BUFFER & 0FFH                ; BUT DO WE HAVE ANY?
1403+ 2CB3 CA C9 2C             JP Z,GL4                         ; NO, REDO WHOLE LINE
1404+ 2CB6 1B                   DEC  DE                          ; YES, BACKUP POINTER
1405+ 2CB7 3E 08                LD   A,08H                       ; AND move cursor left, print space, cursor left again (to rub-out)
1406+ 2CB9 CD 50 25             CALL OUTC
1407+ 2CBC 3E 20                ld a, ' '
1408+ 2CBE CD 50 25             CALL OUTC
1409+ 2CC1 3E 08                ld a, 08h
1410+ 2CC3 CD 50 25             CALL OUTC
1411+ 2CC6 C3 89 2C             JP  GL1                          ; GO GET NEXT INPUT
1412+ 2CC9 CD 4E 25     GL4:    CALL CRLF                        ; REDO ENTIRE LINE
1413+ 2CCC 3E 5E                LD   A,05EH                      ; CR, LF AND UP-ARROW
1414+ 2CCE C3 83 2C             JP  GETLN
1415+ 2CD1
1416+ 2CD1 7C           FNDLN:  LD   A,H                         ; *** FNDLN ***
1417+ 2CD2 B7                   OR  A                            ; CHECK SIGN OF HL
1418+ 2CD3 FA F9 25             JP M,QHOW                        ; IT CANNOT BE -
1419+ 2CD6 11 19 80             LD  DE,TXTBGN                    ; INIT TEXT POINTER
1420+ 2CD9
1421+ 2CD9              FNDLP:                                   ; *** FDLNP ***
1422+ 2CD9 E5           FL1:    PUSH HL                          ; SAVE LINE #
1423+ 2CDA 2A 15 80             LD HL,(TXTUNF)                   ; CHECK IF WE PASSED END
1424+ 2CDD 2B                   DEC  HL
1425+ 2CDE CD 7C 25             CALL COMP
1426+ 2CE1 E1                   POP  HL                          ; GET LINE # BACK
1427+ 2CE2 D8                   RET C                            ; C,NZ PASSED END
1428+ 2CE3 1A                   LD A,(DE)                        ; WE DID NOT, GET BYTE 1
1429+ 2CE4 95                   SUB  L                           ; IS THIS THE LINE?
1430+ 2CE5 47                   LD   B,A                         ; COMPARE LOW ORDER
1431+ 2CE6 13                   INC  DE
1432+ 2CE7 1A                   LD A,(DE)                        ; GET BYTE 2
1433+ 2CE8 9C                   sbc a,H                          ; COMPARE HIGH ORDER
1434+ 2CE9 DA F0 2C             JP C,FL2                         ; NO, NOT THERE YET
1435+ 2CEC 1B                   DEC  DE                          ; ELSE WE EITHER FOUND
1436+ 2CED B0                   OR  B                            ; IT, OR IT IS NOT THERE
1437+ 2CEE C9                   RET                              ; NC,Z:FOUND, NC,NZ:NO
1438+ 2CEF
1439+ 2CEF              FNDNXT:                                  ; *** FNDNXT ***
1440+ 2CEF 13                   INC  DE                          ; FIND NEXT LINE
1441+ 2CF0 13           FL2:    INC  DE                          ; JUST PASSED BYTE 1 & 2
1442+ 2CF1
1443+ 2CF1 1A           FNDSKP: LD A,(DE)                        ; *** FNDSKP ***
1444+ 2CF2 FE 0D                CP  CR                           ; TRY TO FIND CR
1445+ 2CF4 C2 F0 2C             JP NZ,FL2                        ; KEEP LOOKING
1446+ 2CF7 13                   INC  DE                          ; FOUND CR, SKIP OVER
1447+ 2CF8 C3 D9 2C             JP  FL1                          ; CHECK IF END OF TEXT
1448+ 2CFB
1449+ 2CFB                                                       ; *************************************************************
1450+ 2CFB
1451+ 2CFB                                                       ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1452+ 2CFB
1453+ 2CFB                                                       ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1454+ 2CFB                                                       ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1455+ 2CFB                                                       ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1456+ 2CFB                                                       ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1457+ 2CFB
1458+ 2CFB                                                       ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1459+ 2CFB                                                       ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACKSLASH,
1460+ 2CFB                                                       ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1461+ 2CFB                                                       ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1462+ 2CFB                                                       ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1463+ 2CFB                                                       ; OVER (USUALLY A JUMP INSTRUCTION.
1464+ 2CFB
1465+ 2CFB                                                       ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1466+ 2CFB                                                       ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1467+ 2CFB                                                       ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1468+ 2CFB                                                       ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1469+ 2CFB                                                       ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1470+ 2CFB
1471+ 2CFB                                                       ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1472+ 2CFB
1473+ 2CFB 47           PRTSTG: LD   B,A                         ; *** PRTSTG ***
1474+ 2CFC 1A           PS1:    LD A,(DE)                        ; GET A CHARACTER
1475+ 2CFD 13                   INC  DE                          ; BUMP POINTER
1476+ 2CFE B8                   CP  B                            ; SAME AS OLD A?
1477+ 2CFF C8                   RET Z                            ; YES, RETURN
1478+ 2D00 CD 50 25             CALL OUTC                          ; ELSE PRINT IT
1479+ 2D03 FE 0D                CP  CR                           ; WAS IT A CR?
1480+ 2D05 C2 FC 2C             JP NZ,PS1                        ; NO, NEXT
1481+ 2D08 C9                   RET                              ; YES, RETURN
1482+ 2D09
1483+ 2D09 CD 3A 25     QTSTG:  CALL TSTC                          ; *** QTSTG ***
1484+ 2D0C 22                   DB   34                          ; ascii for quote
1485+ 2D0D 0F                   DB   QT3-$-1
1486+ 2D0E 3E 22                LD   A,22H                       ; IT IS A quote
1487+ 2D10 CD FB 2C     QT1:    CALL PRTSTG                      ; PRINT UNTIL ANOTHER
1488+ 2D13 FE 0D                CP  CR                           ; WAS LAST ONE A CR?
1489+ 2D15 E1                   POP  HL                          ; RETURN ADDRESS
1490+ 2D16 CA 53 28             JP Z,RUNNXL                      ; WAS CR, RUN NEXT LINE
1491+ 2D19 23           QT2:    INC  HL                          ; SKIP 3 BYTES ON RETURN
1492+ 2D1A 23                   INC  HL
1493+ 2D1B 23                   INC  HL
1494+ 2D1C E9                   JP (HL)                          ; RETURN
1495+ 2D1D CD 3A 25     QT3:    CALL TSTC                          ; IS IT A '?
1496+ 2D20 27                   DB   27H
1497+ 2D21 05                   DB   QT4-$-1
1498+ 2D22 3E 27                LD   A,27H                       ; YES, DO THE SAME
1499+ 2D24 C3 10 2D             JP  QT1                          ; AS IN quote
1500+ 2D27 CD 3A 25     QT4:    CALL TSTC                          ; IS IT BACKSLASH " \ "?
1501+ 2D2A 5C                   DB   5CH
1502+ 2D2B 09                   DB   QT5-$-1
1503+ 2D2C 3E 0D                LD   A,0DH                       ; YES, CR WITHOUT LF
1504+ 2D2E CD 50 25             CALL OUTC
1505+ 2D31 E1                   POP  HL                          ; RETURN ADDRESS
1506+ 2D32 C3 19 2D             JP  QT2
1507+ 2D35 C9           QT5:    RET                              ; NONE OF ABOVE
1508+ 2D36
1509+ 2D36 06 00        PRTNUM: LD   B,0                         ; *** PRTNUM ***
1510+ 2D38 CD FC 2B             CALL CHKSGN                      ; CHECK SIGN
1511+ 2D3B F2 41 2D             JP P,PN1                         ; NO SIGN
1512+ 2D3E 06 2D                LD   B,'-'                       ; B=SIGN
1513+ 2D40 0D                   DEC  C                           ; '-' TAKES SPACE
1514+ 2D41 D5           PN1:    PUSH DE                          ; SAVE
1515+ 2D42 11 0A 00             LD  DE,0AH                       ; DECIMAL
1516+ 2D45 D5                   PUSH DE                          ; SAVE AS A FLAG
1517+ 2D46 0D                   DEC  C                           ; C=SPACES
1518+ 2D47 C5                   PUSH BC                          ; SAVE SIGN & SPACE
1519+ 2D48 CD DF 2B     PN2:    CALL DIVIDE                      ; DIVIDE HL BY 10
1520+ 2D4B 78                   LD   A,B                         ; RESULT 0?
1521+ 2D4C B1                   OR  C
1522+ 2D4D CA 58 2D             JP Z,PN3                         ; YES, WE GOT ALL
1523+ 2D50 E3                   EX (SP),HL                       ; NO, SAVE REMAINDER
1524+ 2D51 2D                   DEC  L                           ; AND COUNT SPACE
1525+ 2D52 E5                   PUSH HL                          ; HL IS OLD BC
1526+ 2D53 60                   LD   H,B                         ; MOVE RESULT TO BC
1527+ 2D54 69                   LD   L,C
1528+ 2D55 C3 48 2D             JP  PN2                          ; AND DIVIDE BY 10
1529+ 2D58 C1           PN3:    POP  BC                          ; WE GOT ALL DIGITS IN
1530+ 2D59 0D           PN4:    DEC  C                           ; THE STACK
1531+ 2D5A 79                   LD   A,C                         ; LOOK AT SPACE COUNT
1532+ 2D5B B7                   OR  A
1533+ 2D5C FA 67 2D             JP M,PN5                         ; NO LEADING BLANKS
1534+ 2D5F 3E 20                LD   A,20H                       ; LEADING BLANKS
1535+ 2D61 CD 50 25             CALL OUTC
1536+ 2D64 C3 59 2D             JP  PN4                          ; MORE?
1537+ 2D67 78           PN5:    LD   A,B                         ; PRINT SIGN
1538+ 2D68 B7                   OR  A
1539+ 2D69 C4 10 00             CALL NZ,10H
1540+ 2D6C 5D                   LD   E,L                         ; LAST REMAINDER IN E
1541+ 2D6D 7B           PN6:    LD   A,E                         ; CHECK DIGIT IN E
1542+ 2D6E FE 0A                CP  0AH                          ; 10 IS FLAG FOR NO MORE
1543+ 2D70 D1                   POP  DE
1544+ 2D71 C8                   RET Z                            ; IF SO, RETURN
1545+ 2D72 C6 30                ADD  A,30H                       ; ELSE CONVERT TO ASCII
1546+ 2D74 CD 50 25             CALL OUTC                          ; AND PRINT THE DIGIT
1547+ 2D77 C3 6D 2D             JP  PN6                          ; GO BACK FOR MORE
1548+ 2D7A
1549+ 2D7A 1A           PRTLN:  LD A,(DE)                        ; *** PRTLN ***
1550+ 2D7B 6F                   LD   L,A                         ; LOW ORDER LINE #
1551+ 2D7C 13                   INC  DE
1552+ 2D7D 1A                   LD A,(DE)                        ; HIGH ORDER
1553+ 2D7E 67                   LD   H,A
1554+ 2D7F 13                   INC  DE
1555+ 2D80 0E 04                LD   C,4H                        ; PRINT 4 DIGIT LINE #
1556+ 2D82 CD 36 2D             CALL PRTNUM
1557+ 2D85 3E 20                LD   A,20H                       ; FOLLOWED BY A BLANK
1558+ 2D87 CD 50 25             CALL OUTC
1559+ 2D8A 97                   SUB  A                           ; AND THEN THE NEXT
1560+ 2D8B CD FB 2C             CALL PRTSTG
1561+ 2D8E C9                   RET
1562+ 2D8F
1563+ 2D8F                      ; *************************************************************
1564+ 2D8F
1565+ 2D8F                      ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1566+ 2D8F
1567+ 2D8F                      ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1568+ 2D8F                      ; DE = HL
1569+ 2D8F
1570+ 2D8F                      ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1571+ 2D8F                      ; UNTIL DE = BC
1572+ 2D8F
1573+ 2D8F                      ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1574+ 2D8F                      ; STACK
1575+ 2D8F
1576+ 2D8F                      ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1577+ 2D8F                      ; STACK
1578+ 2D8F
1579+ 2D8F CD 7C 25     MVUP:   CALL COMP                          ; *** MVUP ***
1580+ 2D92 C8                   RET Z                            ; DE = HL, RETURN
1581+ 2D93 1A                   LD A,(DE)                        ; GET ONE BYTE
1582+ 2D94 02                   LD (BC),A                        ; MOVE IT
1583+ 2D95 13                   INC  DE                          ; INCREASE BOTH POINTERS
1584+ 2D96 03                   INC  BC
1585+ 2D97 C3 8F 2D             JP  MVUP                         ; UNTIL DONE
1586+ 2D9A
1587+ 2D9A 78           MVDOWN: LD   A,B                         ; *** MVDOWN ***
1588+ 2D9B 92                   SUB  D                           ; TEST IF DE = BC
1589+ 2D9C C2 A2 2D             JP NZ,MD1                        ; NO, GO MOVE
1590+ 2D9F 79                   LD   A,C                         ; MAYBE, OTHER BYTE?
1591+ 2DA0 93                   SUB  E
1592+ 2DA1 C8                   RET Z                            ; YES, RETURN
1593+ 2DA2 1B           MD1:    DEC  DE                          ; ELSE MOVE A BYTE
1594+ 2DA3 2B                   DEC  HL                          ; BUT FIRST DECREASE
1595+ 2DA4 1A                   LD A,(DE)                        ; BOTH POINTERS AND
1596+ 2DA5 77                   LD   (HL),A                      ; THEN DO IT
1597+ 2DA6 C3 9A 2D             JP  MVDOWN                       ; LOOP BACK
1598+ 2DA9
1599+ 2DA9 C1           POPA:   POP  BC                          ; BC = RETURN ADDR.
1600+ 2DAA E1                   POP  HL                          ; RESTORE LOPVAR, BUT
1601+ 2DAB 22 09 80             LD (LOPVAR),HL                   ; =0 MEANS NO MORE
1602+ 2DAE 7C                   LD   A,H
1603+ 2DAF B5                   OR  L
1604+ 2DB0 CA C3 2D             JP Z,PP1                         ; YEP, GO RETURN
1605+ 2DB3 E1                   POP  HL                          ; NOP, RESTORE OTHERS
1606+ 2DB4 22 0B 80             LD (LOPINC),HL
1607+ 2DB7 E1                   POP  HL
1608+ 2DB8 22 0D 80             LD (LOPLMT),HL
1609+ 2DBB E1                   POP  HL
1610+ 2DBC 22 0F 80             LD (LOPLN),HL
1611+ 2DBF E1                   POP  HL
1612+ 2DC0 22 11 80             LD (LOPPT),HL
1613+ 2DC3 C5           PP1:    PUSH BC                          ; BC = RETURN ADDR.
1614+ 2DC4 C9                   RET
1615+ 2DC5
1616+ 2DC5 21 01 FE     PUSHA:  LD  HL,STKLMT                    ; *** PUSHA ***
1617+ 2DC8 CD FF 2B             CALL CHGSGN
1618+ 2DCB C1                   POP  BC                          ; BC=RETURN ADDRESS
1619+ 2DCC 39                   ADD HL,SP                        ; IS STACK NEAR THE TOP?
1620+ 2DCD D2 7C 2C             JP NC,QSORRY                     ; YES, SORRY FOR THAT
1621+ 2DD0 2A 09 80             LD HL,(LOPVAR)                   ; ELSE SAVE LOOP VAR'S
1622+ 2DD3 7C                   LD   A,H                         ; BUT IF LOPVAR IS 0
1623+ 2DD4 B5                   OR  L                            ; THAT WILL BE ALL
1624+ 2DD5 CA EB 2D             JP Z,PU1
1625+ 2DD8 2A 11 80             LD HL,(LOPPT)                    ; ELSE, MORE TO SAVE
1626+ 2DDB E5                   PUSH HL
1627+ 2DDC 2A 0F 80             LD HL,(LOPLN)
1628+ 2DDF E5                   PUSH HL
1629+ 2DE0 2A 0D 80             LD HL,(LOPLMT)
1630+ 2DE3 E5                   PUSH HL
1631+ 2DE4 2A 0B 80             LD HL,(LOPINC)
1632+ 2DE7 E5                   PUSH HL
1633+ 2DE8 2A 09 80             LD HL,(LOPVAR)
1634+ 2DEB E5           PU1:    PUSH HL
1635+ 2DEC C5                   PUSH BC                          ; BC = RETURN ADDR.
1636+ 2DED C9                   RET
1637+ 2DEE
1638+ 2DEE                      ; *************************************************************
1639+ 2DEE
1640+ 2DEE                      ; *** OUTC *** & CHKIO ***
1641+ 2DEE
1642+ 2DEE                      ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1643+ 2DEE                      ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1644+ 2DEE                      ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1645+ 2DEE                      ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1646+ 2DEE                      ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1647+ 2DEE                      ; ARE RESTORED.
1648+ 2DEE
1649+ 2DEE                      ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1650+ 2DEE                      ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1651+ 2DEE                      ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1652+ 2DEE                      ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1653+ 2DEE                      ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1654+ 2DEE                      ; RESTART TBI AND DOES NOT RETURN TO THE CALLER.
1655+ 2DEE
1656+ 2DEE
1657+ 2DEE
1658+ 2DEE
1659+ 2DEE 32 00 80     INIT:   LD  (OCSW),A
1660+ 2DF1
1661+ 2DF1 CD D4 07             call message
1662+ 2DF4 1B 5B 32 4A          DB 27,'[2J',27,'[H'
1662+ 2DF8 1B 5B 48
1663+ 2DFB C9 CD CD CD          DB 201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,CR,LF
1663+ 2DFF CD CD CD CD
1663+ 2E03 CD CD CD CD
1663+ 2E07 CD CD CD CD
1663+ 2E0B CD CD CD CD
1663+ 2E0F CD CD CD CD
1663+ 2E13 CD CD CD CD
1663+ 2E17 CD CD CD CD
1663+ 2E1B CD CD CD CD
1663+ 2E1F CD CD CD BB
1663+ 2E23 0D 0A
1664+ 2E25 BA 20 20 54          DB 186,'  TINY BASIC v2.2 for Z80 Playground  ',186,CR,LF
1664+ 2E29 49 4E 59 20
1664+ 2E2D 42 41 53 49
1664+ 2E31 43 20 76 32
1664+ 2E35 2E 32 20 66
1664+ 2E39 6F 72 20 5A
1664+ 2E3D 38 30 20 50
1664+ 2E41 6C 61 79 67
1664+ 2E45 72 6F 75 6E
1664+ 2E49 64 20 20 BA
1664+ 2E4D 0D 0A
1665+ 2E4F C8 CD CD CD          DB 200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,CR,LF
1665+ 2E53 CD CD CD CD
1665+ 2E57 CD CD CD CD
1665+ 2E5B CD CD CD CD
1665+ 2E5F CD CD CD CD
1665+ 2E63 CD CD CD CD
1665+ 2E67 CD CD CD CD
1665+ 2E6B CD CD CD CD
1665+ 2E6F CD CD CD CD
1665+ 2E73 CD CD CD BC
1665+ 2E77 0D 0A
1666+ 2E79 0D 0A                DB CR,LF
1667+ 2E7B 44 69 73 6B          db 'Disk commands are:',CR,LF
1667+ 2E7F 20 63 6F 6D
1667+ 2E83 6D 61 6E 64
1667+ 2E87 73 20 61 72
1667+ 2E8B 65 3A 0D 0A
1668+ 2E8F 20 20 44 49          db '  DIR',CR,LF
1668+ 2E93 52 0D 0A
1669+ 2E96 20 20 53 41          db '  SAVE "filename"',CR,LF
1669+ 2E9A 56 45 20 22
1669+ 2E9E 66 69 6C 65
1669+ 2EA2 6E 61 6D 65
1669+ 2EA6 22 0D 0A
1670+ 2EA9 20 20 4C 4F          db '  LOAD "filename"',CR,LF
1670+ 2EAD 41 44 20 22
1670+ 2EB1 66 69 6C 65
1670+ 2EB5 6E 61 6D 65
1670+ 2EB9 22 0D 0A
1671+ 2EBC 20 20 45 52          db '  ERASE "filename"',CR,LF
1671+ 2EC0 41 53 45 20
1671+ 2EC4 22 66 69 6C
1671+ 2EC8 65 6E 61 6D
1671+ 2ECC 65 22 0D 0A
1672+ 2ED0 4F 74 68 65          db 'Other keywords:',CR,LF
1672+ 2ED4 72 20 6B 65
1672+ 2ED8 79 77 6F 72
1672+ 2EDC 64 73 3A 0D
1672+ 2EE0 0A
1673+ 2EE1
1674+ 2EE1 20 20 52 45          DB   '  REM, '
1674+ 2EE5 4D 2C 20
1675+ 2EE8 4E 45 57 2C          DB   'NEW, '
1675+ 2EEC 20
1676+ 2EED 4C 49 53 54          DB   'LIST, '
1676+ 2EF1 2C 20
1677+ 2EF3 52 55 4E 2C          DB   'RUN, '
1677+ 2EF7 20
1678+ 2EF8 4C 45 54 2C          DB   'LET, '
1678+ 2EFC 20
1679+ 2EFD 49 46 2C 20          DB   'IF, '
1680+ 2F01 47 4F 54 4F          DB   'GOTO, '
1680+ 2F05 2C 20
1681+ 2F07 47 4F 53 55          DB   'GOSUB,',13,10
1681+ 2F0B 42 2C 0D 0A
1682+ 2F0F 20 20 52 45          DB   '  RETURN, '
1682+ 2F13 54 55 52 4E
1682+ 2F17 2C 20
1683+ 2F19 46 4F 52 2C          DB   'FOR, '
1683+ 2F1D 20
1684+ 2F1E 54 4F 2C 20          DB   'TO, '
1685+ 2F22 53 54 45 50          DB   'STEP, '
1685+ 2F26 2C 20
1686+ 2F28 4E 45 58 54          DB   'NEXT, '
1686+ 2F2C 2C 20
1687+ 2F2E 49 4E 50 55          DB   'INPUT, '
1687+ 2F32 54 2C 20
1688+ 2F35 50 52 49 4E          DB   'PRINT, '
1688+ 2F39 54 2C 20
1689+ 2F3C 53 54 4F 50          DB   'STOP, '
1689+ 2F40 2C 20
1690+ 2F42 52 4E 44 2C          DB   'RND, '
1690+ 2F46 20
1691+ 2F47 41 42 53 2C          DB   'ABS, '
1691+ 2F4B 20
1692+ 2F4C 53 49 5A 45          DB   'SIZE, '
1692+ 2F50 2C 20
1693+ 2F52 50 45 45 4B          DB   'PEEK',13,10
1693+ 2F56 0D 0A
1694+ 2F58 54 68 69 73          db 'This version is case-insensitive!'
1694+ 2F5C 20 76 65 72
1694+ 2F60 73 69 6F 6E
1694+ 2F64 20 69 73 20
1694+ 2F68 63 61 73 65
1694+ 2F6C 2D 69 6E 73
1694+ 2F70 65 6E 73 69
1694+ 2F74 74 69 76 65
1694+ 2F78 21
1695+ 2F79 0D 0A 00             DB CR,LF,0
1696+ 2F7C
1697+ 2F7C 21 32 25             LD  HL,TBSTART
1698+ 2F7F 22 13 80             LD (RANPNT),HL
1699+ 2F82 21 19 80             LD  HL,TXTBGN
1700+ 2F85 22 15 80             LD (TXTUNF),HL
1701+ 2F88 C3 14 26             JP  RSTART
1702+ 2F8B
1703+ 2F8B              CHKIO:
1704+ 2F8B DB BD                in a,(uart_LSR)                  ; get status from Line Status Register
1705+ 2F8D CB 47                bit 0,a                          ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
1706+ 2F8F                                                       ; "logic 0 = no data in receive holding register."
1707+ 2F8F C8                   ret z                            ; zero = no char received
1708+ 2F90 DB B8                in a,(uart_tx_rx)                ; Get the incoming char from the keyboard
1709+ 2F92 FE 00                cp 0
1710+ 2F94 C8                   ret z                            ; If no key pressed, return Z
1711+ 2F95
1712+ 2F95 E6 7F                AND  7FH                         ; MASK BIT 7 OFF
1713+ 2F97 FE 0F                CP  0FH                          ; IS IT CONTROL-O?
1714+ 2F99 C2 A6 2F             JP NZ,CI1                        ; NO, MORE CHECKING
1715+ 2F9C 3A 00 80             LD  A,(OCSW)                     ; CONTROL-O FLIPS OCSW
1716+ 2F9F 2F                   CPL                              ; ON TO OFF, OFF TO ON
1717+ 2FA0 32 00 80             LD  (OCSW),A
1718+ 2FA3 C3 8B 2F             JP  CHKIO                        ; GET ANOTHER INPUT
1719+ 2FA6 FE 03        CI1:    CP  3H                           ; IS IT CONTROL-C?
1720+ 2FA8 C0                   RET NZ                           ; NO, RETURN "NZ"
1721+ 2FA9 C3 14 26             JP  RSTART                       ; YES, RESTART TBI
1722+ 2FAC
1723+ 2FAC                      ; *************************************************************
1724+ 2FAC
1725+ 2FAC                      ; *** TABLES *** DIRECT *** & EXEC ***
1726+ 2FAC
1727+ 2FAC                      ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1728+ 2FAC                      ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1729+ 2FAC                      ; OF CODE ACCORDING TO THE TABLE.
1730+ 2FAC
1731+ 2FAC                      ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1732+ 2FAC                      ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1733+ 2FAC                      ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1734+ 2FAC                      ; ALL DIRECT AND STATEMENT COMMANDS.
1735+ 2FAC
1736+ 2FAC                      ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1737+ 2FAC                      ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1738+ 2FAC                      ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1739+ 2FAC
1740+ 2FAC                      ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1741+ 2FAC                      ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1742+ 2FAC                      ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1743+ 2FAC                      ; BYTE SET TO 1.
1744+ 2FAC
1745+ 2FAC                      ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1746+ 2FAC                      ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1747+ 2FAC                      ; MATCH THIS NULL ITEM AS DEFAULT.
1748+ 2FAC
1749+ 2FAC              TAB1:                                    ; DIRECT COMMANDS
1750+ 2FAC 4C 49 53 54          DB   'LIST'
1751+ 2FB0                      DWA  LIST
1751+ 2FB0 28          >        DB LIST>>8+128
1751+ 2FB1 7D          >        DB LIST&0FFH
1752+ 2FB2 52 55 4E             DB   'RUN'
1753+ 2FB5                      DWA  RUN
1753+ 2FB5 28          >        DB RUN>>8+128
1753+ 2FB6 4D          >        DB RUN&0FFH
1754+ 2FB7 4E 45 57             DB   'NEW'
1755+ 2FBA                      DWA  NEW
1755+ 2FBA 26          >        DB NEW>>8+128
1755+ 2FBB 90          >        DB NEW&0FFH
1756+ 2FBC 44 49 52             DB   'DIR'
1757+ 2FBF                      DWA  TBDIR
1757+ 2FBF 26          >        DB TBDIR>>8+128
1757+ 2FC0 9F          >        DB TBDIR&0FFH
1758+ 2FC1 53 41 56 45          DB   'SAVE'
1759+ 2FC5                      DWA  SAVE
1759+ 2FC5 27          >        DB SAVE>>8+128
1759+ 2FC6 1D          >        DB SAVE&0FFH
1760+ 2FC7 4C 4F 41 44          DB   'LOAD'
1761+ 2FCB                      DWA  LOAD
1761+ 2FCB 27          >        DB LOAD>>8+128
1761+ 2FCC A7          >        DB LOAD&0FFH
1762+ 2FCD 45 52 41 53          DB   'ERASE'
1762+ 2FD1 45
1763+ 2FD2                      DWA  ERASE
1763+ 2FD2 28          >        DB ERASE>>8+128
1763+ 2FD3 1F          >        DB ERASE&0FFH
1764+ 2FD4
1765+ 2FD4              TAB2:                                    ; DIRECT/STATEMENT
1766+ 2FD4 4E 45 58 54          DB   'NEXT'
1767+ 2FD8                      DWA  NEXT
1767+ 2FD8 29          >        DB NEXT>>8+128
1767+ 2FD9 9A          >        DB NEXT&0FFH
1768+ 2FDA 4C 45 54             DB   'LET'
1769+ 2FDD                      DWA  LET
1769+ 2FDD 2A          >        DB LET>>8+128
1769+ 2FDE 7A          >        DB LET&0FFH
1770+ 2FDF 49 46                DB   'IF'
1771+ 2FE1                      DWA  IFF
1771+ 2FE1 29          >        DB IFF>>8+128
1771+ 2FE2 FF          >        DB IFF&0FFH
1772+ 2FE3 47 4F 54 4F          DB   'GOTO'
1773+ 2FE7                      DWA  GOTO
1773+ 2FE7 28          >        DB GOTO>>8+128
1773+ 2FE8 6C          >        DB GOTO&0FFH
1774+ 2FE9 47 4F 53 55          DB   'GOSUB'
1774+ 2FED 42
1775+ 2FEE                      DWA  GOSUB
1775+ 2FEE 28          >        DB GOSUB>>8+128
1775+ 2FEF F8          >        DB GOSUB&0FFH
1776+ 2FF0 52 45 54 55          DB   'RETURN'
1776+ 2FF4 52 4E
1777+ 2FF6                      DWA  RETURN
1777+ 2FF6 29          >        DB RETURN>>8+128
1777+ 2FF7 1A          >        DB RETURN&0FFH
1778+ 2FF8 52 45 4D             DB   'REM'
1779+ 2FFB                      DWA  REM
1779+ 2FFB 29          >        DB REM>>8+128
1779+ 2FFC FB          >        DB REM&0FFH
1780+ 2FFD 46 4F 52             DB   'FOR'
1781+ 3000                      DWA  FOR
1781+ 3000 29          >        DB FOR>>8+128
1781+ 3001 35          >        DB FOR&0FFH
1782+ 3002 49 4E 50 55          DB   'INPUT'
1782+ 3006 54
1783+ 3007                      DWA  INPUT
1783+ 3007 2A          >        DB INPUT>>8+128
1783+ 3008 1A          >        DB INPUT&0FFH
1784+ 3009 50 52 49 4E          DB   'PRINT'
1784+ 300D 54
1785+ 300E                      DWA  PRINT
1785+ 300E 28          >        DB PRINT>>8+128
1785+ 300F 95          >        DB PRINT&0FFH
1786+ 3010 53 54 4F 50          DB   'STOP'
1787+ 3014                      DWA  STOP
1787+ 3014 26          >        DB STOP>>8+128
1787+ 3015 99          >        DB STOP&0FFH
1788+ 3016                      DWA  DEFLT
1788+ 3016 2A          >        DB DEFLT>>8+128
1788+ 3017 74          >        DB DEFLT&0FFH
1789+ 3018
1790+ 3018              TAB4:                                    ; FUNCTIONS
1791+ 3018 52 4E 44             DB   'RND'
1792+ 301B                      DWA  RND
1792+ 301B 2B          >        DB RND>>8+128
1792+ 301C 94          >        DB RND&0FFH
1793+ 301D 41 42 53             DB   'ABS'
1794+ 3020                      DWA  ABS
1794+ 3020 2B          >        DB ABS>>8+128
1794+ 3021 C1          >        DB ABS&0FFH
1795+ 3022 53 49 5A 45          DB   'SIZE'
1796+ 3026                      DWA  SIZE
1796+ 3026 2B          >        DB SIZE>>8+128
1796+ 3027 D2          >        DB SIZE&0FFH
1797+ 3028 50 45 45 4B          DB   'PEEK'
1798+ 302C                      DWA  PEEK
1798+ 302C 2B          >        DB PEEK>>8+128
1798+ 302D CA          >        DB PEEK&0FFH
1799+ 302E                      DWA  XP40
1799+ 302E 2B          >        DB XP40>>8+128
1799+ 302F 72          >        DB XP40&0FFH
1800+ 3030
1801+ 3030              TAB5:                                    ; "TO" IN "FOR"
1802+ 3030 54 4F                DB   'TO'
1803+ 3032                      DWA  FR1
1803+ 3032 29          >        DB FR1>>8+128
1803+ 3033 45          >        DB FR1&0FFH
1804+ 3034                      DWA  QWHAT
1804+ 3034 2C          >        DB QWHAT>>8+128
1804+ 3035 4D          >        DB QWHAT&0FFH
1805+ 3036
1806+ 3036              TAB6:                                    ; "STEP" IN "FOR"
1807+ 3036 53 54 45 50          DB   'STEP'
1808+ 303A                      DWA  FR2
1808+ 303A 29          >        DB FR2>>8+128
1808+ 303B 51          >        DB FR2&0FFH
1809+ 303C                      DWA  FR3
1809+ 303C 29          >        DB FR3>>8+128
1809+ 303D 57          >        DB FR3&0FFH
1810+ 303E
1811+ 303E              TAB8:                                    ; RELATION OPERATORS
1812+ 303E 3E 3D                DB   '>='
1813+ 3040                      DWA  XP11
1813+ 3040 2A          >        DB XP11>>8+128
1813+ 3041 8E          >        DB XP11&0FFH
1814+ 3042 23                   DB   '#'
1815+ 3043                      DWA  XP12
1815+ 3043 2A          >        DB XP12>>8+128
1815+ 3044 94          >        DB XP12&0FFH
1816+ 3045 3E                   DB   '>'
1817+ 3046                      DWA  XP13
1817+ 3046 2A          >        DB XP13>>8+128
1817+ 3047 9A          >        DB XP13&0FFH
1818+ 3048 3D                   DB   '='
1819+ 3049                      DWA  XP15
1819+ 3049 2A          >        DB XP15>>8+128
1819+ 304A A9          >        DB XP15&0FFH
1820+ 304B 3C 3D                DB   '<='
1821+ 304D                      DWA  XP14
1821+ 304D 2A          >        DB XP14>>8+128
1821+ 304E A1          >        DB XP14&0FFH
1822+ 304F 3C                   DB   '<'
1823+ 3050                      DWA  XP16
1823+ 3050 2A          >        DB XP16>>8+128
1823+ 3051 AF          >        DB XP16&0FFH
1824+ 3052                      DWA  XP17
1824+ 3052 2A          >        DB XP17>>8+128
1824+ 3053 B5          >        DB XP17&0FFH
1825+ 3054
1826+ 3054 21 AB 2F     DIRECT: LD  HL,TAB1-1                    ; *** DIRECT ***
1827+ 3057
1828+ 3057              EXEC:                                    ; *** EXEC ***
1829+ 3057 CD 82 25     EX0:    CALL IGNBLK                          ; IGNORE LEADING BLANKS
1830+ 305A D5                   PUSH DE                          ; SAVE POINTER
1831+ 305B 1A           EX1:    LD A,(DE)                        ; IF FOUND '.' IN STRING
1832+ 305C 13                   INC  DE                          ; BEFORE ANY MISMATCH
1833+ 305D FE 2E                CP  '.'                          ; WE DECLARE A MATCH
1834+ 305F CA 7E 30             JP Z,EX3
1835+ 3062 FE 61                cp 'a'                           ; If text is in lowercase,
1836+ 3064 38 02                jr c,not_lowercase               ; uppercase it
1837+ 3066 CB AF                res 5,a                          ; by clearing bit 5
1838+ 3068              not_lowercase:
1839+ 3068 23                   INC  HL                          ; HL->TABLE
1840+ 3069 BE                   CP  (HL)                         ; IF MATCH, TEST NEXT
1841+ 306A CA 5B 30             JP Z,EX1
1842+ 306D 3E 7F                LD   A,07FH                      ; ELSE SEE IF BIT 7
1843+ 306F 1B                   DEC  DE                          ; OF TABLE IS SET, WHICH
1844+ 3070 BE                   CP  (HL)                         ; IS THE JUMP ADDR. (HI)
1845+ 3071                                                       ; TODO: Change this to use "BIT" instruction?
1846+ 3071 DA 85 30             JP C,EX5                         ; C:YES, MATCHED
1847+ 3074 23           EX2:    INC  HL                          ; NC:NO, FIND JUMP ADDR.
1848+ 3075 BE                   CP  (HL)
1849+ 3076 D2 74 30             JP NC,EX2
1850+ 3079 23                   INC  HL                          ; BUMP TO NEXT TAB. ITEM
1851+ 307A D1                   POP  DE                          ; RESTORE STRING POINTER
1852+ 307B C3 57 30             JP  EX0                          ; TEST AGAINST NEXT ITEM
1853+ 307E 3E 7F        EX3:    LD   A,07FH                      ; PARTIAL MATCH, FIND
1854+ 3080 23           EX4:    INC  HL                          ; JUMP ADDR., WHICH IS
1855+ 3081 BE                   CP  (HL)                         ; FLAGGED BY BIT 7
1856+ 3082 D2 80 30             JP NC,EX4
1857+ 3085 7E           EX5:    LD   A,(HL)                      ; LOAD HL WITH THE JUMP
1858+ 3086 23                   INC  HL                          ; ADDRESS FROM THE TABLE
1859+ 3087 6E                   LD   L,(HL)
1860+ 3088 E6 7F                AND  7FH                         ; MASK OFF BIT 7
1861+ 308A 67                   LD   H,A
1862+ 308B F1                   POP  AF                          ; CLEAN UP THE GABAGE
1863+ 308C E9                   JP (HL)                          ; AND WE GO DO IT
1864+ 308D
1865+ 308D              READ_QUOTED_FILENAME:
1866+ 308D CD 82 25             call IGNBLK                     ; Skip any spaces after "save".
1867+ 3090 CD 3A 25             CALL TSTC                       ; Is this followed by quoted string?
1868+ 3093 22                   DB   '"'                        ; ascii for quote
1869+ 3094 74                   DB   SAVE_NO_QUOTE-$-1
1870+ 3095
1871+ 3095 CD 82 25             call IGNBLK                     ; Skip leading spaces at the start of the name.
1872+ 3098 21 EB FF             ld hl, filename_buffer          ; Clear out the filename and extension with NULLs
1873+ 309B 06 0E                ld b, 14
1874+ 309D              CLEAR_FILENAME_LOOP:
1875+ 309D 36 00                ld (hl), 0
1876+ 309F 23                   inc hl
1877+ 30A0 10 FB                djnz CLEAR_FILENAME_LOOP
1878+ 30A2
1879+ 30A2 21 EB FF             ld hl, filename_buffer          ; We store the filename here.
1880+ 30A5 06 08                ld b, 8
1881+ 30A7              READ_FILE_NAME:
1882+ 30A7 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1883+ 30A8 13                   INC  DE
1884+ 30A9 FE 2E                CP  '.'                         ; Found dot?
1885+ 30AB 28 26                jr z, CONTINUE_TO_EXTENSION
1886+ 30AD FE 22                CP  '"'                         ; Found end quote?
1887+ 30AF 28 52                jr z, READ_FILE_NAME_DONE
1888+ 30B1 FE 0D                cp CR                           ; Or has command ended?
1889+ 30B3 CA 4D 2C             jp z, QWHAT                         ; Well that's an error.
1890+ 30B6
1891+ 30B6 FE 21                cp 33
1892+ 30B8 38 0C                jr c, KILL_CONTROL              ; Don't allow control chars or spaces!!!
1893+ 30BA FE 60                cp 96
1894+ 30BC 38 0A                jr c, USE_LETTER                ; Do allow numbers and upper case letters
1895+ 30BE FE 7F                cp 127
1896+ 30C0 30 04                jr nc, KILL_CONTROL             ; Don't allow weird chars
1897+ 30C2 E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1898+ 30C4 18 02                jr USE_LETTER
1899+ 30C6
1900+ 30C6              KILL_CONTROL:
1901+ 30C6 3E 5F                ld a, '_'
1902+ 30C8              USE_LETTER:
1903+ 30C8 77                   ld (hl),a                       ; store this letter
1904+ 30C9 23                   inc hl
1905+ 30CA 10 DB                djnz READ_FILE_NAME
1906+ 30CC
1907+ 30CC 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1908+ 30CD 13                   INC  DE
1909+ 30CE FE 2E                CP  '.'                         ; Found dot?
1910+ 30D0 C2 4D 2C             jp nz, QWHAT                    ; Error if not
1911+ 30D3              CONTINUE_TO_EXTENSION:
1912+ 30D3 77                   ld (hl), a
1913+ 30D4 23                   inc hl
1914+ 30D5
1915+ 30D5 06 03                ld b, 3                         ; 3 chars max for extension
1916+ 30D7              READ_EXTENSION:
1917+ 30D7 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1918+ 30D8 13                   INC  DE
1919+ 30D9 FE 2E                CP  '.'                         ; Found dot?
1920+ 30DB CA 4D 2C             jp z, QWHAT
1921+ 30DE FE 22                CP  '"'                         ; Found end quote?
1922+ 30E0 28 21                jr z, READ_FILE_NAME_DONE
1923+ 30E2 FE 0D                cp CR                           ; Or has command ended?
1924+ 30E4 CA 4D 2C             jp z, QWHAT                         ; Well that's an error.
1925+ 30E7
1926+ 30E7 FE 20                cp 32
1927+ 30E9 38 0C                jr c, KILL_CONTROL_EXT          ; Don't allow control chars
1928+ 30EB FE 60                cp 96
1929+ 30ED 38 0A                jr c, USE_LETTER_EXT            ; Do allow numbers and upper case letters
1930+ 30EF FE 7F                cp 127
1931+ 30F1 30 04                jr nc, KILL_CONTROL_EXT         ; Don't allow weird chars
1932+ 30F3 E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1933+ 30F5 18 02                jr USE_LETTER_EXT
1934+ 30F7
1935+ 30F7              KILL_CONTROL_EXT:
1936+ 30F7 3E 5F                ld a, '_'
1937+ 30F9              USE_LETTER_EXT:
1938+ 30F9 77                   ld (hl),a                       ; store this letter
1939+ 30FA 23                   inc hl
1940+ 30FB 10 DA                djnz READ_EXTENSION
1941+ 30FD
1942+ 30FD 1A                   ld a, (de)                      ; So now there must be a quote
1943+ 30FE 13                   inc de
1944+ 30FF FE 22                cp '"'
1945+ 3101 20 06                jr nz, SAVE_NO_QUOTE
1946+ 3103
1947+ 3103              READ_FILE_NAME_DONE:
1948+ 3103 36 00                ld (hl), 0
1949+ 3105 CD 47 2C             call ENDCHK
1950+ 3108
1951+ 3108              ;        call debug
1952+ 3108              ;        db 'Filename is [',0
1953+ 3108              ;        ld b, 14
1954+ 3108              ;        ld hl, filename_buffer
1955+ 3108              ;x1:
1956+ 3108              ;        ld a, (hl)
1957+ 3108              ;        inc hl
1958+ 3108              ;        call OUTC
1959+ 3108              ;        djnz x1
1960+ 3108
1961+ 3108              ;        ld a, ']'
1962+ 3108              ;        call OUTC
1963+ 3108              ;        call newline
1964+ 3108
1965+ 3108 C9                   ret
1966+ 3109
1967+ 3109              SAVE_NO_QUOTE:
1968+ 3109 CD D4 07             call message
1969+ 310C 50 6C 65 61          db 'Please specify a filename in quotes, such as "FILENAME.TXT"',13,0
1969+ 3110 73 65 20 73
1969+ 3114 70 65 63 69
1969+ 3118 66 79 20 61
1969+ 311C 20 66 69 6C
1969+ 3120 65 6E 61 6D
1969+ 3124 65 20 69 6E
1969+ 3128 20 71 75 6F
1969+ 312C 74 65 73 2C
1969+ 3130 20 73 75 63
1969+ 3134 68 20 61 73
1969+ 3138 20 22 46 49
1969+ 313C 4C 45 4E 41
1969+ 3140 4D 45 2E 54
1969+ 3144 58 54 22 0D
1969+ 3148 00
1970+ 3149 C3 14 26             jp RSTART
1971+ 314C
1972+ 314C              LSTROM	equ	$                             ; ALL ABOVE CAN BE ROM
1973+ 314C
1974+ 314C
1975+ 314C                                                       ; HERE DOWN MUST BE RAM
1976+ 314C              RAMSTART equ 08000H                     ; This assumes we are switched into 32K ROM / 32K RAM mode. TODO: Maybe change this to 16k rom, 48k ram???
1977+ 314C
1978+ 314C              OCSW    equ	RAMSTART                     ; SWITCH FOR OUTPUT		1 byte
1979+ 314C              CURRNT	equ	OCSW+1                        ; POINTS TO CURRENT LINE		2 bytes
1980+ 314C              STKGOS	equ	CURRNT+2                      ; SAVES SP IN 'GOSUB'		2 bytes
1981+ 314C              VARNXT	equ	STKGOS+2                      ; TEMP STORAGE			2 bytes
1982+ 314C              STKINP	equ VARNXT+2                      ; SAVES SP IN 'INPUT'		2 bytes
1983+ 314C              LOPVAR	equ STKINP+2                      ; 'FOR' LOOP SAVE AREA		2 bytes
1984+ 314C              LOPINC	equ LOPVAR+2                      ; INCREMENT			2 bytes
1985+ 314C              LOPLMT	equ LOPINC+2                      ; LIMIT				2 bytes
1986+ 314C              LOPLN	equ LOPLMT+2                       ; LINE NUMBER			2 bytes
1987+ 314C              LOPPT	equ LOPLN+2                        ; TEXT POINTER			2 bytes
1988+ 314C              RANPNT	equ LOPPT+2                       ; RANDOM NUMBER POINTER		2 bytes
1989+ 314C              TXTUNF	equ RANPNT+2                      ; ->UNFILLED TEXT AREA		2 bytes
1990+ 314C
1991+ 314C              store_hl	equ	TXTUNF+2	; Temporary store for hl                2 bytes
1992+ 314C
1993+ 314C              TXTBGN	equ store_hl+2                      ; TEXT SAVE AREA BEGINS		2 bytes - This is where the program starts.
1994+ 314C
1995+ 314C
1996+ 314C              TBSTACK	equ 0FF00h                         ; STACK STARTS HERE		allow 255 byte stack
1997+ 314C              STKLMT	equ	TBSTACK-255                     ; TOP LIMIT FOR STACK		1 byte
1998+ 314C              BUFEND	equ	STKLMT-1                      ; BUFFER ENDS			1 byte
1999+ 314C              BUFFER	equ	BUFEND-64                     ; INPUT BUFFER			64 bytes
2000+ 314C              VARBGN	equ	BUFFER-55                     ; VARIABLE @(0)			55 bytes
2001+ 314C
2002+ 314C              tb_dir_count equ VARBGN-1
2003+ 314C              TXTEND	equ	tb_dir_count-1                      ; TEXT SAVE AREA ENDS		1 byte - This is the top limit for the program
2004+ 314C
2005+ 314C                                                      ; Just for reference for my tired brain:
2006+ 314C                                                      ; if a has 30 in it
2007+ 314C                                                      ; cp 32
2008+ 314C                                                      ; jr c, IF A < 32
2009+ 314C                                                      ; jr nc, IF A >= 32
2010+ 314C                                                      ; jr z, IF A == 32
2011+ 314C
# file closed: tiny-basic.asm
 935  314C                  include "GOFL.asm"
# file opened: GOFL.asm
   1+ 314C              ; Conway's Game Of Life for the Z80 Playground.
   2+ 314C              ; This was written by Albert Pauw in February 2021, originally for CP/M,
   3+ 314C              ; and adapted for the Z80 playground Monitor by john Squires.
   4+ 314C
   5+ 314C              ; After boiling it down A LOT, it turns out that Game-Of-Life is very simple:
   6+ 314C              ; Arrange a large grid of cells, where each can be either alive = 1 or dead = 0.
   7+ 314C              ; Make sure there is an empty row all around the grid with a dead cell in it, like this:
   8+ 314C              ; 0000000000
   9+ 314C              ; 0XXXXXXXX0
  10+ 314C              ; 0XXXXXXXX0
  11+ 314C              ; 0000000000 Where 0 = dead cell, and X = active area which can be 0s or 1s.
  12+ 314C              ;
  13+ 314C              ; Iterate over all the cells in the active area. For each:
  14+ 314C              ; Make a note of whether the cell is alive or dead.
  15+ 314C              ; Start counting neighbours for the cell, starting at 0.
  16+ 314C              ; Add to this value the alive/dead value of all 8 neighbouring cells around it.
  17+ 314C              ; Store the neighbour count in the top 4 bits, and the alive/dead state of the cell
  18+ 314C              ; in bit 0. You will then end up with each cell having a binary value something like these examples:
  19+ 314C              ; 0010 0001 - This is 2 neighbours and the cell is currently alive.
  20+ 314C              ; 0011 0000 - This is a dead cell with 3 neighbours.
  21+ 314C              ; 1000 0001 - This is an alive cell with 8 neighbours.
  22+ 314C              ;
  23+ 314C              ; Now, it turns out that all possible combinations result in the death of a cell, or
  24+ 314C              ; a dead cell staying dead, except these three:
  25+ 314C              ; 0010 0001 - Alive cell with 2 neighbours stays alive.
  26+ 314C              ; 0011 0001 - Alive cell with 3 neighbours stays alive.
  27+ 314C              ; 0011 0000 - Dead cell with 3 neighbours comes to life.
  28+ 314C              ;
  29+ 314C              ; So all we need to do is iterate over the cells again.
  30+ 314C              ; If the cell contains one of these 3 values, set the cell to 1.
  31+ 314C              ; Otherwise set it to 0.
  32+ 314C              ;
  33+ 314C              ; Then show all cells on screen, and start again!
  34+ 314C
  35+ 314C              Width:   EQU 80
  36+ 314C              Height:  EQU 25
  37+ 314C              PatternWidth: equ 80
  38+ 314C              Size:    EQU Width*Height
  39+ 314C              DOT:     EQU '.' ; ASCII 46, so EVEN. This is important later!
  40+ 314C              HASH:    EQU '#' ; ASCII 25, so ODD. This is important later!
  41+ 314C              ESC:     EQU 27
  42+ 314C
  43+ 314C              GOFL_Begin:
  44+ 314C CD AF 49             call show_intro_screen
  45+ 314F CD 84 07             call long_pause
  46+ 3152 CD E2 4A             call wait_for_key
  47+ 3155 78                   ld a, b
  48+ 3156 FE C8                cp 200
  49+ 3158 D2 70 31             jp nc, copy_pattern3
  50+ 315B FE 64                cp 100
  51+ 315D D2 68 31             jp nc, copy_pattern2
  52+ 3160              copy_pattern1:
  53+ 3160 21 3F 32             ld hl, initial_pattern1
  54+ 3163 CD EE 4A             call copy_initial_pattern
  55+ 3166 18 10                jr GOFL_Begin1
  56+ 3168              copy_pattern2:
  57+ 3168 21 0F 3A             ld hl, initial_pattern2
  58+ 316B CD EE 4A             call copy_initial_pattern
  59+ 316E 18 08                jr GOFL_Begin1
  60+ 3170              copy_pattern3:
  61+ 3170 21 DF 41             ld hl, initial_pattern3
  62+ 3173 CD EE 4A             call copy_initial_pattern
  63+ 3176 18 00                jr GOFL_Begin1
  64+ 3178              GOFL_Begin1:
  65+ 3178 CD 29 32             CALL GOFL_HCursor   ; Hide cursor
  66+ 317B CD 1D 32             CALL GOFL_Cls       ; Clear screen
  67+ 317E
  68+ 317E              main_gofl_loop:
  69+ 317E                      ; First, iterate over the cells, counting the neighbours
  70+ 317E 0E 19                ld c, Height
  71+ 3180 26 81                ld h, BufferPage+1              ; h = y coord, l = x coord
  72+ 3182              iterate_outer:
  73+ 3182 2E 01                ld l, 1                         ; Start at coord 1,1
  74+ 3184 06 50                ld b, Width
  75+ 3186              iterate_loop:
  76+ 3186 7E                   ld a, (hl)                      ; Get original cell content
  77+ 3187 E6 01                and %00000001
  78+ 3189 57                   ld d, a                         ; Store in d
  79+ 318A
  80+ 318A AF                   xor a                           ; Clear a
  81+ 318B
  82+ 318B 2D                   dec l                           ; West neighbour
  83+ 318C 86                   add a, (hl)
  84+ 318D 25                   dec h                           ; North-West neighbour
  85+ 318E 86                   add a, (hl)
  86+ 318F 2C                   inc l                           ; North neighbour
  87+ 3190 86                   add a, (hl)
  88+ 3191 2C                   inc l                           ; North-East neighbour
  89+ 3192 86                   add a, (hl)
  90+ 3193 24                   inc h                           ; East neighbour
  91+ 3194 86                   add a, (hl)
  92+ 3195 24                   inc h                           ; South-East neighbour
  93+ 3196 86                   add a, (hl)
  94+ 3197 2D                   dec l                           ; South neighbour
  95+ 3198 86                   add a, (hl)
  96+ 3199 2D                   dec l                           ; South-West neighbour
  97+ 319A 86                   add a, (hl)
  98+ 319B 2C                   inc l                           ; Get back to center cell
  99+ 319C 25                   dec h
 100+ 319D
 101+ 319D CB 27                sla a                           ; rotate left
 102+ 319F CB 27                sla a                           ; rotate left
 103+ 31A1 CB 27                sla a                           ; rotate left
 104+ 31A3 CB 27                sla a                           ; rotate left
 105+ 31A5 B2                   or d                            ; Put back the original cell content
 106+ 31A6 77                   ld (hl), a                      ; Store final result
 107+ 31A7
 108+ 31A7 2C                   inc l
 109+ 31A8 10 DC                djnz iterate_loop
 110+ 31AA 24                   inc h
 111+ 31AB 2E 01                ld l, 1
 112+ 31AD 0D                   dec c
 113+ 31AE 20 D2                jr nz, iterate_outer
 114+ 31B0
 115+ 31B0
 116+ 31B0                      ; Now iterate over the cells again, applying the rules
 117+ 31B0              apply_rules:
 118+ 31B0 0E 19                ld c, Height
 119+ 31B2 26 81                ld h, BufferPage+1
 120+ 31B4              apply_rules_outer:
 121+ 31B4 2E 01                ld l, 1                         ; Start at 1,1
 122+ 31B6 06 50                ld b, Width
 123+ 31B8              apply_rules_loop:
 124+ 31B8                      ; 0010 0001 - Alive cell with 2 neighbours stays alive.
 125+ 31B8                      ; 0011 0001 - Alive cell with 3 neighbours stays alive.
 126+ 31B8                      ; 0011 0000 - Dead cell with 3 neighbours comes to life.
 127+ 31B8
 128+ 31B8 7E                   ld a, (hl)                      ; Get the content into a
 129+ 31B9 FE 21                cp %00100001
 130+ 31BB 28 0D                jr z, cell_alive
 131+ 31BD FE 31                cp %00110001
 132+ 31BF 28 09                jr z, cell_alive
 133+ 31C1 FE 30                cp %00110000
 134+ 31C3 28 05                jr z, cell_alive
 135+ 31C5 36 00                ld (hl), 0                      ; Cell dies
 136+ 31C7 C3 CC 31             jp apply_rules_continue
 137+ 31CA              cell_alive:
 138+ 31CA 36 01                ld (hl), 1                      ; Cell lives
 139+ 31CC              apply_rules_continue:
 140+ 31CC 2C                   inc l
 141+ 31CD 10 E9                djnz apply_rules_loop
 142+ 31CF 24                   inc h
 143+ 31D0 2E 01                ld l, 1
 144+ 31D2 0D                   dec c
 145+ 31D3 20 DF                jr nz, apply_rules_outer
 146+ 31D5
 147+ 31D5
 148+ 31D5                      ; Now print the cells to the screen
 149+ 31D5              GOFL_Print:
 150+ 31D5 CD 15 32             call GOFL_Home
 151+ 31D8 26 81                ld h, BufferPage+1
 152+ 31DA 2E 01                ld l, 1                         ; Start at 1,1
 153+ 31DC 0E 19                LD c, Height                    ; Set size for loops, height...
 154+ 31DE              Pr0:
 155+ 31DE 06 50                ld b, Width                     ; ...and width
 156+ 31E0              Pr1:
 157+ 31E0 7E                   LD A,(HL)                       ; Get cell value in buffer
 158+ 31E1 E6 01                and 1                           ; Is it ODD?
 159+ 31E3 CA EB 31             jp z, print_empty_cell          ; If not, it is an empty cell
 160+ 31E6 16 23                ld d, HASH
 161+ 31E8 C3 ED 31             jp print_got_character
 162+ 31EB              print_empty_cell:
 163+ 31EB 16 2E                ld d, DOT
 164+ 31ED              print_got_character:
 165+ 31ED DB BD                in a,(uart_LSR)                 ; check UART is ready to send.
 166+ 31EF CB 6F                bit 5,a                         ; zero flag set to true if bit 5 is 0
 167+ 31F1 CA ED 31             jp z, print_got_character       ; non-zero = ready for next char.
 168+ 31F4 7A                   ld a, d
 169+ 31F5 D3 B8                out (uart_tx_rx), a             ; AND SEND IT OUT
 170+ 31F7
 171+ 31F7 2C                   INC L                           ; Next character in buffer
 172+ 31F8 10 E6                djnz Pr1                        ; Count down and loop
 173+ 31FA
 174+ 31FA 0D                   dec c                           ; decrease row counter
 175+ 31FB CA 01 32             jp z, skip_newline_on_last_row
 176+ 31FE CD 59 07             call newline
 177+ 3201              skip_newline_on_last_row:
 178+ 3201 2E 01                ld l, 1                         ; Back to start of row
 179+ 3203 24                   inc h                           ; Move down a row
 180+ 3204 79                   ld a, c
 181+ 3205 FE 00                cp 0
 182+ 3207 C2 DE 31             jp nz, Pr0                      ; Loop over rows
 183+ 320A
 184+ 320A
 185+ 320A                      ; Now check for key press to end
 186+ 320A CD 6A 07             CALL char_in                    ; Check for keypress
 187+ 320D A7                   AND A                           ;
 188+ 320E CA 7E 31             jp Z,main_gofl_loop             ; Loop around again if no key
 189+ 3211 CD 34 32             call GOFL_SCursor               ; Turn cursor back ok
 190+ 3214 C9                   ret
 191+ 3215
 192+ 3215
 193+ 3215
 194+ 3215
 195+ 3215
 196+ 3215                      ; Helper routines
 197+ 3215              GOFL_Home:
 198+ 3215 CD D4 07             call message
 199+ 3218 1B 5B 48 00          DB ESC,'[H',0
 200+ 321C C9                   ret
 201+ 321D
 202+ 321D              GOFL_Cls:
 203+ 321D CD D4 07             call message
 204+ 3220 1B 5B 32 4A          DB ESC,'[2J',ESC,'[H',0
 204+ 3224 1B 5B 48 00
 205+ 3228 C9                   ret
 206+ 3229
 207+ 3229              GOFL_HCursor:
 208+ 3229                      ; ANSI hide cursor
 209+ 3229 CD D4 07             call message
 210+ 322C 1B 5B 3F 32          DB ESC,'[?25l',0
 210+ 3230 35 6C 00
 211+ 3233 C9                   ret
 212+ 3234
 213+ 3234              GOFL_SCursor:
 214+ 3234                      ; ANSI show cursor
 215+ 3234 CD D4 07             call message
 216+ 3237 1B 5B 3F 32          DB ESC,'[?25h',0
 216+ 323B 35 68 00
 217+ 323E C9                   ret
 218+ 323F
 219+ 323F              initial_pattern1:
 220+ 323F 2E 2E 2E 2E          DB '................................................................................'
 220+ 3243 2E 2E 2E 2E
 220+ 3247 2E 2E 2E 2E
 220+ 324B 2E 2E 2E 2E
 220+ 324F 2E 2E 2E 2E
 220+ 3253 2E 2E 2E 2E
 220+ 3257 2E 2E 2E 2E
 220+ 325B 2E 2E 2E 2E
 220+ 325F 2E 2E 2E 2E
 220+ 3263 2E 2E 2E 2E
 220+ 3267 2E 2E 2E 2E
 220+ 326B 2E 2E 2E 2E
 220+ 326F 2E 2E 2E 2E
 220+ 3273 2E 2E 2E 2E
 220+ 3277 2E 2E 2E 2E
 220+ 327B 2E 2E 2E 2E
 220+ 327F 2E 2E 2E 2E
 220+ 3283 2E 2E 2E 2E
 220+ 3287 2E 2E 2E 2E
 220+ 328B 2E 2E 2E 2E
 221+ 328F 2E 2E 2E 2E          DB '................................................................................'
 221+ 3293 2E 2E 2E 2E
 221+ 3297 2E 2E 2E 2E
 221+ 329B 2E 2E 2E 2E
 221+ 329F 2E 2E 2E 2E
 221+ 32A3 2E 2E 2E 2E
 221+ 32A7 2E 2E 2E 2E
 221+ 32AB 2E 2E 2E 2E
 221+ 32AF 2E 2E 2E 2E
 221+ 32B3 2E 2E 2E 2E
 221+ 32B7 2E 2E 2E 2E
 221+ 32BB 2E 2E 2E 2E
 221+ 32BF 2E 2E 2E 2E
 221+ 32C3 2E 2E 2E 2E
 221+ 32C7 2E 2E 2E 2E
 221+ 32CB 2E 2E 2E 2E
 221+ 32CF 2E 2E 2E 2E
 221+ 32D3 2E 2E 2E 2E
 221+ 32D7 2E 2E 2E 2E
 221+ 32DB 2E 2E 2E 2E
 222+ 32DF 2E 2E 2E 2E          DB '................................................................................'
 222+ 32E3 2E 2E 2E 2E
 222+ 32E7 2E 2E 2E 2E
 222+ 32EB 2E 2E 2E 2E
 222+ 32EF 2E 2E 2E 2E
 222+ 32F3 2E 2E 2E 2E
 222+ 32F7 2E 2E 2E 2E
 222+ 32FB 2E 2E 2E 2E
 222+ 32FF 2E 2E 2E 2E
 222+ 3303 2E 2E 2E 2E
 222+ 3307 2E 2E 2E 2E
 222+ 330B 2E 2E 2E 2E
 222+ 330F 2E 2E 2E 2E
 222+ 3313 2E 2E 2E 2E
 222+ 3317 2E 2E 2E 2E
 222+ 331B 2E 2E 2E 2E
 222+ 331F 2E 2E 2E 2E
 222+ 3323 2E 2E 2E 2E
 222+ 3327 2E 2E 2E 2E
 222+ 332B 2E 2E 2E 2E
 223+ 332F 2E 2E 2E 2E          DB '................................................................................'
 223+ 3333 2E 2E 2E 2E
 223+ 3337 2E 2E 2E 2E
 223+ 333B 2E 2E 2E 2E
 223+ 333F 2E 2E 2E 2E
 223+ 3343 2E 2E 2E 2E
 223+ 3347 2E 2E 2E 2E
 223+ 334B 2E 2E 2E 2E
 223+ 334F 2E 2E 2E 2E
 223+ 3353 2E 2E 2E 2E
 223+ 3357 2E 2E 2E 2E
 223+ 335B 2E 2E 2E 2E
 223+ 335F 2E 2E 2E 2E
 223+ 3363 2E 2E 2E 2E
 223+ 3367 2E 2E 2E 2E
 223+ 336B 2E 2E 2E 2E
 223+ 336F 2E 2E 2E 2E
 223+ 3373 2E 2E 2E 2E
 223+ 3377 2E 2E 2E 2E
 223+ 337B 2E 2E 2E 2E
 224+ 337F 2E 2E 2E 2E          DB '................................................................................'
 224+ 3383 2E 2E 2E 2E
 224+ 3387 2E 2E 2E 2E
 224+ 338B 2E 2E 2E 2E
 224+ 338F 2E 2E 2E 2E
 224+ 3393 2E 2E 2E 2E
 224+ 3397 2E 2E 2E 2E
 224+ 339B 2E 2E 2E 2E
 224+ 339F 2E 2E 2E 2E
 224+ 33A3 2E 2E 2E 2E
 224+ 33A7 2E 2E 2E 2E
 224+ 33AB 2E 2E 2E 2E
 224+ 33AF 2E 2E 2E 2E
 224+ 33B3 2E 2E 2E 2E
 224+ 33B7 2E 2E 2E 2E
 224+ 33BB 2E 2E 2E 2E
 224+ 33BF 2E 2E 2E 2E
 224+ 33C3 2E 2E 2E 2E
 224+ 33C7 2E 2E 2E 2E
 224+ 33CB 2E 2E 2E 2E
 225+ 33CF 2E 2E 2E 2E          DB '................................................................................'
 225+ 33D3 2E 2E 2E 2E
 225+ 33D7 2E 2E 2E 2E
 225+ 33DB 2E 2E 2E 2E
 225+ 33DF 2E 2E 2E 2E
 225+ 33E3 2E 2E 2E 2E
 225+ 33E7 2E 2E 2E 2E
 225+ 33EB 2E 2E 2E 2E
 225+ 33EF 2E 2E 2E 2E
 225+ 33F3 2E 2E 2E 2E
 225+ 33F7 2E 2E 2E 2E
 225+ 33FB 2E 2E 2E 2E
 225+ 33FF 2E 2E 2E 2E
 225+ 3403 2E 2E 2E 2E
 225+ 3407 2E 2E 2E 2E
 225+ 340B 2E 2E 2E 2E
 225+ 340F 2E 2E 2E 2E
 225+ 3413 2E 2E 2E 2E
 225+ 3417 2E 2E 2E 2E
 225+ 341B 2E 2E 2E 2E
 226+ 341F 2E 2E 2E 2E          DB '................................................................................'
 226+ 3423 2E 2E 2E 2E
 226+ 3427 2E 2E 2E 2E
 226+ 342B 2E 2E 2E 2E
 226+ 342F 2E 2E 2E 2E
 226+ 3433 2E 2E 2E 2E
 226+ 3437 2E 2E 2E 2E
 226+ 343B 2E 2E 2E 2E
 226+ 343F 2E 2E 2E 2E
 226+ 3443 2E 2E 2E 2E
 226+ 3447 2E 2E 2E 2E
 226+ 344B 2E 2E 2E 2E
 226+ 344F 2E 2E 2E 2E
 226+ 3453 2E 2E 2E 2E
 226+ 3457 2E 2E 2E 2E
 226+ 345B 2E 2E 2E 2E
 226+ 345F 2E 2E 2E 2E
 226+ 3463 2E 2E 2E 2E
 226+ 3467 2E 2E 2E 2E
 226+ 346B 2E 2E 2E 2E
 227+ 346F 2E 2E 2E 2E          DB '................................................................................'
 227+ 3473 2E 2E 2E 2E
 227+ 3477 2E 2E 2E 2E
 227+ 347B 2E 2E 2E 2E
 227+ 347F 2E 2E 2E 2E
 227+ 3483 2E 2E 2E 2E
 227+ 3487 2E 2E 2E 2E
 227+ 348B 2E 2E 2E 2E
 227+ 348F 2E 2E 2E 2E
 227+ 3493 2E 2E 2E 2E
 227+ 3497 2E 2E 2E 2E
 227+ 349B 2E 2E 2E 2E
 227+ 349F 2E 2E 2E 2E
 227+ 34A3 2E 2E 2E 2E
 227+ 34A7 2E 2E 2E 2E
 227+ 34AB 2E 2E 2E 2E
 227+ 34AF 2E 2E 2E 2E
 227+ 34B3 2E 2E 2E 2E
 227+ 34B7 2E 2E 2E 2E
 227+ 34BB 2E 2E 2E 2E
 228+ 34BF 2E 2E 2E 2E          DB '................................................................................'
 228+ 34C3 2E 2E 2E 2E
 228+ 34C7 2E 2E 2E 2E
 228+ 34CB 2E 2E 2E 2E
 228+ 34CF 2E 2E 2E 2E
 228+ 34D3 2E 2E 2E 2E
 228+ 34D7 2E 2E 2E 2E
 228+ 34DB 2E 2E 2E 2E
 228+ 34DF 2E 2E 2E 2E
 228+ 34E3 2E 2E 2E 2E
 228+ 34E7 2E 2E 2E 2E
 228+ 34EB 2E 2E 2E 2E
 228+ 34EF 2E 2E 2E 2E
 228+ 34F3 2E 2E 2E 2E
 228+ 34F7 2E 2E 2E 2E
 228+ 34FB 2E 2E 2E 2E
 228+ 34FF 2E 2E 2E 2E
 228+ 3503 2E 2E 2E 2E
 228+ 3507 2E 2E 2E 2E
 228+ 350B 2E 2E 2E 2E
 229+ 350F 2E 2E 2E 2E          DB '................................................................................'
 229+ 3513 2E 2E 2E 2E
 229+ 3517 2E 2E 2E 2E
 229+ 351B 2E 2E 2E 2E
 229+ 351F 2E 2E 2E 2E
 229+ 3523 2E 2E 2E 2E
 229+ 3527 2E 2E 2E 2E
 229+ 352B 2E 2E 2E 2E
 229+ 352F 2E 2E 2E 2E
 229+ 3533 2E 2E 2E 2E
 229+ 3537 2E 2E 2E 2E
 229+ 353B 2E 2E 2E 2E
 229+ 353F 2E 2E 2E 2E
 229+ 3543 2E 2E 2E 2E
 229+ 3547 2E 2E 2E 2E
 229+ 354B 2E 2E 2E 2E
 229+ 354F 2E 2E 2E 2E
 229+ 3553 2E 2E 2E 2E
 229+ 3557 2E 2E 2E 2E
 229+ 355B 2E 2E 2E 2E
 230+ 355F 2E 2E 2E 2E          DB '................................................................................'
 230+ 3563 2E 2E 2E 2E
 230+ 3567 2E 2E 2E 2E
 230+ 356B 2E 2E 2E 2E
 230+ 356F 2E 2E 2E 2E
 230+ 3573 2E 2E 2E 2E
 230+ 3577 2E 2E 2E 2E
 230+ 357B 2E 2E 2E 2E
 230+ 357F 2E 2E 2E 2E
 230+ 3583 2E 2E 2E 2E
 230+ 3587 2E 2E 2E 2E
 230+ 358B 2E 2E 2E 2E
 230+ 358F 2E 2E 2E 2E
 230+ 3593 2E 2E 2E 2E
 230+ 3597 2E 2E 2E 2E
 230+ 359B 2E 2E 2E 2E
 230+ 359F 2E 2E 2E 2E
 230+ 35A3 2E 2E 2E 2E
 230+ 35A7 2E 2E 2E 2E
 230+ 35AB 2E 2E 2E 2E
 231+ 35AF 2E 2E 2E 2E          DB '................................................................................'
 231+ 35B3 2E 2E 2E 2E
 231+ 35B7 2E 2E 2E 2E
 231+ 35BB 2E 2E 2E 2E
 231+ 35BF 2E 2E 2E 2E
 231+ 35C3 2E 2E 2E 2E
 231+ 35C7 2E 2E 2E 2E
 231+ 35CB 2E 2E 2E 2E
 231+ 35CF 2E 2E 2E 2E
 231+ 35D3 2E 2E 2E 2E
 231+ 35D7 2E 2E 2E 2E
 231+ 35DB 2E 2E 2E 2E
 231+ 35DF 2E 2E 2E 2E
 231+ 35E3 2E 2E 2E 2E
 231+ 35E7 2E 2E 2E 2E
 231+ 35EB 2E 2E 2E 2E
 231+ 35EF 2E 2E 2E 2E
 231+ 35F3 2E 2E 2E 2E
 231+ 35F7 2E 2E 2E 2E
 231+ 35FB 2E 2E 2E 2E
 232+ 35FF 2E 2E 2E 2E          DB '................................................................................'
 232+ 3603 2E 2E 2E 2E
 232+ 3607 2E 2E 2E 2E
 232+ 360B 2E 2E 2E 2E
 232+ 360F 2E 2E 2E 2E
 232+ 3613 2E 2E 2E 2E
 232+ 3617 2E 2E 2E 2E
 232+ 361B 2E 2E 2E 2E
 232+ 361F 2E 2E 2E 2E
 232+ 3623 2E 2E 2E 2E
 232+ 3627 2E 2E 2E 2E
 232+ 362B 2E 2E 2E 2E
 232+ 362F 2E 2E 2E 2E
 232+ 3633 2E 2E 2E 2E
 232+ 3637 2E 2E 2E 2E
 232+ 363B 2E 2E 2E 2E
 232+ 363F 2E 2E 2E 2E
 232+ 3643 2E 2E 2E 2E
 232+ 3647 2E 2E 2E 2E
 232+ 364B 2E 2E 2E 2E
 233+ 364F 2E 2E 2E 2E          DB '...................................................#............................'
 233+ 3653 2E 2E 2E 2E
 233+ 3657 2E 2E 2E 2E
 233+ 365B 2E 2E 2E 2E
 233+ 365F 2E 2E 2E 2E
 233+ 3663 2E 2E 2E 2E
 233+ 3667 2E 2E 2E 2E
 233+ 366B 2E 2E 2E 2E
 233+ 366F 2E 2E 2E 2E
 233+ 3673 2E 2E 2E 2E
 233+ 3677 2E 2E 2E 2E
 233+ 367B 2E 2E 2E 2E
 233+ 367F 2E 2E 2E 23
 233+ 3683 2E 2E 2E 2E
 233+ 3687 2E 2E 2E 2E
 233+ 368B 2E 2E 2E 2E
 233+ 368F 2E 2E 2E 2E
 233+ 3693 2E 2E 2E 2E
 233+ 3697 2E 2E 2E 2E
 233+ 369B 2E 2E 2E 2E
 234+ 369F 2E 2E 2E 2E          DB '.....................................................#..........................'
 234+ 36A3 2E 2E 2E 2E
 234+ 36A7 2E 2E 2E 2E
 234+ 36AB 2E 2E 2E 2E
 234+ 36AF 2E 2E 2E 2E
 234+ 36B3 2E 2E 2E 2E
 234+ 36B7 2E 2E 2E 2E
 234+ 36BB 2E 2E 2E 2E
 234+ 36BF 2E 2E 2E 2E
 234+ 36C3 2E 2E 2E 2E
 234+ 36C7 2E 2E 2E 2E
 234+ 36CB 2E 2E 2E 2E
 234+ 36CF 2E 2E 2E 2E
 234+ 36D3 2E 23 2E 2E
 234+ 36D7 2E 2E 2E 2E
 234+ 36DB 2E 2E 2E 2E
 234+ 36DF 2E 2E 2E 2E
 234+ 36E3 2E 2E 2E 2E
 234+ 36E7 2E 2E 2E 2E
 234+ 36EB 2E 2E 2E 2E
 235+ 36EF 2E 2E 2E 2E          DB '..................................................##..###.......................'
 235+ 36F3 2E 2E 2E 2E
 235+ 36F7 2E 2E 2E 2E
 235+ 36FB 2E 2E 2E 2E
 235+ 36FF 2E 2E 2E 2E
 235+ 3703 2E 2E 2E 2E
 235+ 3707 2E 2E 2E 2E
 235+ 370B 2E 2E 2E 2E
 235+ 370F 2E 2E 2E 2E
 235+ 3713 2E 2E 2E 2E
 235+ 3717 2E 2E 2E 2E
 235+ 371B 2E 2E 2E 2E
 235+ 371F 2E 2E 23 23
 235+ 3723 2E 2E 23 23
 235+ 3727 23 2E 2E 2E
 235+ 372B 2E 2E 2E 2E
 235+ 372F 2E 2E 2E 2E
 235+ 3733 2E 2E 2E 2E
 235+ 3737 2E 2E 2E 2E
 235+ 373B 2E 2E 2E 2E
 236+ 373F 2E 2E 2E 2E          DB '................................................................................'
 236+ 3743 2E 2E 2E 2E
 236+ 3747 2E 2E 2E 2E
 236+ 374B 2E 2E 2E 2E
 236+ 374F 2E 2E 2E 2E
 236+ 3753 2E 2E 2E 2E
 236+ 3757 2E 2E 2E 2E
 236+ 375B 2E 2E 2E 2E
 236+ 375F 2E 2E 2E 2E
 236+ 3763 2E 2E 2E 2E
 236+ 3767 2E 2E 2E 2E
 236+ 376B 2E 2E 2E 2E
 236+ 376F 2E 2E 2E 2E
 236+ 3773 2E 2E 2E 2E
 236+ 3777 2E 2E 2E 2E
 236+ 377B 2E 2E 2E 2E
 236+ 377F 2E 2E 2E 2E
 236+ 3783 2E 2E 2E 2E
 236+ 3787 2E 2E 2E 2E
 236+ 378B 2E 2E 2E 2E
 237+ 378F 2E 2E 2E 2E          DB '................................................................................'
 237+ 3793 2E 2E 2E 2E
 237+ 3797 2E 2E 2E 2E
 237+ 379B 2E 2E 2E 2E
 237+ 379F 2E 2E 2E 2E
 237+ 37A3 2E 2E 2E 2E
 237+ 37A7 2E 2E 2E 2E
 237+ 37AB 2E 2E 2E 2E
 237+ 37AF 2E 2E 2E 2E
 237+ 37B3 2E 2E 2E 2E
 237+ 37B7 2E 2E 2E 2E
 237+ 37BB 2E 2E 2E 2E
 237+ 37BF 2E 2E 2E 2E
 237+ 37C3 2E 2E 2E 2E
 237+ 37C7 2E 2E 2E 2E
 237+ 37CB 2E 2E 2E 2E
 237+ 37CF 2E 2E 2E 2E
 237+ 37D3 2E 2E 2E 2E
 237+ 37D7 2E 2E 2E 2E
 237+ 37DB 2E 2E 2E 2E
 238+ 37DF 2E 2E 2E 2E          DB '................................................................................'
 238+ 37E3 2E 2E 2E 2E
 238+ 37E7 2E 2E 2E 2E
 238+ 37EB 2E 2E 2E 2E
 238+ 37EF 2E 2E 2E 2E
 238+ 37F3 2E 2E 2E 2E
 238+ 37F7 2E 2E 2E 2E
 238+ 37FB 2E 2E 2E 2E
 238+ 37FF 2E 2E 2E 2E
 238+ 3803 2E 2E 2E 2E
 238+ 3807 2E 2E 2E 2E
 238+ 380B 2E 2E 2E 2E
 238+ 380F 2E 2E 2E 2E
 238+ 3813 2E 2E 2E 2E
 238+ 3817 2E 2E 2E 2E
 238+ 381B 2E 2E 2E 2E
 238+ 381F 2E 2E 2E 2E
 238+ 3823 2E 2E 2E 2E
 238+ 3827 2E 2E 2E 2E
 238+ 382B 2E 2E 2E 2E
 239+ 382F 2E 2E 2E 2E          DB '................................................................................'
 239+ 3833 2E 2E 2E 2E
 239+ 3837 2E 2E 2E 2E
 239+ 383B 2E 2E 2E 2E
 239+ 383F 2E 2E 2E 2E
 239+ 3843 2E 2E 2E 2E
 239+ 3847 2E 2E 2E 2E
 239+ 384B 2E 2E 2E 2E
 239+ 384F 2E 2E 2E 2E
 239+ 3853 2E 2E 2E 2E
 239+ 3857 2E 2E 2E 2E
 239+ 385B 2E 2E 2E 2E
 239+ 385F 2E 2E 2E 2E
 239+ 3863 2E 2E 2E 2E
 239+ 3867 2E 2E 2E 2E
 239+ 386B 2E 2E 2E 2E
 239+ 386F 2E 2E 2E 2E
 239+ 3873 2E 2E 2E 2E
 239+ 3877 2E 2E 2E 2E
 239+ 387B 2E 2E 2E 2E
 240+ 387F 2E 2E 2E 2E          DB '................................................................................'
 240+ 3883 2E 2E 2E 2E
 240+ 3887 2E 2E 2E 2E
 240+ 388B 2E 2E 2E 2E
 240+ 388F 2E 2E 2E 2E
 240+ 3893 2E 2E 2E 2E
 240+ 3897 2E 2E 2E 2E
 240+ 389B 2E 2E 2E 2E
 240+ 389F 2E 2E 2E 2E
 240+ 38A3 2E 2E 2E 2E
 240+ 38A7 2E 2E 2E 2E
 240+ 38AB 2E 2E 2E 2E
 240+ 38AF 2E 2E 2E 2E
 240+ 38B3 2E 2E 2E 2E
 240+ 38B7 2E 2E 2E 2E
 240+ 38BB 2E 2E 2E 2E
 240+ 38BF 2E 2E 2E 2E
 240+ 38C3 2E 2E 2E 2E
 240+ 38C7 2E 2E 2E 2E
 240+ 38CB 2E 2E 2E 2E
 241+ 38CF 2E 2E 2E 2E          DB '................................................................................'
 241+ 38D3 2E 2E 2E 2E
 241+ 38D7 2E 2E 2E 2E
 241+ 38DB 2E 2E 2E 2E
 241+ 38DF 2E 2E 2E 2E
 241+ 38E3 2E 2E 2E 2E
 241+ 38E7 2E 2E 2E 2E
 241+ 38EB 2E 2E 2E 2E
 241+ 38EF 2E 2E 2E 2E
 241+ 38F3 2E 2E 2E 2E
 241+ 38F7 2E 2E 2E 2E
 241+ 38FB 2E 2E 2E 2E
 241+ 38FF 2E 2E 2E 2E
 241+ 3903 2E 2E 2E 2E
 241+ 3907 2E 2E 2E 2E
 241+ 390B 2E 2E 2E 2E
 241+ 390F 2E 2E 2E 2E
 241+ 3913 2E 2E 2E 2E
 241+ 3917 2E 2E 2E 2E
 241+ 391B 2E 2E 2E 2E
 242+ 391F 2E 2E 2E 2E          DB '................................................................................'
 242+ 3923 2E 2E 2E 2E
 242+ 3927 2E 2E 2E 2E
 242+ 392B 2E 2E 2E 2E
 242+ 392F 2E 2E 2E 2E
 242+ 3933 2E 2E 2E 2E
 242+ 3937 2E 2E 2E 2E
 242+ 393B 2E 2E 2E 2E
 242+ 393F 2E 2E 2E 2E
 242+ 3943 2E 2E 2E 2E
 242+ 3947 2E 2E 2E 2E
 242+ 394B 2E 2E 2E 2E
 242+ 394F 2E 2E 2E 2E
 242+ 3953 2E 2E 2E 2E
 242+ 3957 2E 2E 2E 2E
 242+ 395B 2E 2E 2E 2E
 242+ 395F 2E 2E 2E 2E
 242+ 3963 2E 2E 2E 2E
 242+ 3967 2E 2E 2E 2E
 242+ 396B 2E 2E 2E 2E
 243+ 396F 2E 2E 2E 2E          DB '................................................................................'
 243+ 3973 2E 2E 2E 2E
 243+ 3977 2E 2E 2E 2E
 243+ 397B 2E 2E 2E 2E
 243+ 397F 2E 2E 2E 2E
 243+ 3983 2E 2E 2E 2E
 243+ 3987 2E 2E 2E 2E
 243+ 398B 2E 2E 2E 2E
 243+ 398F 2E 2E 2E 2E
 243+ 3993 2E 2E 2E 2E
 243+ 3997 2E 2E 2E 2E
 243+ 399B 2E 2E 2E 2E
 243+ 399F 2E 2E 2E 2E
 243+ 39A3 2E 2E 2E 2E
 243+ 39A7 2E 2E 2E 2E
 243+ 39AB 2E 2E 2E 2E
 243+ 39AF 2E 2E 2E 2E
 243+ 39B3 2E 2E 2E 2E
 243+ 39B7 2E 2E 2E 2E
 243+ 39BB 2E 2E 2E 2E
 244+ 39BF 2E 2E 2E 2E          DB '................................................................................'
 244+ 39C3 2E 2E 2E 2E
 244+ 39C7 2E 2E 2E 2E
 244+ 39CB 2E 2E 2E 2E
 244+ 39CF 2E 2E 2E 2E
 244+ 39D3 2E 2E 2E 2E
 244+ 39D7 2E 2E 2E 2E
 244+ 39DB 2E 2E 2E 2E
 244+ 39DF 2E 2E 2E 2E
 244+ 39E3 2E 2E 2E 2E
 244+ 39E7 2E 2E 2E 2E
 244+ 39EB 2E 2E 2E 2E
 244+ 39EF 2E 2E 2E 2E
 244+ 39F3 2E 2E 2E 2E
 244+ 39F7 2E 2E 2E 2E
 244+ 39FB 2E 2E 2E 2E
 244+ 39FF 2E 2E 2E 2E
 244+ 3A03 2E 2E 2E 2E
 244+ 3A07 2E 2E 2E 2E
 244+ 3A0B 2E 2E 2E 2E
 245+ 3A0F
 246+ 3A0F              initial_pattern2:
 247+ 3A0F 2E 2E 2E 2E          DB '................................................................................'
 247+ 3A13 2E 2E 2E 2E
 247+ 3A17 2E 2E 2E 2E
 247+ 3A1B 2E 2E 2E 2E
 247+ 3A1F 2E 2E 2E 2E
 247+ 3A23 2E 2E 2E 2E
 247+ 3A27 2E 2E 2E 2E
 247+ 3A2B 2E 2E 2E 2E
 247+ 3A2F 2E 2E 2E 2E
 247+ 3A33 2E 2E 2E 2E
 247+ 3A37 2E 2E 2E 2E
 247+ 3A3B 2E 2E 2E 2E
 247+ 3A3F 2E 2E 2E 2E
 247+ 3A43 2E 2E 2E 2E
 247+ 3A47 2E 2E 2E 2E
 247+ 3A4B 2E 2E 2E 2E
 247+ 3A4F 2E 2E 2E 2E
 247+ 3A53 2E 2E 2E 2E
 247+ 3A57 2E 2E 2E 2E
 247+ 3A5B 2E 2E 2E 2E
 248+ 3A5F 2E 2E 23 23          DB '..##............................................................................'
 248+ 3A63 2E 2E 2E 2E
 248+ 3A67 2E 2E 2E 2E
 248+ 3A6B 2E 2E 2E 2E
 248+ 3A6F 2E 2E 2E 2E
 248+ 3A73 2E 2E 2E 2E
 248+ 3A77 2E 2E 2E 2E
 248+ 3A7B 2E 2E 2E 2E
 248+ 3A7F 2E 2E 2E 2E
 248+ 3A83 2E 2E 2E 2E
 248+ 3A87 2E 2E 2E 2E
 248+ 3A8B 2E 2E 2E 2E
 248+ 3A8F 2E 2E 2E 2E
 248+ 3A93 2E 2E 2E 2E
 248+ 3A97 2E 2E 2E 2E
 248+ 3A9B 2E 2E 2E 2E
 248+ 3A9F 2E 2E 2E 2E
 248+ 3AA3 2E 2E 2E 2E
 248+ 3AA7 2E 2E 2E 2E
 248+ 3AAB 2E 2E 2E 2E
 249+ 3AAF 2E 2E 2E 2E          DB '.........................#......................................................'
 249+ 3AB3 2E 2E 2E 2E
 249+ 3AB7 2E 2E 2E 2E
 249+ 3ABB 2E 2E 2E 2E
 249+ 3ABF 2E 2E 2E 2E
 249+ 3AC3 2E 2E 2E 2E
 249+ 3AC7 2E 23 2E 2E
 249+ 3ACB 2E 2E 2E 2E
 249+ 3ACF 2E 2E 2E 2E
 249+ 3AD3 2E 2E 2E 2E
 249+ 3AD7 2E 2E 2E 2E
 249+ 3ADB 2E 2E 2E 2E
 249+ 3ADF 2E 2E 2E 2E
 249+ 3AE3 2E 2E 2E 2E
 249+ 3AE7 2E 2E 2E 2E
 249+ 3AEB 2E 2E 2E 2E
 249+ 3AEF 2E 2E 2E 2E
 249+ 3AF3 2E 2E 2E 2E
 249+ 3AF7 2E 2E 2E 2E
 249+ 3AFB 2E 2E 2E 2E
 250+ 3AFF 2E 2E 2E 2E          DB '.......................#.#......................................................'
 250+ 3B03 2E 2E 2E 2E
 250+ 3B07 2E 2E 2E 2E
 250+ 3B0B 2E 2E 2E 2E
 250+ 3B0F 2E 2E 2E 2E
 250+ 3B13 2E 2E 2E 23
 250+ 3B17 2E 23 2E 2E
 250+ 3B1B 2E 2E 2E 2E
 250+ 3B1F 2E 2E 2E 2E
 250+ 3B23 2E 2E 2E 2E
 250+ 3B27 2E 2E 2E 2E
 250+ 3B2B 2E 2E 2E 2E
 250+ 3B2F 2E 2E 2E 2E
 250+ 3B33 2E 2E 2E 2E
 250+ 3B37 2E 2E 2E 2E
 250+ 3B3B 2E 2E 2E 2E
 250+ 3B3F 2E 2E 2E 2E
 250+ 3B43 2E 2E 2E 2E
 250+ 3B47 2E 2E 2E 2E
 250+ 3B4B 2E 2E 2E 2E
 251+ 3B4F 2E 2E 2E 2E          DB '.............##......##............##...........................................'
 251+ 3B53 2E 2E 2E 2E
 251+ 3B57 2E 2E 2E 2E
 251+ 3B5B 2E 23 23 2E
 251+ 3B5F 2E 2E 2E 2E
 251+ 3B63 2E 23 23 2E
 251+ 3B67 2E 2E 2E 2E
 251+ 3B6B 2E 2E 2E 2E
 251+ 3B6F 2E 2E 2E 23
 251+ 3B73 23 2E 2E 2E
 251+ 3B77 2E 2E 2E 2E
 251+ 3B7B 2E 2E 2E 2E
 251+ 3B7F 2E 2E 2E 2E
 251+ 3B83 2E 2E 2E 2E
 251+ 3B87 2E 2E 2E 2E
 251+ 3B8B 2E 2E 2E 2E
 251+ 3B8F 2E 2E 2E 2E
 251+ 3B93 2E 2E 2E 2E
 251+ 3B97 2E 2E 2E 2E
 251+ 3B9B 2E 2E 2E 2E
 252+ 3B9F 2E 2E 2E 2E          DB '............#...#....##............##...........................................'
 252+ 3BA3 2E 2E 2E 2E
 252+ 3BA7 2E 2E 2E 2E
 252+ 3BAB 23 2E 2E 2E
 252+ 3BAF 23 2E 2E 2E
 252+ 3BB3 2E 23 23 2E
 252+ 3BB7 2E 2E 2E 2E
 252+ 3BBB 2E 2E 2E 2E
 252+ 3BBF 2E 2E 2E 23
 252+ 3BC3 23 2E 2E 2E
 252+ 3BC7 2E 2E 2E 2E
 252+ 3BCB 2E 2E 2E 2E
 252+ 3BCF 2E 2E 2E 2E
 252+ 3BD3 2E 2E 2E 2E
 252+ 3BD7 2E 2E 2E 2E
 252+ 3BDB 2E 2E 2E 2E
 252+ 3BDF 2E 2E 2E 2E
 252+ 3BE3 2E 2E 2E 2E
 252+ 3BE7 2E 2E 2E 2E
 252+ 3BEB 2E 2E 2E 2E
 253+ 3BEF 2E 23 23 2E          DB '.##........#.....#...##.........................................................'
 253+ 3BF3 2E 2E 2E 2E
 253+ 3BF7 2E 2E 2E 23
 253+ 3BFB 2E 2E 2E 2E
 253+ 3BFF 2E 23 2E 2E
 253+ 3C03 2E 23 23 2E
 253+ 3C07 2E 2E 2E 2E
 253+ 3C0B 2E 2E 2E 2E
 253+ 3C0F 2E 2E 2E 2E
 253+ 3C13 2E 2E 2E 2E
 253+ 3C17 2E 2E 2E 2E
 253+ 3C1B 2E 2E 2E 2E
 253+ 3C1F 2E 2E 2E 2E
 253+ 3C23 2E 2E 2E 2E
 253+ 3C27 2E 2E 2E 2E
 253+ 3C2B 2E 2E 2E 2E
 253+ 3C2F 2E 2E 2E 2E
 253+ 3C33 2E 2E 2E 2E
 253+ 3C37 2E 2E 2E 2E
 253+ 3C3B 2E 2E 2E 2E
 254+ 3C3F 2E 23 23 2E          DB '.##........#...#.##....#.#......................................................'
 254+ 3C43 2E 2E 2E 2E
 254+ 3C47 2E 2E 2E 23
 254+ 3C4B 2E 2E 2E 23
 254+ 3C4F 2E 23 23 2E
 254+ 3C53 2E 2E 2E 23
 254+ 3C57 2E 23 2E 2E
 254+ 3C5B 2E 2E 2E 2E
 254+ 3C5F 2E 2E 2E 2E
 254+ 3C63 2E 2E 2E 2E
 254+ 3C67 2E 2E 2E 2E
 254+ 3C6B 2E 2E 2E 2E
 254+ 3C6F 2E 2E 2E 2E
 254+ 3C73 2E 2E 2E 2E
 254+ 3C77 2E 2E 2E 2E
 254+ 3C7B 2E 2E 2E 2E
 254+ 3C7F 2E 2E 2E 2E
 254+ 3C83 2E 2E 2E 2E
 254+ 3C87 2E 2E 2E 2E
 254+ 3C8B 2E 2E 2E 2E
 255+ 3C8F 2E 2E 2E 2E          DB '...........#.....#.......#......................................................'
 255+ 3C93 2E 2E 2E 2E
 255+ 3C97 2E 2E 2E 23
 255+ 3C9B 2E 2E 2E 2E
 255+ 3C9F 2E 23 2E 2E
 255+ 3CA3 2E 2E 2E 2E
 255+ 3CA7 2E 23 2E 2E
 255+ 3CAB 2E 2E 2E 2E
 255+ 3CAF 2E 2E 2E 2E
 255+ 3CB3 2E 2E 2E 2E
 255+ 3CB7 2E 2E 2E 2E
 255+ 3CBB 2E 2E 2E 2E
 255+ 3CBF 2E 2E 2E 2E
 255+ 3CC3 2E 2E 2E 2E
 255+ 3CC7 2E 2E 2E 2E
 255+ 3CCB 2E 2E 2E 2E
 255+ 3CCF 2E 2E 2E 2E
 255+ 3CD3 2E 2E 2E 2E
 255+ 3CD7 2E 2E 2E 2E
 255+ 3CDB 2E 2E 2E 2E
 256+ 3CDF 2E 2E 2E 2E          DB '............#...#...............................................................'
 256+ 3CE3 2E 2E 2E 2E
 256+ 3CE7 2E 2E 2E 2E
 256+ 3CEB 23 2E 2E 2E
 256+ 3CEF 23 2E 2E 2E
 256+ 3CF3 2E 2E 2E 2E
 256+ 3CF7 2E 2E 2E 2E
 256+ 3CFB 2E 2E 2E 2E
 256+ 3CFF 2E 2E 2E 2E
 256+ 3D03 2E 2E 2E 2E
 256+ 3D07 2E 2E 2E 2E
 256+ 3D0B 2E 2E 2E 2E
 256+ 3D0F 2E 2E 2E 2E
 256+ 3D13 2E 2E 2E 2E
 256+ 3D17 2E 2E 2E 2E
 256+ 3D1B 2E 2E 2E 2E
 256+ 3D1F 2E 2E 2E 2E
 256+ 3D23 2E 2E 2E 2E
 256+ 3D27 2E 2E 2E 2E
 256+ 3D2B 2E 2E 2E 2E
 257+ 3D2F 2E 2E 2E 2E          DB '.............##.................................................................'
 257+ 3D33 2E 2E 2E 2E
 257+ 3D37 2E 2E 2E 2E
 257+ 3D3B 2E 23 23 2E
 257+ 3D3F 2E 2E 2E 2E
 257+ 3D43 2E 2E 2E 2E
 257+ 3D47 2E 2E 2E 2E
 257+ 3D4B 2E 2E 2E 2E
 257+ 3D4F 2E 2E 2E 2E
 257+ 3D53 2E 2E 2E 2E
 257+ 3D57 2E 2E 2E 2E
 257+ 3D5B 2E 2E 2E 2E
 257+ 3D5F 2E 2E 2E 2E
 257+ 3D63 2E 2E 2E 2E
 257+ 3D67 2E 2E 2E 2E
 257+ 3D6B 2E 2E 2E 2E
 257+ 3D6F 2E 2E 2E 2E
 257+ 3D73 2E 2E 2E 2E
 257+ 3D77 2E 2E 2E 2E
 257+ 3D7B 2E 2E 2E 2E
 258+ 3D7F 2E 2E 2E 2E          DB '................................................................................'
 258+ 3D83 2E 2E 2E 2E
 258+ 3D87 2E 2E 2E 2E
 258+ 3D8B 2E 2E 2E 2E
 258+ 3D8F 2E 2E 2E 2E
 258+ 3D93 2E 2E 2E 2E
 258+ 3D97 2E 2E 2E 2E
 258+ 3D9B 2E 2E 2E 2E
 258+ 3D9F 2E 2E 2E 2E
 258+ 3DA3 2E 2E 2E 2E
 258+ 3DA7 2E 2E 2E 2E
 258+ 3DAB 2E 2E 2E 2E
 258+ 3DAF 2E 2E 2E 2E
 258+ 3DB3 2E 2E 2E 2E
 258+ 3DB7 2E 2E 2E 2E
 258+ 3DBB 2E 2E 2E 2E
 258+ 3DBF 2E 2E 2E 2E
 258+ 3DC3 2E 2E 2E 2E
 258+ 3DC7 2E 2E 2E 2E
 258+ 3DCB 2E 2E 2E 2E
 259+ 3DCF 2E 2E 2E 2E          DB '................................................................................'
 259+ 3DD3 2E 2E 2E 2E
 259+ 3DD7 2E 2E 2E 2E
 259+ 3DDB 2E 2E 2E 2E
 259+ 3DDF 2E 2E 2E 2E
 259+ 3DE3 2E 2E 2E 2E
 259+ 3DE7 2E 2E 2E 2E
 259+ 3DEB 2E 2E 2E 2E
 259+ 3DEF 2E 2E 2E 2E
 259+ 3DF3 2E 2E 2E 2E
 259+ 3DF7 2E 2E 2E 2E
 259+ 3DFB 2E 2E 2E 2E
 259+ 3DFF 2E 2E 2E 2E
 259+ 3E03 2E 2E 2E 2E
 259+ 3E07 2E 2E 2E 2E
 259+ 3E0B 2E 2E 2E 2E
 259+ 3E0F 2E 2E 2E 2E
 259+ 3E13 2E 2E 2E 2E
 259+ 3E17 2E 2E 2E 2E
 259+ 3E1B 2E 2E 2E 2E
 260+ 3E1F 2E 2E 2E 2E          DB '................................................................................'
 260+ 3E23 2E 2E 2E 2E
 260+ 3E27 2E 2E 2E 2E
 260+ 3E2B 2E 2E 2E 2E
 260+ 3E2F 2E 2E 2E 2E
 260+ 3E33 2E 2E 2E 2E
 260+ 3E37 2E 2E 2E 2E
 260+ 3E3B 2E 2E 2E 2E
 260+ 3E3F 2E 2E 2E 2E
 260+ 3E43 2E 2E 2E 2E
 260+ 3E47 2E 2E 2E 2E
 260+ 3E4B 2E 2E 2E 2E
 260+ 3E4F 2E 2E 2E 2E
 260+ 3E53 2E 2E 2E 2E
 260+ 3E57 2E 2E 2E 2E
 260+ 3E5B 2E 2E 2E 2E
 260+ 3E5F 2E 2E 2E 2E
 260+ 3E63 2E 2E 2E 2E
 260+ 3E67 2E 2E 2E 2E
 260+ 3E6B 2E 2E 2E 2E
 261+ 3E6F 2E 2E 2E 2E          DB '................................................................................'
 261+ 3E73 2E 2E 2E 2E
 261+ 3E77 2E 2E 2E 2E
 261+ 3E7B 2E 2E 2E 2E
 261+ 3E7F 2E 2E 2E 2E
 261+ 3E83 2E 2E 2E 2E
 261+ 3E87 2E 2E 2E 2E
 261+ 3E8B 2E 2E 2E 2E
 261+ 3E8F 2E 2E 2E 2E
 261+ 3E93 2E 2E 2E 2E
 261+ 3E97 2E 2E 2E 2E
 261+ 3E9B 2E 2E 2E 2E
 261+ 3E9F 2E 2E 2E 2E
 261+ 3EA3 2E 2E 2E 2E
 261+ 3EA7 2E 2E 2E 2E
 261+ 3EAB 2E 2E 2E 2E
 261+ 3EAF 2E 2E 2E 2E
 261+ 3EB3 2E 2E 2E 2E
 261+ 3EB7 2E 2E 2E 2E
 261+ 3EBB 2E 2E 2E 2E
 262+ 3EBF 2E 2E 2E 2E          DB '................................................................................'
 262+ 3EC3 2E 2E 2E 2E
 262+ 3EC7 2E 2E 2E 2E
 262+ 3ECB 2E 2E 2E 2E
 262+ 3ECF 2E 2E 2E 2E
 262+ 3ED3 2E 2E 2E 2E
 262+ 3ED7 2E 2E 2E 2E
 262+ 3EDB 2E 2E 2E 2E
 262+ 3EDF 2E 2E 2E 2E
 262+ 3EE3 2E 2E 2E 2E
 262+ 3EE7 2E 2E 2E 2E
 262+ 3EEB 2E 2E 2E 2E
 262+ 3EEF 2E 2E 2E 2E
 262+ 3EF3 2E 2E 2E 2E
 262+ 3EF7 2E 2E 2E 2E
 262+ 3EFB 2E 2E 2E 2E
 262+ 3EFF 2E 2E 2E 2E
 262+ 3F03 2E 2E 2E 2E
 262+ 3F07 2E 2E 2E 2E
 262+ 3F0B 2E 2E 2E 2E
 263+ 3F0F 2E 2E 2E 2E          DB '................................................................................'
 263+ 3F13 2E 2E 2E 2E
 263+ 3F17 2E 2E 2E 2E
 263+ 3F1B 2E 2E 2E 2E
 263+ 3F1F 2E 2E 2E 2E
 263+ 3F23 2E 2E 2E 2E
 263+ 3F27 2E 2E 2E 2E
 263+ 3F2B 2E 2E 2E 2E
 263+ 3F2F 2E 2E 2E 2E
 263+ 3F33 2E 2E 2E 2E
 263+ 3F37 2E 2E 2E 2E
 263+ 3F3B 2E 2E 2E 2E
 263+ 3F3F 2E 2E 2E 2E
 263+ 3F43 2E 2E 2E 2E
 263+ 3F47 2E 2E 2E 2E
 263+ 3F4B 2E 2E 2E 2E
 263+ 3F4F 2E 2E 2E 2E
 263+ 3F53 2E 2E 2E 2E
 263+ 3F57 2E 2E 2E 2E
 263+ 3F5B 2E 2E 2E 2E
 264+ 3F5F 2E 2E 2E 2E          DB '................................................................................'
 264+ 3F63 2E 2E 2E 2E
 264+ 3F67 2E 2E 2E 2E
 264+ 3F6B 2E 2E 2E 2E
 264+ 3F6F 2E 2E 2E 2E
 264+ 3F73 2E 2E 2E 2E
 264+ 3F77 2E 2E 2E 2E
 264+ 3F7B 2E 2E 2E 2E
 264+ 3F7F 2E 2E 2E 2E
 264+ 3F83 2E 2E 2E 2E
 264+ 3F87 2E 2E 2E 2E
 264+ 3F8B 2E 2E 2E 2E
 264+ 3F8F 2E 2E 2E 2E
 264+ 3F93 2E 2E 2E 2E
 264+ 3F97 2E 2E 2E 2E
 264+ 3F9B 2E 2E 2E 2E
 264+ 3F9F 2E 2E 2E 2E
 264+ 3FA3 2E 2E 2E 2E
 264+ 3FA7 2E 2E 2E 2E
 264+ 3FAB 2E 2E 2E 2E
 265+ 3FAF 2E 2E 2E 2E          DB '................................................................................'
 265+ 3FB3 2E 2E 2E 2E
 265+ 3FB7 2E 2E 2E 2E
 265+ 3FBB 2E 2E 2E 2E
 265+ 3FBF 2E 2E 2E 2E
 265+ 3FC3 2E 2E 2E 2E
 265+ 3FC7 2E 2E 2E 2E
 265+ 3FCB 2E 2E 2E 2E
 265+ 3FCF 2E 2E 2E 2E
 265+ 3FD3 2E 2E 2E 2E
 265+ 3FD7 2E 2E 2E 2E
 265+ 3FDB 2E 2E 2E 2E
 265+ 3FDF 2E 2E 2E 2E
 265+ 3FE3 2E 2E 2E 2E
 265+ 3FE7 2E 2E 2E 2E
 265+ 3FEB 2E 2E 2E 2E
 265+ 3FEF 2E 2E 2E 2E
 265+ 3FF3 2E 2E 2E 2E
 265+ 3FF7 2E 2E 2E 2E
 265+ 3FFB 2E 2E 2E 2E
 266+ 3FFF 2E 2E 2E 2E          DB '................................................................................'
 266+ 4003 2E 2E 2E 2E
 266+ 4007 2E 2E 2E 2E
 266+ 400B 2E 2E 2E 2E
 266+ 400F 2E 2E 2E 2E
 266+ 4013 2E 2E 2E 2E
 266+ 4017 2E 2E 2E 2E
 266+ 401B 2E 2E 2E 2E
 266+ 401F 2E 2E 2E 2E
 266+ 4023 2E 2E 2E 2E
 266+ 4027 2E 2E 2E 2E
 266+ 402B 2E 2E 2E 2E
 266+ 402F 2E 2E 2E 2E
 266+ 4033 2E 2E 2E 2E
 266+ 4037 2E 2E 2E 2E
 266+ 403B 2E 2E 2E 2E
 266+ 403F 2E 2E 2E 2E
 266+ 4043 2E 2E 2E 2E
 266+ 4047 2E 2E 2E 2E
 266+ 404B 2E 2E 2E 2E
 267+ 404F 2E 2E 2E 2E          DB '................................................................................'
 267+ 4053 2E 2E 2E 2E
 267+ 4057 2E 2E 2E 2E
 267+ 405B 2E 2E 2E 2E
 267+ 405F 2E 2E 2E 2E
 267+ 4063 2E 2E 2E 2E
 267+ 4067 2E 2E 2E 2E
 267+ 406B 2E 2E 2E 2E
 267+ 406F 2E 2E 2E 2E
 267+ 4073 2E 2E 2E 2E
 267+ 4077 2E 2E 2E 2E
 267+ 407B 2E 2E 2E 2E
 267+ 407F 2E 2E 2E 2E
 267+ 4083 2E 2E 2E 2E
 267+ 4087 2E 2E 2E 2E
 267+ 408B 2E 2E 2E 2E
 267+ 408F 2E 2E 2E 2E
 267+ 4093 2E 2E 2E 2E
 267+ 4097 2E 2E 2E 2E
 267+ 409B 2E 2E 2E 2E
 268+ 409F 2E 2E 2E 2E          DB '................................................................................'
 268+ 40A3 2E 2E 2E 2E
 268+ 40A7 2E 2E 2E 2E
 268+ 40AB 2E 2E 2E 2E
 268+ 40AF 2E 2E 2E 2E
 268+ 40B3 2E 2E 2E 2E
 268+ 40B7 2E 2E 2E 2E
 268+ 40BB 2E 2E 2E 2E
 268+ 40BF 2E 2E 2E 2E
 268+ 40C3 2E 2E 2E 2E
 268+ 40C7 2E 2E 2E 2E
 268+ 40CB 2E 2E 2E 2E
 268+ 40CF 2E 2E 2E 2E
 268+ 40D3 2E 2E 2E 2E
 268+ 40D7 2E 2E 2E 2E
 268+ 40DB 2E 2E 2E 2E
 268+ 40DF 2E 2E 2E 2E
 268+ 40E3 2E 2E 2E 2E
 268+ 40E7 2E 2E 2E 2E
 268+ 40EB 2E 2E 2E 2E
 269+ 40EF 2E 2E 2E 2E          DB '................................................................................'
 269+ 40F3 2E 2E 2E 2E
 269+ 40F7 2E 2E 2E 2E
 269+ 40FB 2E 2E 2E 2E
 269+ 40FF 2E 2E 2E 2E
 269+ 4103 2E 2E 2E 2E
 269+ 4107 2E 2E 2E 2E
 269+ 410B 2E 2E 2E 2E
 269+ 410F 2E 2E 2E 2E
 269+ 4113 2E 2E 2E 2E
 269+ 4117 2E 2E 2E 2E
 269+ 411B 2E 2E 2E 2E
 269+ 411F 2E 2E 2E 2E
 269+ 4123 2E 2E 2E 2E
 269+ 4127 2E 2E 2E 2E
 269+ 412B 2E 2E 2E 2E
 269+ 412F 2E 2E 2E 2E
 269+ 4133 2E 2E 2E 2E
 269+ 4137 2E 2E 2E 2E
 269+ 413B 2E 2E 2E 2E
 270+ 413F 2E 2E 2E 2E          DB '................................................................................'
 270+ 4143 2E 2E 2E 2E
 270+ 4147 2E 2E 2E 2E
 270+ 414B 2E 2E 2E 2E
 270+ 414F 2E 2E 2E 2E
 270+ 4153 2E 2E 2E 2E
 270+ 4157 2E 2E 2E 2E
 270+ 415B 2E 2E 2E 2E
 270+ 415F 2E 2E 2E 2E
 270+ 4163 2E 2E 2E 2E
 270+ 4167 2E 2E 2E 2E
 270+ 416B 2E 2E 2E 2E
 270+ 416F 2E 2E 2E 2E
 270+ 4173 2E 2E 2E 2E
 270+ 4177 2E 2E 2E 2E
 270+ 417B 2E 2E 2E 2E
 270+ 417F 2E 2E 2E 2E
 270+ 4183 2E 2E 2E 2E
 270+ 4187 2E 2E 2E 2E
 270+ 418B 2E 2E 2E 2E
 271+ 418F 2E 2E 2E 2E          DB '................................................................................'
 271+ 4193 2E 2E 2E 2E
 271+ 4197 2E 2E 2E 2E
 271+ 419B 2E 2E 2E 2E
 271+ 419F 2E 2E 2E 2E
 271+ 41A3 2E 2E 2E 2E
 271+ 41A7 2E 2E 2E 2E
 271+ 41AB 2E 2E 2E 2E
 271+ 41AF 2E 2E 2E 2E
 271+ 41B3 2E 2E 2E 2E
 271+ 41B7 2E 2E 2E 2E
 271+ 41BB 2E 2E 2E 2E
 271+ 41BF 2E 2E 2E 2E
 271+ 41C3 2E 2E 2E 2E
 271+ 41C7 2E 2E 2E 2E
 271+ 41CB 2E 2E 2E 2E
 271+ 41CF 2E 2E 2E 2E
 271+ 41D3 2E 2E 2E 2E
 271+ 41D7 2E 2E 2E 2E
 271+ 41DB 2E 2E 2E 2E
 272+ 41DF
 273+ 41DF              initial_pattern3:
 274+ 41DF 2E 2E 2E 2E          DB '................................................................................'
 274+ 41E3 2E 2E 2E 2E
 274+ 41E7 2E 2E 2E 2E
 274+ 41EB 2E 2E 2E 2E
 274+ 41EF 2E 2E 2E 2E
 274+ 41F3 2E 2E 2E 2E
 274+ 41F7 2E 2E 2E 2E
 274+ 41FB 2E 2E 2E 2E
 274+ 41FF 2E 2E 2E 2E
 274+ 4203 2E 2E 2E 2E
 274+ 4207 2E 2E 2E 2E
 274+ 420B 2E 2E 2E 2E
 274+ 420F 2E 2E 2E 2E
 274+ 4213 2E 2E 2E 2E
 274+ 4217 2E 2E 2E 2E
 274+ 421B 2E 2E 2E 2E
 274+ 421F 2E 2E 2E 2E
 274+ 4223 2E 2E 2E 2E
 274+ 4227 2E 2E 2E 2E
 274+ 422B 2E 2E 2E 2E
 275+ 422F 2E 2E 2E 2E          DB '................................................................................'
 275+ 4233 2E 2E 2E 2E
 275+ 4237 2E 2E 2E 2E
 275+ 423B 2E 2E 2E 2E
 275+ 423F 2E 2E 2E 2E
 275+ 4243 2E 2E 2E 2E
 275+ 4247 2E 2E 2E 2E
 275+ 424B 2E 2E 2E 2E
 275+ 424F 2E 2E 2E 2E
 275+ 4253 2E 2E 2E 2E
 275+ 4257 2E 2E 2E 2E
 275+ 425B 2E 2E 2E 2E
 275+ 425F 2E 2E 2E 2E
 275+ 4263 2E 2E 2E 2E
 275+ 4267 2E 2E 2E 2E
 275+ 426B 2E 2E 2E 2E
 275+ 426F 2E 2E 2E 2E
 275+ 4273 2E 2E 2E 2E
 275+ 4277 2E 2E 2E 2E
 275+ 427B 2E 2E 2E 2E
 276+ 427F 2E 2E 2E 2E          DB '....................................................................##..........'
 276+ 4283 2E 2E 2E 2E
 276+ 4287 2E 2E 2E 2E
 276+ 428B 2E 2E 2E 2E
 276+ 428F 2E 2E 2E 2E
 276+ 4293 2E 2E 2E 2E
 276+ 4297 2E 2E 2E 2E
 276+ 429B 2E 2E 2E 2E
 276+ 429F 2E 2E 2E 2E
 276+ 42A3 2E 2E 2E 2E
 276+ 42A7 2E 2E 2E 2E
 276+ 42AB 2E 2E 2E 2E
 276+ 42AF 2E 2E 2E 2E
 276+ 42B3 2E 2E 2E 2E
 276+ 42B7 2E 2E 2E 2E
 276+ 42BB 2E 2E 2E 2E
 276+ 42BF 2E 2E 2E 2E
 276+ 42C3 23 23 2E 2E
 276+ 42C7 2E 2E 2E 2E
 276+ 42CB 2E 2E 2E 2E
 277+ 42CF 2E 2E 2E 2E          DB '....................................................................##..........'
 277+ 42D3 2E 2E 2E 2E
 277+ 42D7 2E 2E 2E 2E
 277+ 42DB 2E 2E 2E 2E
 277+ 42DF 2E 2E 2E 2E
 277+ 42E3 2E 2E 2E 2E
 277+ 42E7 2E 2E 2E 2E
 277+ 42EB 2E 2E 2E 2E
 277+ 42EF 2E 2E 2E 2E
 277+ 42F3 2E 2E 2E 2E
 277+ 42F7 2E 2E 2E 2E
 277+ 42FB 2E 2E 2E 2E
 277+ 42FF 2E 2E 2E 2E
 277+ 4303 2E 2E 2E 2E
 277+ 4307 2E 2E 2E 2E
 277+ 430B 2E 2E 2E 2E
 277+ 430F 2E 2E 2E 2E
 277+ 4313 23 23 2E 2E
 277+ 4317 2E 2E 2E 2E
 277+ 431B 2E 2E 2E 2E
 278+ 431F 2E 2E 2E 2E          DB '................................................................................'
 278+ 4323 2E 2E 2E 2E
 278+ 4327 2E 2E 2E 2E
 278+ 432B 2E 2E 2E 2E
 278+ 432F 2E 2E 2E 2E
 278+ 4333 2E 2E 2E 2E
 278+ 4337 2E 2E 2E 2E
 278+ 433B 2E 2E 2E 2E
 278+ 433F 2E 2E 2E 2E
 278+ 4343 2E 2E 2E 2E
 278+ 4347 2E 2E 2E 2E
 278+ 434B 2E 2E 2E 2E
 278+ 434F 2E 2E 2E 2E
 278+ 4353 2E 2E 2E 2E
 278+ 4357 2E 2E 2E 2E
 278+ 435B 2E 2E 2E 2E
 278+ 435F 2E 2E 2E 2E
 278+ 4363 2E 2E 2E 2E
 278+ 4367 2E 2E 2E 2E
 278+ 436B 2E 2E 2E 2E
 279+ 436F 2E 2E 2E 2E          DB '.....................#..#.......................................................'
 279+ 4373 2E 2E 2E 2E
 279+ 4377 2E 2E 2E 2E
 279+ 437B 2E 2E 2E 2E
 279+ 437F 2E 2E 2E 2E
 279+ 4383 2E 23 2E 2E
 279+ 4387 23 2E 2E 2E
 279+ 438B 2E 2E 2E 2E
 279+ 438F 2E 2E 2E 2E
 279+ 4393 2E 2E 2E 2E
 279+ 4397 2E 2E 2E 2E
 279+ 439B 2E 2E 2E 2E
 279+ 439F 2E 2E 2E 2E
 279+ 43A3 2E 2E 2E 2E
 279+ 43A7 2E 2E 2E 2E
 279+ 43AB 2E 2E 2E 2E
 279+ 43AF 2E 2E 2E 2E
 279+ 43B3 2E 2E 2E 2E
 279+ 43B7 2E 2E 2E 2E
 279+ 43BB 2E 2E 2E 2E
 280+ 43BF 2E 2E 2E 2E          DB '.........................#.......................####...........................'
 280+ 43C3 2E 2E 2E 2E
 280+ 43C7 2E 2E 2E 2E
 280+ 43CB 2E 2E 2E 2E
 280+ 43CF 2E 2E 2E 2E
 280+ 43D3 2E 2E 2E 2E
 280+ 43D7 2E 23 2E 2E
 280+ 43DB 2E 2E 2E 2E
 280+ 43DF 2E 2E 2E 2E
 280+ 43E3 2E 2E 2E 2E
 280+ 43E7 2E 2E 2E 2E
 280+ 43EB 2E 2E 2E 2E
 280+ 43EF 2E 23 23 23
 280+ 43F3 23 2E 2E 2E
 280+ 43F7 2E 2E 2E 2E
 280+ 43FB 2E 2E 2E 2E
 280+ 43FF 2E 2E 2E 2E
 280+ 4403 2E 2E 2E 2E
 280+ 4407 2E 2E 2E 2E
 280+ 440B 2E 2E 2E 2E
 281+ 440F 2E 2E 2E 2E          DB '.....................#...#......................................................'
 281+ 4413 2E 2E 2E 2E
 281+ 4417 2E 2E 2E 2E
 281+ 441B 2E 2E 2E 2E
 281+ 441F 2E 2E 2E 2E
 281+ 4423 2E 23 2E 2E
 281+ 4427 2E 23 2E 2E
 281+ 442B 2E 2E 2E 2E
 281+ 442F 2E 2E 2E 2E
 281+ 4433 2E 2E 2E 2E
 281+ 4437 2E 2E 2E 2E
 281+ 443B 2E 2E 2E 2E
 281+ 443F 2E 2E 2E 2E
 281+ 4443 2E 2E 2E 2E
 281+ 4447 2E 2E 2E 2E
 281+ 444B 2E 2E 2E 2E
 281+ 444F 2E 2E 2E 2E
 281+ 4453 2E 2E 2E 2E
 281+ 4457 2E 2E 2E 2E
 281+ 445B 2E 2E 2E 2E
 282+ 445F 2E 2E 2E 2E          DB '......................####.........................####.........................'
 282+ 4463 2E 2E 2E 2E
 282+ 4467 2E 2E 2E 2E
 282+ 446B 2E 2E 2E 2E
 282+ 446F 2E 2E 2E 2E
 282+ 4473 2E 2E 23 23
 282+ 4477 23 23 2E 2E
 282+ 447B 2E 2E 2E 2E
 282+ 447F 2E 2E 2E 2E
 282+ 4483 2E 2E 2E 2E
 282+ 4487 2E 2E 2E 2E
 282+ 448B 2E 2E 2E 2E
 282+ 448F 2E 2E 2E 23
 282+ 4493 23 23 23 2E
 282+ 4497 2E 2E 2E 2E
 282+ 449B 2E 2E 2E 2E
 282+ 449F 2E 2E 2E 2E
 282+ 44A3 2E 2E 2E 2E
 282+ 44A7 2E 2E 2E 2E
 282+ 44AB 2E 2E 2E 2E
 283+ 44AF 2E 2E 2E 2E          DB '................................................................................'
 283+ 44B3 2E 2E 2E 2E
 283+ 44B7 2E 2E 2E 2E
 283+ 44BB 2E 2E 2E 2E
 283+ 44BF 2E 2E 2E 2E
 283+ 44C3 2E 2E 2E 2E
 283+ 44C7 2E 2E 2E 2E
 283+ 44CB 2E 2E 2E 2E
 283+ 44CF 2E 2E 2E 2E
 283+ 44D3 2E 2E 2E 2E
 283+ 44D7 2E 2E 2E 2E
 283+ 44DB 2E 2E 2E 2E
 283+ 44DF 2E 2E 2E 2E
 283+ 44E3 2E 2E 2E 2E
 283+ 44E7 2E 2E 2E 2E
 283+ 44EB 2E 2E 2E 2E
 283+ 44EF 2E 2E 2E 2E
 283+ 44F3 2E 2E 2E 2E
 283+ 44F7 2E 2E 2E 2E
 283+ 44FB 2E 2E 2E 2E
 284+ 44FF 2E 2E 2E 2E          DB '....#...........................................................................'
 284+ 4503 23 2E 2E 2E
 284+ 4507 2E 2E 2E 2E
 284+ 450B 2E 2E 2E 2E
 284+ 450F 2E 2E 2E 2E
 284+ 4513 2E 2E 2E 2E
 284+ 4517 2E 2E 2E 2E
 284+ 451B 2E 2E 2E 2E
 284+ 451F 2E 2E 2E 2E
 284+ 4523 2E 2E 2E 2E
 284+ 4527 2E 2E 2E 2E
 284+ 452B 2E 2E 2E 2E
 284+ 452F 2E 2E 2E 2E
 284+ 4533 2E 2E 2E 2E
 284+ 4537 2E 2E 2E 2E
 284+ 453B 2E 2E 2E 2E
 284+ 453F 2E 2E 2E 2E
 284+ 4543 2E 2E 2E 2E
 284+ 4547 2E 2E 2E 2E
 284+ 454B 2E 2E 2E 2E
 285+ 454F 2E 2E 2E 2E          DB '.....#..........................................................................'
 285+ 4553 2E 23 2E 2E
 285+ 4557 2E 2E 2E 2E
 285+ 455B 2E 2E 2E 2E
 285+ 455F 2E 2E 2E 2E
 285+ 4563 2E 2E 2E 2E
 285+ 4567 2E 2E 2E 2E
 285+ 456B 2E 2E 2E 2E
 285+ 456F 2E 2E 2E 2E
 285+ 4573 2E 2E 2E 2E
 285+ 4577 2E 2E 2E 2E
 285+ 457B 2E 2E 2E 2E
 285+ 457F 2E 2E 2E 2E
 285+ 4583 2E 2E 2E 2E
 285+ 4587 2E 2E 2E 2E
 285+ 458B 2E 2E 2E 2E
 285+ 458F 2E 2E 2E 2E
 285+ 4593 2E 2E 2E 2E
 285+ 4597 2E 2E 2E 2E
 285+ 459B 2E 2E 2E 2E
 286+ 459F 2E 2E 2E 23          DB '...###..........................................................................'
 286+ 45A3 23 23 2E 2E
 286+ 45A7 2E 2E 2E 2E
 286+ 45AB 2E 2E 2E 2E
 286+ 45AF 2E 2E 2E 2E
 286+ 45B3 2E 2E 2E 2E
 286+ 45B7 2E 2E 2E 2E
 286+ 45BB 2E 2E 2E 2E
 286+ 45BF 2E 2E 2E 2E
 286+ 45C3 2E 2E 2E 2E
 286+ 45C7 2E 2E 2E 2E
 286+ 45CB 2E 2E 2E 2E
 286+ 45CF 2E 2E 2E 2E
 286+ 45D3 2E 2E 2E 2E
 286+ 45D7 2E 2E 2E 2E
 286+ 45DB 2E 2E 2E 2E
 286+ 45DF 2E 2E 2E 2E
 286+ 45E3 2E 2E 2E 2E
 286+ 45E7 2E 2E 2E 2E
 286+ 45EB 2E 2E 2E 2E
 287+ 45EF 2E 2E 2E 2E          DB '...................................................................#..#.........'
 287+ 45F3 2E 2E 2E 2E
 287+ 45F7 2E 2E 2E 2E
 287+ 45FB 2E 2E 2E 2E
 287+ 45FF 2E 2E 2E 2E
 287+ 4603 2E 2E 2E 2E
 287+ 4607 2E 2E 2E 2E
 287+ 460B 2E 2E 2E 2E
 287+ 460F 2E 2E 2E 2E
 287+ 4613 2E 2E 2E 2E
 287+ 4617 2E 2E 2E 2E
 287+ 461B 2E 2E 2E 2E
 287+ 461F 2E 2E 2E 2E
 287+ 4623 2E 2E 2E 2E
 287+ 4627 2E 2E 2E 2E
 287+ 462B 2E 2E 2E 2E
 287+ 462F 2E 2E 2E 23
 287+ 4633 2E 2E 23 2E
 287+ 4637 2E 2E 2E 2E
 287+ 463B 2E 2E 2E 2E
 288+ 463F 2E 2E 2E 2E          DB '..................................................................#.............'
 288+ 4643 2E 2E 2E 2E
 288+ 4647 2E 2E 2E 2E
 288+ 464B 2E 2E 2E 2E
 288+ 464F 2E 2E 2E 2E
 288+ 4653 2E 2E 2E 2E
 288+ 4657 2E 2E 2E 2E
 288+ 465B 2E 2E 2E 2E
 288+ 465F 2E 2E 2E 2E
 288+ 4663 2E 2E 2E 2E
 288+ 4667 2E 2E 2E 2E
 288+ 466B 2E 2E 2E 2E
 288+ 466F 2E 2E 2E 2E
 288+ 4673 2E 2E 2E 2E
 288+ 4677 2E 2E 2E 2E
 288+ 467B 2E 2E 2E 2E
 288+ 467F 2E 2E 23 2E
 288+ 4683 2E 2E 2E 2E
 288+ 4687 2E 2E 2E 2E
 288+ 468B 2E 2E 2E 2E
 289+ 468F 2E 2E 2E 2E          DB '..................................................................#...#.........'
 289+ 4693 2E 2E 2E 2E
 289+ 4697 2E 2E 2E 2E
 289+ 469B 2E 2E 2E 2E
 289+ 469F 2E 2E 2E 2E
 289+ 46A3 2E 2E 2E 2E
 289+ 46A7 2E 2E 2E 2E
 289+ 46AB 2E 2E 2E 2E
 289+ 46AF 2E 2E 2E 2E
 289+ 46B3 2E 2E 2E 2E
 289+ 46B7 2E 2E 2E 2E
 289+ 46BB 2E 2E 2E 2E
 289+ 46BF 2E 2E 2E 2E
 289+ 46C3 2E 2E 2E 2E
 289+ 46C7 2E 2E 2E 2E
 289+ 46CB 2E 2E 2E 2E
 289+ 46CF 2E 2E 23 2E
 289+ 46D3 2E 2E 23 2E
 289+ 46D7 2E 2E 2E 2E
 289+ 46DB 2E 2E 2E 2E
 290+ 46DF 2E 2E 2E 2E          DB '...........................................###....................####..........'
 290+ 46E3 2E 2E 2E 2E
 290+ 46E7 2E 2E 2E 2E
 290+ 46EB 2E 2E 2E 2E
 290+ 46EF 2E 2E 2E 2E
 290+ 46F3 2E 2E 2E 2E
 290+ 46F7 2E 2E 2E 2E
 290+ 46FB 2E 2E 2E 2E
 290+ 46FF 2E 2E 2E 2E
 290+ 4703 2E 2E 2E 2E
 290+ 4707 2E 2E 2E 23
 290+ 470B 23 23 2E 2E
 290+ 470F 2E 2E 2E 2E
 290+ 4713 2E 2E 2E 2E
 290+ 4717 2E 2E 2E 2E
 290+ 471B 2E 2E 2E 2E
 290+ 471F 2E 2E 23 23
 290+ 4723 23 23 2E 2E
 290+ 4727 2E 2E 2E 2E
 290+ 472B 2E 2E 2E 2E
 291+ 472F 2E 2E 2E 2E          DB '..........................................###...................................'
 291+ 4733 2E 2E 2E 2E
 291+ 4737 2E 2E 2E 2E
 291+ 473B 2E 2E 2E 2E
 291+ 473F 2E 2E 2E 2E
 291+ 4743 2E 2E 2E 2E
 291+ 4747 2E 2E 2E 2E
 291+ 474B 2E 2E 2E 2E
 291+ 474F 2E 2E 2E 2E
 291+ 4753 2E 2E 2E 2E
 291+ 4757 2E 2E 23 23
 291+ 475B 23 2E 2E 2E
 291+ 475F 2E 2E 2E 2E
 291+ 4763 2E 2E 2E 2E
 291+ 4767 2E 2E 2E 2E
 291+ 476B 2E 2E 2E 2E
 291+ 476F 2E 2E 2E 2E
 291+ 4773 2E 2E 2E 2E
 291+ 4777 2E 2E 2E 2E
 291+ 477B 2E 2E 2E 2E
 292+ 477F 2E 2E 2E 2E          DB '................................................................................'
 292+ 4783 2E 2E 2E 2E
 292+ 4787 2E 2E 2E 2E
 292+ 478B 2E 2E 2E 2E
 292+ 478F 2E 2E 2E 2E
 292+ 4793 2E 2E 2E 2E
 292+ 4797 2E 2E 2E 2E
 292+ 479B 2E 2E 2E 2E
 292+ 479F 2E 2E 2E 2E
 292+ 47A3 2E 2E 2E 2E
 292+ 47A7 2E 2E 2E 2E
 292+ 47AB 2E 2E 2E 2E
 292+ 47AF 2E 2E 2E 2E
 292+ 47B3 2E 2E 2E 2E
 292+ 47B7 2E 2E 2E 2E
 292+ 47BB 2E 2E 2E 2E
 292+ 47BF 2E 2E 2E 2E
 292+ 47C3 2E 2E 2E 2E
 292+ 47C7 2E 2E 2E 2E
 292+ 47CB 2E 2E 2E 2E
 293+ 47CF 2E 2E 2E 2E          DB '................................................................................'
 293+ 47D3 2E 2E 2E 2E
 293+ 47D7 2E 2E 2E 2E
 293+ 47DB 2E 2E 2E 2E
 293+ 47DF 2E 2E 2E 2E
 293+ 47E3 2E 2E 2E 2E
 293+ 47E7 2E 2E 2E 2E
 293+ 47EB 2E 2E 2E 2E
 293+ 47EF 2E 2E 2E 2E
 293+ 47F3 2E 2E 2E 2E
 293+ 47F7 2E 2E 2E 2E
 293+ 47FB 2E 2E 2E 2E
 293+ 47FF 2E 2E 2E 2E
 293+ 4803 2E 2E 2E 2E
 293+ 4807 2E 2E 2E 2E
 293+ 480B 2E 2E 2E 2E
 293+ 480F 2E 2E 2E 2E
 293+ 4813 2E 2E 2E 2E
 293+ 4817 2E 2E 2E 2E
 293+ 481B 2E 2E 2E 2E
 294+ 481F 2E 2E 2E 2E          DB '................................................................................'
 294+ 4823 2E 2E 2E 2E
 294+ 4827 2E 2E 2E 2E
 294+ 482B 2E 2E 2E 2E
 294+ 482F 2E 2E 2E 2E
 294+ 4833 2E 2E 2E 2E
 294+ 4837 2E 2E 2E 2E
 294+ 483B 2E 2E 2E 2E
 294+ 483F 2E 2E 2E 2E
 294+ 4843 2E 2E 2E 2E
 294+ 4847 2E 2E 2E 2E
 294+ 484B 2E 2E 2E 2E
 294+ 484F 2E 2E 2E 2E
 294+ 4853 2E 2E 2E 2E
 294+ 4857 2E 2E 2E 2E
 294+ 485B 2E 2E 2E 2E
 294+ 485F 2E 2E 2E 2E
 294+ 4863 2E 2E 2E 2E
 294+ 4867 2E 2E 2E 2E
 294+ 486B 2E 2E 2E 2E
 295+ 486F 2E 2E 2E 2E          DB '................................................................................'
 295+ 4873 2E 2E 2E 2E
 295+ 4877 2E 2E 2E 2E
 295+ 487B 2E 2E 2E 2E
 295+ 487F 2E 2E 2E 2E
 295+ 4883 2E 2E 2E 2E
 295+ 4887 2E 2E 2E 2E
 295+ 488B 2E 2E 2E 2E
 295+ 488F 2E 2E 2E 2E
 295+ 4893 2E 2E 2E 2E
 295+ 4897 2E 2E 2E 2E
 295+ 489B 2E 2E 2E 2E
 295+ 489F 2E 2E 2E 2E
 295+ 48A3 2E 2E 2E 2E
 295+ 48A7 2E 2E 2E 2E
 295+ 48AB 2E 2E 2E 2E
 295+ 48AF 2E 2E 2E 2E
 295+ 48B3 2E 2E 2E 2E
 295+ 48B7 2E 2E 2E 2E
 295+ 48BB 2E 2E 2E 2E
 296+ 48BF 2E 2E 2E 2E          DB '................................................................................'
 296+ 48C3 2E 2E 2E 2E
 296+ 48C7 2E 2E 2E 2E
 296+ 48CB 2E 2E 2E 2E
 296+ 48CF 2E 2E 2E 2E
 296+ 48D3 2E 2E 2E 2E
 296+ 48D7 2E 2E 2E 2E
 296+ 48DB 2E 2E 2E 2E
 296+ 48DF 2E 2E 2E 2E
 296+ 48E3 2E 2E 2E 2E
 296+ 48E7 2E 2E 2E 2E
 296+ 48EB 2E 2E 2E 2E
 296+ 48EF 2E 2E 2E 2E
 296+ 48F3 2E 2E 2E 2E
 296+ 48F7 2E 2E 2E 2E
 296+ 48FB 2E 2E 2E 2E
 296+ 48FF 2E 2E 2E 2E
 296+ 4903 2E 2E 2E 2E
 296+ 4907 2E 2E 2E 2E
 296+ 490B 2E 2E 2E 2E
 297+ 490F 2E 2E 2E 2E          DB '................##..............................................................'
 297+ 4913 2E 2E 2E 2E
 297+ 4917 2E 2E 2E 2E
 297+ 491B 2E 2E 2E 2E
 297+ 491F 23 23 2E 2E
 297+ 4923 2E 2E 2E 2E
 297+ 4927 2E 2E 2E 2E
 297+ 492B 2E 2E 2E 2E
 297+ 492F 2E 2E 2E 2E
 297+ 4933 2E 2E 2E 2E
 297+ 4937 2E 2E 2E 2E
 297+ 493B 2E 2E 2E 2E
 297+ 493F 2E 2E 2E 2E
 297+ 4943 2E 2E 2E 2E
 297+ 4947 2E 2E 2E 2E
 297+ 494B 2E 2E 2E 2E
 297+ 494F 2E 2E 2E 2E
 297+ 4953 2E 2E 2E 2E
 297+ 4957 2E 2E 2E 2E
 297+ 495B 2E 2E 2E 2E
 298+ 495F 2E 2E 2E 2E          DB '................##..............................................................'
 298+ 4963 2E 2E 2E 2E
 298+ 4967 2E 2E 2E 2E
 298+ 496B 2E 2E 2E 2E
 298+ 496F 23 23 2E 2E
 298+ 4973 2E 2E 2E 2E
 298+ 4977 2E 2E 2E 2E
 298+ 497B 2E 2E 2E 2E
 298+ 497F 2E 2E 2E 2E
 298+ 4983 2E 2E 2E 2E
 298+ 4987 2E 2E 2E 2E
 298+ 498B 2E 2E 2E 2E
 298+ 498F 2E 2E 2E 2E
 298+ 4993 2E 2E 2E 2E
 298+ 4997 2E 2E 2E 2E
 298+ 499B 2E 2E 2E 2E
 298+ 499F 2E 2E 2E 2E
 298+ 49A3 2E 2E 2E 2E
 298+ 49A7 2E 2E 2E 2E
 298+ 49AB 2E 2E 2E 2E
 299+ 49AF
 300+ 49AF              show_intro_screen:
 301+ 49AF CD 1D 32         call GOFL_Cls
 302+ 49B2 CD D4 07         call message
 303+ 49B5 54 68 69 73      db 'This is the "Game Of Life", originally devised by John Conway in the 1970s.',13,10
 303+ 49B9 20 69 73 20
 303+ 49BD 74 68 65 20
 303+ 49C1 22 47 61 6D
 303+ 49C5 65 20 4F 66
 303+ 49C9 20 4C 69 66
 303+ 49CD 65 22 2C 20
 303+ 49D1 6F 72 69 67
 303+ 49D5 69 6E 61 6C
 303+ 49D9 6C 79 20 64
 303+ 49DD 65 76 69 73
 303+ 49E1 65 64 20 62
 303+ 49E5 79 20 4A 6F
 303+ 49E9 68 6E 20 43
 303+ 49ED 6F 6E 77 61
 303+ 49F1 79 20 69 6E
 303+ 49F5 20 74 68 65
 303+ 49F9 20 31 39 37
 303+ 49FD 30 73 2E 0D
 303+ 4A01 0A
 304+ 4A02 54 68 69 73      db 'This implementation was written by Albert Pauw on a Z80 Playground using CP/M.',13,10
 304+ 4A06 20 69 6D 70
 304+ 4A0A 6C 65 6D 65
 304+ 4A0E 6E 74 61 74
 304+ 4A12 69 6F 6E 20
 304+ 4A16 77 61 73 20
 304+ 4A1A 77 72 69 74
 304+ 4A1E 74 65 6E 20
 304+ 4A22 62 79 20 41
 304+ 4A26 6C 62 65 72
 304+ 4A2A 74 20 50 61
 304+ 4A2E 75 77 20 6F
 304+ 4A32 6E 20 61 20
 304+ 4A36 5A 38 30 20
 304+ 4A3A 50 6C 61 79
 304+ 4A3E 67 72 6F 75
 304+ 4A42 6E 64 20 75
 304+ 4A46 73 69 6E 67
 304+ 4A4A 20 43 50 2F
 304+ 4A4E 4D 2E 0D 0A
 305+ 4A52 49 74 20 68      db 'It has been adapted to run in the Monitor as a demo.',13,10
 305+ 4A56 61 73 20 62
 305+ 4A5A 65 65 6E 20
 305+ 4A5E 61 64 61 70
 305+ 4A62 74 65 64 20
 305+ 4A66 74 6F 20 72
 305+ 4A6A 75 6E 20 69
 305+ 4A6E 6E 20 74 68
 305+ 4A72 65 20 4D 6F
 305+ 4A76 6E 69 74 6F
 305+ 4A7A 72 20 61 73
 305+ 4A7E 20 61 20 64
 305+ 4A82 65 6D 6F 2E
 305+ 4A86 0D 0A
 306+ 4A88 4D 61 6B 65      db 'Make sure you have a screen of at least 80 x 25 characters.',13,10
 306+ 4A8C 20 73 75 72
 306+ 4A90 65 20 79 6F
 306+ 4A94 75 20 68 61
 306+ 4A98 76 65 20 61
 306+ 4A9C 20 73 63 72
 306+ 4AA0 65 65 6E 20
 306+ 4AA4 6F 66 20 61
 306+ 4AA8 74 20 6C 65
 306+ 4AAC 61 73 74 20
 306+ 4AB0 38 30 20 78
 306+ 4AB4 20 32 35 20
 306+ 4AB8 63 68 61 72
 306+ 4ABC 61 63 74 65
 306+ 4AC0 72 73 2E 0D
 306+ 4AC4 0A
 307+ 4AC5 50 72 65 73      db 'Press any key to start...',13,10,0
 307+ 4AC9 73 20 61 6E
 307+ 4ACD 79 20 6B 65
 307+ 4AD1 79 20 74 6F
 307+ 4AD5 20 73 74 61
 307+ 4AD9 72 74 2E 2E
 307+ 4ADD 2E 0D 0A 00
 308+ 4AE1 C9               ret
 309+ 4AE2
 310+ 4AE2              wait_for_key:
 311+ 4AE2                      ; Waits for a key, and generates a random number in b, which it returns!
 312+ 4AE2 06 00                ld b, 0
 313+ 4AE4              wait_for_key1:
 314+ 4AE4 04                   inc b
 315+ 4AE5 CD 6A 07             call char_in
 316+ 4AE8 FE 00                cp 0
 317+ 4AEA CA E4 4A             jp z, wait_for_key1
 318+ 4AED C9                   ret
 319+ 4AEE
 320+ 4AEE              copy_initial_pattern:
 321+ 4AEE                  ; Copy the starting pattern into the buffer.
 322+ 4AEE                  ; The pointer to the pattern is passed in HL.
 323+ 4AEE                  ; The pattern is made of "." and "#" but we store it in the buffer as
 324+ 4AEE                  ; 1s and 0s. We do this by ANDing the char with %00000001, which is
 325+ 4AEE                  ; why the '#' char needs to be ODD and the '.' char needs to be EVEN.
 326+ 4AEE
 327+ 4AEE E5               push hl
 328+ 4AEF                  ; But first, totally zero out the entire buffer
 329+ 4AEF 21 00 80         ld hl, Buffer
 330+ 4AF2 36 00            ld (hl), 0
 331+ 4AF4 11 01 80         ld de, Buffer+1
 332+ 4AF7 06 1C            ld b, Height+3
 333+ 4AF9 0E 00            ld c, 0
 334+ 4AFB ED B0            ldir
 335+ 4AFD
 336+ 4AFD E1               pop hl
 337+ 4AFE
 338+ 4AFE                  ; Now copy the pattern to the buffer
 339+ 4AFE 16 81            ld d, BufferPage+1                  ; Initialise at location 1,1
 340+ 4B00 1E 01            ld e, 1                             ; in the buffer (top left is 0,0)
 341+ 4B02 0E 19            ld c, Height
 342+ 4B04              copy_initial_pattern_rows:
 343+ 4B04 06 50            ld b, Width
 344+ 4B06 E5               push hl                             ; Store pattern pointer
 345+ 4B07              copy_initial_pattern_cols:
 346+ 4B07 7E               ld a, (hl)                          ; Copy from pattern to buffer
 347+ 4B08 E6 01            and %00000001                       ; Isolate bit 0 only
 348+ 4B0A 12               ld (de), a
 349+ 4B0B 23               inc hl                              ; Move to next location in pattern
 350+ 4B0C 1C               inc e                               ; next column
 351+ 4B0D 10 F8            djnz copy_initial_pattern_cols      ; loop columns
 352+ 4B0F E1               pop hl                              ; Back to start of current row in pattern
 353+ 4B10 D5               push de
 354+ 4B11 11 50 00         ld de, PatternWidth
 355+ 4B14 19               add hl, de                          ; Move to next row in pattern
 356+ 4B15 D1               pop de
 357+ 4B16 1E 01            ld e, 1                             ; Back to start of buffer row
 358+ 4B18 14               inc d                               ; But move down a row
 359+ 4B19 0D               dec c                               ; loop rows
 360+ 4B1A 20 E8            jr nz, copy_initial_pattern_rows
 361+ 4B1C C9               ret
 362+ 4B1D
 363+ 4B1D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 364+ 4B1D              ; The buffer needs to be in RAM... ;
 365+ 4B1D              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 366+ 4B1D              Buffer equ $8000
 367+ 4B1D              BufferPage equ $80
 368+ 4B1D
 369+ 4B1D
 370+ 4B1D
 371+ 4B1D
 372+ 4B1D
 373+ 4B1D
 374+ 4B1D
# file closed: GOFL.asm
# file closed: cpm.asm
