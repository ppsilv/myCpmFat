# file opened: build.asm
   1  0000
   2  0000
   3  0000
   4  0000                  include "cpm.asm"
# file opened: cpm.asm
   1+ 0000              ; This monitor & loader has two functions:
   2+ 0000              ; (1) The monitor part enables you to view ram, rom and various config parameters.
   3+ 0000              ; (2) The Loader part loads CP/M
   4+ 0000
   5+ 0000              ; CP/M v2.2 was implemented at the BDOS level by John Squires.
   6+ 0000              ; The CORE, BIOS & BDOS are my own work.
   7+ 0000              ;
   8+ 0000              ; How the CP/M loader works:
   9+ 0000              ; The 4 main sections need to end up at the top of memory.
  10+ 0000              ; For now let's say at $C000, $D000 and $E000 & $F000.
  11+ 0000              ; The CORE goes at the top of ram. This contains the routines to use the hardware.
  12+ 0000              ; The BIOS is just a stub of a BIOS and does very little.
  13+ 0000              ; The BDOS is the heart of CP/M and implements all the function.
  14+ 0000              ; The CCP is the face of CP/M. The current one is the original from Digital Research 1978.
  15+ 0000              ; In order to load CP/M we need a loader that grabs them from somewhere and copies them
  16+ 0000              ; to those locations. That loader is this program, and is located in ROM at $0000.
  17+ 0000              ; The CP/M loader's job is to:
  18+ 0000              ; (1) Configure the Z80 Playground.
  19+ 0000              ; (2) Load the CORE and BIOS from disk and put them in their corresponding locations.
  20+ 0000              ; (3) Put the tiny jump table in place at the bottom of memory.
  21+ 0000              ; (4) Switch off the ROM.
  22+ 0000              ; (5) Jump into CP/M by calling BIOS cold boot.
  23+ 0000              ; From there the BIOS loads the BDOS & CCP.
  24+ 0000
  25+ 0000                  org $0000
  26+ 0000
  27+ 0000              ; RST 00
  28+ 0000              ;
  29+ 0000 F3           			DI
  30+ 0001 C3 3A 00     			JP loader_entry
  31+ 0004 00 00 00 00  			DS 4
  32+ 0008              ;
  33+ 0008              ; RST 08 - Read char from I/O
  34+ 0008              ;
  35+ 0008 C3 CE 06     			JP Read_Char_NB
  36+ 000B 00 00 00...  			DS 5
  37+ 0010                          ;DS  8
  38+ 0010              ;
  39+ 0010              ; RST 10 - Output char to I/O
  40+ 0010              ;
  41+ 0010 C3 D1 06     			JP print_a
  42+ 0013 00 00 00...  			DS 5
  43+ 0018                          ;DS  8
  44+ 0018              ;
  45+ 0018              ; RST 18
  46+ 0018              ;
  47+ 0018 00 00 00...  			DS 8
  48+ 0020              ;
  49+ 0020              ; RST 20
  50+ 0020              ;
  51+ 0020 00 00 00...  			DS 8
  52+ 0028              ;
  53+ 0028              ; RST 28
  54+ 0028              ;
  55+ 0028 00 00 00...  			DS 8
  56+ 0030              ;
  57+ 0030              ; RST 30
  58+ 0030              ;
  59+ 0030 00 00 00...  			DS 8
  60+ 0038              ;
  61+ 0038              ; RST 38 - NMI
  62+ 0038              ;
  63+ 0038 FB           			EI
  64+ 0039 C9           			RET
  65+ 003A
  66+ 003A
  67+ 003A
  68+ 003A              ; INT routine. This runs when you press the /INT button. All it does is toggle the USER led.
  69+ 003A              ;	org $0038
  70+ 003A              ;int:
  71+ 003A              ;	ex af, af'
  72+ 003A              ;	exx
  73+ 003A              ;	call disk_toggle
  74+ 003A              ;	call short_pause
  75+ 003A              ;	exx
  76+ 003A              ;	ex af, af'
  77+ 003A              ;	ei
  78+ 003A              ;	reti
  79+ 003A
  80+ 003A              ; NMI routine
  81+ 003A              ;	org $0066
  82+ 003A              ;nmi:
  83+ 003A              ;	ex af, af'
  84+ 003A              ;	exx
  85+ 003A              ;	call user_toggle
  86+ 003A              ;	call short_pause
  87+ 003A              ;	exx
  88+ 003A              ;	ex af, af'
  89+ 003A              ;	retn
  90+ 003A              loader_entry:
  91+ 003A F3               di
  92+ 003B 21 6A C0         ld  hl, loader_stack
  93+ 003E F9               ld  sp, hl
  94+ 003F                  ;jp skip_over_int_and_nmi
  95+ 003F
  96+ 003F              skip_over_int_and_nmi:
  97+ 003F 06 20            ld b, $20                   ; 460,800 baud
  98+ 0041 0E 00            ld c, $00                   ; No flow control
  99+ 0043 21 9B 06         LD  HL, UART_BAUD_38400
 100+ 0046 3E 03            LD  A,  0x03
 101+ 0048 CD A4 06         call configure_uart         ; Put these settings into the UART
 102+ 004B CD 32 07         call    long_pause
 103+ 004E
 104+ 004E CD 82 07         call message
 105+ 0051 1B 5B 32 4A     	db 27,'[2J',27,'[H'
 105+ 0055 1B 5B 48
 106+ 0058 5A 38 30 20      db 'Z80 Playground Monitor & CP/M Loader v1.03',13,10,0
 106+ 005C 50 6C 61 79
 106+ 0060 67 72 6F 75
 106+ 0064 6E 64 20 4D
 106+ 0068 6F 6E 69 74
 106+ 006C 6F 72 20 26
 106+ 0070 20 43 50 2F
 106+ 0074 4D 20 4C 6F
 106+ 0078 61 64 65 72
 106+ 007C 20 76 31 2E
 106+ 0080 30 33 0D 0A
 106+ 0084 00
 107+ 0085
 108+ 0085
 109+ 0085
 110+ 0085                  ; Check MCR
 111+ 0085 3E 22            ld a, %00100010
 112+ 0087 D3 BC            out (uart_MCR), a
 113+ 0089 CD 82 07         call message
 114+ 008C 31 36 43 35      db '16C550: ',0
 114+ 0090 35 30 3A 20
 114+ 0094 00
 115+ 0095 DB BC            in a, (uart_MCR)
 116+ 0097 CD A0 07         call show_a_as_hex
 117+ 009A CD 07 07         call newline
 118+ 009D
 119+ 009D CD 82 07         call message
 120+ 00A0 43 6F 6E 66      db 'Configure USB Drive...',13,10,0
 120+ 00A4 69 67 75 72
 120+ 00A8 65 20 55 53
 120+ 00AC 42 20 44 72
 120+ 00B0 69 76 65 2E
 120+ 00B4 2E 2E 0D 0A
 120+ 00B8 00
 121+ 00B9 CD FF 0B         call configure_memorystick
 122+ 00BC CD 82 07         call message
 123+ 00BF 43 68 65 63      db 'Check CH376 module exists...',13,10,0
 123+ 00C3 6B 20 43 48
 123+ 00C7 33 37 36 20
 123+ 00CB 6D 6F 64 75
 123+ 00CF 6C 65 20 65
 123+ 00D3 78 69 73 74
 123+ 00D7 73 2E 2E 2E
 123+ 00DB 0D 0A 00
 124+ 00DE CD 3E 0C         call check_module_exists
 125+ 00E1 CD 82 07         call message
 126+ 00E4 47 65 74 20      db 'Get CH376 module version...',13,10,0
 126+ 00E8 43 48 33 37
 126+ 00EC 36 20 6D 6F
 126+ 00F0 64 75 6C 65
 126+ 00F4 20 76 65 72
 126+ 00F8 73 69 6F 6E
 126+ 00FC 2E 2E 2E 0D
 126+ 0100 0A 00
 127+ 0102 CD 74 0C         call get_module_version
 128+ 0105
 129+ 0105                  ; Now read the baud rate configuration from uart.cfg
 130+ 0105 3E FF            ld a, $FF
 131+ 0107 32 AF FF         ld (baud_rate_divisor), a           ; Reset the two UART parameters
 132+ 010A 32 AE FF         ld (flow_control_value), a
 133+ 010D 3E 00            ld a, 0
 134+ 010F 32 FF 8F         ld (auto_run_char), a               ; Reset the auto-run character
 135+ 0112 21 80 06         ld hl, UART_CFG_NAME
 136+ 0115 CD 3F 02         call load_config_file
 137+ 0118 CD 34 03         call parse_uart_config_file         ; this gets b=baud and c=flowcontrol
 138+ 011B
 139+ 011B 3A AF FF         ld a, (baud_rate_divisor)           ; Check if we managed to get both baudrate and flowcontrol
 140+ 011E FE FF            cp $FF
 141+ 0120 28 77            jr z, failed_to_read_uart_config    ; If not, don't reconfigure uart
 142+ 0122 47               ld b, a
 143+ 0123
 144+ 0123 3A AE FF         ld a, (flow_control_value)
 145+ 0126 FE FF            cp $FF
 146+ 0128 28 6F            jr z, failed_to_read_uart_config
 147+ 012A 4F               ld c, a
 148+ 012B
 149+ 012B CD 82 07         call message
 150+ 012E 43 6F 6E 66      db 'Configuring UART to settings in UART.CFG',13,10,0
 150+ 0132 69 67 75 72
 150+ 0136 69 6E 67 20
 150+ 013A 55 41 52 54
 150+ 013E 20 74 6F 20
 150+ 0142 73 65 74 74
 150+ 0146 69 6E 67 73
 150+ 014A 20 69 6E 20
 150+ 014E 55 41 52 54
 150+ 0152 2E 43 46 47
 150+ 0156 0D 0A 00
 151+ 0159
 152+ 0159 C5               push bc
 153+ 015A CD 82 07         call message
 154+ 015D 42 41 55 44      db 'BAUD ',0
 154+ 0161 20 00
 155+ 0163 78               ld a, b
 156+ 0164 CD A0 07         call show_a_as_hex
 157+ 0167 C1               pop bc
 158+ 0168
 159+ 0168 C5               push bc
 160+ 0169 CD 82 07         call message
 161+ 016C 2C 20 46 4C      db ', FLOW ',0
 161+ 0170 4F 57 20 00
 162+ 0174 79               ld a, c
 163+ 0175 CD A0 07         call show_a_as_hex
 164+ 0178 CD 07 07         call newline
 165+ 017B C1               pop bc
 166+ 017C
 167+ 017C CD A4 06         call configure_uart                 ; Put these settings into the UART
 168+ 017F
 169+ 017F                  ; Report on the AUTO-RUN-CHAR and start the monitor
 170+ 017F 3A FF 8F         ld a, (auto_run_char)
 171+ 0182 FE 00            cp 0
 172+ 0184 CA B6 01         jp z, start_monitor
 173+ 0187 CD 82 07         call message
 174+ 018A 41 55 54 4F      db 'AUTO ',0
 174+ 018E 20 00
 175+ 0190 CD 85 1A         call show_a_safe
 176+ 0193 CD 07 07         call newline
 177+ 0196 C3 B6 01         jp start_monitor
 178+ 0199
 179+ 0199              failed_to_read_uart_config:
 180+ 0199 CD 82 07         call message
 181+ 019C 43 6F 75 6C      db 'Could not read UART.CFG',13,10,0
 181+ 01A0 64 20 6E 6F
 181+ 01A4 74 20 72 65
 181+ 01A8 61 64 20 55
 181+ 01AC 41 52 54 2E
 181+ 01B0 43 46 47 0D
 181+ 01B4 0A 00
 182+ 01B6
 183+ 01B6              start_monitor:
 184+ 01B6 C3 40 10         jp monitor_start
 185+ 01B9
 186+ 01B9              start_cpm:
 187+ 01B9 CD 82 07         call message
 188+ 01BC 43 68 65 63      db 'Checking disks...',13,10,0
 188+ 01C0 6B 69 6E 67
 188+ 01C4 20 64 69 73
 188+ 01C8 6B 73 2E 2E
 188+ 01CC 2E 0D 0A 00
 189+ 01D0 CD DF 0A         call check_cpmdisks_structure
 190+ 01D3
 191+ 01D3                  ; Copy 8 byte bootstrap sequence into Low Storage at location 0
 192+ 01D3                  ; but note that we patch it up in a bit with the real jump locations.
 193+ 01D3 11 00 00         ld de, 0
 194+ 01D6 21 89 06         ld hl, first_eight_bytes
 195+ 01D9 01 08 00         ld bc, 8
 196+ 01DC ED B0            ldir
 197+ 01DE
 198+ 01DE                  ; Load CPM config file into memory
 199+ 01DE 21 78 06         ld hl, CPM_CFG_NAME
 200+ 01E1 CD 3F 02         call load_config_file
 201+ 01E4                  ; Parse it to get out the locations
 202+ 01E4 CD 6A 02         call parse_cpm_config_file
 203+ 01E7 CD AF 05         call show_config
 204+ 01EA CD 15 06         call validate_config
 205+ 01ED
 206+ 01ED                  ; Load CORE.BIN into its proper location
 207+ 01ED 21 66 06         ld hl, NAME_OF_CORE
 208+ 01F0 CD 23 0E         call copy_filename_to_buffer
 209+ 01F3 ED 5B C3 FF      ld de, (core_location)
 210+ 01F7 CD 36 09         call load_bin_file
 211+ 01FA CD 82 07         call message
 212+ 01FD 43 4F 52 45      db 'CORE loaded!',13,10,0
 212+ 0201 20 6C 6F 61
 212+ 0205 64 65 64 21
 212+ 0209 0D 0A 00
 213+ 020C
 214+ 020C                  ; Load the BIOS to the proper location
 215+ 020C 21 5D 06         ld hl, NAME_OF_BIOS
 216+ 020F CD 23 0E         call copy_filename_to_buffer
 217+ 0212 ED 5B C1 FF      ld de, (bios_location)
 218+ 0216 CD 36 09         call load_bin_file
 219+ 0219 CD 82 07         call message
 220+ 021C 42 49 4F 53      db 'BIOS loaded!',13,10,0
 220+ 0220 20 6C 6F 61
 220+ 0224 64 65 64 21
 220+ 0228 0D 0A 00
 221+ 022B
 222+ 022B                  ; copy bios_start into bytes 1 & 2 after adding 3 to it
 223+ 022B 2A C1 FF         ld hl, (bios_location)
 224+ 022E 23               inc hl
 225+ 022F 23               inc hl
 226+ 0230 23               inc hl                              ; hl now point to BIOS warm boot
 227+ 0231 22 01 00         ld (1), hl
 228+ 0234
 229+ 0234                  ; copy bdos_start into bytes 6 & 7
 230+ 0234 2A BF FF         ld hl, (bdos_location)
 231+ 0237 22 06 00         ld (6), hl
 232+ 023A
 233+ 023A                  ; OK, let's go!
 234+ 023A 2A C1 FF         ld hl, (bios_location)
 235+ 023D E9               jp (hl) ; BIOS COLD BOOT - Note that this is PC=HL not PC=(HL). Confusing eh?
 236+ 023E 76               halt    ; Just in case we ever get back here somehow
 237+ 023F
 238+ 023F
 239+ 023F              load_config_file:
 240+ 023F CD 82 07         call message
 241+ 0242 4C 6F 61 64      db 'Loading config file...',13,10,0
 241+ 0246 69 6E 67 20
 241+ 024A 63 6F 6E 66
 241+ 024E 69 67 20 66
 241+ 0252 69 6C 65 2E
 241+ 0256 2E 2E 0D 0A
 241+ 025A 00
 242+ 025B                  ; Opens the file such as /CPM/cpm.cfg or /CPM/uart.cfg. Point to one of these names in hl.
 243+ 025B                  ; Read it into an area of memory starting at config_file_loc
 244+ 025B                  ; and puts \0 at the end so we can spot the end of the file later
 245+ 025B CD 23 0E         call copy_filename_to_buffer
 246+ 025E 11 00 90         ld de, config_file_loc
 247+ 0261 CD 36 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 248+ 0264 C2 E9 02         jp nz, load_config_file_error
 249+ 0267 36 00            ld (hl), 0
 250+ 0269 C9               ret
 251+ 026A
 252+ 026A              parse_cpm_config_file:
 253+ 026A CD 82 07         call message
 254+ 026D 50 61 72 73      db 'Parsing the CPM config file...',13,10,0
 254+ 0271 69 6E 67 20
 254+ 0275 74 68 65 20
 254+ 0279 43 50 4D 20
 254+ 027D 63 6F 6E 66
 254+ 0281 69 67 20 66
 254+ 0285 69 6C 65 2E
 254+ 0289 2E 2E 0D 0A
 254+ 028D 00
 255+ 028E                  ; Go through the config file one line at a time.
 256+ 028E                  ; If we encounter a \0 then the file has ended.
 257+ 028E                  ; If a line starts with ";" then ignore it.
 258+ 028E                  ; If a line starts with "CORE" then read in the bex value for CORE_START
 259+ 028E 21 00 90         ld hl, config_file_loc
 260+ 0291              parse_cpm_config_file_loop:
 261+ 0291 CD 87 05         call has_file_ended
 262+ 0294 CA E8 02         jp z, parse_config_file_end
 263+ 0297
 264+ 0297 CD 2D 04         call is_this_line_a_comment
 265+ 029A C2 A2 02         jp nz, not_a_comment
 266+ 029D CD 92 05         call go_to_next_line
 267+ 02A0 18 EF            jr parse_cpm_config_file_loop
 268+ 02A2
 269+ 02A2              not_a_comment:
 270+ 02A2 CD 35 04         call is_this_line_the_core_location
 271+ 02A5 20 0B            jr nz, not_core_location
 272+ 02A7 11 C3 FF         ld de, core_location
 273+ 02AA              consume_location:
 274+ 02AA CD 9F 03         call parse_4_digit_hex_value
 275+ 02AD CD 92 05         call go_to_next_line
 276+ 02B0 18 DF            jr parse_cpm_config_file_loop
 277+ 02B2
 278+ 02B2              not_core_location:
 279+ 02B2 CD E1 04         call is_this_line_the_bios_location
 280+ 02B5 20 05            jr nz, not_bios_location
 281+ 02B7 11 C1 FF         ld de, bios_location
 282+ 02BA 18 EE            jr consume_location
 283+ 02BC
 284+ 02BC              not_bios_location:
 285+ 02BC CD 0C 05         call is_this_line_the_bdos_location
 286+ 02BF 20 05            jr nz, not_bdos_location
 287+ 02C1 11 BF FF         ld de, bdos_location
 288+ 02C4 18 E4            jr consume_location
 289+ 02C6
 290+ 02C6              not_bdos_location:
 291+ 02C6 CD 37 05         call is_this_line_the_ccp_location
 292+ 02C9 20 05            jr nz, not_ccp_location
 293+ 02CB 11 BD FF         ld de, ccp_location
 294+ 02CE 18 DA            jr consume_location
 295+ 02D0
 296+ 02D0              not_ccp_location:
 297+ 02D0 CD 5D 05         call is_this_line_the_ccp_name
 298+ 02D3 20 05            jr nz, not_ccp_name
 299+ 02D5 11 B0 FF         ld de, ccp_name
 300+ 02D8 18 06            jr consume_name
 301+ 02DA
 302+ 02DA              not_ccp_name:
 303+ 02DA                  ; Unknown line so ignore it
 304+ 02DA CD 92 05         call go_to_next_line
 305+ 02DD C3 91 02         jp parse_cpm_config_file_loop
 306+ 02E0
 307+ 02E0              consume_name:
 308+ 02E0                  ; hl points to the name in the file
 309+ 02E0                  ; de points to where we want to store it
 310+ 02E0 CD 09 03         call parse_name
 311+ 02E3 CD 92 05         call go_to_next_line
 312+ 02E6 18 A9            jr parse_cpm_config_file_loop
 313+ 02E8
 314+ 02E8              parse_config_file_end:
 315+ 02E8 C9               ret
 316+ 02E9
 317+ 02E9              load_config_file_error:
 318+ 02E9 CD 82 07         call message
 319+ 02EC 45 72 72 6F      db 'Error loading config file',13,10,0
 319+ 02F0 72 20 6C 6F
 319+ 02F4 61 64 69 6E
 319+ 02F8 67 20 63 6F
 319+ 02FC 6E 66 69 67
 319+ 0300 20 66 69 6C
 319+ 0304 65 0D 0A 00
 320+ 0308 76               halt
 321+ 0309
 322+ 0309              parse_name:
 323+ 0309                  ; hl = current location in file
 324+ 0309                  ; de = where we want to put the parsed filename
 325+ 0309 06 09            ld b, 9                 ; max 8 chars in filename
 326+ 030B              parse_name_loop:
 327+ 030B CD 8B 05         call get_cfg_char
 328+ 030E FE 21            cp ' '+1
 329+ 0310 DA 2A 04         jp c, bad_hex_digit
 330+ 0313 FE 2E            cp '.'
 331+ 0315 28 07            jr z, parse_extension
 332+ 0317 12               ld (de), a
 333+ 0318 13               inc de
 334+ 0319 10 F0            djnz parse_name_loop
 335+ 031B C3 2A 04         jp bad_hex_digit
 336+ 031E              parse_extension:
 337+ 031E 3E 2E            ld a, '.'
 338+ 0320 12               ld (de), a
 339+ 0321 13               inc de
 340+ 0322
 341+ 0322 06 03            ld b, 3                 ; max 3 chars in filename
 342+ 0324              parse_extension_loop:
 343+ 0324 CD 8B 05         call get_cfg_char
 344+ 0327 FE 21            cp ' '+1
 345+ 0329 38 04            jr c, parse_name_done
 346+ 032B 12               ld (de), a
 347+ 032C 13               inc de
 348+ 032D 10 F5            djnz parse_extension_loop
 349+ 032F                  ; fall through to...
 350+ 032F
 351+ 032F              parse_name_done:
 352+ 032F 3E 00            ld a, 0                         ; null terminator for the name
 353+ 0331 12               ld (de), a
 354+ 0332 BF               cp a                            ; Set zero flag for success
 355+ 0333 C9               ret
 356+ 0334
 357+ 0334              parse_uart_config_file:
 358+ 0334 CD 82 07         call message
 359+ 0337 50 61 72 73      db 'Parsing the UART config file...',13,10,0
 359+ 033B 69 6E 67 20
 359+ 033F 74 68 65 20
 359+ 0343 55 41 52 54
 359+ 0347 20 63 6F 6E
 359+ 034B 66 69 67 20
 359+ 034F 66 69 6C 65
 359+ 0353 2E 2E 2E 0D
 359+ 0357 0A 00
 360+ 0359                  ; Go through the config file one line at a time.
 361+ 0359                  ; If we encounter a \0 then the file has ended.
 362+ 0359                  ; If a line starts with ";" then ignore it.
 363+ 0359                  ; If a line starts with "BAUD" or "FLOW" then read in the hex value.
 364+ 0359                  ; If a line starts with "AUTO" then read in a char.
 365+ 0359 21 00 90         ld hl, config_file_loc
 366+ 035C              parse_uart_config_file_loop:
 367+ 035C CD 87 05         call has_file_ended
 368+ 035F CA E8 02         jp z, parse_config_file_end
 369+ 0362
 370+ 0362 CD 2D 04         call is_this_line_a_comment
 371+ 0365 C2 6D 03         jp nz, not_a_uart_comment
 372+ 0368 CD 92 05         call go_to_next_line
 373+ 036B 18 EF            jr parse_uart_config_file_loop
 374+ 036D
 375+ 036D              not_a_uart_comment:
 376+ 036D CD 60 04         call is_this_line_the_baud_rate
 377+ 0370 20 13            jr nz, not_baud_rate
 378+ 0372 11 AF FF         ld de, baud_rate_divisor
 379+ 0375              consume_uart_value:
 380+ 0375 CD E7 03         call parse_2_digit_hex_value
 381+ 0378 CD 92 05         call go_to_next_line
 382+ 037B 18 DF            jr parse_uart_config_file_loop
 383+ 037D
 384+ 037D              consume_char:
 385+ 037D                  ; hl points to the char in the file
 386+ 037D                  ; de points to where we want to store it
 387+ 037D CD DC 03         call parse_char
 388+ 0380 CD 92 05         call go_to_next_line
 389+ 0383 18 D7            jr parse_uart_config_file_loop
 390+ 0385
 391+ 0385
 392+ 0385              not_baud_rate:
 393+ 0385 CD 8B 04         call is_this_line_the_flow_control
 394+ 0388 20 05            jr nz, not_flow_control
 395+ 038A 11 AE FF         ld de, flow_control_value
 396+ 038D 18 E6            jr consume_uart_value
 397+ 038F
 398+ 038F              not_flow_control:
 399+ 038F CD B6 04         call is_this_line_the_auto_char
 400+ 0392 20 05            jr nz, not_auto_char
 401+ 0394 11 FF 8F         ld de, auto_run_char
 402+ 0397 18 E4            jr consume_char
 403+ 0399
 404+ 0399              not_auto_char:
 405+ 0399                  ; Unknown line so ignore it
 406+ 0399 CD 92 05         call go_to_next_line
 407+ 039C C3 5C 03         jp parse_uart_config_file_loop
 408+ 039F
 409+ 039F              parse_4_digit_hex_value:
 410+ 039F                  ; hl = current location in file
 411+ 039F                  ; de = where we want to put the parsed value
 412+ 039F 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 413+ 03A1 12               ld (de), a
 414+ 03A2 13               inc de
 415+ 03A3 12               ld (de), a                              ; de now pointing to high byte of result area
 416+ 03A4
 417+ 03A4 CD 8B 05         call get_cfg_char
 418+ 03A7 CD 06 04         call parse_hex_digit
 419+ 03AA C2 E9 02         jp nz, load_config_file_error
 420+ 03AD 87               add a, a                                ; a = a * 2
 421+ 03AE 87               add a, a                                ; a = a * 4
 422+ 03AF 87               add a, a                                ; a = a * 8
 423+ 03B0 87               add a, a                                ; a = a * 16
 424+ 03B1 12               ld (de), a                              ; Store highest 4 bits of high byte
 425+ 03B2
 426+ 03B2 CD 8B 05         call get_cfg_char
 427+ 03B5 CD 06 04         call parse_hex_digit
 428+ 03B8 C2 E9 02         jp nz, load_config_file_error
 429+ 03BB 47               ld b, a
 430+ 03BC 1A               ld a, (de)
 431+ 03BD 80               add a, b
 432+ 03BE 12               ld (de), a                              ; Stored all of high byte now
 433+ 03BF 1B               dec de                                  ; de now points to low byte of result
 434+ 03C0
 435+ 03C0 CD 8B 05         call get_cfg_char
 436+ 03C3 CD 06 04         call parse_hex_digit
 437+ 03C6 C2 E9 02         jp nz, load_config_file_error
 438+ 03C9 87               add a, a                                ; a = a * 2
 439+ 03CA 87               add a, a                                ; a = a * 4
 440+ 03CB 87               add a, a                                ; a = a * 8
 441+ 03CC 87               add a, a                                ; a = a * 16
 442+ 03CD 12               ld (de), a                              ; Store highest 4 bits of low byte
 443+ 03CE
 444+ 03CE CD 8B 05         call get_cfg_char
 445+ 03D1 CD 06 04         call parse_hex_digit
 446+ 03D4 C2 E9 02         jp nz, load_config_file_error
 447+ 03D7 47               ld b, a
 448+ 03D8 1A               ld a, (de)
 449+ 03D9 80               add a, b
 450+ 03DA 12               ld (de), a                              ; Stored all of low byte now
 451+ 03DB
 452+ 03DB C9               ret
 453+ 03DC
 454+ 03DC              parse_char:
 455+ 03DC 7E               ld a, (hl)
 456+ 03DD FE 20            cp 32
 457+ 03DF 38 02            jr c, parse_char_blank
 458+ 03E1 12               ld (de), a
 459+ 03E2 C9               ret
 460+ 03E3              parse_char_blank:
 461+ 03E3 3E 00            ld a, 0
 462+ 03E5 12               ld (de), a
 463+ 03E6 C9               ret
 464+ 03E7
 465+ 03E7              parse_2_digit_hex_value:
 466+ 03E7                  ; hl = current location in file
 467+ 03E7                  ; de = where we want to put the parsed value
 468+ 03E7 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 469+ 03E9 12               ld (de), a
 470+ 03EA
 471+ 03EA CD 8B 05         call get_cfg_char
 472+ 03ED CD 06 04         call parse_hex_digit
 473+ 03F0 C2 E9 02         jp nz, load_config_file_error
 474+ 03F3 87               add a, a                                ; a = a * 2
 475+ 03F4 87               add a, a                                ; a = a * 4
 476+ 03F5 87               add a, a                                ; a = a * 8
 477+ 03F6 87               add a, a                                ; a = a * 16
 478+ 03F7 12               ld (de), a                              ; Store highest 4 bits of byte
 479+ 03F8
 480+ 03F8 CD 8B 05         call get_cfg_char
 481+ 03FB CD 06 04         call parse_hex_digit
 482+ 03FE C2 E9 02         jp nz, load_config_file_error
 483+ 0401 47               ld b, a
 484+ 0402 1A               ld a, (de)
 485+ 0403 80               add a, b
 486+ 0404 12               ld (de), a                              ; Stored all of byte now
 487+ 0405 C9               ret
 488+ 0406
 489+ 0406              parse_hex_digit:
 490+ 0406                  ; Parses the hex ascii char in A into a hex value 0-15 in A
 491+ 0406                  ; returns NZ if not valid
 492+ 0406                  ; Preserves hl & de
 493+ 0406 FE 30            cp '0'
 494+ 0408 38 20            jr c, bad_hex_digit
 495+ 040A FE 3A            cp '9'+1
 496+ 040C 30 04            jr nc, not_09
 497+ 040E D6 30            sub '0'
 498+ 0410 18 16            jr parse_hex_digit_done
 499+ 0412              not_09:
 500+ 0412 FE 41            cp 'A'
 501+ 0414 38 14            jr c, bad_hex_digit
 502+ 0416 FE 47            cp 'F'+1
 503+ 0418 30 04            jr nc, not_AZ_uppercase
 504+ 041A D6 37            sub 55
 505+ 041C 18 0A            jr parse_hex_digit_done
 506+ 041E              not_AZ_uppercase:
 507+ 041E FE 61            cp 'a'
 508+ 0420 38 08            jr c, bad_hex_digit
 509+ 0422 FE 67            cp 'f'+1
 510+ 0424 30 04            jr nc, bad_hex_digit
 511+ 0426 D6 57            sub 87
 512+ 0428                  ; fall through to...
 513+ 0428              parse_hex_digit_done:
 514+ 0428 BF               cp a                            ; Set zero flag for success
 515+ 0429 C9               ret
 516+ 042A
 517+ 042A              bad_hex_digit:
 518+ 042A F6 01            or 1                            ; clear zero flag for failure
 519+ 042C C9               ret
 520+ 042D
 521+ 042D              is_this_line_a_comment:
 522+ 042D                  ; Check if the line starts with ";"
 523+ 042D                  ; Returns Z if so.
 524+ 042D                  ; Always leaves hl at the start of the line
 525+ 042D E5               push hl
 526+ 042E CD 8B 05         call get_cfg_char
 527+ 0431 E1               pop hl
 528+ 0432 FE 3B            cp ';'
 529+ 0434 C9               ret
 530+ 0435
 531+ 0435              is_this_line_the_core_location:
 532+ 0435                  ; Checks if the line starts with "CORE"
 533+ 0435                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 534+ 0435                  ; If not returns NZ and leaves hl pointing to the start of the line
 535+ 0435 E5               push hl
 536+ 0436 CD 8B 05         call get_cfg_char
 537+ 0439 FE 43            cp 'C'
 538+ 043B C2 83 05         jp nz, is_this_line_NO
 539+ 043E
 540+ 043E CD 8B 05         call get_cfg_char
 541+ 0441 FE 4F            cp 'O'
 542+ 0443 C2 83 05         jp nz, is_this_line_NO
 543+ 0446
 544+ 0446 CD 8B 05         call get_cfg_char
 545+ 0449 FE 52            cp 'R'
 546+ 044B C2 83 05         jp nz, is_this_line_NO
 547+ 044E
 548+ 044E CD 8B 05         call get_cfg_char
 549+ 0451 FE 45            cp 'E'
 550+ 0453 C2 83 05         jp nz, is_this_line_NO
 551+ 0456
 552+ 0456 CD 8B 05         call get_cfg_char
 553+ 0459 FE 20            cp ' '
 554+ 045B C2 83 05         jp nz, is_this_line_NO
 555+ 045E D1               pop de                          ; throw away the value we pushed
 556+ 045F C9               ret                             ; returns Z
 557+ 0460
 558+ 0460              is_this_line_the_baud_rate:
 559+ 0460                  ; Checks if the line starts with "BAUD"
 560+ 0460                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 561+ 0460                  ; If not returns NZ and leaves hl pointing to the start of the line
 562+ 0460 E5               push hl
 563+ 0461 CD 8B 05         call get_cfg_char
 564+ 0464 FE 42            cp 'B'
 565+ 0466 C2 83 05         jp nz, is_this_line_NO
 566+ 0469
 567+ 0469 CD 8B 05         call get_cfg_char
 568+ 046C FE 41            cp 'A'
 569+ 046E C2 83 05         jp nz, is_this_line_NO
 570+ 0471
 571+ 0471 CD 8B 05         call get_cfg_char
 572+ 0474 FE 55            cp 'U'
 573+ 0476 C2 83 05         jp nz, is_this_line_NO
 574+ 0479
 575+ 0479 CD 8B 05         call get_cfg_char
 576+ 047C FE 44            cp 'D'
 577+ 047E C2 83 05         jp nz, is_this_line_NO
 578+ 0481
 579+ 0481 CD 8B 05         call get_cfg_char
 580+ 0484 FE 20            cp ' '
 581+ 0486 C2 83 05         jp nz, is_this_line_NO
 582+ 0489 D1               pop de                          ; throw away the value we pushed
 583+ 048A C9               ret                             ; returns Z
 584+ 048B
 585+ 048B              is_this_line_the_flow_control:
 586+ 048B                  ; Checks if the line starts with "FLOW"
 587+ 048B                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 588+ 048B                  ; If not returns NZ and leaves hl pointing to the start of the line
 589+ 048B E5               push hl
 590+ 048C CD 8B 05         call get_cfg_char
 591+ 048F FE 46            cp 'F'
 592+ 0491 C2 83 05         jp nz, is_this_line_NO
 593+ 0494
 594+ 0494 CD 8B 05         call get_cfg_char
 595+ 0497 FE 4C            cp 'L'
 596+ 0499 C2 83 05         jp nz, is_this_line_NO
 597+ 049C
 598+ 049C CD 8B 05         call get_cfg_char
 599+ 049F FE 4F            cp 'O'
 600+ 04A1 C2 83 05         jp nz, is_this_line_NO
 601+ 04A4
 602+ 04A4 CD 8B 05         call get_cfg_char
 603+ 04A7 FE 57            cp 'W'
 604+ 04A9 C2 83 05         jp nz, is_this_line_NO
 605+ 04AC
 606+ 04AC CD 8B 05         call get_cfg_char
 607+ 04AF FE 20            cp ' '
 608+ 04B1 C2 83 05         jp nz, is_this_line_NO
 609+ 04B4 D1               pop de                          ; throw away the value we pushed
 610+ 04B5 C9               ret                             ; returns Z
 611+ 04B6
 612+ 04B6              is_this_line_the_auto_char:
 613+ 04B6                  ; Checks if the line starts with "AUTO"
 614+ 04B6                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 615+ 04B6                  ; If not returns NZ and leaves hl pointing to the start of the line
 616+ 04B6 E5               push hl
 617+ 04B7 CD 8B 05         call get_cfg_char
 618+ 04BA FE 41            cp 'A'
 619+ 04BC C2 83 05         jp nz, is_this_line_NO
 620+ 04BF
 621+ 04BF CD 8B 05         call get_cfg_char
 622+ 04C2 FE 55            cp 'U'
 623+ 04C4 C2 83 05         jp nz, is_this_line_NO
 624+ 04C7
 625+ 04C7 CD 8B 05         call get_cfg_char
 626+ 04CA FE 54            cp 'T'
 627+ 04CC C2 83 05         jp nz, is_this_line_NO
 628+ 04CF
 629+ 04CF CD 8B 05         call get_cfg_char
 630+ 04D2 FE 4F            cp 'O'
 631+ 04D4 C2 83 05         jp nz, is_this_line_NO
 632+ 04D7
 633+ 04D7 CD 8B 05         call get_cfg_char
 634+ 04DA FE 20            cp ' '
 635+ 04DC C2 83 05         jp nz, is_this_line_NO
 636+ 04DF D1               pop de                          ; throw away the value we pushed
 637+ 04E0 C9               ret                             ; returns Z
 638+ 04E1
 639+ 04E1              is_this_line_the_bios_location:
 640+ 04E1                  ; Checks if the line starts with "BIOS "
 641+ 04E1                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 642+ 04E1                  ; If not returns NZ and leaves hl pointing to the start of the line
 643+ 04E1 E5               push hl
 644+ 04E2 CD 8B 05         call get_cfg_char
 645+ 04E5 FE 42            cp 'B'
 646+ 04E7 C2 83 05         jp nz, is_this_line_NO
 647+ 04EA
 648+ 04EA CD 8B 05         call get_cfg_char
 649+ 04ED FE 49            cp 'I'
 650+ 04EF C2 83 05         jp nz, is_this_line_NO
 651+ 04F2
 652+ 04F2 CD 8B 05         call get_cfg_char
 653+ 04F5 FE 4F            cp 'O'
 654+ 04F7 C2 83 05         jp nz, is_this_line_NO
 655+ 04FA
 656+ 04FA CD 8B 05         call get_cfg_char
 657+ 04FD FE 53            cp 'S'
 658+ 04FF C2 83 05         jp nz, is_this_line_NO
 659+ 0502
 660+ 0502 CD 8B 05         call get_cfg_char
 661+ 0505 FE 20            cp ' '
 662+ 0507 C2 83 05         jp nz, is_this_line_NO
 663+ 050A D1               pop de
 664+ 050B C9               ret                             ; returns Z
 665+ 050C
 666+ 050C              is_this_line_the_bdos_location:
 667+ 050C                  ; Checks if the line starts with "BDOS "
 668+ 050C                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 669+ 050C                  ; If not returns NZ and leaves hl pointing to the start of the line
 670+ 050C E5               push hl
 671+ 050D CD 8B 05         call get_cfg_char
 672+ 0510 FE 42            cp 'B'
 673+ 0512 C2 83 05         jp nz, is_this_line_NO
 674+ 0515
 675+ 0515 CD 8B 05         call get_cfg_char
 676+ 0518 FE 44            cp 'D'
 677+ 051A C2 83 05         jp nz, is_this_line_NO
 678+ 051D
 679+ 051D CD 8B 05         call get_cfg_char
 680+ 0520 FE 4F            cp 'O'
 681+ 0522 C2 83 05         jp nz, is_this_line_NO
 682+ 0525
 683+ 0525 CD 8B 05         call get_cfg_char
 684+ 0528 FE 53            cp 'S'
 685+ 052A C2 83 05         jp nz, is_this_line_NO
 686+ 052D
 687+ 052D CD 8B 05         call get_cfg_char
 688+ 0530 FE 20            cp ' '
 689+ 0532 C2 83 05         jp nz, is_this_line_NO
 690+ 0535 D1               pop de
 691+ 0536 C9               ret                             ; returns Z
 692+ 0537
 693+ 0537              is_this_line_the_ccp_location:
 694+ 0537                  ; Checks if the line starts with "CCPL "
 695+ 0537                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 696+ 0537                  ; If not returns NZ and leaves hl pointing to the start of the line
 697+ 0537 E5               push hl
 698+ 0538 CD 8B 05         call get_cfg_char
 699+ 053B FE 43            cp 'C'
 700+ 053D 20 44            jr nz, is_this_line_NO
 701+ 053F
 702+ 053F CD 8B 05         call get_cfg_char
 703+ 0542 FE 43            cp 'C'
 704+ 0544 20 3D            jr nz, is_this_line_NO
 705+ 0546
 706+ 0546 CD 8B 05         call get_cfg_char
 707+ 0549 FE 50            cp 'P'
 708+ 054B 20 36            jr nz, is_this_line_NO
 709+ 054D
 710+ 054D CD 8B 05         call get_cfg_char
 711+ 0550 FE 4C            cp 'L'
 712+ 0552 20 2F            jr nz, is_this_line_NO
 713+ 0554
 714+ 0554 CD 8B 05         call get_cfg_char
 715+ 0557 FE 20            cp ' '
 716+ 0559 20 28            jr nz, is_this_line_NO
 717+ 055B D1               pop de
 718+ 055C C9               ret                             ; returns Z
 719+ 055D
 720+ 055D              is_this_line_the_ccp_name:
 721+ 055D                  ; Checks if the line starts with "CCPN "
 722+ 055D                  ; Returns Z if so and leaves hl pointing to the start of the filename after the word.
 723+ 055D                  ; If not returns NZ and leaves hl pointing to the start of the line
 724+ 055D E5               push hl
 725+ 055E CD 8B 05         call get_cfg_char
 726+ 0561 FE 43            cp 'C'
 727+ 0563 20 1E            jr nz, is_this_line_NO
 728+ 0565
 729+ 0565 CD 8B 05         call get_cfg_char
 730+ 0568 FE 43            cp 'C'
 731+ 056A 20 17            jr nz, is_this_line_NO
 732+ 056C
 733+ 056C CD 8B 05         call get_cfg_char
 734+ 056F FE 50            cp 'P'
 735+ 0571 20 10            jr nz, is_this_line_NO
 736+ 0573
 737+ 0573 CD 8B 05         call get_cfg_char
 738+ 0576 FE 4E            cp 'N'
 739+ 0578 20 09            jr nz, is_this_line_NO
 740+ 057A
 741+ 057A CD 8B 05         call get_cfg_char
 742+ 057D FE 20            cp ' '
 743+ 057F 20 02            jr nz, is_this_line_NO
 744+ 0581 D1               pop de
 745+ 0582 C9               ret                             ; returns Z
 746+ 0583
 747+ 0583              is_this_line_NO:
 748+ 0583 E1               pop hl
 749+ 0584 F6 01            or 1                            ; clear zero flag for failure
 750+ 0586 C9               ret
 751+ 0587
 752+ 0587              has_file_ended:
 753+ 0587                  ; The file has ended if the next char is a \0
 754+ 0587 7E               ld a, (hl)
 755+ 0588 FE 00            cp 0
 756+ 058A C9               ret
 757+ 058B
 758+ 058B              get_cfg_char:
 759+ 058B                  ; Gets A from the next location in the config file, pointed to by HL.
 760+ 058B                  ; Increases hl so we skip over the char.
 761+ 058B                  ; If the char is a \0 then we are at the end of the file, so return \0 and don't increase hl
 762+ 058B 7E               ld a, (hl)
 763+ 058C FE 00            cp 0                            ; Have we found the end of the file?
 764+ 058E C8               ret z                           ; and return
 765+ 058F              get_cfg_char1:
 766+ 058F 23               inc hl
 767+ 0590 BF               cp a                            ; Set zero flag for success
 768+ 0591 C9               ret
 769+ 0592
 770+ 0592              go_to_next_line:
 771+ 0592 7E               ld a, (hl)
 772+ 0593 FE 00            cp 0                            ; Have we found the end of the file?
 773+ 0595 C8               ret z                           ; if so return
 774+ 0596
 775+ 0596 FE 20            cp 32
 776+ 0598 30 0A            jr nc, skip_letters
 777+ 059A              skip_control_chars:
 778+ 059A 23               inc hl
 779+ 059B 7E               ld a, (hl)
 780+ 059C FE 00            cp 0
 781+ 059E C8               ret z
 782+ 059F FE 20            cp 32
 783+ 05A1 38 F7            jr c, skip_control_chars
 784+ 05A3 C9               ret
 785+ 05A4
 786+ 05A4              skip_letters:
 787+ 05A4 23               inc hl
 788+ 05A5 7E               ld a, (hl)
 789+ 05A6 FE 00            cp 0
 790+ 05A8 C8               ret z
 791+ 05A9 FE 20            cp 32
 792+ 05AB 30 F7            jr nc, skip_letters
 793+ 05AD 18 EB            jr skip_control_chars
 794+ 05AF
 795+ 05AF              show_config:
 796+ 05AF CD 82 07         call message
 797+ 05B2 43 4F 52 45      db 'CORE: ',0
 797+ 05B6 3A 20 00
 798+ 05B9 2A C3 FF         ld hl, (core_location)
 799+ 05BC CD 97 07         call show_hl_as_hex
 800+ 05BF
 801+ 05BF CD 82 07         call message
 802+ 05C2 2C 20 42 49      db ', BIOS: ',0
 802+ 05C6 4F 53 3A 20
 802+ 05CA 00
 803+ 05CB 2A C1 FF         ld hl, (bios_location)
 804+ 05CE CD 97 07         call show_hl_as_hex
 805+ 05D1
 806+ 05D1 CD 82 07         call message
 807+ 05D4 2C 20 42 44      db ', BDOS: ',0
 807+ 05D8 4F 53 3A 20
 807+ 05DC 00
 808+ 05DD 2A BF FF         ld hl, (bdos_location)
 809+ 05E0 CD 97 07         call show_hl_as_hex
 810+ 05E3
 811+ 05E3 CD 82 07         call message
 812+ 05E6 2C 20 43 43      db ', CCPL: ',0
 812+ 05EA 50 4C 3A 20
 812+ 05EE 00
 813+ 05EF 2A BD FF         ld hl, (ccp_location)
 814+ 05F2 CD 97 07         call show_hl_as_hex
 815+ 05F5
 816+ 05F5 CD 82 07         call message
 817+ 05F8 2C 20 43 43      db ', CCPN: ',0
 817+ 05FC 50 4E 3A 20
 817+ 0600 00
 818+ 0601 21 B0 FF         ld hl, ccp_name
 819+ 0604              show_name_loop:
 820+ 0604 7E               ld a, (hl)
 821+ 0605 FE 00            cp 0
 822+ 0607 28 08            jr z, finished_showing_name
 823+ 0609 E5               push hl
 824+ 060A CD D1 06         call print_a
 825+ 060D E1               pop hl
 826+ 060E 23               inc hl
 827+ 060F 18 F3            jr show_name_loop
 828+ 0611              finished_showing_name:
 829+ 0611 CD 07 07         call newline
 830+ 0614 C9               ret
 831+ 0615
 832+ 0615              validate_config:
 833+ 0615 21 C3 FF         ld hl, core_location
 834+ 0618 CD 2E 06         call must_not_be_zero
 835+ 061B 21 C1 FF         ld hl, bios_location
 836+ 061E CD 2E 06         call must_not_be_zero
 837+ 0621 21 BF FF         ld hl, bdos_location
 838+ 0624 CD 2E 06         call must_not_be_zero
 839+ 0627 21 BD FF         ld hl, ccp_location
 840+ 062A CD 2E 06         call must_not_be_zero
 841+ 062D C9               ret
 842+ 062E
 843+ 062E              must_not_be_zero:
 844+ 062E 7E               ld a, (hl)
 845+ 062F FE 00            cp 0
 846+ 0631 C0               ret nz
 847+ 0632 23               inc hl
 848+ 0633 7E               ld a, (hl)
 849+ 0634 FE 00            cp 0
 850+ 0636 C0               ret nz
 851+ 0637 CD 82 07         call message
 852+ 063A 49 6E 76 61      db 'Invalid configuration',13,10,0
 852+ 063E 6C 69 64 20
 852+ 0642 63 6F 6E 66
 852+ 0646 69 67 75 72
 852+ 064A 61 74 69 6F
 852+ 064E 6E 0D 0A 00
 853+ 0652 76               halt
 854+ 0653
 855+ 0653
 856+ 0653
 857+ 0653              NAME_OF_BDOS:
 858+ 0653 2F 42 44 4F      db '/BDOS.BIN',0
 858+ 0657 53 2E 42 49
 858+ 065B 4E 00
 859+ 065D              NAME_OF_BIOS:
 860+ 065D 42 49 4F 53      db 'BIOS.BIN',0
 860+ 0661 2E 42 49 4E
 860+ 0665 00
 861+ 0666              NAME_OF_CORE:
 862+ 0666 43 4F 52 45      db 'CORE.BIN',0
 862+ 066A 2E 42 49 4E
 862+ 066E 00
 863+ 066F              NAME_OF_CCP:
 864+ 066F 2F 43 43 50      db '/CCP.BIN',0
 864+ 0673 2E 42 49 4E
 864+ 0677 00
 865+ 0678
 866+ 0678              CPM_CFG_NAME:
 867+ 0678 43 50 4D 2E      db 'CPM.CFG',0
 867+ 067C 43 46 47 00
 868+ 0680              UART_CFG_NAME:
 869+ 0680 55 41 52 54      db 'UART.CFG',0
 869+ 0684 2E 43 46 47
 869+ 0688 00
 870+ 0689
 871+ 0689
 872+ 0689              first_eight_bytes:
 873+ 0689 C3 03 F4 00      db $C3, $03, $F4, $00, $00, $C3, $00, $EA
 873+ 068D 00 C3 00 EA
 874+ 0691              ; JP BIOS-warm-boot, 0, 0, JP BDOS
 875+ 0691
 876+ 0691
 877+ 0691              filesize_buffer equ $C000
 878+ 0691
 879+ 0691              filesize_buffer_copy equ filesize_buffer+6
 880+ 0691
 881+ 0691              loader_stack equ filesize_buffer_copy+100
 882+ 0691
 883+ 0691
 884+ 0691              filesize_units:
 885+ 0691 00               ds 1
 886+ 0692
 887+ 0692              dma_address:
 888+ 0692 00 00            ds 2
 889+ 0694
 890+ 0694              config_file_loc equ $9000
 891+ 0694              auto_run_char   equ $8FFF
 892+ 0694
 893+ 0694              filename_buffer equ 65535-20
 894+ 0694              DRIVE_NAME      equ filename_buffer-2
 895+ 0694              disk_buffer     equ DRIVE_NAME-36
 896+ 0694
 897+ 0694              core_location   equ disk_buffer-2         ; Stores the core_start location
 898+ 0694              bios_location   equ core_location-2       ; Stores the bios_start location
 899+ 0694              bdos_location   equ bios_location-2       ; Stores the bdos_start location
 900+ 0694              ccp_location    equ bdos_location-2        ; Stores the ccp_start location
 901+ 0694              ccp_name        equ ccp_location-13            ; stores the name of the ccp file, e.g. MYCCP.BIN with a zero terminator
 902+ 0694
 903+ 0694              baud_rate_divisor   equ ccp_name-1
 904+ 0694              flow_control_value  equ baud_rate_divisor-1
 905+ 0694
 906+ 0694                  include "uart.asm"
# file opened: uart.asm
   1++0694              ; uart routines
   2++0694              ; These are routines connected with the 16C550 uart.
   3++0694
   4++0694              unimplemented_start_monitor:
   5++0694              	; Not implemented yet
   6++0694 C9           	ret
   7++0695
   8++0695              UART_FREQUENCY: EQU 19660800	; 82C50 | 16C550 CLOCK
   9++0695
  10++0695 80 00        UART_BAUD_9600:		DW	UART_FREQUENCY/(9600 * 16)
  11++0697 55 00        UART_BAUD_14400:	DW	UART_FREQUENCY/(14400 * 16)
  12++0699 40 00        UART_BAUD_19200:	DW	UART_FREQUENCY/(19200 * 16)
  13++069B 20 00        UART_BAUD_38400:	DW	UART_FREQUENCY/(38400 * 16)
  14++069D 15 00        UART_BAUD_57600:	DW	UART_FREQUENCY/(57600 * 16)
  15++069F 0A 00        UART_BAUD_115200:	DW	UART_FREQUENCY/(115200 * 16)
  16++06A1
  17++06A1              ; Initialises the 16c550c UART for input/output
  18++06A1              ;configure_uart:
  19++06A1              	; Configure the UART 16550 after a reset.
  20++06A1              	; For the sake of definitely getting the job done, let's pause here for ages before doing it.
  21++06A1              	; Without this pause the Z80 can get started before the UART is ready.
  22++06A1              	; Don't ask me how I know this.
  23++06A1              	;
  24++06A1              	; Pass in the required BAUD rate divisor in b.
  25++06A1              	; Pass in the required hardware flow control in c.
  26++06A1              ;	push bc
  27++06A1              ;	call long_pause
  28++06A1              ;	pop bc
  29++06A1
  30++06A1              ;	LD		A,	0x00
  31++06A1              ;	OUT 	(uart_IER),A			; Disable interrupts
  32++06A1
  33++06A1              ;    ld 		A,	80H                 ; Go into "Divisor Latch Setting mode"
  34++06A1              ;    out 	(uart_LCR),a            ; by writing 1 into bit 7 of the Line Control register
  35++06A1              ;    nop								; These tiny "nop" pauses probably do nothing. TODO: Try removing them!
  36++06A1
  37++06A1              ;    ld 		A, b                    ; low byte of divisor
  38++06A1              ;    out 	(uart_tx_rx), A
  39++06A1              ;    nop
  40++06A1              ;    ld 		A, 0                          ; high byte
  41++06A1              ;    out 	(uart_IER), A
  42++06A1              ;    nop
  43++06A1
  44++06A1              ;    ld a,03H                        ; Configure stop bits etc, and exit
  45++06A1                                                  ; "Divisor latch setting mode"
  46++06A1
  47++06A1              ;    out (uart_LCR),a                ; 8 bits, no parity, 1 stop bit, bit 7 = 0
  48++06A1              ;	nop								; a slight pause to allow the UART to get going
  49++06A1
  50++06A1              ;	ld a, 0x81 						;%10000001					; Turn on FIFO, with trigger level of 8.
  51++06A1              ;	out (uart_ISR), a				; This definitely helps receive 16 chars very fast!
  52++06A1
  53++06A1              	;ld a, c
  54++06A1              	;cp 0
  55++06A1              	;jr z, flowcontrol_done
  56++06A1
  57++06A1              	;LD      A,0x00                  ;no flow control
  58++06A1              	;ld a, %00100010
  59++06A1              	;out (uart_MCR), a				; Enable auto flow control for /RTS and /CTS
  60++06A1              ;	ret
  61++06A1              flowcontrol_done:
  62++06A1 00           	nop
  63++06A2 00           	nop
  64++06A3 C9               ret
  65++06A4
  66++06A4              configure_uart:
  67++06A4 F5           UART_INIT:	PUSH	AF
  68++06A5 7E           			LD		A,(HL)
  69++06A6 23           			INC 	HL
  70++06A7 66           			LD		H,(HL)
  71++06A8 6F           			LD 		L,A
  72++06A9 3E 00        			LD		A,0x00
  72++06AB D3 B9          OUT (uart_IER),A	; Disable interrupts
  73++06AD 3E 80        			LD		A,0x80
  73++06AF D3 BB          OUT (uart_LCR),A 	; Turn DLAB on
  74++06B1 7D           			LD		A,L
  74++06B2 D3 B8         	OUT (uart_tx_rx),A	; Set divisor low
  75++06B4 7C           			LD		A,H
  75++06B5 D3 B9         	OUT (uart_IER),A	; Set divisor high
  76++06B7 F1           			POP		AF
  76++06B8 D3 BB         		OUT (uart_LCR),A	; Write out flow control bits 8,1,N
  77++06BA 3E 81        			LD 		A, 0x81						; Turn on FIFO, with trigger level of 8.
  78++06BC D3 BA        			OUT (uart_ISR), A					; This turn on the 16bytes buffer!
  79++06BE C9           			RET
  80++06BF
  81++06BF              UART_TX_WAIT		EQU	600		; Count before a TX times out
  82++06BF
  83++06BF              ; A: Data read
  84++06BF              ; Returns:
  85++06BF              ; F = C if character read
  86++06BF              ; F = NC if no character read
  87++06BF              ;
  88++06BF DB BD        UART_RX:	IN	A,(uart_LSR)		; Get the line status register
  89++06C1 E6 01        			AND 	0x01				; Check for characters in buffer
  90++06C3 C8           			ret	Z					; Just ret (with carry clear) if no characters
  91++06C4 DB B8        			IN	A,(uart_tx_rx)		; Read the character from the UART receive buffer
  92++06C6 37           			SCF 						; Set the carry flag
  93++06C7 C9           			RET
  94++06C8
  95++06C8              ; Read a character - waits for input
  96++06C8              ; NB is the non-blocking variant
  97++06C8              ;  A: ASCII character read
  98++06C8              ;  F: NC if no character read (non-blocking)
  99++06C8              ;  F:  C if character read (non-blocking)
 100++06C8              ;
 101++06C8 CD BF 06     Read_Char:              CALL    UART_RX
 102++06CB 30 FB                                JR      NC,Read_Char
 103++06CD C9                                   RET
 104++06CE              ; Read a character - NO waits for input
 105++06CE              ; NB is the non-blocking variant
 106++06CE              ;  A: ASCII character read
 107++06CE              ;  F: NC if no character read (non-blocking)
 108++06CE              ;  F:  C if character read (non-blocking)
 109++06CE C3 BF 06     Read_Char_NB:           JP      UART_RX
 110++06D1
 111++06D1              ; Print A to the screen as an ASCII character, preserving all registers.
 112++06D1              print_a:
 113++06D1 E5           UART_TX:	PUSH 	HL
 114++06D2 D5           			PUSH 	DE
 115++06D3 C5           			PUSH	BC						; Stack BC
 116++06D4 F5           			PUSH	AF 						; Stack AF
 117++06D5 06 58        			LD	B,low  UART_TX_WAIT			; Set CB to the transmit timeout
 118++06D7 0E 02        			LD	C,high UART_TX_WAIT
 119++06D9 DB BD        1:			IN	A,(uart_LSR)			; Get the line status register
 120++06DB E6 60        			AND 	0x60					; Check for TX empty
 121++06DD 20 0B        			JR	NZ,2F						; If set, then TX is empty, goto transmit
 122++06DF 10 F8        			DJNZ	1B
 122++06E1 0D             DEC	C
 122++06E2 20 F5          JR NZ,1B		; Otherwise loop
 123++06E4 F1           			POP	AF							; We've timed out at this point so
 124++06E5 B7           			OR	A							; Clear the carry flag and preserve A
 125++06E6 C1           			POP	BC							; Restore the stack
 126++06E7 D1           			POP DE
 127++06E8 E1           			POP	HL
 128++06E9 C9           			RET
 129++06EA F1           2:			POP	AF							; Good to send at this point, so
 130++06EB D3 B8        			OUT	(uart_tx_rx),A			; Write the character to the UART transmit buffer
 131++06ED CD FE 06     			call	delay2
 132++06F0 CD FE 06     			call	delay2
 133++06F3 CD FE 06     			call	delay2
 134++06F6 CD FE 06     			call	delay2
 135++06F9 C1           			POP	BC							; Restore the stack
 136++06FA D1           			POP DE
 137++06FB E1           			POP	HL
 138++06FC 37           			SCF								; Set the carry flag
 139++06FD C9           			RET
 140++06FE              ;******************************************************************
 141++06FE              ; This routine delay 746us
 142++06FE              delay2:
 143++06FE F5           			PUSH   AF
 144++06FF 3E FF        			LD     A, 0xFF
 145++0701 3D           delay2loop: DEC    A
 146++0702 C2 01 07     			JP     NZ, delay2loop  ; JUMP TO DELAYLOOP2 IF A <> 0.
 147++0705 F1           			POP    AF
 148++0706 C9           			RET
 149++0707
 150++0707              ;    push af                         ; Store A for a bit
 151++0707              ;print_a1:
 152++0707              ;    in a,(uart_LSR)                 ; check UART is ready to send.
 153++0707              ;    bit 5,a                         ; zero flag set to true if bit 5 is 0
 154++0707              ;    jp z, print_a1                  ; non-zero = ready for next char.;
 155++0707
 156++0707              ;    pop af                          ; UART IS READY, GET OLD "A" BACK
 157++0707              ;    out (uart_tx_rx),a              ; AND SEND IT OUT
 158++0707              ;	ret
 159++0707
 160++0707              newline:
 161++0707 3E 0D        	ld a,13
 162++0709 CD D1 06     	call print_a
 163++070C 3E 0A        	ld a,10
 164++070E CD D1 06     	call print_a
 165++0711 C9           	ret
 166++0712
 167++0712              space:
 168++0712 3E 20        	ld a,32
 169++0714 CD D1 06     	call print_a
 170++0717 C9           	ret
 171++0718
 172++0718              ; To receive a char over Serial we need to check if there is one. If not we return 0.
 173++0718              ; If there is, we get it and return it (in a).
 174++0718              char_in:
 175++0718 DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 176++071A CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 177++071C              							; "logic 0 = no data in receive holding register."
 178++071C CA 22 07     	jp z,char_in1    		; zero = no char received
 179++071F DB B8        	in a,(uart_tx_rx)		; Get the incoming char
 180++0721 C9           	ret						; Return it in A
 181++0722              char_in1:
 182++0722 3E 00        	ld a,0					; Return a zero in A
 183++0724 C9           	ret
 184++0725
 185++0725              char_available:
 186++0725 DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 187++0727 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 188++0729              							; "logic 0 = no data in receive holding register."
 189++0729 CA 2F 07     	jp z,char_available1	; zero = no char received
 190++072C 3E FF        	ld a, $FF		        ; return true
 191++072E C9           	ret						; in A
 192++072F              char_available1:
 193++072F 3E 00        	ld a,0					; Return a zero in A
 194++0731 C9           	ret
 195++0732
 196++0732
 197++0732              long_pause:
 198++0732 01 E8 FD     	ld bc,65000
 199++0735 18 08            jr pause0
 200++0737              medium_pause:
 201++0737 01 C8 AF     	ld bc,45000
 202++073A 18 03            jr pause0
 203++073C              short_pause:
 204++073C 01 64 00     	ld bc,100
 205++073F              pause0:
 206++073F 0B           	dec bc
 207++0740 78           	ld a,b
 208++0741 B1           	or c
 209++0742 C2 3F 07     	jp nz,pause0
 210++0745 C9           	ret
 211++0746
 212++0746              disk_toggle:
 213++0746 DB BC        	in a, (uart_MCR)
 214++0748 E6 04        	and %00000100
 215++074A 28 07        	jr z, disk_on
 216++074C              	; fall through to...
 217++074C              disk_off:
 218++074C               	; disk light off
 219++074C DB BC        	in a, (uart_MCR)
 220++074E E6 FB        	and %11111011
 221++0750 D3 BC        	out (uart_MCR), a
 222++0752 C9           	ret
 223++0753
 224++0753              disk_on:
 225++0753              	; disk light on
 226++0753 DB BC        	in a, (uart_MCR)
 227++0755 F6 04        	or %00000100
 228++0757 D3 BC        	out (uart_MCR), a
 229++0759 C9           	ret
 230++075A
 231++075A              user_on:
 232++075A              	; user light on
 233++075A DB BC        	in a, (uart_MCR)
 234++075C F6 01        	or %00000001
 235++075E D3 BC        	out (uart_MCR), a
 236++0760 C9           	ret
 237++0761
 238++0761              user_toggle:
 239++0761              	; user1 light invert
 240++0761 DB BC        	in a, (uart_MCR)
 241++0763 E6 01        	and %00000001
 242++0765 28 F3        	jr z, user_on
 243++0767              	; fall through to...
 244++0767              user_off:
 245++0767               	; user light off
 246++0767 DB BC        	in a, (uart_MCR)
 247++0769 E6 FE        	and %11111110
 248++076B D3 BC        	out (uart_MCR), a
 249++076D C9           	ret
 250++076E
 251++076E              rom_toggle:
 252++076E DB BC        	in a, (uart_MCR)
 253++0770 E6 08        	and %00001000
 254++0772 28 07        	jr z, rom_off
 255++0774              	; fall through to...
 256++0774              rom_on:
 257++0774              	; rom light on
 258++0774 DB BC        	in a, (uart_MCR)
 259++0776 E6 F7        	and %11110111
 260++0778 D3 BC        	out (uart_MCR), a
 261++077A C9           	ret
 262++077B
 263++077B              rom_off:
 264++077B              	; rom light off
 265++077B DB BC        	in a, (uart_MCR)
 266++077D F6 08        	or %00001000
 267++077F D3 BC        	out (uart_MCR), a
 268++0781 C9           	ret
 269++0782
 270++0782              	include "port_numbers.asm"
# file opened: port_numbers.asm
   1++0782              ; port_numbers.asm
   2++0782
   3++0782              ; Here are the port numbers for various UART registers:
   4++0782              uart_tx_rx 		equ   0xB8   ; 	8
   5++0782              uart_IER 		equ   0xB9   ; 	9
   6++0782              uart_ISR 		equ   0xBA   ;  10  ; Also known as FCR
   7++0782              uart_LCR 		equ   0xBB   ;  11
   8++0782              uart_MCR 		equ   0xBC   ;  12  ; modem control reg
   9++0782              uart_LSR 		equ   0xBD   ;  13
  10++0782              uart_MSR 		equ   0xBE   ;  14
  11++0782              uart_scratch 	equ   0xBF   ;  15
# file closed: port_numbers.asm
 271++0782
# file closed: uart.asm
 907+ 0782                  include "message.asm"
# file opened: message.asm
   1++0782              ; message
   2++0782              message:
   3++0782 E3           	ex (sp), hl                   ; top of stack is now mangled, but hl is pointing to our message
   4++0783 F5           	push	af
   5++0784 C5           	push	bc
   6++0785 D5           	push	de
   7++0786
   8++0786              message_loop_001:
   9++0786 7E           	ld a, (hl)
  10++0787 FE 00        	cp 0
  11++0789 28 06        	jr z, message_complete_001
  12++078B 23           	inc hl
  13++078C CD D1 06     	call print_a                  ; print a character (Mangles 2 items below top of stack)
  14++078F 18 F5        	jr message_loop_001               ; Loop until done
  15++0791
  16++0791              message_complete_001:
  17++0791 D1           	pop de
  18++0792 C1           	pop bc
  19++0793 F1           	pop af
  20++0794 23           	inc hl
  21++0795 E3           	ex (sp), hl
  22++0796 C9           	ret
  23++0797
  24++0797
  25++0797              ; -------------------------------------------------------------------------------------------------
  26++0797
  27++0797              ;message:
  28++0797              ;	; Use this handy helper function to display an inline message easily.
  29++0797              ;	; It preserves all registers (which was tricky to do).
  30++0797              ;	; This expects to be called from code where the message follows the "call debug" in-line, like this:
  31++0797              ;	;
  32++0797              ;	; ld a, 10 ; (or whatever code you like)
  33++0797              ;	; call message
  34++0797              ;	; db "my message", 0
  35++0797              ;	; ld b, 10 ; (or whatever code you like)
  36++0797              ;	;
  37++0797              ;	; When we return we make sure sp is pointing to the next line of code after the message.
  38++0797              ;
  39++0797              ;							; sp -> ret-addr
  40++0797              ;
  41++0797              ;	push af					; We have stored af
  42++0797              ;	push af					; We do this 3 times
  43++0797              ;	push af					; to allow spare stack space.
  44++0797              ;							; sp -> AF, AF, AF, ret-addr
  45++0797              ;	push bc					; sp -> BC, AF, AF, AF, ret-addr
  46++0797              ;	push de					; sp -> DE, BC, AF, AF, AF, ret-addr
  47++0797              ;	push hl					; sp -> HL, DE, BC, AF, AF, AF, ret-addr
  48++0797              ;
  49++0797              ;	inc sp
  50++0797              ;	inc sp					; adjust the stack to overlook the stored afx3, BC, DE & HL
  51++0797              ;							; HL, sp -> DE, BC, AF, AF, AF, ret-addr
  52++0797              ;	inc sp
  53++0797              ;	inc sp					; HL, DE, sp -> BC, AF, AF, AF, ret-addr
  54++0797              ;
  55++0797              ;	inc sp
  56++0797              ;	inc sp					; HL, DE, BC, sp -> AF, AF, AF, ret-addr
  57++0797              ;
  58++0797              ;	inc sp
  59++0797              ;	inc sp
  60++0797              ;
  61++0797              ;	inc sp
  62++0797              ;	inc sp
  63++0797              ;
  64++0797              ;	inc sp
  65++0797              ;	inc sp					; HL, DE, BC, AF, AF, AF, sp -> ret-addr
  66++0797              ;
  67++0797              ;	ex (sp), hl				; top of stack is now mangled, but hl is pointing to our message
  68++0797              ;							; HL, DE, BC, AF, AF, AF, sp -> HL
  69++0797              ;
  70++0797              ;message_loop:
  71++0797              ;	ld a, (hl)
  72++0797              ;	cp 0
  73++0797              ;	jr z,message_complete
  74++0797              ;	inc hl
  75++0797              ;	call print_a			; print a character (Mangles 2 items below top of stack)
  76++0797              ;	jr message_loop			; Loop until done
  77++0797              ;							; HL, DE, BC, AF, XX, XX, sp -> HL
  78++0797              ;
  79++0797              ;message_complete:
  80++0797              ;	inc hl
  81++0797              ;	ex (sp), hl				; restore top of stack, after we have incremented it so it points to the subsequent instruction
  82++0797              ;							; HL, DE, BC, AF, XX, XX, sp -> new-ret-addr
  83++0797              ;	dec sp
  84++0797              ;	dec sp
  85++0797              ;
  86++0797              ;	dec sp
  87++0797              ;	dec sp
  88++0797              ;
  89++0797              ;	dec sp
  90++0797              ;	dec sp					; adjust stack because of our pushed "af"
  91++0797              ;							; HL, DE, BC, sp -> AF, XX, XX, new-ret-addr
  92++0797              ;	dec sp
  93++0797              ;	dec sp					; adjust stack because of our pushed "BC"
  94++0797              ;							; HL, DE, sp -> BC, AF, XX, XX, new-ret-addr
  95++0797              ;	dec sp
  96++0797              ;	dec sp					; adjust stack because of our pushed "DE"
  97++0797              ;							; HL, sp -> DE, BC, AF, XX, XX, new-ret-addr
  98++0797              ;	dec sp
  99++0797              ;	dec sp					; adjust stack because of our pushed "HL"
 100++0797              ;							; sp -> HL, DE, BC, AF, XX, XX, new-ret-addr
 101++0797              ;
 102++0797              ;	pop hl					; HL is restored
 103++0797              ;							; sp -> DE, BC, AF, XX, XX, new-ret-addr
 104++0797              ;	pop de					; DE is restored
 105++0797              ;							; sp -> BC, AF, XX, XX, new-ret-addr
 106++0797              ;	pop bc					; BC is restored
 107++0797              ;							; sp -> AF, XX, XX, new-ret-addr
 108++0797              ;	pop af					; we have restored af
 109++0797              ;							; sp -> XX, XX, new-ret-addr
 110++0797              ;
 111++0797              ;	inc sp
 112++0797              ;	inc sp
 113++0797              ;	inc sp
 114++0797              ;	inc sp
 115++0797              ;							; sp -> new-ret-addr
 116++0797              ;
 117++0797              ;	ret						; return to the instruction after the message
 118++0797
 119++0797              show_hl_as_hex:
 120++0797 7C               ld a, h
 121++0798 CD A0 07         call show_a_as_hex
 122++079B 7D               ld a, l
 123++079C CD A0 07         call show_a_as_hex
 124++079F C9               ret
 125++07A0
 126++07A0              show_a_as_hex:
 127++07A0 F5               push af
 128++07A1 CB 3F            srl a
 129++07A3 CB 3F            srl a
 130++07A5 CB 3F            srl a
 131++07A7 CB 3F            srl a
 132++07A9 C6 30            add a,'0'
 133++07AB FE 3A        	cp ':'
 134++07AD 38 02        	jr c, show_a_as_hex1
 135++07AF C6 07        	add a, 7
 136++07B1              show_a_as_hex1:
 137++07B1 CD D1 06         call print_a
 138++07B4 F1               pop af
 139++07B5 E6 0F            and %00001111
 140++07B7 C6 30            add a,'0'
 141++07B9 FE 3A        	cp ':'
 142++07BB 38 02        	jr c, show_a_as_hex2
 143++07BD C6 07        	add a, 7
 144++07BF              show_a_as_hex2:
 145++07BF CD D1 06         call print_a
 146++07C2 C9               ret
 147++07C3
 148++07C3              ;---------------------------------------------------
 149++07C3              ; show_all shows all the CPU registers!
 150++07C3
 151++07C3              show_all:
 152++07C3 ED 73 22 08  	ld (store_sp), sp
 153++07C7 F5           	push af
 154++07C8 E5           	push hl
 155++07C9 D5           	push de
 156++07CA C5           	push bc
 157++07CB
 158++07CB CD 82 07     	call message
 159++07CE 41 3D 00     	db 'A=',0
 160++07D1 CD A0 07     	call show_a_as_hex
 161++07D4
 162++07D4 E1           	pop hl
 163++07D5 CD 82 07     	call message
 164++07D8 2C 20 42 43  	db ', BC=',0
 164++07DC 3D 00
 165++07DE CD 97 07     	call show_hl_as_hex
 166++07E1 C5           	push bc
 167++07E2
 168++07E2 C1           	pop bc
 169++07E3 E1           	pop hl
 170++07E4 CD 82 07     	call message
 171++07E7 2C 20 44 45  	db ', DE=',0
 171++07EB 3D 00
 172++07ED CD 97 07     	call show_hl_as_hex
 173++07F0 D5           	push de
 174++07F1 C5           	push bc
 175++07F2
 176++07F2 C1           	pop bc
 177++07F3 D1           	pop de
 178++07F4 E1           	pop hl
 179++07F5 CD 82 07     	call message
 180++07F8 2C 20 48 4C  	db ', HL=',0
 180++07FC 3D 00
 181++07FE CD 97 07     	call show_hl_as_hex
 182++0801 E5           	push hl
 183++0802 D5           	push de
 184++0803 C5           	push bc
 185++0804
 186++0804 CD 82 07     	call message
 187++0807 2C 20 53 50  	db ', SP=',0
 187++080B 3D 00
 188++080D 2A 22 08     	ld hl, (store_sp)
 189++0810 CD 97 07     	call show_hl_as_hex
 190++0813
 191++0813 3E 0D        	ld a, 13
 192++0815 CD D1 06     	call print_a
 193++0818 3E 0A        	ld a, 10
 194++081A CD D1 06     	call print_a
 195++081D
 196++081D C1           	pop bc
 197++081E D1           	pop de
 198++081F E1           	pop hl
 199++0820 F1           	pop af
 200++0821 C9           	ret
 201++0822
 202++0822              store_sp:
 203++0822 00 00        	 ds 2
# file closed: message.asm
 908+ 0824                  include "memorystick.asm"
# file opened: memorystick.asm
   1++0824              ; memorystick.asm
   2++0824
   3++0824              store_de:
   4++0824 00 00            dw 0
   5++0826              store_a:
   6++0826 00               db 0
   7++0827              ;-----------------------------------------------------------------
   8++0827              ; For DIRectory listing, the filename is passed in the filename_buffer.
   9++0827              ; DE -> DMA AREA
  10++0827              ; a = Current User
  11++0827              ; It will be something like A/ffffffff.xxx
  12++0827              ; A result gets put into the area pointed to by DE, normally the DMA area, in 8.3 format
  13++0827              dir:
  14++0827 ED 53 24 08      ld (store_de), de
  15++082B 32 26 08         ld (store_a), a
  16++082E
  17++082E CD 53 07         call disk_on
  18++0831
  19++0831 21 A1 0E         ld hl, CPM_FOLDER_NAME                    ; Start at /CPM
  20++0834 CD 9B 0D         call open_file
  21++0837 21 AE 0E         ld hl, CPM_DISKS_NAME                    ; Then DISKS
  22++083A CD 9B 0D         call open_file
  23++083D
  24++083D 21 EB FF         ld hl, filename_buffer
  25++0840 7E               ld a, (hl)
  26++0841 21 E9 FF         ld hl, DRIVE_NAME                       ; Move to "A" .. "P" for required disk
  27++0844 77               ld (hl), a
  28++0845 23               inc hl
  29++0846 36 00            ld (hl), 0
  30++0848 2B               dec hl
  31++0849 CD 9B 0D         call open_file
  32++084C
  33++084C                  ; Now user number (if greater than 0)
  34++084C 3A 26 08         ld a, (store_a)
  35++084F FE 00            cp 0
  36++0851 28 0E            jr z, ignore_user
  37++0853
  38++0853 CD F5 0B         call convert_user_number_to_folder_name
  39++0856 21 E9 FF         ld hl, DRIVE_NAME                   ; Move to "1" .. "F" for required user
  40++0859 77               ld (hl), a
  41++085A 23               inc hl
  42++085B 36 00            ld (hl), 0
  43++085D 2B               dec hl
  44++085E CD 9B 0D         call open_file
  45++0861
  46++0861              ignore_user:
  47++0861 21 9F 0E         ld hl, STAR_DOT_STAR                    ; Specify search pattern "*"
  48++0864 CD 9B 0D         call open_file
  49++0867
  50++0867                  ; Read a file if there is something to read
  51++0867              dir_loop:
  52++0867                  ; at this point DE is in store_de, containing address of dma-area
  53++0867 FE 1D            cp USB_INT_DISK_READ
  54++0869 28 2E            jr z, dir_loop_good
  55++086B
  56++086B FE 42            cp ERR_MISS_FILE    ; This is what you normally get at the end of a dir listing
  57++086D 28 24            jr z, dir_no_file
  58++086F
  59++086F FE A1            cp ERR_BPB_ERROR    ; This means a disk format error
  60++0871 20 20            jr nz, dir_no_file
  61++0873
  62++0873 CD 82 07         call message
  63++0876 55 53 42 20      db 'USB Drive ERROR: FAT only!',13,10,0
  63++087A 44 72 69 76
  63++087E 65 20 45 52
  63++0882 52 4F 52 3A
  63++0886 20 46 41 54
  63++088A 20 6F 6E 6C
  63++088E 79 21 0D 0A
  63++0892 00
  64++0893              dir_no_file:
  65++0893 CD 4C 07         call disk_off
  66++0896 3E FF            ld a, 255
  67++0898 C9               ret
  68++0899
  69++0899              dir_loop_good:
  70++0899                  ; at this point DE is on stack, containing address of dma-area
  71++0899 3E 27            ld a, RD_USB_DATA0
  72++089B CD 4B 0E         call send_command_byte
  73++089E CD 54 0E         call read_data_byte                 ; Find out how many bytes there are to read
  74++08A1
  75++08A1 CD 5A 0E         call read_data_bytes_into_buffer    ; read them into disk_buffer
  76++08A4 FE 20            cp 32                               ; Did we read at least 32 bytes?
  77++08A6 30 03            jr nc, good_length
  78++08A8 C3 2B 09         jp dir_next
  79++08AB
  80++08AB              good_length:
  81++08AB                  ; at this point DE is in store_de, containing address of dma-area
  82++08AB                  ; Get the attributes for this entry. $02 = system, $04 = hidden, $10 = directory
  83++08AB CD 4C 07         call disk_off
  84++08AE 3A D0 FF         ld a, (disk_buffer+11)
  85++08B1 E6 16            and $16                         ; Check for hidden or system files, or directories
  86++08B3 CA B9 08         jp z, it_is_not_system
  87++08B6 C3 2B 09         jp dir_next                     ; and skip accordingly.
  88++08B9
  89++08B9              it_is_not_system:
  90++08B9                  ; Does it match the search pattern?
  91++08B9 06 0B            ld b, 11
  92++08BB 21 C5 FF         ld hl, disk_buffer
  93++08BE 11 ED FF         ld de, filename_buffer+2
  94++08C1              matching_loop:
  95++08C1                  ; If the filename_buffer has a '.' then skip over it
  96++08C1                  ; and move disk_buffer to start of extension
  97++08C1 1A               ld a, (de)
  98++08C2 FE 2E            cp '.'
  99++08C4 20 06            jr nz, matching_loop1
 100++08C6
 101++08C6 13               inc de
 102++08C7 21 CD FF         ld hl, disk_buffer+8
 103++08CA 06 03            ld b, 3
 104++08CC
 105++08CC              matching_loop1
 106++08CC 1A               ld a, (de)
 107++08CD FE 3F            cp '?'
 108++08CF 28 05            jr z, matching_loop_good
 109++08D1 BE               cp (hl)
 110++08D2 28 02            jr z, matching_loop_good
 111++08D4 18 55            jr dir_next
 112++08D6
 113++08D6              matching_loop_good:
 114++08D6 13               inc de
 115++08D7 23               inc hl
 116++08D8 10 E7            djnz matching_loop
 117++08DA
 118++08DA                  ; Copy 11 byte filename + extension
 119++08DA 01 0B 00         ld bc, 11
 120++08DD 21 C5 FF         ld hl, disk_buffer
 121++08E0 ED 5B 24 08      ld de, (store_de)
 122++08E4
 123++08E4                  ; The Usernumber goes into the first byte of the FCB
 124++08E4 3A 26 08         ld a, (store_a)
 125++08E7 E6 0F            and %00001111
 126++08E9 12               ld (de), a                      ; Store user number in FCB result
 127++08EA 13               inc de
 128++08EB ED B0            ldir                            ; Copy filename & extension
 129++08ED
 130++08ED                  ; Fill in a few more details. File size into normal place, plus random record info.
 131++08ED                  ; The filesize is a 32 bit number in FAT_DIR_INFO at loc $1C, 1D, 1E and 1F.
 132++08ED                  ; We want it in 128 byte sectors, so need to divide by 128.
 133++08ED 21 E1 FF         ld hl, disk_buffer+$1C
 134++08F0 5E               ld e, (hl)
 135++08F1 23               inc hl
 136++08F2 56               ld d, (hl)
 137++08F3 23               inc hl
 138++08F4 4E               ld c, (hl)
 139++08F5 23               inc hl
 140++08F6 46               ld b, (hl)                          ; BCDE has file size
 141++08F7 EB               ex de, hl                           ; 32-bit filesize now in BCHL
 142++08F8
 143++08F8                  ; Divide by 128
 144++08F8 CB 25            sla l                               ; Shift all left by 1 bit
 145++08FA CB 14            rl h
 146++08FC CB 11            rl c
 147++08FE CB 10            rl b
 148++0900
 149++0900 6C               ld l, h
 150++0901 61               ld h, c
 151++0902 48               ld c, b
 152++0903 06 00            ld b, 0                             ; We've shifted right 8 bits, so effectively divided by 128!
 153++0905
 154++0905 ED 5B 24 08      ld de, (store_de)
 155++0909
 156++0909 C5               push bc                             ; Store the size that is in bchl
 157++090A E5               push hl
 158++090B CD A5 0B         call set_random_pointer_in_fcb      ; store hl in FCB random pointer (bc is thrown away!)
 159++090E E1               pop hl
 160++090F C1               pop bc                              ; restore bchl
 161++0910
 162++0910 EB               ex de, hl                           ; hl = fcb, bcde = filesize
 163++0911 2A 24 08         ld hl, (store_de)
 164++0914 CD B4 0B         call set_file_size_in_fcb
 165++0917
 166++0917                  ; Clear all 16 disk allocation bytes. TODO: Actually, fill with sensible values
 167++0917 ED 5B 24 08      ld de, (store_de)
 168++091B 21 10 00         ld hl, 16
 169++091E 19               add hl, de
 170++091F EB               ex de, hl
 171++0920 06 14            ld b, 16+4
 172++0922 3E 00            ld a, 0
 173++0924              clear_allocation_loop:
 174++0924 12               ld (de), a
 175++0925 13               inc de
 176++0926 10 FC            djnz clear_allocation_loop
 177++0928              good_length1:
 178++0928 3E 00            ld a, 0                                 ; 0 = success
 179++092A C9               ret
 180++092B
 181++092B              dir_next:
 182++092B 3E 33            ld a, FILE_ENUM_GO                      ; Go to next entry in the directory
 183++092D CD 4B 0E         call send_command_byte
 184++0930 CD 90 0E         call read_status_byte
 185++0933 C3 67 08         jp dir_loop
 186++0936
 187++0936              ;-----------------------------------------
 188++0936              ; Load bin File
 189++0936              ; The filename needs to be in the filename buffer.
 190++0936              ; The file must be in the /CPM folder.
 191++0936              ; DE points to the location to load it into.
 192++0936              ; The file is loaded into the workspace.
 193++0936              ; There is no check whether the file is too big!!!!
 194++0936              ; Returns zero flag set if success, zero flag cleared on file-not-found.
 195++0936
 196++0936              load_bin_file:
 197++0936 D5               push de                             ; Store target location for later
 198++0937 CD 53 07         call disk_on
 199++093A CD C1 0C         call connect_to_disk
 200++093D CD F0 0C         call mount_disk
 201++0940
 202++0940 21 A1 0E         ld hl, CPM_FOLDER_NAME              ; Start at /CPM
 203++0943 CD 9B 0D         call open_file
 204++0946
 205++0946 21 EB FF         ld hl, filename_buffer              ; Specify filename
 206++0949 CD 9B 0D         call open_file
 207++094C
 208++094C 28 2B            jr z, load_file_found
 209++094E CD 4C 07         call disk_off
 210++0951 CD 82 07         call message
 211++0954 46 69 6C 65      db 'File not found ',0
 211++0958 20 6E 6F 74
 211++095C 20 66 6F 75
 211++0960 6E 64 20 00
 212++0964 21 EB FF         ld hl, filename_buffer
 213++0967              load_file1:
 214++0967 7E               ld a, (hl)
 215++0968 FE 00            cp 0
 216++096A 28 06            jr z, load_file2
 217++096C CD D1 06         call print_a
 218++096F 23               inc hl
 219++0970 18 F5            jr load_file1
 220++0972              load_file2:
 221++0972 CD 07 07         call newline
 222++0975 D1               pop de                              ; Keep stack clear!
 223++0976 F6 01            or 1                                ; Clear zero flag for failure
 224++0978 C9               ret
 225++0979              load_file_found:
 226++0979 CD 4C 07         call disk_off
 227++097C 3E 3A            ld a, BYTE_READ
 228++097E CD 4B 0E         call send_command_byte
 229++0981 3E FF            ld a, 255                           ; Request all of the file
 230++0983 CD 2F 0E         call send_data_byte
 231++0986 3E FF            ld a, 255                           ; Yes, all!
 232++0988 CD 2F 0E         call send_data_byte
 233++098B
 234++098B 3E 22            ld a, GET_STATUS
 235++098D CD 4B 0E         call send_command_byte
 236++0990 CD 54 0E         call read_data_byte
 237++0993 E1               pop hl                              ; Get back the target address
 238++0994              load_loop1:
 239++0994 FE 1D            cp USB_INT_DISK_READ
 240++0996 20 25            jr nz, load_finished
 241++0998
 242++0998 E5               push hl
 243++0999 CD 53 07         call disk_on
 244++099C 3E 27            ld a, RD_USB_DATA0
 245++099E CD 4B 0E         call send_command_byte
 246++09A1 CD 54 0E         call read_data_byte
 247++09A4 E1               pop hl
 248++09A5 CD 5D 0E         call read_data_bytes_into_hl        ; Read this block of data
 249++09A8 E5               push hl
 250++09A9 CD 4C 07         call disk_off
 251++09AC 3E 3B            ld a, BYTE_RD_GO
 252++09AE CD 4B 0E         call send_command_byte
 253++09B1 3E 22            ld a, GET_STATUS
 254++09B3 CD 4B 0E         call send_command_byte
 255++09B6 CD 54 0E         call read_data_byte
 256++09B9 E1               pop hl
 257++09BA C3 94 09         jp load_loop1
 258++09BD              load_finished:
 259++09BD E5               push hl
 260++09BE CD AE 0D         call close_file
 261++09C1 E1               pop hl
 262++09C2 BF               cp a                                ; set zero flag for success
 263++09C3 C9               ret
 264++09C4
 265++09C4              ; ---------------------------------
 266++09C4              ; Directory info read.
 267++09C4              ; Reads a directory entry (of the currently open file) into disk_buffer
 268++09C4              ; Returns ZERO FLAG = set if ok
 269++09C4              dir_info_read:
 270++09C4 3E 37            ld a, DIR_INFO_READ
 271++09C6 CD 4B 0E         call send_command_byte
 272++09C9 3E FF            ld a, $FF                           ; Current open file
 273++09CB CD 2F 0E         call send_data_byte
 274++09CE
 275++09CE CD 90 0E         call read_status_byte
 276++09D1 FE 14            cp USB_INT_SUCCESS
 277++09D3 C0               ret nz
 278++09D4
 279++09D4 3E 27            ld a, RD_USB_DATA0
 280++09D6 CD 4B 0E         call send_command_byte
 281++09D9 CD 54 0E         call read_data_byte                 ; Find out how many bytes there are to read
 282++09DC
 283++09DC CD 5A 0E         call read_data_bytes_into_buffer
 284++09DF FE 20            cp $20                              ; Must have read 32 bytes
 285++09E1 C0               ret nz                              ; or else it is an error
 286++09E2              ;     call message
 287++09E2              ;     db 'Read this many bytes: ',0
 288++09E2              ;     call show_a_as_hex
 289++09E2              ;     call newline
 290++09E2
 291++09E2              ;     ld b, $20
 292++09E2              ;     ld hl, disk_buffer
 293++09E2              ; dir_info_read1:
 294++09E2              ;     ld a, (hl)
 295++09E2              ;     push hl
 296++09E2              ;     push bc
 297++09E2              ;     call show_a_as_hex
 298++09E2              ;     ld a, ','
 299++09E2              ;     call print_a
 300++09E2              ;     pop bc
 301++09E2              ;     pop hl
 302++09E2              ;     inc hl
 303++09E2              ;     djnz dir_info_read1
 304++09E2              ;     call newline
 305++09E2
 306++09E2 BF               cp a                                ; set zero flag for success
 307++09E3 C9               ret
 308++09E4
 309++09E4              ; DIR_INFO_WRITE
 310++09E4              ; writes a dir_info block from disk_buffer to the USB drive
 311++09E4              ; for the currently open file
 312++09E4              dir_info_write:
 313++09E4 3E 37            ld a, DIR_INFO_READ
 314++09E6 CD 4B 0E         call send_command_byte
 315++09E9 3E FF            ld a, $FF                           ; Current open file
 316++09EB CD 2F 0E         call send_data_byte
 317++09EE
 318++09EE CD 90 0E         call read_status_byte
 319++09F1                  ;call report_on_status
 320++09F1 FE 14            cp USB_INT_SUCCESS
 321++09F3 20 28            jr nz, dir_info_write2
 322++09F5
 323++09F5 3E 2E            ld a, WR_OFS_DATA
 324++09F7 CD 4B 0E         call send_command_byte
 325++09FA 3E 00            ld a, 0
 326++09FC CD 2F 0E         call send_data_byte
 327++09FF 3E 20            ld a, $20
 328++0A01 CD 2F 0E         call send_data_byte
 329++0A04 06 20            ld b, $20
 330++0A06 21 C5 FF         ld hl, disk_buffer
 331++0A09              dir_info_write1:
 332++0A09 7E               ld a, (hl)
 333++0A0A E5               push hl
 334++0A0B C5               push bc
 335++0A0C CD 2F 0E         call send_data_byte
 336++0A0F C1               pop bc
 337++0A10 E1               pop hl
 338++0A11 23               inc hl
 339++0A12 10 F5            djnz dir_info_write1
 340++0A14
 341++0A14 3E 38            ld a, DIR_INFO_SAVE
 342++0A16 CD 4B 0E         call send_command_byte
 343++0A19 CD 54 0E         call read_data_byte
 344++0A1C                  ;call report_on_status
 345++0A1C C9               ret
 346++0A1D
 347++0A1D              dir_info_write2:
 348++0A1D C9               ret
 349++0A1E
 350++0A1E              ;----------------------------------
 351++0A1E              ; WRITE TO FILE
 352++0A1E
 353++0A1E              write_to_file:
 354++0A1E                  ; writes 128 bytes from current location pointed to by DE, to the open file
 355++0A1E D5               push de
 356++0A1F 3E 3C            ld a, BYTE_WRITE
 357++0A21 CD 4B 0E         call send_command_byte
 358++0A24
 359++0A24                  ; Send number of bytes we are about to write, as 16 bit number, low first
 360++0A24 3E 80            ld a, 128
 361++0A26 CD 2F 0E         call send_data_byte
 362++0A29 3E 00            ld a, 0
 363++0A2B CD 2F 0E         call send_data_byte
 364++0A2E
 365++0A2E E1               pop hl                              ; hl -> the data
 366++0A2F
 367++0A2F              write_loop
 368++0A2F CD 90 0E         call read_status_byte
 369++0A32 FE 1E            cp USB_INT_DISK_WRITE
 370++0A34 20 24            jr nz, write_finished
 371++0A36
 372++0A36 E5               push hl
 373++0A37                  ; Ask if we can send some bytes
 374++0A37 3E 2D            ld a, WR_REQ_DATA
 375++0A39 CD 4B 0E         call send_command_byte
 376++0A3C CD 54 0E         call read_data_byte
 377++0A3F E1               pop hl
 378++0A40 FE 00            cp 0
 379++0A42 28 16            jr z, write_finished
 380++0A44
 381++0A44                  ; push hl
 382++0A44                  ; push af
 383++0A44                  ; call message
 384++0A44                  ; db 'Bytes to send: ',0
 385++0A44                  ; pop af
 386++0A44                  ; push af
 387++0A44                  ; call show_a_as_hex
 388++0A44                  ; call newline
 389++0A44                  ; pop af
 390++0A44                  ; pop hl
 391++0A44
 392++0A44 47               ld b, a
 393++0A45              block_loop:
 394++0A45 7E               ld a, (hl)
 395++0A46 E5               push hl
 396++0A47 C5               push bc
 397++0A48 CD 2F 0E         call send_data_byte
 398++0A4B C1               pop bc
 399++0A4C E1               pop hl
 400++0A4D 23               inc hl
 401++0A4E 10 F5            djnz block_loop
 402++0A50
 403++0A50 E5               push hl
 404++0A51 3E 3D            ld a, BYTE_WR_GO
 405++0A53 CD 4B 0E         call send_command_byte
 406++0A56 E1               pop hl
 407++0A57 C3 2F 0A         jp write_loop
 408++0A5A
 409++0A5A              write_finished:
 410++0A5A C9               ret
 411++0A5B
 412++0A5B
 413++0A5B              ;-------------------------------------------
 414++0A5B              ; ERASE FILE
 415++0A5B
 416++0A5B              erase_file:
 417++0A5B 3E 2F            ld a, SET_FILE_NAME
 418++0A5D CD 4B 0E         call send_command_byte
 419++0A60 21 EB FF         ld hl, filename_buffer
 420++0A63 CD 35 0E         call send_data_string
 421++0A66 3E 35            ld a, FILE_ERASE
 422++0A68 CD 4B 0E         call send_command_byte
 423++0A6B CD 90 0E         call read_status_byte
 424++0A6E C9               ret
 425++0A6F
 426++0A6F              show_filename_buffer:
 427++0A6F 21 EB FF         ld hl, filename_buffer
 428++0A72 06 14            ld b, 20
 429++0A74              show_filename_buffer1:
 430++0A74 7E               ld a, (hl)
 431++0A75 FE 20            cp 32
 432++0A77 38 0A            jr c, control_char
 433++0A79              show_filename_buffer2
 434++0A79 CD D1 06         call print_a
 435++0A7C 23               inc hl
 436++0A7D 10 F5            djnz show_filename_buffer1
 437++0A7F CD 07 07         call newline
 438++0A82 C9               ret
 439++0A83
 440++0A83              control_char:
 441++0A83 C6 40            add a, 64
 442++0A85 4F               ld c, a
 443++0A86 3E 5E            ld a, '^'
 444++0A88 CD D1 06         call print_a
 445++0A8B 79               ld a, c
 446++0A8C 18 EB            jr show_filename_buffer2
 447++0A8E
 448++0A8E              check_tbasic_structure:
 449++0A8E                  ; Check that there is a /TBASIC folder
 450++0A8E                  ; and if not, make it!
 451++0A8E CD 82 07         call message
 452++0A91 43 68 65 63      db 'Checking /TBASIC',13,10,0
 452++0A95 6B 69 6E 67
 452++0A99 20 2F 54 42
 452++0A9D 41 53 49 43
 452++0AA1 0D 0A 00
 453++0AA4
 454++0AA4 21 A6 0E         ld hl, TINY_BASIC_FOLDER_NAME
 455++0AA7 CD 23 0E         call copy_filename_to_buffer
 456++0AAA 21 EB FF         ld hl, filename_buffer
 457++0AAD CD 9B 0D         call open_file
 458++0AB0 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 459++0AB2 C8               ret z                               ; If found, job done.
 460++0AB3 CD BC 0D         call create_directory
 461++0AB6 C8               ret z                               ; If created ok, job done.
 462++0AB7 CD 82 07         call message
 463++0ABA 45 52 52 4F      db 'ERROR creating Tiny Basic folder!',13,10,0
 463++0ABE 52 20 63 72
 463++0AC2 65 61 74 69
 463++0AC6 6E 67 20 54
 463++0ACA 69 6E 79 20
 463++0ACE 42 61 73 69
 463++0AD2 63 20 66 6F
 463++0AD6 6C 64 65 72
 463++0ADA 21 0D 0A 00
 464++0ADE C9               ret
 465++0ADF
 466++0ADF              check_cpmdisks_structure:
 467++0ADF                  ; Check that we have a disk structure like this:
 468++0ADF                  ; /CPMDISKS
 469++0ADF                  ;          /A
 470++0ADF                  ;          /B
 471++0ADF                  ;          /C
 472++0ADF                  ;          :
 473++0ADF                  ;          /P
 474++0ADF
 475++0ADF                  ; Loop over A..P
 476++0ADF 06 10            ld b, 16
 477++0AE1              check_cpmdisk_loop:
 478++0AE1 C5               push bc
 479++0AE2                  ; Go to /CPM
 480++0AE2 CD 82 07         call message
 481++0AE5 43 68 65 63      db 'Checking /CPM',13,10,0
 481++0AE9 6B 69 6E 67
 481++0AED 20 2F 43 50
 481++0AF1 4D 0D 0A 00
 482++0AF5
 483++0AF5 21 A1 0E         ld hl, CPM_FOLDER_NAME
 484++0AF8 CD 23 0E         call copy_filename_to_buffer
 485++0AFB 21 EB FF         ld hl, filename_buffer
 486++0AFE CD 9B 0D         call open_file
 487++0B01 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 488++0B03 20 42            jr nz, check_cpmdisks_structure2
 489++0B05
 490++0B05 CD 82 07         call message
 491++0B08 43 68 65 63      db 'Checking /CPM/DISKS',13,10,0
 491++0B0C 6B 69 6E 67
 491++0B10 20 2F 43 50
 491++0B14 4D 2F 44 49
 491++0B18 53 4B 53 0D
 491++0B1C 0A 00
 492++0B1E 21 AE 0E         ld hl, CPM_DISKS_NAME
 493++0B21 CD 23 0E         call copy_filename_to_buffer
 494++0B24 21 EB FF         ld hl, filename_buffer
 495++0B27 CD 9B 0D         call open_file
 496++0B2A FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 497++0B2C 20 19            jr nz, check_cpmdisks_structure2
 498++0B2E
 499++0B2E C1               pop bc
 500++0B2F C5               push bc
 501++0B30 78               ld a, b
 502++0B31 C6 40            add a, 'A'-1
 503++0B33 32 EB FF         ld (filename_buffer), a
 504++0B36 3E 00            ld a, 0
 505++0B38 32 EC FF         ld (filename_buffer+1),a
 506++0B3B 21 EB FF         ld hl, filename_buffer
 507++0B3E CD 9B 0D         call open_file
 508++0B41 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 509++0B43 20 0B            jr nz, check_cpmdisks_structure3
 510++0B45
 511++0B45 C1               pop bc                              ; Let's say if we find disk "P" then they are all there!!!
 512++0B46                  ;djnz check_cpmdisk_loop
 513++0B46
 514++0B46 C9               ret
 515++0B47
 516++0B47              check_cpmdisks_structure2:
 517++0B47 C1               pop bc
 518++0B48                  ; Try to create the missing folder
 519++0B48                  ;ld hl, CPMDISKS_NAME
 520++0B48                  ;call copy_filename_to_buffer
 521++0B48 CD BC 0D         call create_directory
 522++0B4B 20 0D            jr nz, check_cpmdisks_structure_fail
 523++0B4D
 524++0B4D                  ; Start all over again
 525++0B4D C3 DF 0A         jp check_cpmdisks_structure
 526++0B50
 527++0B50              check_cpmdisks_structure3:
 528++0B50 CD BC 0D         call create_directory
 529++0B53 20 04            jr nz, check_cpmdisks_subdir_fail
 530++0B55 C1               pop bc                                          ; All good, so do the next subdir
 531++0B56 C3 E1 0A         jp check_cpmdisk_loop
 532++0B59
 533++0B59              check_cpmdisks_subdir_fail:
 534++0B59 C1               pop bc
 535++0B5A                  ; Continue through to the next bit...
 536++0B5A              check_cpmdisks_structure_fail:
 537++0B5A CD 82 07         call message
 538++0B5D 45 52 52 4F      db 'ERROR creating CP/M disks!',13,10,0
 538++0B61 52 20 63 72
 538++0B65 65 61 74 69
 538++0B69 6E 67 20 43
 538++0B6D 50 2F 4D 20
 538++0B71 64 69 73 6B
 538++0B75 73 21 0D 0A
 538++0B79 00
 539++0B7A C9               ret
 540++0B7B
 541++0B7B              move_to_file_pointer:
 542++0B7B                  ; Set the BYTE_LOCATE file position in the currently open file.
 543++0B7B                  ; Value is passed in bcde.
 544++0B7B C5               push bc
 545++0B7C D5               push de
 546++0B7D 3E 39            ld a, BYTE_LOCATE
 547++0B7F CD 4B 0E         call send_command_byte
 548++0B82 D1               pop de
 549++0B83 D5               push de
 550++0B84 7B               ld a, e
 551++0B85 CD 2F 0E         call send_data_byte
 552++0B88 D1               pop de
 553++0B89 7A               ld a, d
 554++0B8A CD 2F 0E         call send_data_byte
 555++0B8D C1               pop bc
 556++0B8E C5               push bc
 557++0B8F 79               ld a, c
 558++0B90 CD 2F 0E         call send_data_byte
 559++0B93 C1               pop bc
 560++0B94 78               ld a, b
 561++0B95 CD 2F 0E         call send_data_byte
 562++0B98 CD 90 0E         call read_status_byte
 563++0B9B FE 14            cp USB_INT_SUCCESS
 564++0B9D 20 03            jr nz, move_to_file_pointer_fail        ; We expect USB_INT_SUCCESS here
 565++0B9F
 566++0B9F 3E 14            ld a, USB_INT_SUCCESS                   ; Return success
 567++0BA1 C9               ret
 568++0BA2              move_to_file_pointer_fail:
 569++0BA2 3E 1F            ld a, USB_INT_DISK_ERR                  ; Return fail
 570++0BA4 C9               ret
 571++0BA5
 572++0BA5              set_random_pointer_in_fcb:
 573++0BA5                  ; pass in de -> fcb
 574++0BA5                  ; Pass hl = random pointer value
 575++0BA5                  ; Random pointer goes to fcb + 33 & 34. fcb + 35 gets 0.
 576++0BA5                  ; preserve de
 577++0BA5 D5               push de
 578++0BA6 EB               ex de, hl
 579++0BA7 01 21 00         ld bc, 33
 580++0BAA 09               add hl, bc
 581++0BAB 73               ld (hl), e
 582++0BAC 23               inc hl
 583++0BAD 72               ld (hl), d
 584++0BAE 23               inc hl
 585++0BAF 36 00            ld (hl), 0
 586++0BB1 EB               ex de, hl
 587++0BB2 D1               pop de
 588++0BB3 C9               ret
 589++0BB4
 590++0BB4              set_file_size_in_fcb:
 591++0BB4                  ; Pass HL -> FCB (Note that this is an unusual way to pass it in)
 592++0BB4                  ; Pass file pointer (in 128-byte records) in bcde.
 593++0BB4                  ; Preserves hl
 594++0BB4
 595++0BB4                  ; The following details are from http://www.primrosebank.net/computers/cpm/cpm_software_mfs.htm
 596++0BB4                  ; RC = record counter, goes from 0 to $80. $80 means full, and represents 128*128=16K.
 597++0BB4                  ; EX = 0 for files < 16K, otherwise 1 - 31 for Extents of 16K each.
 598++0BB4                  ; S2 = high byte for the EXc ounter, so if EX wants to be bigger than 31, overflow it into here.
 599++0BB4
 600++0BB4                  ; Split bcde into S2, EX & RC.
 601++0BB4                  ; To do this:
 602++0BB4                  ; RC = e & %0111 1111               (i.e. a number 0..127)
 603++0BB4                  ; Divide bcde by 128                (Shift right 7 bits, or shift left 1 bit then right 8)
 604++0BB4                  ; EX = e & %0001 1111               (i.e. it has a max of 31)
 605++0BB4                  ; Shift left 3 places
 606++0BB4                  ; S2 = d
 607++0BB4
 608++0BB4                  ; RC = e & %0111 1111
 609++0BB4 E5               push hl
 610++0BB5 7B               ld a, e
 611++0BB6 E6 7F            and %01111111                       ; RC is in A
 612++0BB8
 613++0BB8 CB 23            sla e                               ; Shift all left by 1 bit
 614++0BBA CB 12            rl d
 615++0BBC CB 11            rl c
 616++0BBE CB 10            rl b
 617++0BC0
 618++0BC0 5A               ld e, d                             ; Shift all right by 8 bits
 619++0BC1 51               ld d, c
 620++0BC2 48               ld c, b
 621++0BC3 06 00            ld b, 0                             ; We've effectively shifted right by 7 bits
 622++0BC5
 623++0BC5 01 0F 00         ld bc, 15                           ; ex is as FCB+12, s2 is at FCB+14, rc is at FCB + 15
 624++0BC8 09               add hl, bc                          ; hl -> FCB.RC
 625++0BC9 77               ld (hl), a                          ; RC is now stored in FCB
 626++0BCA
 627++0BCA 2B               dec hl
 628++0BCB 2B               dec hl
 629++0BCC 2B               dec hl                              ; hl -> FCB.EX
 630++0BCD 7B               ld a, e
 631++0BCE E6 1F            and %00011111                       ; EX is in A
 632++0BD0 77               ld (hl), a
 633++0BD1
 634++0BD1 CB 23            sla e                               ; Shift all left by 1 bit
 635++0BD3 CB 12            rl d
 636++0BD5 CB 11            rl c
 637++0BD7 CB 10            rl b
 638++0BD9 CB 23            sla e                               ; Shift all left by 1 bit
 639++0BDB CB 12            rl d
 640++0BDD CB 11            rl c
 641++0BDF CB 10            rl b
 642++0BE1 CB 23            sla e                               ; Shift all left by 1 bit
 643++0BE3 CB 12            rl d
 644++0BE5 CB 11            rl c
 645++0BE7 CB 10            rl b
 646++0BE9
 647++0BE9 23               inc hl
 648++0BEA 3E 00            ld a, 0
 649++0BEC 36 00            ld (hl), 0                          ; Blank out the mystery byte called "unused"
 650++0BEE 23               inc hl                              ; hl -> FCB.S2
 651++0BEF
 652++0BEF 7A               ld a, d
 653++0BF0 E6 1F            and %00011111                       ; S2 is in A
 654++0BF2 77               ld (hl), a
 655++0BF3
 656++0BF3 E1               pop hl
 657++0BF4 C9               ret
 658++0BF5
 659++0BF5              convert_user_number_to_folder_name:
 660++0BF5                  ; Pass in 1 to 15 in A.
 661++0BF5                  ; This returns "1" to "F"
 662++0BF5 E6 0F            and %00001111
 663++0BF7 C6 30            add a, '0'                             ; Convert 1-9 => "1".."9"
 664++0BF9 FE 3A            cp ':'
 665++0BFB D8               ret c
 666++0BFC C6 07            add a, 7
 667++0BFE C9               ret
 668++0BFF
 669++0BFF                  include "memorystick_low_level.asm"
# file opened: memorystick_low_level.asm
   1++0BFF              ; memorystick_low_level.asm
   2++0BFF              ;--------------------;
   3++0BFF              ; LOW LEVEL ROUTINES ;
   4++0BFF              ;--------------------;
   5++0BFF
   6++0BFF              configure_memorystick:
   7++0BFF 06 05            ld b, 5                                 ; Have 5 attempts at configuring the module before giving up
   8++0C01              configure_memorystick1:
   9++0C01 C5               push bc
  10++0C02 CD 7D 0D         call connect_to_usb_drive
  11++0C05 20 08            jr nz, failed_to_setup
  12++0C07 CD C1 0C         call connect_to_disk
  13++0C0A CD F0 0C         call mount_disk
  14++0C0D C1               pop bc
  15++0C0E C9               ret
  16++0C0F              failed_to_setup:
  17++0C0F CD 32 07         call long_pause
  18++0C12 CD 32 07         call long_pause
  19++0C15 CD 32 07         call long_pause
  20++0C18 CD 32 07         call long_pause
  21++0C1B C1               pop bc
  22++0C1C 10 E3            djnz configure_memorystick1
  23++0C1E CD 82 07         call message
  24++0C21 43 48 33 37      db 'CH376S error.',13,10,0
  24++0C25 36 53 20 65
  24++0C29 72 72 6F 72
  24++0C2D 2E 0D 0A 00
  25++0C31 C9               ret
  26++0C32
  27++0C32              ;----------------------------------------------------------------
  28++0C32              ; Call this once at startup
  29++0C32              reset_ch376_module:
  30++0C32 3E 05            ld a, RESET_ALL
  31++0C34 CD 4B 0E         call send_command_byte
  32++0C37 CD 32 07         call long_pause
  33++0C3A CD 32 07         call long_pause
  34++0C3D C9               ret
  35++0C3E
  36++0C3E              ;-----------------------------------------------------------------
  37++0C3E              check_module_exists:
  38++0C3E 3E 06            ld a, CHECK_EXIST
  39++0C40 CD 4B 0E         call send_command_byte
  40++0C43
  41++0C43 3E 7B            ld a, 123               ; We send an arbitrary number
  42++0C45 CD 2F 0E         call send_data_byte
  43++0C48
  44++0C48 CD 54 0E         call read_data_byte
  45++0C4B
  46++0C4B FE 84            cp 255-123      ; The result is 255 minus what we sent in
  47++0C4D C8               ret z
  48++0C4E CD 82 07         call message
  49++0C51 45 52 52 4F      db 'ERROR: CH376S module not found.',13,10,0
  49++0C55 52 3A 20 43
  49++0C59 48 33 37 36
  49++0C5D 53 20 6D 6F
  49++0C61 64 75 6C 65
  49++0C65 20 6E 6F 74
  49++0C69 20 66 6F 75
  49++0C6D 6E 64 2E 0D
  49++0C71 0A 00
  50++0C73 C9               ret
  51++0C74
  52++0C74              ;-----------------------------------------------------------------
  53++0C74              get_module_version:
  54++0C74 3E 01            ld a, GET_IC_VER
  55++0C76 CD 4B 0E         call send_command_byte
  56++0C79
  57++0C79 CD 54 0E         call read_data_byte
  58++0C7C E6 1F            and %00011111
  59++0C7E
  60++0C7E CD 82 07         call message
  61++0C81 46 6F 75 6E      db 'Found CH376S v',0 ; Mine is v3!!!
  61++0C85 64 20 43 48
  61++0C89 33 37 36 53
  61++0C8D 20 76 00
  62++0C90 CD A0 07         call show_a_as_hex
  63++0C93 CD 07 07         call newline
  64++0C96 C9               ret
  65++0C97
  66++0C97              ;-----------------------------------------------------------------
  67++0C97              set_usb_host_mode:
  68++0C97 3E 15            ld a, SET_USB_MODE
  69++0C99 CD 4B 0E         call send_command_byte
  70++0C9C 3E 06            ld a, 6
  71++0C9E CD 2F 0E         call send_data_byte
  72++0CA1 CD 90 0E         call read_status_byte
  73++0CA4 FE 15            cp USB_INT_CONNECT
  74++0CA6 C8               ret z
  75++0CA7 CD 82 07         call message
  76++0CAA 45 52 52 4F      db 'ERROR: No USB Disk?',13,10,0
  76++0CAE 52 3A 20 4E
  76++0CB2 6F 20 55 53
  76++0CB6 42 20 44 69
  76++0CBA 73 6B 3F 0D
  76++0CBE 0A 00
  77++0CC0 C9               ret
  78++0CC1
  79++0CC1              ;-----------------------------------------------------------------
  80++0CC1              connect_to_disk:
  81++0CC1 3E 30            ld a, DISK_CONNECT
  82++0CC3 CD 4B 0E         call send_command_byte
  83++0CC6 3E 22            ld a, GET_STATUS
  84++0CC8 CD 90 0E         call read_status_byte
  85++0CCB C8               ret z
  86++0CCC CD 82 07         call message
  87++0CCF 45 52 52 4F      db 'ERROR connecting to USB Disk.',13,10,0
  87++0CD3 52 20 63 6F
  87++0CD7 6E 6E 65 63
  87++0CDB 74 69 6E 67
  87++0CDF 20 74 6F 20
  87++0CE3 55 53 42 20
  87++0CE7 44 69 73 6B
  87++0CEB 2E 0D 0A 00
  88++0CEF C9               ret
  89++0CF0
  90++0CF0              ;-----------------------------------------------------------------
  91++0CF0              mount_disk:
  92++0CF0 3E 31            ld a, DISK_MOUNT
  93++0CF2 CD 4B 0E         call send_command_byte
  94++0CF5 3E 22            ld a, GET_STATUS
  95++0CF7 CD 90 0E         call read_status_byte
  96++0CFA C8               ret z
  97++0CFB CD 82 07         call message
  98++0CFE 45 52 52 4F      db 'ERROR mounting USB Disk.',13,10,0
  98++0D02 52 20 6D 6F
  98++0D06 75 6E 74 69
  98++0D0A 6E 67 20 55
  98++0D0E 53 42 20 44
  98++0D12 69 73 6B 2E
  98++0D16 0D 0A 00
  99++0D19 C9               ret
 100++0D1A
 101++0D1A              ;-----------------------------------------------------------------
 102++0D1A              read_disk_signature:
 103++0D1A 3E 27            ld a, RD_USB_DATA0
 104++0D1C CD 4B 0E         call send_command_byte
 105++0D1F CD 54 0E         call read_data_byte                 ; A = length of bytes to now read
 106++0D22 FE 24            cp 36
 107++0D24 20 39            jr nz, could_not_read_disk_sig
 108++0D26
 109++0D26                  ; Ignore the first 8 bytes
 110++0D26 06 08            ld b, 8
 111++0D28              read_disk_signature1:
 112++0D28 C5               push bc
 113++0D29 CD 57 0E         call read_data_byte_silent
 114++0D2C C1               pop bc
 115++0D2D 10 F9            djnz read_disk_signature1
 116++0D2F
 117++0D2F                  ; Display the next 8 bytes (Manufacturer)
 118++0D2F 06 08            ld b, 8
 119++0D31              read_disk_signature2:
 120++0D31 C5               push bc
 121++0D32 CD 57 0E         call read_data_byte_silent
 122++0D35 CD D1 06         call print_a
 123++0D38 C1               pop bc
 124++0D39 10 F6            djnz read_disk_signature2
 125++0D3B CD 07 07         call newline
 126++0D3E
 127++0D3E                  ; Display the next 16 bytes (Model)
 128++0D3E 06 10            ld b, 16
 129++0D40              read_disk_signature3:
 130++0D40 C5               push bc
 131++0D41 CD 57 0E         call read_data_byte_silent
 132++0D44 CD D1 06         call print_a
 133++0D47 C1               pop bc
 134++0D48 10 F6            djnz read_disk_signature3
 135++0D4A
 136++0D4A 3E 20            ld a, ' '
 137++0D4C CD D1 06         call print_a
 138++0D4F
 139++0D4F                  ; Display the next 4 bytes (Version)
 140++0D4F 06 04            ld b, 4
 141++0D51              read_disk_signature4:
 142++0D51 C5               push bc
 143++0D52 CD 57 0E         call read_data_byte_silent
 144++0D55 CD D1 06         call print_a
 145++0D58 C1               pop bc
 146++0D59 10 F6            djnz read_disk_signature4
 147++0D5B CD 07 07         call newline
 148++0D5E C9               ret
 149++0D5F
 150++0D5F              could_not_read_disk_sig:
 151++0D5F CD 82 07         call message
 152++0D62 45 52 52 4F      db 'ERROR reading disk sig.',13,10,0
 152++0D66 52 20 72 65
 152++0D6A 61 64 69 6E
 152++0D6E 67 20 64 69
 152++0D72 73 6B 20 73
 152++0D76 69 67 2E 0D
 152++0D7A 0A 00
 153++0D7C C9               ret
 154++0D7D
 155++0D7D              connect_to_usb_drive:
 156++0D7D                  ; Connects us up to the USB Drive.
 157++0D7D                  ; Returns Zero flag = true if we can connect ok.
 158++0D7D CD 32 0C         call reset_ch376_module
 159++0D80 CD 97 0C         call set_usb_host_mode
 160++0D83 FE 15            cp USB_INT_CONNECT
 161++0D85 C9               ret
 162++0D86
 163++0D86              create_file:
 164++0D86                  ; pass in DE = pointer to filename
 165++0D86 D5               push de
 166++0D87 3E 2F            ld a, SET_FILE_NAME
 167++0D89 CD 4B 0E         call send_command_byte
 168++0D8C E1               pop hl
 169++0D8D CD 35 0E         call send_data_string
 170++0D90
 171++0D90 3E 34            ld a, FILE_CREATE
 172++0D92 CD 4B 0E         call send_command_byte
 173++0D95
 174++0D95 CD 90 0E         call read_status_byte
 175++0D98 FE 14            cp USB_INT_SUCCESS
 176++0D9A C9               ret
 177++0D9B
 178++0D9B              open_file:
 179++0D9B                  ; Tells the module to use the filename from the filename_buffer.
 180++0D9B                  ; Returns z=true if ok to proceed.
 181++0D9B                  ; Pass in hl -> directory string, e.g. "/folder"
 182++0D9B              ;      push hl
 183++0D9B              ;      call message
 184++0D9B              ;      db 'open_file:[',0
 185++0D9B              ;  open_file1:
 186++0D9B              ;      ld a, (hl)
 187++0D9B              ;      cp 0
 188++0D9B              ;      jr z, open_file2
 189++0D9B              ;      call print_a
 190++0D9B              ;      inc hl
 191++0D9B              ;      jr open_file1
 192++0D9B
 193++0D9B              ;  open_file2:
 194++0D9B              ;      ld a, ']'
 195++0D9B              ;      call print_a
 196++0D9B              ;      call newline
 197++0D9B              ;      pop hl
 198++0D9B
 199++0D9B 3E 2F            ld a, SET_FILE_NAME
 200++0D9D CD 4B 0E         call send_command_byte
 201++0DA0 CD 35 0E         call send_data_string
 202++0DA3 3E 32            ld a, FILE_OPEN
 203++0DA5 CD 4B 0E         call send_command_byte
 204++0DA8 CD 90 0E         call read_status_byte
 205++0DAB FE 14            cp USB_INT_SUCCESS
 206++0DAD C9               ret
 207++0DAE
 208++0DAE              close_file:
 209++0DAE 3E 36            ld a, FILE_CLOSE
 210++0DB0 CD 4B 0E         call send_command_byte
 211++0DB3 3E 01            ld a, 1                             ; 1 = update file size if necessary
 212++0DB5 CD 2F 0E         call send_data_byte
 213++0DB8 CD 90 0E         call read_status_byte
 214++0DBB C9               ret
 215++0DBC
 216++0DBC              create_directory:
 217++0DBC                  ; Tells the module to use the filename from the filename_buffer to create a directory of that name.
 218++0DBC                  ; Returns z=true if ok to proceed.
 219++0DBC 21 EB FF         ld hl, filename_buffer
 220++0DBF              ; create_directory1:
 221++0DBF              ;     ld a, (hl)
 222++0DBF              ;     cp 0
 223++0DBF              ;     jr z, create_directory2
 224++0DBF              ;     inc hl
 225++0DBF              ;     call print_a
 226++0DBF              ;     jr create_directory1
 227++0DBF
 228++0DBF              create_directory2:
 229++0DBF
 230++0DBF 3E 2F            ld a, SET_FILE_NAME
 231++0DC1 CD 4B 0E         call send_command_byte
 232++0DC4 21 EB FF         ld hl, filename_buffer
 233++0DC7 CD 35 0E         call send_data_string
 234++0DCA 3E 40            ld a, DIR_CREATE
 235++0DCC CD 4B 0E         call send_command_byte
 236++0DCF CD 90 0E         call read_status_byte
 237++0DD2 FE 14            cp USB_INT_SUCCESS
 238++0DD4 C9               ret
 239++0DD5
 240++0DD5              read_from_file:
 241++0DD5                  ; Ask to read 128 bytes from the current file into the dma_address area pointed to by DE.
 242++0DD5                  ; Returns Zero flag set for success, clear for fail.
 243++0DD5 D5               push de
 244++0DD6 3E 3A            ld a, BYTE_READ
 245++0DD8 CD 4B 0E         call send_command_byte
 246++0DDB 3E 80            ld a, 128                           ; Request 128 bytes
 247++0DDD CD 2F 0E         call send_data_byte
 248++0DE0 3E 00            ld a, 0
 249++0DE2 CD 2F 0E         call send_data_byte
 250++0DE5
 251++0DE5 CD 90 0E         call read_status_byte
 252++0DE8              read_from_file1:
 253++0DE8 FE 1D            cp USB_INT_DISK_READ                    ; This means "go ahead and read"
 254++0DEA 28 07            jr z, read_from_file3
 255++0DEC FE 14            cp USB_INT_SUCCESS                      ; Bizarrely this means we are finished
 256++0DEE CA 1F 0E         jp z, read_from_file_cannot
 257++0DF1 18 2C            jr read_from_file_cannot
 258++0DF3
 259++0DF3              read_from_file3:
 260++0DF3 3E 27            ld a, RD_USB_DATA0                      ; Find out how many bytes are available to read
 261++0DF5 CD 4B 0E         call send_command_byte
 262++0DF8 CD 54 0E         call read_data_byte                     ; A = number of bytes available to read
 263++0DFB
 264++0DFB                  ; If there are less than 128 bytes to read, fill the buffer with 0s first
 265++0DFB FE 80            cp 128
 266++0DFD 30 0B            jr nc, read_from_file_128
 267++0DFF E1               pop hl
 268++0E00 E5               push hl
 269++0E01 F5               push af
 270++0E02 06 80            ld b, 128
 271++0E04              read_from_file_padding:
 272++0E04 36 00            ld (hl), 0
 273++0E06 23               inc hl
 274++0E07 10 FB            djnz read_from_file_padding
 275++0E09 F1               pop af
 276++0E0A
 277++0E0A              read_from_file_128:
 278++0E0A E1               pop hl
 279++0E0B CD 5D 0E         call read_data_bytes_into_hl        ; Read this block of data
 280++0E0E E5               push hl
 281++0E0F 3E 3B            ld a, BYTE_RD_GO
 282++0E11 CD 4B 0E         call send_command_byte
 283++0E14 3E 22            ld a, GET_STATUS
 284++0E16 CD 4B 0E         call send_command_byte
 285++0E19 CD 54 0E         call read_data_byte
 286++0E1C E1               pop hl
 287++0E1D                  ; All done, so return ZERO for success
 288++0E1D BF               cp a                                ; set zero flag for success
 289++0E1E C9               ret
 290++0E1F
 291++0E1F              read_from_file_cannot:
 292++0E1F D1               pop de
 293++0E20 F6 01            or 1                                ; clear zero flag
 294++0E22 C9               ret
 295++0E23
 296++0E23              copy_filename_to_buffer:
 297++0E23                  ; Enter with hl->zero-terminated-filename-string
 298++0E23                  ; Copies this to filename_buffer
 299++0E23 11 EB FF         ld de, filename_buffer
 300++0E26              copy_filename_to_buffer1:
 301++0E26 7E               ld a, (hl)
 302++0E27 12               ld (de), a
 303++0E28 23               inc hl
 304++0E29 13               inc de
 305++0E2A FE 00            cp 0
 306++0E2C C8               ret z
 307++0E2D 18 F7            jr copy_filename_to_buffer1
 308++0E2F
 309++0E2F              send_data_byte:
 310++0E2F                  ; push af
 311++0E2F                  ; call message
 312++0E2F                  ; db 'send_data_byte ', 0
 313++0E2F                  ; pop af
 314++0E2F                  ; push af
 315++0E2F                  ; call show_a_as_hex
 316++0E2F                  ; call newline
 317++0E2F                  ; pop af
 318++0E2F D3 A0            out (mem_stick_data_port), a
 319++0E31                  ;call tiny_pause
 320++0E31 CD 65 0E         call wait_til_not_busy
 321++0E34 C9               ret
 322++0E35
 323++0E35              send_data_string:
 324++0E35                  ; The string is pointed to by HL
 325++0E35 7E               ld a, (hl)
 326++0E36 FE 00            cp 0
 327++0E38 28 0B            jr z, send_data_string_done
 328++0E3A F5               push af
 329++0E3B E5               push hl
 330++0E3C CD 2F 0E         call send_data_byte
 331++0E3F E1               pop hl
 332++0E40 F1               pop af
 333++0E41 23               inc hl
 334++0E42 C3 35 0E         jp send_data_string
 335++0E45              send_data_string_done:
 336++0E45 3E 00            ld a, 0
 337++0E47 CD 2F 0E         call send_data_byte
 338++0E4A C9               ret
 339++0E4B
 340++0E4B              send_command_byte:
 341++0E4B                  ; push af
 342++0E4B                  ; call message
 343++0E4B                  ; db 'send_command_byte ',0
 344++0E4B                  ; pop af
 345++0E4B                  ; push af
 346++0E4B                  ; call show_a_as_hex
 347++0E4B                  ; call newline
 348++0E4B                  ; pop af
 349++0E4B D3 A1            out (mem_stick_command_port), a
 350++0E4D                  ;call tiny_pause
 351++0E4D CD 65 0E         call wait_til_not_busy
 352++0E50 C9               ret
 353++0E51
 354++0E51              read_command_byte:
 355++0E51                  ; call message
 356++0E51                  ; db 'read_command_byte: ', 0
 357++0E51 DB A1            in a, (mem_stick_command_port)
 358++0E53                  ; push af
 359++0E53                  ; call show_a_as_hex
 360++0E53                  ; call newline
 361++0E53                  ; pop af
 362++0E53 C9               ret
 363++0E54
 364++0E54              read_data_byte:
 365++0E54                  ; call message
 366++0E54                  ; db 'read_data_byte: ', 0
 367++0E54 DB A0            in a, (mem_stick_data_port)
 368++0E56                  ; push af
 369++0E56                  ; call show_a_as_hex
 370++0E56                  ; call newline
 371++0E56                  ; pop af
 372++0E56 C9               ret
 373++0E57
 374++0E57              read_data_byte_silent:
 375++0E57 DB A0            in a, (mem_stick_data_port)
 376++0E59 C9               ret
 377++0E5A
 378++0E5A              read_data_bytes_into_buffer:
 379++0E5A                  ; The number of bytes should be in A.
 380++0E5A                  ; Read that many bytes into the buffer.
 381++0E5A                  ; The value of A is retained.
 382++0E5A 21 C5 FF         ld hl, disk_buffer
 383++0E5D              read_data_bytes_into_hl:
 384++0E5D                  ; This entry point will read A bytes into the area pointed to by HL.
 385++0E5D                  ; On exit HL will point to the location after where the bytes were added.
 386++0E5D F5               push af
 387++0E5E 47               ld b, a
 388++0E5F 0E A0            ld c, mem_stick_data_port
 389++0E61              read_data_bytes_into_buffer1:
 390++0E61 ED B2            inir                    ; A rare use of In, Increase & Repeat!!!
 391++0E63 F1               pop af
 392++0E64 C9               ret
 393++0E65
 394++0E65              wait_til_not_busy:
 395++0E65                  ; call message
 396++0E65                  ; db 'waiting...', 13, 10, 0
 397++0E65 01 60 EA         ld bc, 60000            ; retry max 60000 times!!!
 398++0E68              wait_til_not_busy1:
 399++0E68 C5               push bc
 400++0E69 CD 51 0E         call read_command_byte
 401++0E6C E6 10            and %00010000
 402++0E6E C2 73 0E         jp nz, wait_til_not_busy2
 403++0E71 C1               pop bc
 404++0E72 C9               ret
 405++0E73              wait_til_not_busy2:
 406++0E73 CD 3C 07         call short_pause
 407++0E76 C1               pop bc
 408++0E77 0B               dec bc
 409++0E78 78               ld a, b
 410++0E79 B1               or c
 411++0E7A 20 EC            jr nz, wait_til_not_busy1
 412++0E7C CD 82 07         call message
 413++0E7F 5B 55 53 42      db '[USB TIMEOUT]', 13, 10, 0
 413++0E83 20 54 49 4D
 413++0E87 45 4F 55 54
 413++0E8B 5D 0D 0A 00
 414++0E8F C9               ret
 415++0E90
 416++0E90              read_status_byte:
 417++0E90 3E 22            ld a, GET_STATUS
 418++0E92 CD 4B 0E         call send_command_byte
 419++0E95 CD 54 0E         call read_data_byte
 420++0E98 C9               ret
 421++0E99
 422++0E99              ; show_status:
 423++0E99              ;     call read_status_byte
 424++0E99              ;     push af
 425++0E99              ;     call report_on_status
 426++0E99              ;     pop af
 427++0E99              ;     ret                     ; The status is returned in A
 428++0E99
 429++0E99              ; report_on_status:
 430++0E99              ;     cp USB_INT_SUCCESS
 431++0E99              ;     jr nz, ros1
 432++0E99              ;     call message
 433++0E99              ;     db 'USB_INT_SUCCESS',13,10,0
 434++0E99              ;     ret
 435++0E99              ; ros1:
 436++0E99              ;     cp USB_INT_CONNECT
 437++0E99              ;     jr nz, ros2
 438++0E99              ;     call message
 439++0E99              ;     db 'USB_INT_CONNECT',13,10,0
 440++0E99              ;     ret
 441++0E99              ; ros2:
 442++0E99              ;     cp USB_INT_DISCONNECT
 443++0E99              ;     jr nz, ros3
 444++0E99              ;     call message
 445++0E99              ;     db 'USB_INT_DISCONNECT',13,10,0
 446++0E99              ;     ret
 447++0E99              ; ros3:
 448++0E99              ;     cp USB_INT_BUF_OVER
 449++0E99              ;     jr nz, ros4
 450++0E99              ;     call message
 451++0E99              ;     db 'USB_INT_BUF_OVER',13,10,0
 452++0E99              ;     ret
 453++0E99              ; ros4:
 454++0E99              ;     cp USB_INT_USB_READY
 455++0E99              ;     jr nz, ros5
 456++0E99              ;     call message
 457++0E99              ;     db 'USB_INT_USB_READY',13,10,0
 458++0E99              ;     ret
 459++0E99              ; ros5:
 460++0E99              ;     cp USB_INT_DISK_READ
 461++0E99              ;     jr nz, ros6
 462++0E99              ;     call message
 463++0E99              ;     db 'USB_INT_DISK_READ',13,10,0
 464++0E99              ;     ret
 465++0E99              ; ros6:
 466++0E99              ;     cp USB_INT_DISK_WRITE
 467++0E99              ;     jr nz, ros7
 468++0E99              ;     call message
 469++0E99              ;     db 'USB_INT_DISK_WRITE',13,10,0
 470++0E99              ;     ret
 471++0E99              ; ros7:
 472++0E99              ;     cp USB_INT_DISK_ERR
 473++0E99              ;     jr nz, ros8
 474++0E99              ;     call message
 475++0E99              ;     db 'USB_INT_DISK_ERR',13,10,0
 476++0E99              ;     ret
 477++0E99              ; ros8:
 478++0E99              ;     cp YES_OPEN_DIR
 479++0E99              ;     jr nz, ros9
 480++0E99              ;     call message
 481++0E99              ;     db 'YES_OPEN_DIR',13,10,0
 482++0E99              ;     ret
 483++0E99              ; ros9:
 484++0E99              ;     cp ERR_MISS_FILE
 485++0E99              ;     jr nz, ros10
 486++0E99              ;     call message
 487++0E99              ;     db 'ERR_MISS_FILE',13,10,0
 488++0E99              ;     ret
 489++0E99              ; ros10:
 490++0E99              ;     cp ERR_FOUND_NAME
 491++0E99              ;     jr nz, ros11
 492++0E99              ;     call message
 493++0E99              ;     db 'ERR_FOUND_NAME',13,10,0
 494++0E99              ;     ret
 495++0E99              ; ros11:
 496++0E99              ;     cp ERR_DISK_DISCON
 497++0E99              ;     jr nz, ros12
 498++0E99              ;     call message
 499++0E99              ;     db 'ERR_DISK_DISCON',13,10,0
 500++0E99              ;     ret
 501++0E99              ; ros12:
 502++0E99              ;     cp ERR_LARGE_SECTOR
 503++0E99              ;     jr nz, ros13
 504++0E99              ;     call message
 505++0E99              ;     db 'ERR_LARGE_SECTOR',13,10,0
 506++0E99              ;     ret
 507++0E99              ; ros13:
 508++0E99              ;     cp ERR_TYPE_ERROR
 509++0E99              ;     jr nz, ros14
 510++0E99              ;     call message
 511++0E99              ;     db 'ERR_TYPE_ERROR',13,10,0
 512++0E99              ;     ret
 513++0E99              ; ros14:
 514++0E99              ;     cp ERR_BPB_ERROR
 515++0E99              ;     jr nz, ros15
 516++0E99              ;     call message
 517++0E99              ;     db 'ERR_BPB_ERROR',13,10,0
 518++0E99              ;     ret
 519++0E99              ; ros15:
 520++0E99              ;     cp ERR_DISK_FULL
 521++0E99              ;     jr nz, ros16
 522++0E99              ;     call message
 523++0E99              ;     db 'ERR_DISK_FULL',13,10,0
 524++0E99              ;     ret
 525++0E99              ; ros16:
 526++0E99              ;     cp ERR_FDT_OVER
 527++0E99              ;     jr nz, ros17
 528++0E99              ;     call message
 529++0E99              ;     db 'ERR_FDT_OVER',13,10,0
 530++0E99              ;     ret
 531++0E99              ; ros17:
 532++0E99              ;     cp ERR_FILE_CLOSE
 533++0E99              ;     jr nz, ros18
 534++0E99              ;     call message
 535++0E99              ;     db 'ERR_FILE_CLOSE',13,10,0
 536++0E99              ;     ret
 537++0E99              ; ros18:
 538++0E99              ;     call message
 539++0E99              ;     db 'UNKNOWN STATUS: ',0
 540++0E99              ;     call show_a_as_hex
 541++0E99              ;     call newline
 542++0E99              ;     ret
 543++0E99
 544++0E99
 545++0E99              mem_stick_data_port     equ 0xA0
 546++0E99              mem_stick_command_port  equ 0xA1
 547++0E99
 548++0E99              GET_IC_VER equ $01
 549++0E99              SET_BAUDRATE equ $02
 550++0E99              RESET_ALL equ $05
 551++0E99              CHECK_EXIST equ $06
 552++0E99              GET_FILE_SIZE equ $0C
 553++0E99              SET_USB_MODE equ $15
 554++0E99              GET_STATUS equ $22
 555++0E99              RD_USB_DATA0 equ $27
 556++0E99              WR_USB_DATA equ $2C
 557++0E99              WR_REQ_DATA equ $2D
 558++0E99              WR_OFS_DATA equ $2E
 559++0E99              SET_FILE_NAME equ $2F
 560++0E99              DISK_CONNECT equ $30
 561++0E99              DISK_MOUNT equ $31
 562++0E99              FILE_OPEN equ $32
 563++0E99              FILE_ENUM_GO equ $33
 564++0E99              FILE_CREATE equ $34
 565++0E99              FILE_ERASE equ $35
 566++0E99              FILE_CLOSE equ $36
 567++0E99              DIR_INFO_READ equ $37
 568++0E99              DIR_INFO_SAVE equ $38
 569++0E99              BYTE_LOCATE equ $39
 570++0E99              BYTE_READ equ $3A
 571++0E99              BYTE_RD_GO equ $3B
 572++0E99              BYTE_WRITE equ $3C
 573++0E99              BYTE_WR_GO equ $3D
 574++0E99              DISK_CAPACITY equ $3E
 575++0E99              DISK_QUERY equ $3F
 576++0E99              DIR_CREATE equ $40
 577++0E99
 578++0E99
 579++0E99              ; Statuses
 580++0E99              USB_INT_SUCCESS equ $14
 581++0E99              USB_INT_CONNECT equ $15
 582++0E99              USB_INT_DISCONNECT equ $16
 583++0E99              USB_INT_BUF_OVER equ $17
 584++0E99              USB_INT_USB_READY equ $18
 585++0E99              USB_INT_DISK_READ equ $1D
 586++0E99              USB_INT_DISK_WRITE equ $1E
 587++0E99              USB_INT_DISK_ERR equ $1F
 588++0E99              YES_OPEN_DIR equ $41
 589++0E99              ERR_MISS_FILE equ $42
 590++0E99              ERR_FOUND_NAME equ $43
 591++0E99              ERR_DISK_DISCON equ $82
 592++0E99              ERR_LARGE_SECTOR equ $84
 593++0E99              ERR_TYPE_ERROR equ $92
 594++0E99              ERR_BPB_ERROR equ $A1
 595++0E99              ERR_DISK_FULL equ $B1
 596++0E99              ERR_FDT_OVER equ $B2
 597++0E99              ERR_FILE_CLOSE equ $B4
 598++0E99
 599++0E99              ROOT_DIRECTORY:
 600++0E99 2A 00            db '*',0
 601++0E9B
 602++0E9B              SLASH:
 603++0E9B 2F 00            db '/',0
 604++0E9D
 605++0E9D              ;SAVE_FILENAME:
 606++0E9D              ;    db 'TESTING',0
 607++0E9D
 608++0E9D              ;TARGET_FILENAME:
 609++0E9D              ;    db '/TARGET2.TXT',0
 610++0E9D
 611++0E9D              ;NO_EXTENSION:
 612++0E9D              ;    db '   ',0
 613++0E9D
 614++0E9D              ;TXT_EXTENSION:
 615++0E9D              ;    db 'TXT',0
 616++0E9D
# file closed: memorystick_low_level.asm
 670++0E9D
 671++0E9D              ROOT_NAME:
 672++0E9D 2F 00            db '/',0
 673++0E9F
 674++0E9F              STAR_DOT_STAR:
 675++0E9F 2A 00            db '*',0
 676++0EA1
 677++0EA1              CPM_FOLDER_NAME:
 678++0EA1 2F 43 50 4D      db '/CPM',0
 678++0EA5 00
 679++0EA6
 680++0EA6              TINY_BASIC_FOLDER_NAME:
 681++0EA6 2F 54 42 41           db '/TBASIC',0
 681++0EAA 53 49 43 00
 682++0EAE
 683++0EAE              CPM_DISKS_NAME:
 684++0EAE 44 49 53 4B      db 'DISKS',0
 684++0EB2 53 00
 685++0EB4
 686++0EB4
 687++0EB4
# file closed: memorystick.asm
 909+ 0EB4                  include "filesize.asm"
# file opened: filesize.asm
   1++0EB4              ; Routines to help print file sizes for DIR commands.
   2++0EB4              ; 1KB = 1024 bytes (00 00 04 00 h)
   3++0EB4              ; 1MB = 1024 KB = 1,048,576 bytes (00 10 00 00 h)
   4++0EB4              ; 1GB = 1024 MB = 40 00 00 00 h
   5++0EB4              ; Largest 32 bit number is FFFFFFFF which is 4,294,967,295 which is 4.2GB
   6++0EB4              ; So this routine can only display file sizes up to 4.2GB.
   7++0EB4              ; However, I've allowed a 6 byte buffer to store it in for 2 reasons:
   8++0EB4              ; (1) In the future I may want to use more digits (but probably not!!!)
   9++0EB4              ; (2) We multiply in incoming number by 10 to show 1 decimal place later in the process.
  10++0EB4              ; The largest number we ever need to actually show is 1023 because we
  11++0EB4              ; always divide the number down into larger units.
  12++0EB4              ; For example, 1023 would be shown as 1023 bytes
  13++0EB4              ; but 1024 would be shown as 1K.
  14++0EB4              ; This means we need a divide-by-1024 routine, which is simply Right Shift 10 times!
  15++0EB4              ; Which is simplified by shifting the whole number right by one byte, then Right Shift twice.
  16++0EB4              ; This is of course integer maths, so no decimal places.
  17++0EB4              ; However, we use a trick! First we multiply the number by 10 so that once we have done all
  18++0EB4              ; the calculations we can simply insert a dot before the last digit to give ourselves 1 decimal place.
  19++0EB4              ; Therefore 2000 would be shown as 1.9K, but 2048 would be shown as 2.0K.
  20++0EB4              ; We also do some post-processing to get rid of the leading zeros.
  21++0EB4              ;
  22++0EB4              ; Any number less than 00000400h is shown in bytes.
  23++0EB4              ; Any number less than 00100000h is shown in KB.
  24++0EB4              ; Any number less than 40000000h is shown in MB.
  25++0EB4              ; Higher numbers are show in GB.
  26++0EB4
  27++0EB4              show_filesize:
  28++0EB4                  ; Pass in 32 bit filesize in the lowest 4 bytes of the 6 byte filesize_buffer.
  29++0EB4                  ; First work out the units
  30++0EB4 3A 02 C0         ld a, (filesize_buffer+2)
  31++0EB7 67               ld h, a
  32++0EB8 3A 03 C0         ld a, (filesize_buffer+3)
  33++0EBB 6F               ld l, a
  34++0EBC 11 00 40         ld de, $4000
  35++0EBF B7               or a
  36++0EC0 ED 52            sbc hl,de                   ; Compare hl with de
  37++0EC2 30 4A            jr nc, show_gigabytes
  38++0EC4
  39++0EC4 3A 02 C0         ld a, (filesize_buffer+2)
  40++0EC7 67               ld h, a
  41++0EC8 3A 03 C0         ld a, (filesize_buffer+3)
  42++0ECB 6F               ld l, a
  43++0ECC 11 10 00         ld de, $0010
  44++0ECF B7               or a
  45++0ED0 ED 52            sbc hl,de                   ; Compare hl with de
  46++0ED2 30 29            jr nc, show_megabytes
  47++0ED4
  48++0ED4 3A 04 C0         ld a, (filesize_buffer+4)
  49++0ED7 67               ld h, a
  50++0ED8 3A 05 C0         ld a, (filesize_buffer+5)
  51++0EDB 6F               ld l, a
  52++0EDC 11 00 04         ld de, $0400
  53++0EDF B7               or a
  54++0EE0 ED 52            sbc hl,de                   ; Compare hl with de
  55++0EE2 30 0B            jr nc, show_kilobytes
  56++0EE4
  57++0EE4              show_bytes:
  58++0EE4 CD 84 0F         call multiply_filesize_by_10
  59++0EE7 3E 42            ld a, 'B'
  60++0EE9 32 91 06         ld (filesize_units),a
  61++0EEC C3 22 0F         jp show_filesize1
  62++0EEF              show_kilobytes:
  63++0EEF CD 84 0F         call multiply_filesize_by_10
  64++0EF2 3E 4B            ld a, 'K'
  65++0EF4 32 91 06         ld (filesize_units),a
  66++0EF7 CD C4 0F         call divide_filesize_by_1024
  67++0EFA C3 22 0F         jp show_filesize1
  68++0EFD              show_megabytes:
  69++0EFD CD 84 0F         call multiply_filesize_by_10
  70++0F00 3E 4D            ld a, 'M'
  71++0F02 32 91 06         ld (filesize_units),a
  72++0F05 CD C4 0F         call divide_filesize_by_1024
  73++0F08 CD C4 0F         call divide_filesize_by_1024
  74++0F0B C3 22 0F         jp show_filesize1
  75++0F0E              show_gigabytes:
  76++0F0E CD 84 0F         call multiply_filesize_by_10
  77++0F11 3E 47            ld a, 'G'
  78++0F13 32 91 06         ld (filesize_units),a
  79++0F16 CD C4 0F         call divide_filesize_by_1024
  80++0F19 CD C4 0F         call divide_filesize_by_1024
  81++0F1C CD C4 0F         call divide_filesize_by_1024
  82++0F1F C3 22 0F         jp show_filesize1
  83++0F22
  84++0F22              show_filesize1:
  85++0F22                  ; We now have a number from 0 to 1023 in the filesize_buffer bytes 4 & 5.
  86++0F22 3A 04 C0         ld a, (filesize_buffer+4)
  87++0F25 67               ld h, a
  88++0F26 3A 05 C0         ld a, (filesize_buffer+5)
  89++0F29 6F               ld l, a
  90++0F2A CD 19 10         call show_hl_as_decimal_to_buffer
  91++0F2D
  92++0F2D                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading zeros
  93++0F2D
  94++0F2D CD 62 0F         call remove_leading_zeros
  95++0F30
  96++0F30                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading spaces
  97++0F30
  98++0F30 11 00 C0         ld de, filesize_buffer
  99++0F33 06 04            ld b, 4                         ; show first 4 digits of filesize
 100++0F35              show_filesize2:
 101++0F35 1A               ld a, (de)
 102++0F36 CD D1 06         call print_a
 103++0F39 13               inc de
 104++0F3A 10 F9            djnz show_filesize2
 105++0F3C 3E 2E            ld a, '.'                       ; then a dot
 106++0F3E CD D1 06         call print_a
 107++0F41 1A               ld a, (de)                      ; then the last digit
 108++0F42 CD D1 06         call print_a
 109++0F45 CD 12 07         call space
 110++0F48
 111++0F48 3A 91 06         ld a, (filesize_units)
 112++0F4B FE 42            cp 'B'
 113++0F4D 20 0A            jr nz, show_filesize3
 114++0F4F CD 82 07         call message
 115++0F52 62 79 74 65      db 'bytes',0
 115++0F56 73 00
 116++0F58 C9               ret
 117++0F59
 118++0F59              show_filesize3:
 119++0F59 CD D1 06         call print_a
 120++0F5C 3E 42            ld a, 'B'
 121++0F5E CD D1 06         call print_a
 122++0F61 C9               ret
 123++0F62
 124++0F62              remove_leading_zeros:
 125++0F62 3A 00 C0         ld a, (filesize_buffer)
 126++0F65 FE 30            cp '0'
 127++0F67 C0               ret nz
 128++0F68 3E 20            ld a, ' '
 129++0F6A 32 00 C0         ld (filesize_buffer), a
 130++0F6D
 131++0F6D 3A 01 C0         ld a, (filesize_buffer+1)
 132++0F70 FE 30            cp '0'
 133++0F72 C0               ret nz
 134++0F73 3E 20            ld a, ' '
 135++0F75 32 01 C0         ld (filesize_buffer+1), a
 136++0F78
 137++0F78 3A 02 C0         ld a, (filesize_buffer+2)
 138++0F7B FE 30            cp '0'
 139++0F7D C0               ret nz
 140++0F7E 3E 20            ld a, ' '
 141++0F80 32 02 C0         ld (filesize_buffer+2), a
 142++0F83 C9               ret
 143++0F84
 144++0F84              multiply_filesize_by_10:
 145++0F84                  ; To multiply N by 10 we do this:
 146++0F84                  ; Shift-left to get N x 2
 147++0F84                  ; Shift-left twice more to get N x 8
 148++0F84                  ; Add the two totals together
 149++0F84 CD 03 10         call shift_left_filesize_buffer
 150++0F87 CD B8 0F         call copy_filesize_buffer               ; This is N x 2
 151++0F8A CD 03 10         call shift_left_filesize_buffer
 152++0F8D CD 03 10         call shift_left_filesize_buffer         ; Buffer has N x 8
 153++0F90 CD 94 0F         call add_filesize_buffer_copy           ; Add N*8 and N*2
 154++0F93 C9               ret
 155++0F94
 156++0F94              add_filesize_buffer_copy:
 157++0F94                  ; Add the copy of the filesize_buffer back onto the real one
 158++0F94 11 05 C0         ld de, filesize_buffer+5
 159++0F97 21 0B C0         ld hl, filesize_buffer_copy+5
 160++0F9A 1A               ld a, (de)
 161++0F9B B7               or a                        ; clear carry
 162++0F9C 8E               adc a, (hl)
 163++0F9D 12               ld (de), a
 164++0F9E 1B               dec de
 165++0F9F 2B               dec hl
 166++0FA0
 167++0FA0 1A               ld a, (de)
 168++0FA1 8E               adc a, (hl)
 169++0FA2 12               ld (de), a
 170++0FA3 1B               dec de
 171++0FA4 2B               dec hl
 172++0FA5
 173++0FA5 1A               ld a, (de)
 174++0FA6 8E               adc a, (hl)
 175++0FA7 12               ld (de), a
 176++0FA8 1B               dec de
 177++0FA9 2B               dec hl
 178++0FAA
 179++0FAA 1A               ld a, (de)
 180++0FAB 8E               adc a, (hl)
 181++0FAC 12               ld (de), a
 182++0FAD 1B               dec de
 183++0FAE 2B               dec hl
 184++0FAF
 185++0FAF 1A               ld a, (de)
 186++0FB0 8E               adc a, (hl)
 187++0FB1 12               ld (de), a
 188++0FB2 1B               dec de
 189++0FB3 2B               dec hl
 190++0FB4
 191++0FB4 1A               ld a, (de)
 192++0FB5 8E               adc a, (hl)
 193++0FB6 12               ld (de), a
 194++0FB7
 195++0FB7 C9               ret
 196++0FB8
 197++0FB8              copy_filesize_buffer:
 198++0FB8 11 06 C0         ld de, filesize_buffer_copy
 199++0FBB 21 00 C0         ld hl, filesize_buffer
 200++0FBE 01 06 00         ld bc, 6
 201++0FC1 ED B0            ldir
 202++0FC3 C9               ret
 203++0FC4
 204++0FC4              divide_filesize_by_1024:
 205++0FC4                  ; Shift everything right by 1 byte
 206++0FC4 3A 04 C0         ld a, (filesize_buffer+4)
 207++0FC7 32 05 C0         ld (filesize_buffer+5), a
 208++0FCA 3A 03 C0         ld a, (filesize_buffer+3)
 209++0FCD 32 04 C0         ld (filesize_buffer+4), a
 210++0FD0 3A 02 C0         ld a, (filesize_buffer+2)
 211++0FD3 32 03 C0         ld (filesize_buffer+3), a
 212++0FD6 3A 01 C0         ld a, (filesize_buffer+1)
 213++0FD9 32 02 C0         ld (filesize_buffer+2), a
 214++0FDC 3A 00 C0         ld a, (filesize_buffer+0)
 215++0FDF 32 01 C0         ld (filesize_buffer+1), a
 216++0FE2 97               sub a                       ; Put zero in top byte
 217++0FE3 32 00 C0         ld (filesize_buffer+0), a
 218++0FE6
 219++0FE6                  ; Then SHIFT-RIGHT by two bits
 220++0FE6 CD ED 0F         call shift_right_filesize_buffer
 221++0FE9 CD ED 0F         call shift_right_filesize_buffer
 222++0FEC C9               ret
 223++0FED
 224++0FED              shift_right_filesize_buffer:
 225++0FED 21 00 C0         ld hl, filesize_buffer
 226++0FF0 B7               or a                        ; clear carry
 227++0FF1 CB 1E            rr (hl)
 228++0FF3 23               inc hl
 229++0FF4 CB 1E            rr (hl)
 230++0FF6 23               inc hl
 231++0FF7 CB 1E            rr (hl)
 232++0FF9 23               inc hl
 233++0FFA CB 1E            rr (hl)
 234++0FFC 23               inc hl
 235++0FFD CB 1E            rr (hl)
 236++0FFF 23               inc hl
 237++1000 CB 1E            rr (hl)
 238++1002 C9               ret
 239++1003
 240++1003              shift_left_filesize_buffer:
 241++1003 21 05 C0         ld hl, filesize_buffer+5
 242++1006 B7               or a                        ; clear carry
 243++1007 CB 16            rl (hl)
 244++1009 2B               dec hl
 245++100A CB 16            rl (hl)
 246++100C 2B               dec hl
 247++100D CB 16            rl (hl)
 248++100F 2B               dec hl
 249++1010 CB 16            rl (hl)
 250++1012 2B               dec hl
 251++1013 CB 16            rl (hl)
 252++1015 2B               dec hl
 253++1016 CB 16            rl (hl)
 254++1018 C9               ret
 255++1019
 256++1019              show_hl_as_decimal_to_buffer:
 257++1019                  ; Routine adapted from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 258++1019 11 00 C0         ld de, filesize_buffer  ; We put the result here as a string
 259++101C 01 F0 D8     	ld	bc,-10000
 260++101F CD 35 10     	call	show_hl_as_decimal_to_buffer1
 261++1022 01 18 FC     	ld	bc,-1000
 262++1025 CD 35 10     	call	show_hl_as_decimal_to_buffer1
 263++1028 01 9C FF     	ld	bc,-100
 264++102B CD 35 10     	call	show_hl_as_decimal_to_buffer1
 265++102E 0E F6        	ld	c,-10
 266++1030 CD 35 10     	call	show_hl_as_decimal_to_buffer1
 267++1033 0E FF        	ld	c,-1
 268++1035              show_hl_as_decimal_to_buffer1:
 269++1035 3E 2F            ld	a,'0'-1
 270++1037              show_hl_as_decimal_to_buffer2:
 271++1037 3C               inc	a
 272++1038 09           	add	hl,bc
 273++1039 38 FC        	jr	c,show_hl_as_decimal_to_buffer2
 274++103B ED 42        	sbc	hl,bc
 275++103D 12           	ld (de), a
 276++103E 13               inc de
 277++103F C9           	ret
 278++1040
# file closed: filesize.asm
 910+ 1040                  include "monitor.asm"
# file opened: monitor.asm
   1++1040              ; monitor.asm
   2++1040              ; The low-level monitor
   3++1040
   4++1040              monitor_start:
   5++1040 CD EE 13         call monitor_init
   6++1043
   7++1043              monitor_restart:
   8++1043 CD 40 1A     	call clear_screen
   9++1046 CD 07 12     	call show_welcome_message
  10++1049
  11++1049              	; If there is an auto-run-character defined, use that instead of a key press.
  12++1049 3A FF 8F     	ld a, (auto_run_char)
  13++104C FE 00        	cp 0
  14++104E 20 08        	jr nz, monitor_loop2
  15++1050
  16++1050              monitor_loop:
  17++1050 3E 3E        	ld a, '>'
  18++1052 CD D1 06     	call print_a
  19++1055              monitor_loop1:
  20++1055 CD 18 07     	call char_in			; get a char from keyboard
  21++1058              monitor_loop2:
  22++1058 FE 00        	cp 0					; If it's null, ignore it
  23++105A 28 F9        	jr z,monitor_loop1
  24++105C FE 30        	cp '0'					; '0' = go to page 0
  25++105E 20 06        	jr nz,not0
  26++1060 CD 30 17     	call goto_page_0
  27++1063 C3 50 10     	jp monitor_loop
  28++1066              not0:
  29++1066 FE 75        	cp 'u'					; User light toggle
  30++1068 20 1D        	jr nz,notu
  31++106A CD 82 07     	call message
  32++106D 55 73 65 72  	db 'User LED toggled!',13,10,0
  32++1071 20 4C 45 44
  32++1075 20 74 6F 67
  32++1079 67 6C 65 64
  32++107D 21 0D 0A 00
  33++1081 CD 61 07     	call user_toggle
  34++1084 C3 50 10     	jp monitor_loop
  35++1087              notu:
  36++1087 FE 33        	cp '3'					; ROM light on
  37++1089 20 1F        	jr nz,not3
  38++108B CD 82 07     	call message
  39++108E 52 4F 4D 20  	db 'ROM light is now ON',13,10,0
  39++1092 6C 69 67 68
  39++1096 74 20 69 73
  39++109A 20 6E 6F 77
  39++109E 20 4F 4E 0D
  39++10A2 0A 00
  40++10A4 CD 74 07     	call rom_on
  41++10A7 C3 50 10     	jp monitor_loop
  42++10AA              not3:
  43++10AA FE 34        	cp '4'					; ROM light off
  44++10AC 20 20        	jr nz,not4
  45++10AE CD 82 07     	call message
  46++10B1 52 4F 4D 20  	db 'ROM light is now OFF',13,10,0
  46++10B5 6C 69 67 68
  46++10B9 74 20 69 73
  46++10BD 20 6E 6F 77
  46++10C1 20 4F 46 46
  46++10C5 0D 0A 00
  47++10C8 CD 7B 07     	call rom_off
  48++10CB C3 50 10     	jp monitor_loop
  49++10CE              not4:
  50++10CE FE 64        	cp 'd'					; Disk LED toggle
  51++10D0 20 1D        	jr nz,notd
  52++10D2 CD 82 07     	call message
  53++10D5 44 49 53 4B  	db 'DISK LED toggled!',13,10,0
  53++10D9 20 4C 45 44
  53++10DD 20 74 6F 67
  53++10E1 67 6C 65 64
  53++10E5 21 0D 0A 00
  54++10E9 CD 46 07     	call disk_toggle
  55++10EC C3 50 10     	jp monitor_loop
  56++10EF              notd:
  57++10EF FE 68        	cp 'h'					; Higher page
  58++10F1 20 0D        	jr nz,noth
  59++10F3 3A 64 EA     	ld a,(current_page)
  60++10F6 3C           	inc a
  61++10F7 32 64 EA     	ld (current_page),a
  62++10FA CD 4C 1A     	call show_page
  63++10FD C3 50 10     	jp monitor_loop
  64++1100              noth:
  65++1100 FE 6C        	cp 'l'					; Lower page
  66++1102 20 0D        	jr nz,notl
  67++1104 3A 64 EA     	ld a,(current_page)
  68++1107 3D           	dec a
  69++1108 32 64 EA     	ld (current_page),a
  70++110B CD 4C 1A     	call show_page
  71++110E C3 50 10     	jp monitor_loop
  72++1111              notl:
  73++1111 FE 6D        	cp 'm'					; Memory map
  74++1113 20 06        	jr nz,notm
  75++1115 CD 2C 14     	call show_memory_map
  76++1118 C3 50 10     	jp monitor_loop
  77++111B
  78++111B              notm:
  79++111B FE 2F        	cp '/'					; Show Menu
  80++111D 20 09        	jr nz,not_slash
  81++111F CD 40 1A     	call clear_screen
  82++1122 CD 07 12     	call show_welcome_message
  83++1125 C3 50 10     	jp monitor_loop
  84++1128
  85++1128              not_slash:
  86++1128 FE 36        	cp '6'					; Test Uart
  87++112A 20 0F        	jr nz,not6
  88++112C CD 40 1A     	call clear_screen
  89++112F CD DA 1A     	call test_uart
  90++1132 CD 40 1A     	call clear_screen
  91++1135 CD 07 12     	call show_welcome_message
  92++1138 C3 50 10     	jp monitor_loop
  93++113B
  94++113B              not6:
  95++113B FE 23        	cp '#'					; HALT
  96++113D 20 3C        	jr nz,not_hash
  97++113F CD 82 07     	call message
  98++1142 48 41 4C 54  	db 'HALTing Z80. You will need to press Reset after this!',13,10,0
  98++1146 69 6E 67 20
  98++114A 5A 38 30 2E
  98++114E 20 59 6F 75
  98++1152 20 77 69 6C
  98++1156 6C 20 6E 65
  98++115A 65 64 20 74
  98++115E 6F 20 70 72
  98++1162 65 73 73 20
  98++1166 52 65 73 65
  98++116A 74 20 61 66
  98++116E 74 65 72 20
  98++1172 74 68 69 73
  98++1176 21 0D 0A 00
  99++117A 76           	halt
 100++117B
 101++117B              not_hash:
 102++117B FE 63        	cp 'c'					; CP/M
 103++117D 20 57        	jr nz, not_c
 104++117F CD 82 07         call message
 105++1182 53 74 61 72      db 'Starting CP/M... Make sure you have the "ROM Select" jumper set to "switched".',13,10,0
 105++1186 74 69 6E 67
 105++118A 20 43 50 2F
 105++118E 4D 2E 2E 2E
 105++1192 20 4D 61 6B
 105++1196 65 20 73 75
 105++119A 72 65 20 79
 105++119E 6F 75 20 68
 105++11A2 61 76 65 20
 105++11A6 74 68 65 20
 105++11AA 22 52 4F 4D
 105++11AE 20 53 65 6C
 105++11B2 65 63 74 22
 105++11B6 20 6A 75 6D
 105++11BA 70 65 72 20
 105++11BE 73 65 74 20
 105++11C2 74 6F 20 22
 105++11C6 73 77 69 74
 105++11CA 63 68 65 64
 105++11CE 22 2E 0D 0A
 105++11D2 00
 106++11D3 C3 B9 01         jp start_cpm
 107++11D6
 108++11D6              not_c:
 109++11D6 FE 74        	cp 't'					; Tiny Basic
 110++11D8 20 09        	jr nz, not_t
 111++11DA CD 8E 0A         call check_tbasic_structure
 112++11DD CD 9B 24         call TBSTART
 113++11E0 C3 43 10     	jp monitor_restart
 114++11E3
 115++11E3              not_t:
 116++11E3 FE 67        	cp 'g'					; Game-of-Life
 117++11E5 20 06        	jr nz, not_g
 118++11E7 CD B5 30         call GOFL_Begin
 119++11EA C3 43 10     	jp monitor_restart
 120++11ED
 121++11ED              not_g:
 122++11ED FE 62        	cp 'b'					; Burn-in test
 123++11EF 20 06        	jr nz, not_b
 124++11F1 CD 3C 17         call burn_in
 125++11F4 C3 43 10     	jp monitor_restart
 126++11F7
 127++11F7              not_b:
 128++11F7 FE 6A        	cp 'j'					; Load jupiter.bin
 129++11F9 20 03        	jr nz, unknown_char
 130++11FB C3 B3 23         jp load_jupiter_ace
 131++11FE
 132++11FE              unknown_char:
 133++11FE CD D1 06     	call print_a			; If we don't understand it, show it!
 134++1201 CD 07 07     	call newline
 135++1204 C3 50 10     	jp monitor_loop
 136++1207
 137++1207              show_welcome_message:
 138++1207 CD 82 07     	call message
 139++120A 0D 0A        	db 13,10
 140++120C 1B 5B 34 32  	db 27,'[42m','+------------------+',13,10
 140++1210 6D 2B 2D 2D
 140++1214 2D 2D 2D 2D
 140++1218 2D 2D 2D 2D
 140++121C 2D 2D 2D 2D
 140++1220 2D 2D 2D 2D
 140++1224 2B 0D 0A
 141++1227 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 141++122B 6D 7C 1B 5B
 141++122F 34 30 6D 20
 141++1233 20 20 20 20
 141++1237 20 20 20 20
 141++123B 20 20 20 20
 141++123F 20 20 20 20
 141++1243 20 1B 5B 34
 141++1247 32 6D 7C 0D
 141++124B 0A
 142++124C 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','  Z80 Playground  ',27,'[42m','|',13,10
 142++1250 6D 7C 1B 5B
 142++1254 34 30 6D 20
 142++1258 20 5A 38 30
 142++125C 20 50 6C 61
 142++1260 79 67 72 6F
 142++1264 75 6E 64 20
 142++1268 20 1B 5B 34
 142++126C 32 6D 7C 0D
 142++1270 0A
 143++1271 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                  ',27,'[42m','|',13,10
 143++1275 6D 7C 1B 5B
 143++1279 34 30 6D 20
 143++127D 20 20 20 20
 143++1281 20 20 20 20
 143++1285 20 20 20 20
 143++1289 20 20 20 20
 143++128D 20 1B 5B 34
 143++1291 32 6D 7C 0D
 143++1295 0A
 144++1296 1B 5B 34 32  	db 27,'[42m','+------------------+',27,'[40m',13,10,13,10
 144++129A 6D 2B 2D 2D
 144++129E 2D 2D 2D 2D
 144++12A2 2D 2D 2D 2D
 144++12A6 2D 2D 2D 2D
 144++12AA 2D 2D 2D 2D
 144++12AE 2B 1B 5B 34
 144++12B2 30 6D 0D 0A
 144++12B6 0D 0A
 145++12B8 4D 6F 6E 69  	db 'Monitor v1.05 February 2021',13,10,13,10
 145++12BC 74 6F 72 20
 145++12C0 76 31 2E 30
 145++12C4 35 20 46 65
 145++12C8 62 72 75 61
 145++12CC 72 79 20 32
 145++12D0 30 32 31 0D
 145++12D4 0A 0D 0A
 146++12D7 63 20 3D 20  	db 'c = CP/M', 13, 10
 146++12DB 43 50 2F 4D
 146++12DF 0D 0A
 147++12E1 74 20 3D 20  	db 't = Tiny Basic',13,10
 147++12E5 54 69 6E 79
 147++12E9 20 42 61 73
 147++12ED 69 63 0D 0A
 148++12F1 67 20 3D 20  	db 'g = Game-of-Life',13,10
 148++12F5 47 61 6D 65
 148++12F9 2D 6F 66 2D
 148++12FD 4C 69 66 65
 148++1301 0D 0A
 149++1303 6D 20 3D 20  	db 'm = Memory Map', 13, 10
 149++1307 4D 65 6D 6F
 149++130B 72 79 20 4D
 149++130F 61 70 0D 0A
 150++1313 30 20 3D 20  	db '0 = Show Page 0 of Memory', 13, 10
 150++1317 53 68 6F 77
 150++131B 20 50 61 67
 150++131F 65 20 30 20
 150++1323 6F 66 20 4D
 150++1327 65 6D 6F 72
 150++132B 79 0D 0A
 151++132E 68 20 3D 20  	db 'h = Move to Higher Page', 13, 10
 151++1332 4D 6F 76 65
 151++1336 20 74 6F 20
 151++133A 48 69 67 68
 151++133E 65 72 20 50
 151++1342 61 67 65 0D
 151++1346 0A
 152++1347 6C 20 3D 20  	db 'l = Move to Lower Page', 13, 10
 152++134B 4D 6F 76 65
 152++134F 20 74 6F 20
 152++1353 4C 6F 77 65
 152++1357 72 20 50 61
 152++135B 67 65 0D 0A
 153++135F 75 20 3D 20  	db 'u = User LED toggle', 13, 10
 153++1363 55 73 65 72
 153++1367 20 4C 45 44
 153++136B 20 74 6F 67
 153++136F 67 6C 65 0D
 153++1373 0A
 154++1374 33 20 3D 20  	db '3 = ROM ON', 13, 10
 154++1378 52 4F 4D 20
 154++137C 4F 4E 0D 0A
 155++1380 34 20 3D 20  	db '4 = ROM OFF', 13, 10
 155++1384 52 4F 4D 20
 155++1388 4F 46 46 0D
 155++138C 0A
 156++138D 64 20 3D 20  	db 'd = Disk LED toggle', 13, 10
 156++1391 44 69 73 6B
 156++1395 20 4C 45 44
 156++1399 20 74 6F 67
 156++139D 67 6C 65 0D
 156++13A1 0A
 157++13A2 23 20 3D 20  	db '# = Execute HALT instruction',13,10
 157++13A6 45 78 65 63
 157++13AA 75 74 65 20
 157++13AE 48 41 4C 54
 157++13B2 20 69 6E 73
 157++13B6 74 72 75 63
 157++13BA 74 69 6F 6E
 157++13BE 0D 0A
 158++13C0 62 20 3D 20  	db 'b = Run burn-in test',13,10
 158++13C4 52 75 6E 20
 158++13C8 62 75 72 6E
 158++13CC 2D 69 6E 20
 158++13D0 74 65 73 74
 158++13D4 0D 0A
 159++13D6 2F 20 3D 20  	db '/ = Show this Menu',13,10
 159++13DA 53 68 6F 77
 159++13DE 20 74 68 69
 159++13E2 73 20 4D 65
 159++13E6 6E 75 0D 0A
 160++13EA              	;db 'j = Poor-Man''s Jupiter Ace',13,10
 161++13EA 0D 0A 00     	db 13,10,0
 162++13ED C9           	ret
 163++13EE
 164++13EE              monitor_init:
 165++13EE                  ; Four flashes on the USER (blue) LED and disk (yellow) LED
 166++13EE 06 04            ld b, 4
 167++13F0              monitor_init1:
 168++13F0 C5               push bc
 169++13F1 CD 67 07     	call user_off
 170++13F4 CD 53 07     	call disk_on
 171++13F7 CD 37 07     	call medium_pause
 172++13FA CD 5A 07     	call user_on
 173++13FD CD 4C 07     	call disk_off
 174++1400 CD 37 07     	call medium_pause
 175++1403 C1               pop bc
 176++1404 10 EA            djnz monitor_init1
 177++1406 CD 67 07     	call user_off
 178++1409
 179++1409 CD 0D 14         call ram_fill
 180++140C C9               ret
 181++140D
 182++140D              ram_fill:
 183++140D                  ; Copy the first 16k of ROM down to ram
 184++140D 21 00 00     	ld hl,0
 185++1410 11 00 00     	ld de,0
 186++1413 01 00 40     	ld bc, 1024*16
 187++1416 ED B0        	ldir
 188++1418 C9               ret
 189++1419
 190++1419              ;--------------------------------------------------------------------------------------------------
 191++1419
 192++1419              	; If this memory crosses a 1K memory boundary there is the danger
 193++1419              	; that the memory testing will corrupt the code that is running.
 194++1419              	; If memory map crashes, this is why.
 195++1419              	; TODO: Relocate this code to a safe location, such as 1024.
 196++1419
 197++1419 44 41 4E 47  	db 'DANGER AREA STARTS '
 197++141D 45 52 20 41
 197++1421 52 45 41 20
 197++1425 53 54 41 52
 197++1429 54 53 20
 198++142C
 199++142C              show_memory_map:
 200++142C              	; Look at the first byte of each 1K block.
 201++142C              	; If it is ROM show one char, if RAM show another.
 202++142C CD 40 1A     	call clear_screen
 203++142F CD 07 07     	call newline
 204++1432 11 00 00     	ld de,0
 205++1435 06 40        	ld b,64
 206++1437
 207++1437              map_loop:
 208++1437 C5           	push bc
 209++1438
 210++1438 1A           	ld a,(de)			; get initial value
 211++1439 47           	ld b,a
 212++143A
 213++143A 3E 00        	ld a,0
 214++143C 12           	ld (de),a			; see if a 0 stores
 215++143D 1A           	ld a,(de)
 216++143E FE 00        	cp 0
 217++1440 20 10        	jr nz,rom_location
 218++1442
 219++1442 3E FF        	ld a,255
 220++1444 12           	ld (de),a			; see if a 255 stores
 221++1445 1A           	ld a,(de)
 222++1446 FE FF        	cp 255
 223++1448 20 08        	jr nz,rom_location
 224++144A
 225++144A              ram_location:
 226++144A CD 82 07     	call message
 227++144D 20 00        	db ' ',0
 228++144F C3 60 14     	jp shown_location
 229++1452              rom_location:
 230++1452 CD 82 07     	call message
 231++1455 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',0
 231++1459 6D 52 1B 5B
 231++145D 30 6D 00
 232++1460              shown_location:
 233++1460
 234++1460 78           	ld a,b				; restore initial value
 235++1461 12           	ld (de),a
 236++1462
 237++1462 C1           	pop bc
 238++1463 21 00 04     	ld hl, 1024
 239++1466 19           	add hl,de
 240++1467 EB           	ex de,hl
 241++1468 10 CD        	djnz map_loop
 242++146A
 243++146A CD 07 07     	call newline
 244++146D              	; Now show a row all of ram
 245++146D 06 40        	ld b, 64
 246++146F              ram_loop:
 247++146F C5           	push bc
 248++1470 CD 82 07     	call message
 249++1473 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',0
 249++1477 6D 72 1B 5B
 249++147B 30 6D 00
 250++147E C1           	pop bc
 251++147F 10 EE        	djnz ram_loop
 252++1481
 253++1481 CD 07 07     	call newline
 254++1484 CD 82 07     	call message
 255++1487 7C 20 20 20  	db '|       |       |       |       |       |       |       |      |',13,10
 255++148B 20 20 20 20
 255++148F 7C 20 20 20
 255++1493 20 20 20 20
 255++1497 7C 20 20 20
 255++149B 20 20 20 20
 255++149F 7C 20 20 20
 255++14A3 20 20 20 20
 255++14A7 7C 20 20 20
 255++14AB 20 20 20 20
 255++14AF 7C 20 20 20
 255++14B3 20 20 20 20
 255++14B7 7C 20 20 20
 255++14BB 20 20 20 20
 255++14BF 7C 20 20 20
 255++14C3 20 20 20 7C
 255++14C7 0D 0A
 256++14C9 30 30 30 30  	db '0000    2000    4000    6000    8000    A000    C000    E000   FFFF',13,10
 256++14CD 20 20 20 20
 256++14D1 32 30 30 30
 256++14D5 20 20 20 20
 256++14D9 34 30 30 30
 256++14DD 20 20 20 20
 256++14E1 36 30 30 30
 256++14E5 20 20 20 20
 256++14E9 38 30 30 30
 256++14ED 20 20 20 20
 256++14F1 41 30 30 30
 256++14F5 20 20 20 20
 256++14F9 43 30 30 30
 256++14FD 20 20 20 20
 256++1501 45 30 30 30
 256++1505 20 20 20 46
 256++1509 46 46 46 0D
 256++150D 0A
 257++150E 30 4B 20 20  	db '0K      8K      16K     24K     32K     40K     48K     56K    64K',13,10,13,10
 257++1512 20 20 20 20
 257++1516 38 4B 20 20
 257++151A 20 20 20 20
 257++151E 31 36 4B 20
 257++1522 20 20 20 20
 257++1526 32 34 4B 20
 257++152A 20 20 20 20
 257++152E 33 32 4B 20
 257++1532 20 20 20 20
 257++1536 34 30 4B 20
 257++153A 20 20 20 20
 257++153E 34 38 4B 20
 257++1542 20 20 20 20
 257++1546 35 36 4B 20
 257++154A 20 20 20 36
 257++154E 34 4B 0D 0A
 257++1552 0D 0A
 258++1554 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',' = ROM    '
 258++1558 6D 52 1B 5B
 258++155C 30 6D 20 3D
 258++1560 20 52 4F 4D
 258++1564 20 20 20 20
 259++1568 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',' = RAM',13,10
 259++156C 6D 72 1B 5B
 259++1570 30 6D 20 3D
 259++1574 20 52 41 4D
 259++1578 0D 0A
 260++157A 0D 0A            db 13,10
 261++157C 31 36 43 35  	db '16C550C UART Ports     CH376S Module Ports',13,10
 261++1580 35 30 43 20
 261++1584 55 41 52 54
 261++1588 20 50 6F 72
 261++158C 74 73 20 20
 261++1590 20 20 20 43
 261++1594 48 33 37 36
 261++1598 53 20 4D 6F
 261++159C 64 75 6C 65
 261++15A0 20 50 6F 72
 261++15A4 74 73 0D 0A
 262++15A8 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 262++15AC 2D 2D 2D 2D
 262++15B0 2D 2D 2D 2D
 262++15B4 2D 2D 2D 2D
 262++15B8 2D 2D 2D 20
 262++15BC 20 20 20 2D
 262++15C0 2D 2D 2D 2D
 262++15C4 2D 2D 2D 2D
 262++15C8 2D 2D 2D 2D
 262++15CC 2D 2D 2D 2D
 262++15D0 2D 2D 0D 0A
 263++15D4 54 58 20 2F  	db 'TX / RX           8    Data Port        16',13,10
 263++15D8 20 52 58 20
 263++15DC 20 20 20 20
 263++15E0 20 20 20 20
 263++15E4 20 20 38 20
 263++15E8 20 20 20 44
 263++15EC 61 74 61 20
 263++15F0 50 6F 72 74
 263++15F4 20 20 20 20
 263++15F8 20 20 20 20
 263++15FC 31 36 0D 0A
 264++1600 49 6E 74 65  	db 'Interrupt Enable  9    Command Port     17',13,10
 264++1604 72 72 75 70
 264++1608 74 20 45 6E
 264++160C 61 62 6C 65
 264++1610 20 20 39 20
 264++1614 20 20 20 43
 264++1618 6F 6D 6D 61
 264++161C 6E 64 20 50
 264++1620 6F 72 74 20
 264++1624 20 20 20 20
 264++1628 31 37 0D 0A
 265++162C 49 6E 74 65  	db 'Interrup Status  10',13,10
 265++1630 72 72 75 70
 265++1634 20 53 74 61
 265++1638 74 75 73 20
 265++163C 20 31 30 0D
 265++1640 0A
 266++1641 4C 69 6E 65  	db 'Line Control     11',13,10
 266++1645 20 43 6F 6E
 266++1649 74 72 6F 6C
 266++164D 20 20 20 20
 266++1651 20 31 31 0D
 266++1655 0A
 267++1656 4D 6F 64 65  	db 'Modem Control    12 <---- 76543210',13,10
 267++165A 6D 20 43 6F
 267++165E 6E 74 72 6F
 267++1662 6C 20 20 20
 267++1666 20 31 32 20
 267++166A 3C 2D 2D 2D
 267++166E 2D 20 37 36
 267++1672 35 34 33 32
 267++1676 31 30 0D 0A
 268++167A 4C 69 6E 65  	db 'Line Status      13      Bit 0 = User LED',13,10
 268++167E 20 53 74 61
 268++1682 74 75 73 20
 268++1686 20 20 20 20
 268++168A 20 31 33 20
 268++168E 20 20 20 20
 268++1692 20 42 69 74
 268++1696 20 30 20 3D
 268++169A 20 55 73 65
 268++169E 72 20 4C 45
 268++16A2 44 0D 0A
 269++16A5 4D 6F 64 65  	db 'Modem Status     14      Bit 2 = Disk LED',13,10
 269++16A9 6D 20 53 74
 269++16AD 61 74 75 73
 269++16B1 20 20 20 20
 269++16B5 20 31 34 20
 269++16B9 20 20 20 20
 269++16BD 20 42 69 74
 269++16C1 20 32 20 3D
 269++16C5 20 44 69 73
 269++16C9 6B 20 4C 45
 269++16CD 44 0D 0A
 270++16D0 53 63 72 61  	db 'Scratch          15      Bit 3 = ROM Enable',13,10
 270++16D4 74 63 68 20
 270++16D8 20 20 20 20
 270++16DC 20 20 20 20
 270++16E0 20 31 35 20
 270++16E4 20 20 20 20
 270++16E8 20 42 69 74
 270++16EC 20 33 20 3D
 270++16F0 20 52 4F 4D
 270++16F4 20 45 6E 61
 270++16F8 62 6C 65 0D
 270++16FC 0A
 271++16FD 0D 0A        	db 13,10
 272++16FF 54 68 65 20  	db 'The EEPROM is an ATMEL AT28C256',13,10
 272++1703 45 45 50 52
 272++1707 4F 4D 20 69
 272++170B 73 20 61 6E
 272++170F 20 41 54 4D
 272++1713 45 4C 20 41
 272++1717 54 32 38 43
 272++171B 32 35 36 0D
 272++171F 0A
 273++1720 0D 0A 00     	db 13,10,0
 274++1723 C9           	ret
 275++1724
 276++1724 44 41 4E 47  	db 'DANGER ENDS '
 276++1728 45 52 20 45
 276++172C 4E 44 53 20
 277++1730
 278++1730              ; -------------------------------------------------------------------------------------------------
 279++1730              goto_page_0:
 280++1730 3E 00        	ld a, 0
 281++1732 32 64 EA     	ld (current_page),a
 282++1735 CD 07 07     	call newline
 283++1738 CD 4C 1A     	call show_page
 284++173B C9           	ret
 285++173C
 286++173C              ; -------------------------------------------------------------------------------------------------
 287++173C
 288++173C              ; This is the BURN-IN test.
 289++173C              ; I use it on new Z80 Playground boards that I have assemmbled, to check them.
 290++173C              ; It runs for about an hour, reads and writes files to the USB Drive,
 291++173C              ; flashes the LEDs, prints things to the screen etc.
 292++173C              ; The idea is that if it is still running after an hour, the board is good.
 293++173C              burn_x equ 39000
 294++173C              burn_y equ 39001
 295++173C              burn_in_dump_area equ 39002
 296++173C
 297++173C              burn_in:
 298++173C CD 7B 07     	call rom_off					; Needs to be off for ram-test to work
 299++173F CD 61 07     	call user_toggle
 300++1742 CD 40 1A     	call clear_screen
 301++1745 CD 82 07     	call message
 302++1748 53 74 61 72  	db 'Starting BURN-IN test. This takes about 30 minutes.',13,10,0
 302++174C 74 69 6E 67
 302++1750 20 42 55 52
 302++1754 4E 2D 49 4E
 302++1758 20 74 65 73
 302++175C 74 2E 20 54
 302++1760 68 69 73 20
 302++1764 74 61 6B 65
 302++1768 73 20 61 62
 302++176C 6F 75 74 20
 302++1770 33 30 20 6D
 302++1774 69 6E 75 74
 302++1778 65 73 2E 0D
 302++177C 0A 00
 303++177E
 304++177E              	; Draw empty box
 305++177E
 306++177E 3E 01        	ld a, 1
 307++1780 32 59 98     	ld (burn_y), a
 308++1783              draw_loop_y:
 309++1783 CD 12 07     	call space
 310++1786 06 23        	ld b, 35
 311++1788              draw_loop_x:
 312++1788 3E B2        	ld a, 178
 313++178A CD D1 06     	call print_a
 314++178D 10 F9        	djnz draw_loop_x
 315++178F
 316++178F CD 07 07     	call newline
 317++1792
 318++1792 3A 59 98     	ld a, (burn_y)
 319++1795 3C           	inc a
 320++1796 32 59 98     	ld (burn_y), a
 321++1799 FE 14        	cp 20
 322++179B 38 E6        	jr c, draw_loop_y
 323++179D
 324++179D              	; Now main burn in loop
 325++179D
 326++179D 3E 00        	ld a, 0
 327++179F 32 59 98     	ld (burn_y), a
 328++17A2              burn_in_loop_y:
 329++17A2 3E 00        	ld a, 0
 330++17A4 32 58 98     	ld (burn_x), a
 331++17A7              burn_in_loop_x:
 332++17A7 CD 08 18     	call full_ram_test
 333++17AA C2 10 19     	jp nz, burn_in_ram_error
 334++17AD CD 20 18     	call one_minute_burn_in
 335++17B0 3A 58 98     	ld a, (burn_x)
 336++17B3 3C           	inc a
 337++17B4 32 58 98     	ld (burn_x), a
 338++17B7 FE 20        	cp 32
 339++17B9 20 EC        	jr nz, burn_in_loop_x
 340++17BB 3A 59 98     	ld a, (burn_y)
 341++17BE 3C           	inc a
 342++17BF 32 59 98     	ld (burn_y), a
 343++17C2 FE 10        	cp 16
 344++17C4 20 DC        	jr nz, burn_in_loop_y
 345++17C6
 346++17C6 CD 07 07     	call newline
 347++17C9 CD 82 07     	call message
 348++17CC 0D 0A 59 41  	db 13,10,'YAY! All tests pass! Press a key to continue...',13,10,0
 348++17D0 59 21 20 41
 348++17D4 6C 6C 20 74
 348++17D8 65 73 74 73
 348++17DC 20 70 61 73
 348++17E0 73 21 20 50
 348++17E4 72 65 73 73
 348++17E8 20 61 20 6B
 348++17EC 65 79 20 74
 348++17F0 6F 20 63 6F
 348++17F4 6E 74 69 6E
 348++17F8 75 65 2E 2E
 348++17FC 2E 0D 0A 00
 349++1800              burn_in_wait:
 350++1800 CD 18 07     	call char_in			; get a char from keyboard
 351++1803 FE 00        	cp 0					; If it's null, ignore it
 352++1805 28 F9        	jr z,burn_in_wait
 353++1807 C9           	ret
 354++1808
 355++1808              full_ram_test:
 356++1808              	; Tests all of ram.
 357++1808              	; Returns Z set if success.
 358++1808 21 FF FF     	ld hl, $FFFF
 359++180B              full_ram_test1:
 360++180B 46           	ld b, (hl)
 361++180C
 362++180C 36 55        	ld (hl), %01010101
 363++180E 7E           	ld a, (hl)
 364++180F FE 55        	cp %01010101
 365++1811 C0           	ret nz
 366++1812
 367++1812 36 AA        	ld (hl), %10101010
 368++1814 7E           	ld a, (hl)
 369++1815 FE AA        	cp %10101010
 370++1817 C0           	ret nz
 371++1818
 372++1818 70           	ld (hl), b
 373++1819 2B           	dec hl
 374++181A 7C           	ld a, h
 375++181B B5           	or l
 376++181C 20 ED        	jr nz, full_ram_test1
 377++181E BF               cp a                                ; set zero flag for success
 378++181F C9           	ret
 379++1820
 380++1820              one_minute_burn_in:
 381++1820              	; set cursor position
 382++1820 3E 1B            ld a, ESC
 383++1822 CD D1 06         call print_a
 384++1825 3E 5B            ld a, '['
 385++1827 CD D1 06         call print_a
 386++182A 3A 59 98         ld a, (burn_y)
 387++182D C6 03        	add a, 3
 388++182F CD 17 1A         call print_a_as_decimal
 389++1832 3E 3B            ld a, ';'
 390++1834 CD D1 06         call print_a
 391++1837 3A 58 98         ld a, (burn_x)
 392++183A C6 03        	add a, 3
 393++183C CD 17 1A         call print_a_as_decimal
 394++183F 3E 48            ld a, 'H'
 395++1841 CD D1 06         call print_a
 396++1844
 397++1844              	; set foreground colour
 398++1844 3E 1B            ld a, ESC
 399++1846 CD D1 06         call print_a
 400++1849 3E 5B            ld a, '['
 401++184B CD D1 06         call print_a
 402++184E 3E 33            ld a, '3'
 403++1850 CD D1 06         call print_a
 404++1853 3A 58 98         ld a, (burn_x)
 405++1856 CB 3F        	srl a
 406++1858 CB 3F        	srl a
 407++185A C6 30        	add a, '0'
 408++185C CD D1 06         call print_a
 409++185F 3E 6D            ld a, 'm'
 410++1861 CD D1 06         call print_a
 411++1864
 412++1864              	; set background colour
 413++1864 3E 1B            ld a, ESC
 414++1866 CD D1 06         call print_a
 415++1869 3E 5B            ld a, '['
 416++186B CD D1 06         call print_a
 417++186E 3E 34            ld a, '4'
 418++1870 CD D1 06         call print_a
 419++1873 3A 59 98         ld a, (burn_y)
 420++1876 CB 3F        	srl a
 421++1878 CB 3F        	srl a
 422++187A C6 30        	add a, '0'
 423++187C CD D1 06         call print_a
 424++187F 3E 6D            ld a, 'm'
 425++1881 CD D1 06         call print_a
 426++1884
 427++1884 3E DD        	ld a, 221
 428++1886 CD D1 06     	call print_a
 429++1889
 430++1889              	; Normal colour again
 431++1889 3E 1B            ld a, ESC
 432++188B CD D1 06         call print_a
 433++188E 3E 5B            ld a, '['
 434++1890 CD D1 06         call print_a
 435++1893 3E 30            ld a, '0'
 436++1895 CD D1 06         call print_a
 437++1898 3E 6D            ld a, 'm'
 438++189A CD D1 06         call print_a
 439++189D
 440++189D CD A6 19     	call burn_in_write_file
 441++18A0
 442++18A0              burn_in_inner_loop:
 443++18A0 CD 61 07     	call user_toggle
 444++18A3 CD 46 07     	call disk_toggle
 445++18A6
 446++18A6 CD AD 18     	call burn_in_read_file
 447++18A9
 448++18A9 CD 75 19     	call burn_in_erase_file
 449++18AC C9           	ret
 450++18AD
 451++18AD              burn_in_read_file:
 452++18AD              	; Read the file and check the content.
 453++18AD              	; If not good, halt the processor.
 454++18AD 21 9D 0E     	ld hl, ROOT_NAME
 455++18B0 CD 9B 0D     	call open_file
 456++18B3 21 35 1A     	ld hl, BURN_IN_NAME
 457++18B6 CD 9B 0D     	call open_file
 458++18B9
 459++18B9 3E 3A        	ld a, BYTE_READ
 460++18BB CD 4B 0E     	call send_command_byte
 461++18BE 3E FF        	ld a, 255                           ; Request all of the file
 462++18C0 CD 2F 0E     	call send_data_byte
 463++18C3 3E FF        	ld a, 255                           ; Yes, all!
 464++18C5 CD 2F 0E     	call send_data_byte
 465++18C8
 466++18C8 3E 22        	ld a, GET_STATUS
 467++18CA CD 4B 0E     	call send_command_byte
 468++18CD CD 54 0E     	call read_data_byte
 469++18D0 21 5A 98     	ld hl, burn_in_dump_area
 470++18D3              burn_in_load_loop1:
 471++18D3 FE 1D        	cp USB_INT_DISK_READ
 472++18D5 20 25        	jr nz, burn_in_load_finished
 473++18D7
 474++18D7 E5           	push hl
 475++18D8 CD 53 07     	call disk_on
 476++18DB 3E 27        	ld a, RD_USB_DATA0
 477++18DD CD 4B 0E     	call send_command_byte
 478++18E0 CD 54 0E     	call read_data_byte
 479++18E3 E1           	pop hl
 480++18E4 CD 5D 0E     	call read_data_bytes_into_hl
 481++18E7 E5           	push hl
 482++18E8 CD 4C 07     	call disk_off
 483++18EB 3E 3B        	ld a, BYTE_RD_GO
 484++18ED CD 4B 0E     	call send_command_byte
 485++18F0 3E 22        	ld a, GET_STATUS
 486++18F2 CD 4B 0E     	call send_command_byte
 487++18F5 CD 54 0E     	call read_data_byte
 488++18F8 E1           	pop hl
 489++18F9 C3 D3 18     	jp burn_in_load_loop1
 490++18FC              burn_in_load_finished:
 491++18FC CD AE 0D     	call close_file
 492++18FF
 493++18FF              	; Now compare file content with what we wrote there originally
 494++18FF 11 00 90     	ld de, config_file_loc
 495++1902 21 5A 98     	ld hl, burn_in_dump_area
 496++1905 06 0A        	ld b, 10
 497++1907              burn_in_compare_loop:
 498++1907 1A           	ld a, (de)
 499++1908 BE           	cp (hl)
 500++1909 20 20        	jr nz, burn_in_compare_failed
 501++190B 13           	inc de
 502++190C 23           	inc hl
 503++190D 10 F8        	djnz burn_in_compare_loop
 504++190F C9           	ret
 505++1910
 506++1910              burn_in_ram_error:
 507++1910 CD 82 07     	call message
 508++1913 52 41 4D 20  	db 'RAM error at ',0
 508++1917 65 72 72 6F
 508++191B 72 20 61 74
 508++191F 20 00
 509++1921 CD 97 07     	call show_hl_as_hex
 510++1924 CD 82 07     	call message
 511++1927 0D 0A 00     	db 13,10,0
 512++192A 76           	halt
 513++192B
 514++192B              burn_in_compare_failed:
 515++192B CD 82 07     	call message
 516++192E 46 69 6C 65  	db 'Files were different!',13,10,0
 516++1932 73 20 77 65
 516++1936 72 65 20 64
 516++193A 69 66 66 65
 516++193E 72 65 6E 74
 516++1942 21 0D 0A 00
 517++1946 CD 82 07     	call message
 518++1949 45 78 70 65  	db 'Expected: ',0
 518++194D 63 74 65 64
 518++1951 3A 20 00
 519++1954 21 00 90     	ld hl, config_file_loc
 520++1957 CD CC 1A     	call show_string_at_hl
 521++195A CD 07 07     	call newline
 522++195D
 523++195D CD 82 07     	call message
 524++1960 41 63 74 75  	db 'Actual  : ',0
 524++1964 61 6C 20 20
 524++1968 3A 20 00
 525++196B 21 5A 98     	ld hl, burn_in_dump_area
 526++196E CD CC 1A     	call show_string_at_hl
 527++1971 CD 07 07     	call newline
 528++1974
 529++1974 76           	halt
 530++1975
 531++1975              burn_in_erase_file:
 532++1975              	; Try to open the test file
 533++1975 CD AE 0D     	call close_file
 534++1978 21 9D 0E     	ld hl, ROOT_NAME
 535++197B CD 9B 0D     	call open_file
 536++197E 21 35 1A     	ld hl, BURN_IN_NAME
 537++1981 CD 9B 0D     	call open_file
 538++1984 20 1C        	jr nz, burn_in_file_not_found
 539++1986 CD AE 0D     	call close_file
 540++1989
 541++1989              	; Erase it if it exists
 542++1989 21 9D 0E     	ld hl, ROOT_NAME
 543++198C CD 9B 0D     	call open_file
 544++198F 3E 2F        	ld a, SET_FILE_NAME
 545++1991 CD 4B 0E     	call send_command_byte
 546++1994 21 35 1A     	ld hl, BURN_IN_NAME
 547++1997 CD 35 0E     	call send_data_string
 548++199A 3E 35        	ld a, FILE_ERASE
 549++199C CD 4B 0E     	call send_command_byte
 550++199F CD 90 0E     	call read_status_byte
 551++19A2              burn_in_file_not_found:
 552++19A2 CD AE 0D     	call close_file
 553++19A5 C9           	ret
 554++19A6
 555++19A6              burn_in_write_file:
 556++19A6 CD 75 19     	call burn_in_erase_file
 557++19A9
 558++19A9              	; Create it and put a value in it
 559++19A9 21 9D 0E     	ld hl, ROOT_NAME
 560++19AC CD 9B 0D     	call open_file
 561++19AF 11 35 1A     	ld de, BURN_IN_NAME
 562++19B2 CD 86 0D     	call create_file
 563++19B5 28 23        	jr z, burnin_create_ok
 564++19B7 CD 82 07     	call message
 565++19BA 45 52 52 4F  	db 'ERROR creating burn-in file.',13,10,0
 565++19BE 52 20 63 72
 565++19C2 65 61 74 69
 565++19C6 6E 67 20 62
 565++19CA 75 72 6E 2D
 565++19CE 69 6E 20 66
 565++19D2 69 6C 65 2E
 565++19D6 0D 0A 00
 566++19D9 76           	halt
 567++19DA
 568++19DA              burnin_create_ok:
 569++19DA 3E 3C        	ld a, BYTE_WRITE
 570++19DC CD 4B 0E     	call send_command_byte
 571++19DF
 572++19DF              	; Send number of bytes we are about to write, as 16 bit number, low first
 573++19DF CD EA 26     	call get_program_size
 574++19E2 3E 0A        	ld a, 10
 575++19E4 CD 2F 0E     	call send_data_byte
 576++19E7 3E 00        	ld a, 0
 577++19E9 CD 2F 0E     	call send_data_byte
 578++19EC
 579++19EC 21 00 90     	ld hl, config_file_loc
 580++19EF 36 48        	ld (hl), 'H'
 581++19F1 23           	inc hl
 582++19F2 36 65        	ld (hl), 'e'
 583++19F4 23           	inc hl
 584++19F5 36 6C        	ld (hl), 'l'
 585++19F7 23           	inc hl
 586++19F8 36 6C        	ld (hl), 'l'
 587++19FA 23           	inc hl
 588++19FB 36 6F        	ld (hl), 'o'
 589++19FD 23           	inc hl
 590++19FE 3A 58 98     	ld a, (burn_x)
 591++1A01 C6 21        	add a, 33
 592++1A03 77           	ld (hl), a
 593++1A04 23           	inc hl
 594++1A05 77           	ld (hl), a
 595++1A06 23           	inc hl
 596++1A07 77           	ld (hl), a
 597++1A08 23           	inc hl
 598++1A09 77           	ld (hl), a
 599++1A0A 23           	inc hl
 600++1A0B 36 00        	ld (hl), 0
 601++1A0D
 602++1A0D 21 00 90     	ld hl, config_file_loc			; Write the bytes that are in this temp area
 603++1A10 CD 2F 0A     	call write_loop
 604++1A13 CD AE 0D     	call close_file
 605++1A16 C9           	ret
 606++1A17
 607++1A17              print_a_as_decimal:
 608++1A17 06 00        	ld b, 0
 609++1A19              print_a_as_decimal1:
 610++1A19 FE 0A        	cp 10
 611++1A1B 38 06        	jr c, print_a_as_decimal_units
 612++1A1D 04           	inc b
 613++1A1E 0E 0A        	ld c, 10
 614++1A20 91           	sub c
 615++1A21 18 F6        	jr print_a_as_decimal1
 616++1A23
 617++1A23              print_a_as_decimal_units:
 618++1A23 F5           	push af
 619++1A24 78           	ld a, b
 620++1A25 FE 00        	cp 0
 621++1A27 28 05        	jr z, print_a_as_decimal_units1
 622++1A29 C6 30        	add a, '0'
 623++1A2B CD D1 06     	call print_a
 624++1A2E              print_a_as_decimal_units1:
 625++1A2E F1           	pop af
 626++1A2F C6 30        	add a, '0'
 627++1A31 CD D1 06     	call print_a
 628++1A34 C9           	ret
 629++1A35
 630++1A35              BURN_IN_NAME:
 631++1A35 42 55 52 4E  	db 'BURNIN.TXT',0
 631++1A39 49 4E 2E 54
 631++1A3D 58 54 00
 632++1A40
 633++1A40              	include "printing.asm"
# file opened: printing.asm
   1++1A40              ; printing.asm
   2++1A40
   3++1A40              ; -------------------------------------------------------------------------------------------------
   4++1A40
   5++1A40              clear_screen:
   6++1A40 CD 82 07     	call message
   7++1A43 1B 5B 32 4A  	db 27,'[2J',27,'[H',0
   7++1A47 1B 5B 48 00
   8++1A4B C9           	ret
   9++1A4C
  10++1A4C              show_page:
  11++1A4C CD 40 1A     	call clear_screen
  12++1A4F
  13++1A4F 3A 64 EA     	ld a,(current_page)
  14++1A52 57           	ld d,a
  15++1A53 1E 00        	ld e,0					; de holds address of start of page to show
  16++1A55
  17++1A55 0E 10        	ld c,16					; rows to show
  18++1A57              row_loop:
  19++1A57 D5           	push de
  20++1A58 CD C3 1A     	call show_de_as_hex		; show the address
  21++1A5B CD 12 07     	call space
  22++1A5E D1           	pop de
  23++1A5F
  24++1A5F D5           	push de
  25++1A60 06 10        	ld b,16					; bytes per row
  26++1A62              col_loop:
  27++1A62 1A           	ld a,(de)				; get the byte
  28++1A63 CD A0 07     	call show_a_as_hex
  29++1A66 3E 20        	ld a,' '
  30++1A68 CD D1 06     	call print_a			; leave a space
  31++1A6B 13           	inc de					; continue to next byte
  32++1A6C 10 F4        	djnz col_loop			; continue to next column
  33++1A6E
  34++1A6E D1           	pop de					; now go over the line again in ASCII
  35++1A6F 06 10        	ld b,16					; bytes per row
  36++1A71              ascii_loop:
  37++1A71 1A           	ld a,(de)				; get the byte
  38++1A72 CD 99 1A     	call show_a_as_char
  39++1A75 13           	inc de					; continue to next char
  40++1A76 10 F9        	djnz ascii_loop			; continue to next column
  41++1A78
  42++1A78 CD 07 07     	call newline
  43++1A7B 0D           	dec c
  44++1A7C 79           	ld a,c
  45++1A7D FE 00        	cp 0
  46++1A7F 20 D6        	jr nz,row_loop			; continue to next row
  47++1A81 CD 07 07     	call newline
  48++1A84 C9           	ret
  49++1A85
  50++1A85              show_a_safe:
  51++1A85 FE 20        	cp 32
  52++1A87 38 08        	jr c,show_blank			; jr c = jump if less than ( < )
  53++1A89 FE 7F        	cp 127
  54++1A8B 30 04        	jr nc,show_blank		; jr nc = jump if equal to or greater than ( >= )
  55++1A8D CD D1 06     	call print_a
  56++1A90 C9           	ret
  57++1A91              show_blank:
  58++1A91 F5           	push af
  59++1A92 3E 2D        	ld a, '-'
  60++1A94 CD 99 1A     	call show_a_as_char
  61++1A97 F1           	pop af
  62++1A98 C9           	ret
  63++1A99
  64++1A99              show_a_as_char:
  65++1A99              	;cp 10
  66++1A99              	;jr z, show_as_char1
  67++1A99              	;cp 13
  68++1A99              	;jr z, show_as_char1
  69++1A99 FE 20        	cp 32
  70++1A9B 38 08        	jr c,show_ctrl		; jr c = jump if less than ( < )
  71++1A9D FE 7F        	cp 127
  72++1A9F 30 1C        	jr nc,show_unknown		; jr nc = jump if equal to or greater than ( >= )
  73++1AA1              show_as_char1:
  74++1AA1 CD D1 06     	call print_a
  75++1AA4 C9           	ret
  76++1AA5              show_ctrl:
  77++1AA5 F5           	push af
  78++1AA6 CD 82 07     	call message
  79++1AA9 1B 5B 37 6D  	db 27,'[7m',0
  79++1AAD 00
  80++1AAE F1           	pop af
  81++1AAF C6 40        	add a, 64
  82++1AB1 CD D1 06     	call print_a
  83++1AB4 CD 82 07     	call message
  84++1AB7 1B 5B 30 6D  	db 27,'[0m',0
  84++1ABB 00
  85++1ABC C9           	ret
  86++1ABD              show_unknown:
  87++1ABD 3E 3F        	ld a,'?'
  88++1ABF CD D1 06     	call print_a
  89++1AC2 C9           	ret
  90++1AC3
  91++1AC3              ; SHOW_DE_AS_HEX
  92++1AC3              ; Pass in a number in DE.
  93++1AC3              ; It will be displayed in this format: FFFF
  94++1AC3              show_de_as_hex:
  95++1AC3 7A           	ld a,d
  96++1AC4 CD A0 07     	call show_a_as_hex
  97++1AC7 7B           	ld a,e
  98++1AC8 CD A0 07     	call show_a_as_hex
  99++1ACB C9           	ret
 100++1ACC
 101++1ACC              ; SHOW_STRING_AT_HL
 102++1ACC              ; Pass in hl containing a pointer to a zero terminated string.
 103++1ACC              ; It will be printed.
 104++1ACC              show_string_at_hl:
 105++1ACC E5           	push hl
 106++1ACD              show_string_at_hl_loop:
 107++1ACD 7E           	ld a, (hl)
 108++1ACE FE 00        	cp 0
 109++1AD0 28 06        	jr z,show_string_at_hl_complete
 110++1AD2 23           	inc hl
 111++1AD3 CD D1 06     	call print_a			; print it
 112++1AD6 18 F5        	jr show_string_at_hl_loop
 113++1AD8              show_string_at_hl_complete:
 114++1AD8 E1           	pop hl
 115++1AD9 C9           	ret
 116++1ADA
# file closed: printing.asm
 634++1ADA              	include "test_uart.asm"
# file opened: test_uart.asm
   1++1ADA              ; test_uart.asm
   2++1ADA
   3++1ADA              test_uart:
   4++1ADA CD 82 07         call message
   5++1ADD 54 79 70 65      db 'Type some characters to test sending keys from the Z80 Playground over Serial,',13,10
   5++1AE1 20 73 6F 6D
   5++1AE5 65 20 63 68
   5++1AE9 61 72 61 63
   5++1AED 74 65 72 73
   5++1AF1 20 74 6F 20
   5++1AF5 74 65 73 74
   5++1AF9 20 73 65 6E
   5++1AFD 64 69 6E 67
   5++1B01 20 6B 65 79
   5++1B05 73 20 66 72
   5++1B09 6F 6D 20 74
   5++1B0D 68 65 20 5A
   5++1B11 38 30 20 50
   5++1B15 6C 61 79 67
   5++1B19 72 6F 75 6E
   5++1B1D 64 20 6F 76
   5++1B21 65 72 20 53
   5++1B25 65 72 69 61
   5++1B29 6C 2C 0D 0A
   6++1B2D 6F 72 20 73      db 'or send some characters from the other end of the Serial connection to test',13,10
   6++1B31 65 6E 64 20
   6++1B35 73 6F 6D 65
   6++1B39 20 63 68 61
   6++1B3D 72 61 63 74
   6++1B41 65 72 73 20
   6++1B45 66 72 6F 6D
   6++1B49 20 74 68 65
   6++1B4D 20 6F 74 68
   6++1B51 65 72 20 65
   6++1B55 6E 64 20 6F
   6++1B59 66 20 74 68
   6++1B5D 65 20 53 65
   6++1B61 72 69 61 6C
   6++1B65 20 63 6F 6E
   6++1B69 6E 65 63 74
   6++1B6D 69 6F 6E 20
   6++1B71 74 6F 20 74
   6++1B75 65 73 74 0D
   6++1B79 0A
   7++1B7A 68 6F 77 20      db 'how many are received. Whatever you send will be echoed after a carriage-return.',13,10
   7++1B7E 6D 61 6E 79
   7++1B82 20 61 72 65
   7++1B86 20 72 65 63
   7++1B8A 65 69 76 65
   7++1B8E 64 2E 20 57
   7++1B92 68 61 74 65
   7++1B96 76 65 72 20
   7++1B9A 79 6F 75 20
   7++1B9E 73 65 6E 64
   7++1BA2 20 77 69 6C
   7++1BA6 6C 20 62 65
   7++1BAA 20 65 63 68
   7++1BAE 6F 65 64 20
   7++1BB2 61 66 74 65
   7++1BB6 72 20 61 20
   7++1BBA 63 61 72 72
   7++1BBE 69 61 67 65
   7++1BC2 2D 72 65 74
   7++1BC6 75 72 6E 2E
   7++1BCA 0D 0A
   8++1BCC 4A 75 73 74      db 'Just type "quit" to go back to the main monitor menu.',13,10
   8++1BD0 20 74 79 70
   8++1BD4 65 20 22 71
   8++1BD8 75 69 74 22
   8++1BDC 20 74 6F 20
   8++1BE0 67 6F 20 62
   8++1BE4 61 63 6B 20
   8++1BE8 74 6F 20 74
   8++1BEC 68 65 20 6D
   8++1BF0 61 69 6E 20
   8++1BF4 6D 6F 6E 69
   8++1BF8 74 6F 72 20
   8++1BFC 6D 65 6E 75
   8++1C00 2E 0D 0A
   9++1C03 4F 72 20 74      db 'Or type "Z" to print a special message.',13,10,0
   9++1C07 79 70 65 20
   9++1C0B 22 5A 22 20
   9++1C0F 74 6F 20 70
   9++1C13 72 69 6E 74
   9++1C17 20 61 20 73
   9++1C1B 70 65 63 69
   9++1C1F 61 6C 20 6D
   9++1C23 65 73 73 61
   9++1C27 67 65 2E 0D
   9++1C2B 0A 00
  10++1C2D
  11++1C2D              test_uart0:
  12++1C2D 11 66 EA         ld de, test_buffer
  13++1C30 3E 00            ld a, 0
  14++1C32 12               ld (de), a              ; Always make sure the buffer ends in null
  15++1C33 06 FF            ld b, 255               ; max buffer length
  16++1C35
  17++1C35              test_uart1:
  18++1C35 CD 18 07         call char_in
  19++1C38 FE 00            cp 0
  20++1C3A 28 F9            jr z, test_uart1
  21++1C3C FE 0D            cp 13
  22++1C3E 28 14            jr z, test_uart2
  23++1C40 CD D1 06         call print_a
  24++1C43 FE 61            cp 'a'
  25++1C45 38 06            jr c, test_uart_ok
  26++1C47 FE 7B            cp 'z'+1
  27++1C49 30 02            jr nc, test_uart_ok
  28++1C4B D6 20            sub 32
  29++1C4D              test_uart_ok:
  30++1C4D 12               ld (de), a
  31++1C4E 13               inc de
  32++1C4F 3E 00            ld a, 0
  33++1C51 12               ld (de), a              ; Always make sure the buffer ends in null
  34++1C52 10 E1            djnz test_uart1         ; Keep going until we run out of buffer
  35++1C54
  36++1C54              test_uart2:
  37++1C54 CD 82 07         call message
  38++1C57 0D 0A 00         db 13,10,0
  39++1C5A
  40++1C5A CD 85 23         call did_they_type_quit
  41++1C5D C8               ret z
  42++1C5E
  43++1C5E CD 9B 23         call did_they_type_Z
  44++1C61 28 0E            jr z, show_z80_message
  45++1C63
  46++1C63 21 66 EA         ld hl, test_buffer
  47++1C66 CD CC 1A         call show_string_at_hl
  48++1C69
  49++1C69 CD 82 07         call message
  50++1C6C 0D 0A 00         db 13,10,0
  51++1C6F
  52++1C6F 18 BC            jr test_uart0
  53++1C71
  54++1C71              show_z80_message:
  55++1C71 CD 82 07         call message
  56++1C74
  57++1C74 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  57++1C78 2D 2D 2D 2D
  57++1C7C 2D 2D 2D 2D
  57++1C80 2D 2D 2D 2D
  57++1C84 2D 2D 2D 2D
  57++1C88 2D 2D 2D 2D
  57++1C8C 2D 2D 2D 2D
  57++1C90 2D 2D 2D 2D
  57++1C94 2D 2D 2D 2D
  57++1C98 2D 2D 2D 2D
  57++1C9C 2D 2D 2D 2D
  57++1CA0 2D 2D 2D 2D
  57++1CA4 2D 2D 2D 2D
  57++1CA8 2D 2D 2D 2D
  57++1CAC 2D 2D 2D 2D
  57++1CB0 2D 2D 2D 2D
  57++1CB4 2D 2D 2D 2D
  57++1CB8 2D 2D 2D 2D
  57++1CBC 2D 2D 2D 2D
  57++1CC0 2D 2D 2D 2D
  57++1CC4 2B 0D 0A
  58++1CC7 7C 20 20 20      db '|   _________   ___    _____  _                                             _   |',13,10
  58++1CCB 5F 5F 5F 5F
  58++1CCF 5F 5F 5F 5F
  58++1CD3 5F 20 20 20
  58++1CD7 5F 5F 5F 20
  58++1CDB 20 20 20 5F
  58++1CDF 5F 5F 5F 5F
  58++1CE3 20 20 5F 20
  58++1CE7 20 20 20 20
  58++1CEB 20 20 20 20
  58++1CEF 20 20 20 20
  58++1CF3 20 20 20 20
  58++1CF7 20 20 20 20
  58++1CFB 20 20 20 20
  58++1CFF 20 20 20 20
  58++1D03 20 20 20 20
  58++1D07 20 20 20 20
  58++1D0B 20 20 20 20
  58++1D0F 20 20 20 20
  58++1D13 5F 20 20 20
  58++1D17 7C 0D 0A
  59++1D1A 7C 20 20 7C      db '|  |___  / _ \ / _ \  |  __ \| |                                           | |  |',13,10
  59++1D1E 5F 5F 5F 20
  59++1D22 20 2F 20 5F
  59++1D26 20 5C 20 2F
  59++1D2A 20 5F 20 5C
  59++1D2E 20 20 7C 20
  59++1D32 20 5F 5F 20
  59++1D36 5C 7C 20 7C
  59++1D3A 20 20 20 20
  59++1D3E 20 20 20 20
  59++1D42 20 20 20 20
  59++1D46 20 20 20 20
  59++1D4A 20 20 20 20
  59++1D4E 20 20 20 20
  59++1D52 20 20 20 20
  59++1D56 20 20 20 20
  59++1D5A 20 20 20 20
  59++1D5E 20 20 20 20
  59++1D62 20 20 20 7C
  59++1D66 20 7C 20 20
  59++1D6A 7C 0D 0A
  60++1D6D 7C 20 20 20      db '|     / / (_) | | | | | |__) | | __ _ _   _  __ _ _ __ ___  _   _ _ __   __| |  |',13,10
  60++1D71 20 20 2F 20
  60++1D75 2F 20 28 5F
  60++1D79 29 20 7C 20
  60++1D7D 7C 20 7C 20
  60++1D81 7C 20 7C 20
  60++1D85 7C 5F 5F 29
  60++1D89 20 7C 20 7C
  60++1D8D 20 5F 5F 20
  60++1D91 5F 20 5F 20
  60++1D95 20 20 5F 20
  60++1D99 20 5F 5F 20
  60++1D9D 5F 20 5F 20
  60++1DA1 5F 5F 20 5F
  60++1DA5 5F 5F 20 20
  60++1DA9 5F 20 20 20
  60++1DAD 5F 20 5F 20
  60++1DB1 5F 5F 20 20
  60++1DB5 20 5F 5F 7C
  60++1DB9 20 7C 20 20
  60++1DBD 7C 0D 0A
  61++1DC0 7C 20 20 20      db '|    / / > _ <| | | | |  ___/| |/ _` | | | |/ _` | ''__/ _ \| | | | ''_ \ / _` |  |',13,10
  61++1DC4 20 2F 20 2F
  61++1DC8 20 3E 20 5F
  61++1DCC 20 3C 7C 20
  61++1DD0 7C 20 7C 20
  61++1DD4 7C 20 7C 20
  61++1DD8 20 5F 5F 5F
  61++1DDC 2F 7C 20 7C
  61++1DE0 2F 20 5F 60
  61++1DE4 20 7C 20 7C
  61++1DE8 20 7C 20 7C
  61++1DEC 2F 20 5F 60
  61++1DF0 20 7C 20 27
  61++1DF4 5F 5F 2F 20
  61++1DF8 5F 20 5C 7C
  61++1DFC 20 7C 20 7C
  61++1E00 20 7C 20 27
  61++1E04 5F 20 5C 20
  61++1E08 2F 20 5F 60
  61++1E0C 20 7C 20 20
  61++1E10 7C 0D 0A
  62++1E13 7C 20 20 20      db '|   / /_| (_) | |_| | | |    | | (_| | |_| | (_| | | | (_) | |_| | | | | (_| |  |',13,10
  62++1E17 2F 20 2F 5F
  62++1E1B 7C 20 28 5F
  62++1E1F 29 20 7C 20
  62++1E23 7C 5F 7C 20
  62++1E27 7C 20 7C 20
  62++1E2B 7C 20 20 20
  62++1E2F 20 7C 20 7C
  62++1E33 20 28 5F 7C
  62++1E37 20 7C 20 7C
  62++1E3B 5F 7C 20 7C
  62++1E3F 20 28 5F 7C
  62++1E43 20 7C 20 7C
  62++1E47 20 7C 20 28
  62++1E4B 5F 29 20 7C
  62++1E4F 20 7C 5F 7C
  62++1E53 20 7C 20 7C
  62++1E57 20 7C 20 7C
  62++1E5B 20 28 5F 7C
  62++1E5F 20 7C 20 20
  62++1E63 7C 0D 0A
  63++1E66 7C 20 20 2F      db '|  /_____\___/ \___/  |_|    |_|\__,_|\__, |\__, |_|  \___/ \__,_|_| |_|\__,_|  |',13,10
  63++1E6A 5F 5F 5F 5F
  63++1E6E 5F 5C 5F 5F
  63++1E72 5F 2F 20 5C
  63++1E76 5F 5F 5F 2F
  63++1E7A 20 20 7C 5F
  63++1E7E 7C 20 20 20
  63++1E82 20 7C 5F 7C
  63++1E86 5C 5F 5F 2C
  63++1E8A 5F 7C 5C 5F
  63++1E8E 5F 2C 20 7C
  63++1E92 5C 5F 5F 2C
  63++1E96 20 7C 5F 7C
  63++1E9A 20 20 5C 5F
  63++1E9E 5F 5F 2F 20
  63++1EA2 5C 5F 5F 2C
  63++1EA6 5F 7C 5F 7C
  63++1EAA 20 7C 5F 7C
  63++1EAE 5C 5F 5F 2C
  63++1EB2 5F 7C 20 20
  63++1EB6 7C 0D 0A
  64++1EB9 7C 20 20 20      db '|                                      __/ | __/ |                              |',13,10
  64++1EBD 20 20 20 20
  64++1EC1 20 20 20 20
  64++1EC5 20 20 20 20
  64++1EC9 20 20 20 20
  64++1ECD 20 20 20 20
  64++1ED1 20 20 20 20
  64++1ED5 20 20 20 20
  64++1ED9 20 20 20 20
  64++1EDD 20 20 20 5F
  64++1EE1 5F 2F 20 7C
  64++1EE5 20 5F 5F 2F
  64++1EE9 20 7C 20 20
  64++1EED 20 20 20 20
  64++1EF1 20 20 20 20
  64++1EF5 20 20 20 20
  64++1EF9 20 20 20 20
  64++1EFD 20 20 20 20
  64++1F01 20 20 20 20
  64++1F05 20 20 20 20
  64++1F09 7C 0D 0A
  65++1F0C 7C 20 20 20      db '|                                     |___/ |___/                               |',13,10
  65++1F10 20 20 20 20
  65++1F14 20 20 20 20
  65++1F18 20 20 20 20
  65++1F1C 20 20 20 20
  65++1F20 20 20 20 20
  65++1F24 20 20 20 20
  65++1F28 20 20 20 20
  65++1F2C 20 20 20 20
  65++1F30 20 20 7C 5F
  65++1F34 5F 5F 2F 20
  65++1F38 7C 5F 5F 5F
  65++1F3C 2F 20 20 20
  65++1F40 20 20 20 20
  65++1F44 20 20 20 20
  65++1F48 20 20 20 20
  65++1F4C 20 20 20 20
  65++1F50 20 20 20 20
  65++1F54 20 20 20 20
  65++1F58 20 20 20 20
  65++1F5C 7C 0D 0A
  66++1F5F 7C 20 20 20      db '|                                                                               |',13,10
  66++1F63 20 20 20 20
  66++1F67 20 20 20 20
  66++1F6B 20 20 20 20
  66++1F6F 20 20 20 20
  66++1F73 20 20 20 20
  66++1F77 20 20 20 20
  66++1F7B 20 20 20 20
  66++1F7F 20 20 20 20
  66++1F83 20 20 20 20
  66++1F87 20 20 20 20
  66++1F8B 20 20 20 20
  66++1F8F 20 20 20 20
  66++1F93 20 20 20 20
  66++1F97 20 20 20 20
  66++1F9B 20 20 20 20
  66++1F9F 20 20 20 20
  66++1FA3 20 20 20 20
  66++1FA7 20 20 20 20
  66++1FAB 20 20 20 20
  66++1FAF 7C 0D 0A
  67++1FB2 7C 20 20 20      db '|        _    _         _____ _______   _            _   _                      |',13,10
  67++1FB6 20 20 20 20
  67++1FBA 20 5F 20 20
  67++1FBE 20 20 5F 20
  67++1FC2 20 20 20 20
  67++1FC6 20 20 20 20
  67++1FCA 5F 5F 5F 5F
  67++1FCE 5F 20 5F 5F
  67++1FD2 5F 5F 5F 5F
  67++1FD6 5F 20 20 20
  67++1FDA 5F 20 20 20
  67++1FDE 20 20 20 20
  67++1FE2 20 20 20 20
  67++1FE6 20 5F 20 20
  67++1FEA 20 5F 20 20
  67++1FEE 20 20 20 20
  67++1FF2 20 20 20 20
  67++1FF6 20 20 20 20
  67++1FFA 20 20 20 20
  67++1FFE 20 20 20 20
  67++2002 7C 0D 0A
  68++2005 7C 20 20 20      db '|       | |  | |  /\   |  __ \__   __| | |          | | (_)                     |',13,10
  68++2009 20 20 20 20
  68++200D 7C 20 7C 20
  68++2011 20 7C 20 7C
  68++2015 20 20 2F 5C
  68++2019 20 20 20 7C
  68++201D 20 20 5F 5F
  68++2021 20 5C 5F 5F
  68++2025 20 20 20 5F
  68++2029 5F 7C 20 7C
  68++202D 20 7C 20 20
  68++2031 20 20 20 20
  68++2035 20 20 20 20
  68++2039 7C 20 7C 20
  68++203D 28 5F 29 20
  68++2041 20 20 20 20
  68++2045 20 20 20 20
  68++2049 20 20 20 20
  68++204D 20 20 20 20
  68++2051 20 20 20 20
  68++2055 7C 0D 0A
  69++2058 7C 20 20 20      db '|       | |  | | /  \  | |__) | | |    | |_ ___  ___| |_ _ _ __   __ _          |',13,10
  69++205C 20 20 20 20
  69++2060 7C 20 7C 20
  69++2064 20 7C 20 7C
  69++2068 20 2F 20 20
  69++206C 5C 20 20 7C
  69++2070 20 7C 5F 5F
  69++2074 29 20 7C 20
  69++2078 7C 20 7C 20
  69++207C 20 20 20 7C
  69++2080 20 7C 5F 20
  69++2084 5F 5F 5F 20
  69++2088 20 5F 5F 5F
  69++208C 7C 20 7C 5F
  69++2090 20 5F 20 5F
  69++2094 20 5F 5F 20
  69++2098 20 20 5F 5F
  69++209C 20 5F 20 20
  69++20A0 20 20 20 20
  69++20A4 20 20 20 20
  69++20A8 7C 0D 0A
  70++20AB 7C 20 20 20      db '|       | |  | |/ /\ \ |  _  /  | |    | __/ _ \/ __| __| | ''_ \ / _` |         |',13,10
  70++20AF 20 20 20 20
  70++20B3 7C 20 7C 20
  70++20B7 20 7C 20 7C
  70++20BB 2F 20 2F 5C
  70++20BF 20 5C 20 7C
  70++20C3 20 20 5F 20
  70++20C7 20 2F 20 20
  70++20CB 7C 20 7C 20
  70++20CF 20 20 20 7C
  70++20D3 20 5F 5F 2F
  70++20D7 20 5F 20 5C
  70++20DB 2F 20 5F 5F
  70++20DF 7C 20 5F 5F
  70++20E3 7C 20 7C 20
  70++20E7 27 5F 20 5C
  70++20EB 20 2F 20 5F
  70++20EF 60 20 7C 20
  70++20F3 20 20 20 20
  70++20F7 20 20 20 20
  70++20FB 7C 0D 0A
  71++20FE 7C 20 20 20      db '|       | |__| / ____ \| | \ \  | |    | ||  __/\__ \ |_| | | | | (_| |         |',13,10
  71++2102 20 20 20 20
  71++2106 7C 20 7C 5F
  71++210A 5F 7C 20 2F
  71++210E 20 5F 5F 5F
  71++2112 5F 20 5C 7C
  71++2116 20 7C 20 5C
  71++211A 20 5C 20 20
  71++211E 7C 20 7C 20
  71++2122 20 20 20 7C
  71++2126 20 7C 7C 20
  71++212A 20 5F 5F 2F
  71++212E 5C 5F 5F 20
  71++2132 5C 20 7C 5F
  71++2136 7C 20 7C 20
  71++213A 7C 20 7C 20
  71++213E 7C 20 28 5F
  71++2142 7C 20 7C 20
  71++2146 20 20 20 20
  71++214A 20 20 20 20
  71++214E 7C 0D 0A
  72++2151 7C 20 20 20      db '|        \____/_/    \_\_|  \_\ |_|     \__\___||___/\__|_|_| |_|\__, |         |',13,10
  72++2155 20 20 20 20
  72++2159 20 5C 5F 5F
  72++215D 5F 5F 2F 5F
  72++2161 2F 20 20 20
  72++2165 20 5C 5F 5C
  72++2169 5F 7C 20 20
  72++216D 5C 5F 5C 20
  72++2171 7C 5F 7C 20
  72++2175 20 20 20 20
  72++2179 5C 5F 5F 5C
  72++217D 5F 5F 5F 7C
  72++2181 7C 5F 5F 5F
  72++2185 2F 5C 5F 5F
  72++2189 7C 5F 7C 5F
  72++218D 7C 20 7C 5F
  72++2191 7C 5C 5F 5F
  72++2195 2C 20 7C 20
  72++2199 20 20 20 20
  72++219D 20 20 20 20
  72++21A1 7C 0D 0A
  73++21A4 7C 20 20 20      db '|                                                                 __/ |         |',13,10
  73++21A8 20 20 20 20
  73++21AC 20 20 20 20
  73++21B0 20 20 20 20
  73++21B4 20 20 20 20
  73++21B8 20 20 20 20
  73++21BC 20 20 20 20
  73++21C0 20 20 20 20
  73++21C4 20 20 20 20
  73++21C8 20 20 20 20
  73++21CC 20 20 20 20
  73++21D0 20 20 20 20
  73++21D4 20 20 20 20
  73++21D8 20 20 20 20
  73++21DC 20 20 20 20
  73++21E0 20 20 20 20
  73++21E4 20 20 5F 5F
  73++21E8 2F 20 7C 20
  73++21EC 20 20 20 20
  73++21F0 20 20 20 20
  73++21F4 7C 0D 0A
  74++21F7 7C 20 20 20      db '|                                                                |___/          |',13,10
  74++21FB 20 20 20 20
  74++21FF 20 20 20 20
  74++2203 20 20 20 20
  74++2207 20 20 20 20
  74++220B 20 20 20 20
  74++220F 20 20 20 20
  74++2213 20 20 20 20
  74++2217 20 20 20 20
  74++221B 20 20 20 20
  74++221F 20 20 20 20
  74++2223 20 20 20 20
  74++2227 20 20 20 20
  74++222B 20 20 20 20
  74++222F 20 20 20 20
  74++2233 20 20 20 20
  74++2237 20 7C 5F 5F
  74++223B 5F 2F 20 20
  74++223F 20 20 20 20
  74++2243 20 20 20 20
  74++2247 7C 0D 0A
  75++224A 7C 20 20 20      db '|                                                                               |',13,10
  75++224E 20 20 20 20
  75++2252 20 20 20 20
  75++2256 20 20 20 20
  75++225A 20 20 20 20
  75++225E 20 20 20 20
  75++2262 20 20 20 20
  75++2266 20 20 20 20
  75++226A 20 20 20 20
  75++226E 20 20 20 20
  75++2272 20 20 20 20
  75++2276 20 20 20 20
  75++227A 20 20 20 20
  75++227E 20 20 20 20
  75++2282 20 20 20 20
  75++2286 20 20 20 20
  75++228A 20 20 20 20
  75++228E 20 20 20 20
  75++2292 20 20 20 20
  75++2296 20 20 20 20
  75++229A 7C 0D 0A
  76++229D 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  76++22A1 2D 2D 2D 2D
  76++22A5 2D 2D 2D 2D
  76++22A9 2D 2D 2D 2D
  76++22AD 2D 2D 2D 2D
  76++22B1 2D 2D 2D 2D
  76++22B5 2D 2D 2D 2D
  76++22B9 2D 2D 2D 2D
  76++22BD 2D 2D 2D 2D
  76++22C1 2D 2D 2D 2D
  76++22C5 2D 2D 2D 2D
  76++22C9 2D 2D 2D 2D
  76++22CD 2D 2D 2D 2D
  76++22D1 2D 2D 2D 2D
  76++22D5 2D 2D 2D 2D
  76++22D9 2D 2D 2D 2D
  76++22DD 2D 2D 2D 2D
  76++22E1 2D 2D 2D 2D
  76++22E5 2D 2D 2D 2D
  76++22E9 2D 2D 2D 2D
  76++22ED 2B 0D 0A
  77++22F0 0D 0A 0D 0A      db 13,10,13,10
  78++22F4 54 68 69 73      db 'This is a long text to test whether we can send a large amount of text to the',13,10
  78++22F8 20 69 73 20
  78++22FC 61 20 6C 6F
  78++2300 6E 67 20 74
  78++2304 65 78 74 20
  78++2308 74 6F 20 74
  78++230C 65 73 74 20
  78++2310 77 68 65 74
  78++2314 68 65 72 20
  78++2318 77 65 20 63
  78++231C 61 6E 20 73
  78++2320 65 6E 64 20
  78++2324 61 20 6C 61
  78++2328 72 67 65 20
  78++232C 61 6D 6F 75
  78++2330 6E 74 20 6F
  78++2334 66 20 74 65
  78++2338 78 74 20 74
  78++233C 6F 20 74 68
  78++2340 65 0D 0A
  79++2343 53 65 72 69      db 'Serial port and still receive it correctly at the other end.',13,10
  79++2347 61 6C 20 70
  79++234B 6F 72 74 20
  79++234F 61 6E 64 20
  79++2353 73 74 69 6C
  79++2357 6C 20 72 65
  79++235B 63 65 69 76
  79++235F 65 20 69 74
  79++2363 20 63 6F 72
  79++2367 72 65 63 74
  79++236B 6C 79 20 61
  79++236F 74 20 74 68
  79++2373 65 20 6F 74
  79++2377 68 65 72 20
  79++237B 65 6E 64 2E
  79++237F 0D 0A
  80++2381 00               db 0
  81++2382 C3 2D 1C         jp test_uart0
  82++2385
  83++2385              did_they_type_quit:
  84++2385 21 66 EA         ld hl, test_buffer
  85++2388
  86++2388 7E               ld a, (hl)
  87++2389 FE 51            cp 'Q'
  88++238B C0               ret nz
  89++238C 23               inc hl
  90++238D
  91++238D 7E               ld a, (hl)
  92++238E FE 55            cp 'U'
  93++2390 C0               ret nz
  94++2391 23               inc hl
  95++2392
  96++2392 7E               ld a, (hl)
  97++2393 FE 49            cp 'I'
  98++2395 C0               ret nz
  99++2396 23               inc hl
 100++2397
 101++2397 7E               ld a, (hl)
 102++2398 FE 54            cp 'T'
 103++239A C9               ret
 104++239B
 105++239B              did_they_type_Z:
 106++239B 21 66 EA         ld hl, test_buffer
 107++239E 7E               ld a, (hl)
 108++239F FE 5A            cp 'Z'
 109++23A1 C0               ret nz
 110++23A2 23               inc hl
 111++23A3
 112++23A3 7E               ld a, (hl)
 113++23A4 FE 00            cp 0
 114++23A6 C9               ret
 115++23A7
 116++23A7              did_they_type_J:
 117++23A7 21 66 EA         ld hl, test_buffer
 118++23AA 7E               ld a, (hl)
 119++23AB FE 4A            cp 'J'
 120++23AD C0               ret nz
 121++23AE 23               inc hl
 122++23AF
 123++23AF 7E               ld a, (hl)
 124++23B0 FE 00            cp 0
 125++23B2 C9               ret
 126++23B3
# file closed: test_uart.asm
 635++23B3
 636++23B3              load_jupiter_ace:
 637++23B3                  ; Load CORE.BIN into its proper location
 638++23B3 21 66 06         ld hl, NAME_OF_CORE
 639++23B6 CD 23 0E         call copy_filename_to_buffer
 640++23B9 11 00 F6         ld de, $F600 							; TODO: This can't be hardcoded, can it???
 641++23BC CD 36 09         call load_bin_file
 642++23BF 28 1E        	jr z, loaded_core_file
 643++23C1 CD 82 07     	call message
 644++23C4 46 61 69 6C  	db 'Failed to load CORE.BIN',13,10,0
 644++23C8 65 64 20 74
 644++23CC 6F 20 6C 6F
 644++23D0 61 64 20 43
 644++23D4 4F 52 45 2E
 644++23D8 42 49 4E 0D
 644++23DC 0A 00
 645++23DE 76           	halt
 646++23DF
 647++23DF              loaded_core_file:
 648++23DF CD 82 07         call message
 649++23E2 43 4F 52 45      db 'CORE loaded!',13,10,0
 649++23E6 20 6C 6F 61
 649++23EA 64 65 64 21
 649++23EE 0D 0A 00
 650++23F1
 651++23F1              	; Get the file Jupiter.bin into memory at location 0.
 652++23F1 21 69 24         ld hl, JUPITER_ACE_NAME
 653++23F4 CD 23 0E         call copy_filename_to_buffer
 654++23F7 11 00 00         ld de, 0								; Load it into location $0000
 655++23FA CD 36 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 656++23FD 28 27        	jr z, load_jupiter_ace1
 657++23FF CD 82 07     	call message
 658++2402 46 61 69 6C  	db 'Failed to load jupiter ace file.',13,10,0
 658++2406 65 64 20 74
 658++240A 6F 20 6C 6F
 658++240E 61 64 20 6A
 658++2412 75 70 69 74
 658++2416 65 72 20 61
 658++241A 63 65 20 66
 658++241E 69 6C 65 2E
 658++2422 0D 0A 00
 659++2425 76           	halt
 660++2426              load_jupiter_ace1:
 661++2426 CD 82 07     	call message
 662++2429 4C 6F 61 64  	db 'Loaded jupiter ace file!',13,10,0
 662++242D 65 64 20 6A
 662++2431 75 70 69 74
 662++2435 65 72 20 61
 662++2439 63 65 20 66
 662++243D 69 6C 65 21
 662++2441 0D 0A 00
 663++2444              	; Just a quick test:
 664++2444 CD 39 F6     	call $F600+57
 665++2447 53 74 61 72  	db 'Starting Juniper Deuce...',13,10,0
 665++244B 74 69 6E 67
 665++244F 20 4A 75 6E
 665++2453 69 70 65 72
 665++2457 20 44 65 75
 665++245B 63 65 2E 2E
 665++245F 2E 0D 0A 00
 666++2463
 667++2463              	; Clear the screen
 668++2463              	; ld hl, $2400
 669++2463              	; ld (hl), '#'
 670++2463              	; ld de, $2401
 671++2463              	; ld bc, 767
 672++2463              	; ldir
 673++2463
 674++2463              	; Now run it.
 675++2463              	; Now we need the ROM turned off:
 676++2463 CD 7B 07     	call rom_off
 677++2466 C3 00 00     	jp 0
 678++2469
 679++2469              JUPITER_ACE_NAME:
 680++2469 4A 55 50 49      db 'JUPITER.BIN',0
 680++246D 54 45 52 2E
 680++2471 42 49 4E 00
 681++2475
 682++2475
 683++2475
 684++2475              the_end:
 685++2475 41 20 6D 65  	db 'A message at the end ****************',0
 685++2479 73 73 61 67
 685++247D 65 20 61 74
 685++2481 20 74 68 65
 685++2485 20 65 6E 64
 685++2489 20 2A 2A 2A
 685++248D 2A 2A 2A 2A
 685++2491 2A 2A 2A 2A
 685++2495 2A 2A 2A 2A
 685++2499 2A 00
 686++249B
 687++249B              ; ---------------------------------------------------------
 688++249B              ; These are variables so need to be in RAM.
 689++249B              ; Unfortunately I am dumb and initially put them in ROM.
 690++249B              ; I have learned my lesson!
 691++249B
 692++249B              ;store_hl		equ	60000					; Temporary store for hl
 693++249B              ;store_de 		equ 60002					; Temporary store for de
 694++249B              current_page 	equ 60004					; Currently displayed monitor page
 695++249B
 696++249B              test_buffer 	equ 60006					; 32 x 24 char buffer (768 bytes)
 697++249B
# file closed: monitor.asm
 911+ 249B
 912+ 249B                  include "tiny-basic.asm"
# file opened: tiny-basic.asm
   1++249B              ; *************************************************************
   2++249B              ;
   3++249B              ;                 TINY BASIC FOR INTEL 8080
   4++249B              ;                       VERSION 2.1
   5++249B              ;                     BY LI-CHEN WANG
   6++249B              ;                 MODIFIED AND TRANSLATED
   7++249B              ;                   TO INTEL MNEMONICS
   8++249B              ;                    BY ROGER RAUSKOLB
   9++249B              ;                     10 OCTOBER,1976
  10++249B              ;                        @COPYLEFT
  11++249B              ;                   ALL WRONGS RESERVED
  12++249B              ;
  13++249B              ; *************************************************************
  14++249B
  15++249B              ; Converted to Z80 mneumonics
  16++249B              ; and styled for PASMO assembler
  17++249B              ; ready to run on my "Z80 Playground" SBC
  18++249B              ; by John Squires, October 2020
  19++249B
  20++249B              ; TODO:
  21++249B              ; * Tell the user that ctrl-c is break, etc.
  22++249B              ; * Make a nicer intro screen.
  23++249B
  24++249B              ; *** ZERO PAGE SUBROUTINES ***
  25++249B              ; The original code used the zero page calls, "rst 08h"
  26++249B              ; thru "rst 38h" for some functions, in order to keep the
  27++249B              ; code size even smaller. However, the use of the "RST" commands
  28++249B              ; means that this program always has to run from location 0
  29++249B              ; and can never be assembled to a different location.
  30++249B              ; I decided to remove all the RST stuff, so that this code
  31++249B              ; could eventually be run under CP/M or loaded at a different
  32++249B              ; location in memory.
  33++249B
  34++249B              ; How to assemble:
  35++249B              ; Use PASMO
  36++249B              ; This version is intended for inclusion in the Z80 Playground EEPROM as a demo
  37++249B              ; of what wonders can be performed!
  38++249B              ; So it will begin at whatever address the EEPROM boot loader sets it to.
  39++249B              ; It will be living in the bottom 32K of EEROM, and have
  40++249B              ; access to the top 32K of RAM.
  41++249B
  42++249B              CR      equ  0DH
  43++249B              LF      equ  0AH
  44++249B
  45++249B              ; Define a macro called DWA to store addresses in a special format.
  46++249B              ; Hi-byte is stored first (big-endian) with bit 7 set.
  47++249B              ; Lo-byte is stored second, with no special modification.
  48++249B              DWA     MACRO     v
  49++249B ~                    DB v>>8+128
  50++249B ~                    DB v&0FFH
  51++249B                      ENDM
  52++249B
  53++249B              TBSTART:
  54++249B 31 00 FF             LD  SP,TBSTACK                     ; *** COLD START ***
  55++249E 3E FF                LD   A,0FFH
  56++24A0 C3 57 2D             JP  INIT
  57++24A3
  58++24A3 E3           TSTC:   EX (SP),HL                       ; *** TSTC (was "rst 08h") ***
  59++24A4 CD EB 24             CALL IGNBLK                      ; IGNORE BLANKS AND
  60++24A7 BE                   CP  (HL)                         ; TEST CHARACTER
  61++24A8 23           TC1:    INC  HL                          ; COMPARE THE BYTE THAT
  62++24A9 CA B3 24             JP Z,TC2                         ; FOLLOWS THE CALL to this function
  63++24AC C5                   PUSH BC                          ; WITH THE TEXT (DE->)
  64++24AD 4E                   LD   C,(HL)                      ; IF NOT =, ADD THE 2ND
  65++24AE 06 00                LD   B,0                         ; BYTE THAT FOLLOWS THE
  66++24B0 09                   ADD HL,BC                        ; RST TO THE OLD PC
  67++24B1 C1                   POP  BC                          ; I.E., DO A RELATIVE
  68++24B2 1B                   DEC  DE                          ; JUMP IF NOT =
  69++24B3 13           TC2:    INC  DE                          ; IF =, SKIP THOSE BYTES
  70++24B4 23                   INC  HL                          ; AND CONTINUE
  71++24B5 E3                   EX (SP),HL
  72++24B6 C9                   RET
  73++24B7
  74++24B7 3E 0D        CRLF:   LD   A,CR                        ; *** CRLF ***
  75++24B9
  76++24B9 F5           OUTC:   PUSH AF                          ; *** OUTC (was "rst 10h") ***
  77++24BA 3A 00 80             LD  A,(OCSW)                     ; PRINT CHARACTER ONLY
  78++24BD B7                   OR  A                            ; IF OCSW SWITCH IS ON
  79++24BE C2 C3 24     OC2:    JP NZ,OC3                        ; IT IS ON
  80++24C1 F1                   POP  AF                          ; IT IS OFF
  81++24C2 C9                   RET                              ; RESTORE AF AND RETURN
  82++24C3              OC3:
  83++24C3 DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  84++24C5 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  85++24C7 CA C3 24             jp z,OC3                         ; zero = not ready for next char yet.
  86++24CA F1                   POP  AF                          ; UART IS READY, GET OLD "A" BACK
  87++24CB D3 B8                OUT  (uart_tx_rx),A              ; AND SEND IT OUT
  88++24CD FE 0D                CP  CR                           ; WAS IT CR?
  89++24CF C0                   RET NZ                           ; NO, FINISHED
  90++24D0              OC4:
  91++24D0 DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  92++24D2 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  93++24D4 CA D0 24             jp z,OC4                         ; zero = not ready for next char yet.
  94++24D7 3E 0A                LD   A,LF                        ; YES, WE SEND LF TOO
  95++24D9 D3 B8                out (uart_tx_rx),a
  96++24DB 3E 0D                LD   A,CR                        ; GET CR BACK IN A
  97++24DD C9                   RET
  98++24DE
  99++24DE CD 35 2A     EXPR:   CALL EXPR2                       ; *** EXPR (was "rst 18h") ***
 100++24E1 E5                   PUSH HL                          ; EVALUATE AN EXPRESSION
 101++24E2 C3 F1 29             JP  EXPR1                        ; REST OF IT AT EXPR1
 102++24E5
 103++24E5 7C           COMP:   LD   A,H                         ; *** COMP (was "rst 20h") ***
 104++24E6 BA                   CP  D                            ; COMPARE HL WITH DE
 105++24E7 C0                   RET NZ                           ; RETURN CORRECT C AND
 106++24E8 7D                   LD   A,L                         ; Z FLAGS
 107++24E9 BB                   CP  E                            ; BUT OLD A IS LOST
 108++24EA C9                   RET
 109++24EB
 110++24EB              IGNBLK:
 111++24EB 1A                   LD A,(DE)                        ; *** IGNBLK (was "rst 28h") ***
 112++24EC FE 20                CP  20H                          ; IGNORE BLANKS
 113++24EE C0                   RET NZ                           ; IN TEXT (WHERE DE->)
 114++24EF 13                   INC  DE                          ; AND RETURN THE FIRST
 115++24F0 C3 EB 24             JP  IGNBLK                      ; NON-BLANK CHAR. IN A
 116++24F3
 117++24F3              FINISH:
 118++24F3 F1                   POP  AF                          ; *** FINISH (was "rst 30h") ***
 119++24F4 CD 9D 2B             CALL FIN                         ; CHECK END OF COMMAND
 120++24F7 C3 B6 2B             JP  QWHAT                        ; PRINT "WHAT?" IF WRONG
 121++24FA
 122++24FA              TSTV:
 123++24FA CD EB 24             CALL IGNBLK                      ; *** TSTV (was "rst 38h") ***
 124++24FD D6 40                SUB  '@'                         ; TEST VARIABLES.
 125++24FF D8                   RET C                            ; < @ means NOT A VARIABLE
 126++2500 C2 1E 25             JP NZ,TV1                        ; NOT "@" ARRAY
 127++2503 13                   INC  DE                          ; IT IS THE "@" ARRAY
 128++2504 CD EC 2A             CALL PARN                        ; @ SHOULD BE FOLLOWED
 129++2507 29                   ADD HL,HL                        ; BY (EXPR) AS ITS INDEX
 130++2508 DA 62 25             JP C,QHOW                        ; IS INDEX TOO BIG?
 131++250B D5                   PUSH DE                          ; WILL IT OVERWRITE
 132++250C EB                   EX DE,HL                         ; TEXT?
 133++250D CD 3B 2B             CALL SIZE                        ; FIND SIZE OF FREE
 134++2510 CD E5 24             CALL COMP                          ; AND CHECK THAT
 135++2513 DA E6 2B             JP C,ASORRY                      ; IF SO, SAY "SORRY"
 136++2516 21 89 FD             LD  HL,VARBGN                    ; IF NOT GET ADDRESS
 137++2519 CD 5E 2B             CALL SUBDE                       ; OF @(EXPR) AND PUT IT
 138++251C D1                   POP  DE                          ; IN HL
 139++251D C9                   RET                              ; C FLAG IS CLEARED
 140++251E              TV1:
 141++251E                      ; by this point A holds the index
 142++251E                      ; of the variable
 143++251E                      ; 0 = the array "@"
 144++251E                      ; 1  - 26 = A - Z
 145++251E                      ; 33 - 58 = a - z
 146++251E                      ; lowercase needs adjusting to be uppercase
 147++251E FE 21                cp 33
 148++2520 38 06                jr c,upper_var
 149++2522 FE 3B                cp 59
 150++2524 30 02                jr nc,upper_var
 151++2526 D6 20                sub 32                           ; lowercase it
 152++2528              upper_var:
 153++2528 FE 1B                CP  1BH                          ; NOT @, IS IT A TO Z?
 154++252A 3F                   CCF                              ; IF NOT RETURN C FLAG
 155++252B D8                   RET C
 156++252C 13                   INC  DE                          ; IF A THROUGH Z
 157++252D 21 89 FD             LD  HL,VARBGN                    ; COMPUTE ADDRESS OF
 158++2530 07                   RLCA                             ; THAT VARIABLE
 159++2531 85                   ADD  A,L                         ; AND RETURN IT IN HL
 160++2532 6F                   LD   L,A                         ; WITH C FLAG CLEARED
 161++2533 3E 00                LD   A,0
 162++2535 8C                   ADC  A,H
 163++2536 67                   LD   H,A
 164++2537 C9                   RET
 165++2538
 166++2538 21 00 00     TSTNUM: LD  HL,0                         ; *** TSTNUM ***
 167++253B 44                   LD   B,H                         ; TEST IF THE TEXT IS
 168++253C CD EB 24             CALL IGNBLK                          ; A NUMBER
 169++253F FE 30        TN1:    CP  30H                          ; IF NOT, RETURN 0 IN
 170++2541 D8                   RET C                            ; B AND HL
 171++2542 FE 3A                CP  3AH                          ; IF NUMBERS, CONVERT
 172++2544 D0                   RET NC                           ; TO BINARY IN HL AND
 173++2545 3E F0                LD   A,0F0H                      ; SET B TO # OF DIGITS
 174++2547 A4                   AND  H                           ; IF H>255, THERE IS NO
 175++2548 C2 62 25             JP NZ,QHOW                       ; ROOM FOR NEXT DIGIT
 176++254B 04                   INC  B                           ; B COUNTS # OF DIGITS
 177++254C C5                   PUSH BC
 178++254D 44                   LD   B,H                         ; HL=10*HL+(NEW DIGIT)
 179++254E 4D                   LD   C,L
 180++254F 29                   ADD HL,HL                        ; WHERE 10* IS DONE BY
 181++2550 29                   ADD HL,HL                        ; SHIFT AND ADD
 182++2551 09                   ADD HL,BC
 183++2552 29                   ADD HL,HL
 184++2553 1A                   LD A,(DE)                        ; AND (DIGIT) IS FROM
 185++2554 13                   INC  DE                          ; STRIPPING THE ASCII
 186++2555 E6 0F                AND  0FH                         ; CODE
 187++2557 85                   ADD  A,L
 188++2558 6F                   LD   L,A
 189++2559 3E 00                LD   A,0
 190++255B 8C                   ADC  A,H
 191++255C 67                   LD   H,A
 192++255D C1                   POP  BC
 193++255E 1A                   LD A,(DE)                        ; DO THIS DIGIT AFTER
 194++255F F2 3F 25             JP P,TN1                         ; DIGIT. S SAYS OVERFLOW
 195++2562 D5           QHOW:   PUSH DE                          ; *** ERROR "HOW?" ***
 196++2563 11 69 25     AHOW:   LD  DE,HOW
 197++2566 C3 BA 2B             JP  ERROR
 198++2569 48 4F 57 3F  HOW:    DB   'HOW?'
 199++256D 0D                   DB   CR
 200++256E 4F 4B        OK:     DB   'OK'
 201++2570 0D                   DB   CR
 202++2571 57 48 41 54  WHAT:   DB   'WHAT?'
 202++2575 3F
 203++2576 0D                   DB   CR
 204++2577 53 4F 52 52  SORRY:  DB   'SORRY'
 204++257B 59
 205++257C 0D                   DB   CR
 206++257D
 207++257D                      ; *************************************************************
 208++257D
 209++257D                      ; *** MAIN ***
 210++257D
 211++257D                      ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 212++257D                      ; AND STORES IT IN THE MEMORY.
 213++257D
 214++257D                      ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 215++257D                      ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 216++257D                      ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 217++257D                      ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 218++257D                      ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 219++257D                      ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 220++257D                      ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 221++257D                      ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 222++257D                      ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 223++257D
 224++257D                      ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 225++257D                      ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 226++257D                      ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 227++257D                      ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 228++257D
 229++257D                      ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 230++257D                      ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 231++257D                      ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 232++257D                      ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 233++257D
 234++257D                      ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 235++257D                      ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 236++257D                      ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 237++257D                      ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 238++257D
 239++257D 31 00 FF     RSTART: LD  SP,TBSTACK
 240++2580 CD B7 24     ST1:    CALL CRLF                        ; AND JUMP TO HERE
 241++2583 11 6E 25             LD  DE,OK                        ; DE->STRING
 242++2586 97                   SUB  A                           ; A=0
 243++2587 CD 64 2C             CALL PRTSTG                      ; PRINT STRING UNTIL CR
 244++258A 21 91 25             LD  HL,ST2+1                     ; LITERAL 0
 245++258D 22 01 80             LD (CURRNT),HL                   ; CURRENT->LINE # = 0
 246++2590 21 00 00     ST2:    LD  HL,0
 247++2593 22 09 80             LD (LOPVAR),HL
 248++2596 22 03 80             LD (STKGOS),HL
 249++2599 3E 3E        ST3:    LD   A,3EH                       ; PROMPT '>' AND
 250++259B CD EC 2B             CALL GETLN                       ; READ A LINE
 251++259E D5                   PUSH DE                          ; DE->END OF LINE
 252++259F 11 C0 FD             LD  DE,BUFFER                    ; DE->BEGINNING OF LINE
 253++25A2 CD 38 25             CALL TSTNUM                      ; TEST IF IT IS A NUMBER
 254++25A5 CD EB 24             CALL IGNBLK
 255++25A8 7C                   LD   A,H                         ; HL=VALUE OF THE # OR
 256++25A9 B5                   OR  L                            ; 0 IF NO # WAS FOUND
 257++25AA C1                   POP  BC                          ; BC->END OF LINE
 258++25AB CA BD 2F             JP Z,DIRECT
 259++25AE 1B                   DEC  DE                          ; BACKUP DE AND SAVE
 260++25AF 7C                   LD   A,H                         ; VALUE OF LINE # THERE
 261++25B0 12                   LD (DE),A
 262++25B1 1B                   DEC  DE
 263++25B2 7D                   LD   A,L
 264++25B3 12                   LD (DE),A
 265++25B4 C5                   PUSH BC                          ; BC,DE->BEGIN, END
 266++25B5 D5                   PUSH DE
 267++25B6 79                   LD   A,C
 268++25B7 93                   SUB  E
 269++25B8 F5                   PUSH AF                          ; A=# OF BYTES IN LINE
 270++25B9 CD 3A 2C             CALL FNDLN                       ; FIND THIS LINE IN SAVE
 271++25BC D5                   PUSH DE                          ; AREA, DE->SAVE AREA
 272++25BD C2 D0 25             JP NZ,ST4                        ; NZ:NOT FOUND, INSERT
 273++25C0 D5                   PUSH DE                          ; Z:FOUND, DELETE IT
 274++25C1 CD 58 2C             CALL FNDNXT                      ; FIND NEXT LINE
 275++25C4                                                       ; DE->NEXT LINE
 276++25C4 C1                   POP  BC                          ; BC->LINE TO BE DELETED
 277++25C5 2A 15 80             LD HL,(TXTUNF)                   ; HL->UNFILLED SAVE AREA
 278++25C8 CD F8 2C             CALL MVUP                        ; MOVE UP TO DELETE
 279++25CB 60                   LD   H,B                         ; TXTUNF->UNFILLED AREA
 280++25CC 69                   LD   L,C
 281++25CD 22 15 80             LD (TXTUNF),HL                   ; UPDATE
 282++25D0 C1           ST4:    POP  BC                          ; GET READY TO INSERT
 283++25D1 2A 15 80             LD HL,(TXTUNF)                   ; BUT FIRST CHECK IF
 284++25D4 F1                   POP  AF                          ; THE LENGTH OF NEW LINE
 285++25D5 E5                   PUSH HL                          ; IS 3 (LINE # AND CR)
 286++25D6 FE 03                CP  3                            ; THEN DO NOT INSERT
 287++25D8 CA 7D 25             JP Z,RSTART                      ; MUST CLEAR THE STACK
 288++25DB 85                   ADD  A,L                         ; COMPUTE NEW TXTUNF
 289++25DC 6F                   LD   L,A
 290++25DD 3E 00                LD   A,0
 291++25DF 8C                   ADC  A,H
 292++25E0 67                   LD   H,A                         ; HL->NEW UNFILLED AREA
 293++25E1 11 87 FD             LD  DE,TXTEND                    ; CHECK TO SEE IF THERE
 294++25E4 CD E5 24             CALL COMP                          ; IS ENOUGH SPACE
 295++25E7 D2 E5 2B             JP NC,QSORRY                     ; SORRY, NO ROOM FOR IT
 296++25EA 22 15 80             LD (TXTUNF),HL                   ; OK, UPDATE TXTUNF
 297++25ED D1                   POP  DE                          ; DE->OLD UNFILLED AREA
 298++25EE CD 03 2D             CALL MVDOWN
 299++25F1 D1                   POP  DE                          ; DE->BEGIN, HL->END
 300++25F2 E1                   POP  HL
 301++25F3 CD F8 2C             CALL MVUP                        ; MOVE NEW LINE TO SAVE
 302++25F6 C3 99 25             JP  ST3                          ; AREA
 303++25F9
 304++25F9                                                       ; *************************************************************
 305++25F9
 306++25F9                                                       ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 307++25F9                                                       ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 308++25F9                                                       ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 309++25F9                                                       ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 310++25F9                                                       ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 311++25F9
 312++25F9                                                       ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
 313++25F9                                                       ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 314++25F9                                                       ; GO BACK TO 'RSTART'.
 315++25F9                                                       ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 316++25F9                                                       ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 317++25F9                                                       ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
 318++25F9                                                       ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 319++25F9                                                       ; *************************************************************
 320++25F9
 321++25F9                                                       ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 322++25F9
 323++25F9                                                       ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 324++25F9
 325++25F9                                                       ; 'STOP(CR)' GOES BACK TO 'RSTART'
 326++25F9
 327++25F9                                                       ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 328++25F9                                                       ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 329++25F9                                                       ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 330++25F9
 331++25F9                                                       ; THERE ARE 3 MORE ENTRIES IN 'RUN':
 332++25F9                                                       ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 333++25F9                                                       ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 334++25F9                                                       ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 335++25F9
 336++25F9                                                       ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 337++25F9                                                       ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 338++25F9
 339++25F9 CD B0 2B     NEW:    CALL ENDCHK                      ; *** NEW(CR) ***
 340++25FC 21 19 80             LD  HL,TXTBGN
 341++25FF 22 15 80             LD (TXTUNF),HL
 342++2602
 343++2602 CD B0 2B     STOP:   CALL ENDCHK                      ; *** STOP(CR) ***
 344++2605 C3 7D 25             JP  RSTART
 345++2608
 346++2608              TBDIR:                                    ; *** DIR(CR) ***
 347++2608                                                      ; This does a directory listing.
 348++2608 CD B0 2B             call ENDCHK
 349++260B
 350++260B                      ; Clear files counter
 351++260B 3E 00                ld a, 0
 352++260D 32 88 FD             ld (tb_dir_count), a
 353++2610
 354++2610                      ; Open /TBASIC folder
 355++2610 21 A6 0E             ld hl, TINY_BASIC_FOLDER_NAME
 356++2613 CD 9B 0D             call open_file
 357++2616
 358++2616                      ; Then open *
 359++2616 21 9F 0E             ld hl, STAR_DOT_STAR
 360++2619 CD 9B 0D             call open_file
 361++261C
 362++261C                      ; Loop through, printing the file names, one per line
 363++261C              tb_dir_loop:
 364++261C FE 1D                cp USB_INT_DISK_READ
 365++261E 28 20                jr z, tbasic_dir_loop_good
 366++2620
 367++2620 3A 88 FD             ld a, (tb_dir_count)
 368++2623 FE 00                cp 0
 369++2625 C2 7D 25             jp nz, RSTART
 370++2628
 371++2628 CD 82 07             call message
 372++262B 4E 6F 20 66          db 'No files found.',13,10,0
 372++262F 69 6C 65 73
 372++2633 20 66 6F 75
 372++2637 6E 64 2E 0D
 372++263B 0A 00
 373++263D
 374++263D C3 7D 25             jp RSTART
 375++2640
 376++2640              tbasic_dir_loop_good:
 377++2640 3E 27                ld a, RD_USB_DATA0
 378++2642 CD 4B 0E             call send_command_byte
 379++2645 CD 54 0E             call read_data_byte                 ; Find out how many bytes there are to read
 380++2648
 381++2648 CD 5A 0E             call read_data_bytes_into_buffer    ; read them into disk_buffer
 382++264B FE 20                cp 32                               ; Did we read at least 32 bytes?
 383++264D 30 0B                jr nc, tb_dir_good_length
 384++264F              tb_dir_next:
 385++264F 3E 33                ld a, FILE_ENUM_GO                  ; Go to next entry in the directory
 386++2651 CD 4B 0E             call send_command_byte
 387++2654 CD 90 0E             call read_status_byte
 388++2657 C3 1C 26             jp tb_dir_loop
 389++265A
 390++265A              tb_dir_good_length:
 391++265A 3A D0 FF             ld a, (disk_buffer+11)
 392++265D E6 16                and $16                             ; Check for hidden or system files, or directories
 393++265F C2 4F 26             jp nz, tb_dir_next                  ; and skip accordingly.
 394++2662
 395++2662              tb_it_is_not_system:
 396++2662 21 88 FD             ld hl, tb_dir_count
 397++2665 34                   inc (hl)
 398++2666
 399++2666                      ; Show filename from diskbuffer
 400++2666 06 08                ld b, 8
 401++2668 21 C5 FF             ld hl, disk_buffer
 402++266B              tb_dir_show_name_loop:
 403++266B 7E                   ld a, (hl)
 404++266C CD D1 06             call print_a
 405++266F 23                   inc hl
 406++2670 10 F9                djnz tb_dir_show_name_loop
 407++2672
 408++2672 3E 2E                ld a, '.'
 409++2674 CD D1 06             call print_a
 410++2677
 411++2677 06 03                ld b, 3
 412++2679              tb_dir_show_extension_loop:
 413++2679 7E                   ld a, (hl)
 414++267A CD D1 06             call print_a
 415++267D 23                   inc hl
 416++267E 10 F9                djnz tb_dir_show_extension_loop
 417++2680
 418++2680 CD 07 07             call newline
 419++2683
 420++2683 C3 4F 26             jp tb_dir_next
 421++2686
 422++2686              SAVE:                                   ; *** SAVE "filename" ***
 423++2686                                                      ; This Saves the current program to USB Drive with the given name.
 424++2686 D5                   push de
 425++2687 CD EA 26             call get_program_size
 426++268A D1                   pop de
 427++268B 7C                   ld a, h
 428++268C B5                   or l
 429++268D FE 00                cp 0
 430++268F 20 20                jr nz, save_continue
 431++2691 CD 82 07             call message
 432++2694 4E 6F 20 70          db 'No program yet to save!',13,10,0
 432++2698 72 6F 67 72
 432++269C 61 6D 20 79
 432++26A0 65 74 20 74
 432++26A4 6F 20 73 61
 432++26A8 76 65 21 0D
 432++26AC 0A 00
 433++26AE C3 7D 25             jp RSTART
 434++26B1              save_continue:
 435++26B1 CD F6 2F             call READ_QUOTED_FILENAME
 436++26B4 CD AA 27             call does_file_exist
 437++26B7 CC 96 27             call z, tb_erase_file
 438++26BA
 439++26BA CD AE 0D             call close_file
 440++26BD
 441++26BD                      ;call message
 442++26BD                      ;db 'Creating file...',13,10,0
 443++26BD
 444++26BD 21 A6 0E             ld hl, TINY_BASIC_FOLDER_NAME
 445++26C0 CD 9B 0D             call open_file
 446++26C3 11 EB FF             ld de, filename_buffer
 447++26C6 CD 86 0D             call create_file
 448++26C9 28 29                jr z, tb_save_continue
 449++26CB CD 82 07             call message
 450++26CE 43 6F 75 6C          db 'Could not create file.',13,10,0
 450++26D2 64 20 6E 6F
 450++26D6 74 20 63 72
 450++26DA 65 61 74 65
 450++26DE 20 66 69 6C
 450++26E2 65 2E 0D 0A
 450++26E6 00
 451++26E7 C3 7D 25             jp RSTART
 452++26EA
 453++26EA              get_program_size:
 454++26EA                      ; Gets the total size of the program, in bytes, into hl
 455++26EA 11 19 80             ld de,TXTBGN
 456++26ED 2A 15 80             ld hl, (TXTUNF)
 457++26F0 B7                   or a
 458++26F1 ED 52                sbc hl, de
 459++26F3 C9                   ret
 460++26F4
 461++26F4              tb_save_continue:
 462++26F4 3E 3C                ld a, BYTE_WRITE
 463++26F6 CD 4B 0E             call send_command_byte
 464++26F9
 465++26F9                      ; Send number of bytes we are about to write, as 16 bit number, low first
 466++26F9 CD EA 26             call get_program_size
 467++26FC 7D                   ld a, l
 468++26FD CD 2F 0E             call send_data_byte
 469++2700 7C                   ld a, h
 470++2701 CD 2F 0E             call send_data_byte
 471++2704
 472++2704 21 19 80             ld hl, TXTBGN
 473++2707 CD 2F 0A             call write_loop
 474++270A
 475++270A CD AE 0D             call close_file
 476++270D
 477++270D C3 7D 25             jp RSTART
 478++2710
 479++2710              LOAD:                                   ; *** LOAD "filename" ***
 480++2710                                                      ; This Loads a program from USB Drive
 481++2710 CD F6 2F             call READ_QUOTED_FILENAME
 482++2713 CD AA 27             call does_file_exist
 483++2716 28 18                jr z, load_can_do
 484++2718              tb_file_not_found
 485++2718 CD 82 07             call message
 486++271B 46 69 6C 65          db 'File not found.',13,10,0
 486++271F 20 6E 6F 74
 486++2723 20 66 6F 75
 486++2727 6E 64 2E 0D
 486++272B 0A 00
 487++272D C3 7D 25             jp RSTART
 488++2730
 489++2730              load_can_do:
 490++2730 21 A6 0E             ld hl, TINY_BASIC_FOLDER_NAME
 491++2733 CD 9B 0D             call open_file
 492++2736 21 EB FF             ld hl, filename_buffer
 493++2739 CD 9B 0D             call open_file
 494++273C
 495++273C 3E 3A                ld a, BYTE_READ
 496++273E CD 4B 0E             call send_command_byte
 497++2741 3E FF                ld a, 255                           ; Request all of the file
 498++2743 CD 2F 0E             call send_data_byte
 499++2746 3E FF                ld a, 255                           ; Yes, all!
 500++2748 CD 2F 0E             call send_data_byte
 501++274B
 502++274B 3E 22                ld a, GET_STATUS
 503++274D CD 4B 0E             call send_command_byte
 504++2750 CD 54 0E             call read_data_byte
 505++2753 21 19 80             ld hl, TXTBGN                       ; Get back the target address
 506++2756              tb_load_loop1:
 507++2756 FE 1D                cp USB_INT_DISK_READ
 508++2758 20 25                jr nz, tb_load_finished
 509++275A
 510++275A E5                   push hl
 511++275B CD 53 07             call disk_on
 512++275E 3E 27                ld a, RD_USB_DATA0
 513++2760 CD 4B 0E             call send_command_byte
 514++2763 CD 54 0E             call read_data_byte
 515++2766 E1                   pop hl
 516++2767 CD 5D 0E             call read_data_bytes_into_hl
 517++276A E5                   push hl
 518++276B CD 4C 07             call disk_off
 519++276E 3E 3B                ld a, BYTE_RD_GO
 520++2770 CD 4B 0E             call send_command_byte
 521++2773 3E 22                ld a, GET_STATUS
 522++2775 CD 4B 0E             call send_command_byte
 523++2778 CD 54 0E             call read_data_byte
 524++277B E1                   pop hl
 525++277C C3 56 27             jp tb_load_loop1
 526++277F              tb_load_finished:
 527++277F 22 15 80             ld (TXTUNF), hl
 528++2782 CD AE 0D             call close_file
 529++2785 C3 7D 25             jp RSTART
 530++2788
 531++2788              ERASE:                                   ; *** ERASE "filename" ***
 532++2788                                                      ; This erases a file
 533++2788 CD F6 2F             call READ_QUOTED_FILENAME
 534++278B CD AA 27             call does_file_exist
 535++278E 20 88                jr nz, tb_file_not_found
 536++2790 CD 96 27             call tb_erase_file
 537++2793 C3 7D 25             jp RSTART
 538++2796
 539++2796              tb_erase_file:
 540++2796                      ;call message
 541++2796                      ;db 'Erasing file...',13,10,0
 542++2796 3E 2F                ld a, SET_FILE_NAME
 543++2798 CD 4B 0E             call send_command_byte
 544++279B 21 EB FF             ld hl, filename_buffer
 545++279E CD 35 0E             call send_data_string
 546++27A1 3E 35                ld a, FILE_ERASE
 547++27A3 CD 4B 0E             call send_command_byte
 548++27A6 CD 90 0E             call read_status_byte
 549++27A9 C9                   ret
 550++27AA
 551++27AA              does_file_exist:
 552++27AA                      ; Looks on disk for a file. Returns Z if file exists.
 553++27AA 21 A6 0E             ld hl, TINY_BASIC_FOLDER_NAME
 554++27AD CD 9B 0D             call open_file
 555++27B0 21 EB FF             ld hl, filename_buffer
 556++27B3 C3 9B 0D             jp open_file
 557++27B6
 558++27B6 CD B0 2B     RUN:    CALL ENDCHK                      ; *** RUN(CR) ***
 559++27B9 11 19 80             LD  DE,TXTBGN                    ; FIRST SAVED LINE
 560++27BC
 561++27BC 21 00 00     RUNNXL: LD  HL,0                         ; *** RUNNXL ***
 562++27BF CD 42 2C             CALL FNDLP                       ; FIND WHATEVER LINE #
 563++27C2 DA 7D 25             JP C,RSTART                      ; C:PASSED TXTUNF, QUIT
 564++27C5
 565++27C5 EB           RUNTSL: EX DE,HL                         ; *** RUNTSL ***
 566++27C6 22 01 80             LD (CURRNT),HL                   ; SET 'CURRENT'->LINE #
 567++27C9 EB                   EX DE,HL
 568++27CA 13                   INC  DE                          ; BUMP PASS LINE #
 569++27CB 13                   INC  DE
 570++27CC
 571++27CC CD F4 2E     RUNSML: CALL CHKIO                       ; *** RUNSML ***
 572++27CF 21 3C 2F             LD  HL,TAB2-1                    ; FIND COMMAND IN TAB2
 573++27D2 C3 C0 2F             JP  EXEC                         ; AND EXECUTE IT
 574++27D5
 575++27D5 CD DE 24     GOTO:   CALL EXPR                          ; *** GOTO EXPR ***
 576++27D8 D5                   PUSH DE                          ; SAVE FOR ERROR ROUTINE
 577++27D9 CD B0 2B             CALL ENDCHK                      ; MUST FIND A CR
 578++27DC CD 3A 2C             CALL FNDLN                       ; FIND THE TARGET LINE
 579++27DF C2 63 25             JP NZ,AHOW                       ; NO SUCH LINE #
 580++27E2 F1                   POP  AF                          ; CLEAR THE PUSH DE
 581++27E3 C3 C5 27             JP  RUNTSL                       ; GO DO IT
 582++27E6
 583++27E6                                                       ; *************************************************************
 584++27E6
 585++27E6                                                       ; *** LIST *** & PRINT ***
 586++27E6
 587++27E6                                                       ; LIST HAS TWO FORMS:
 588++27E6                                                       ; 'LIST(CR)' LISTS ALL SAVED LINES
 589++27E6                                                       ; 'LIST #(CR)' START LIST AT THIS LINE #
 590++27E6                                                       ; YOU CAN STOP THE LISTING BY CONTROL C KEY
 591++27E6
 592++27E6                                                       ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 593++27E6                                                       ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 594++27E6                                                       ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 595++27E6
 596++27E6                                                       ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 597++27E6                                                       ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 598++27E6                                                       ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 599++27E6                                                       ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 600++27E6                                                       ; SPECIFIED, 6 POSITIONS WILL BE USED.
 601++27E6
 602++27E6                                                       ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 603++27E6                                                       ; DOUBLE QUOTES.
 604++27E6
 605++27E6                                                       ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
 606++27E6
 607++27E6                                                       ; A $ means print an ascii character, so 'PRINT $72,$107' will print "Hi"
 608++27E6
 609++27E6                                                       ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 610++27E6                                                       ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 611++27E6                                                       ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 612++27E6
 613++27E6 CD 38 25     LIST:   CALL TSTNUM                      ; TEST IF THERE IS A #
 614++27E9 CD B0 2B             CALL ENDCHK                      ; IF NO # WE GET A 0
 615++27EC CD 3A 2C             CALL FNDLN                       ; FIND THIS OR NEXT LINE
 616++27EF DA 7D 25     LS1:    JP C,RSTART                      ; C:PASSED TXTUNF
 617++27F2 CD E3 2C             CALL PRTLN                       ; PRINT THE LINE
 618++27F5 CD F4 2E             CALL CHKIO                       ; STOP IF HIT CONTROL-C
 619++27F8 CD 42 2C             CALL FNDLP                       ; FIND NEXT LINE
 620++27FB C3 EF 27             JP  LS1                          ; AND LOOP BACK
 621++27FE
 622++27FE 0E 06        PRINT:  LD   C,6                         ; C = # OF SPACES
 623++2800 CD A3 24             CALL TSTC                          ; Test for ";"
 624++2803 3B                   DB   3BH
 625++2804 06                   DB   PR2-$-1
 626++2805 CD B7 24             CALL CRLF                        ; GIVE CR-LF AND
 627++2808 C3 CC 27             JP  RUNSML                       ; CONTINUE SAME LINE
 628++280B CD A3 24     PR2:    CALL TSTC                          ; Test for (CR)
 629++280E 0D                   DB   CR
 630++280F 06                   DB   PR0-$-1
 631++2810 CD B7 24             CALL CRLF                        ; ALSO GIVE CR-LF AND
 632++2813 C3 BC 27             JP  RUNNXL                       ; GO TO NEXT LINE
 633++2816 CD A3 24     PR0:    CALL TSTC                          ; ELSE IS IT FORMAT? e.g. #4 = format 4 digits long
 634++2819 23                   DB   '#'
 635++281A 07                   DB   PR1-$-1
 636++281B CD DE 24             CALL EXPR                          ; YES, EVALUATE EXPR.
 637++281E 4D                   LD   C,L                         ; AND SAVE IT IN C
 638++281F C3 45 28             JP  PR3                          ; LOOK FOR MORE TO PRINT
 639++2822 CD A3 24     PR1:    CALL TSTC                         ; Is it a "$"? e.g. $65 will print 'A'
 640++2825 24                   DB   '$'
 641++2826 18                   DB   PRNOTDOLLAR-$-1
 642++2827 CD DE 24             CALL EXPR                         ; Evaluate the expression, which will result in an 16 bit number in hl
 643++282A 7C                   ld a, h                         ; If hl > 255 show error
 644++282B B7                   or a
 645++282C 20 09                jr nz, PR_ERROR
 646++282E 7D                   ld a, l                         ; Get just bottom 8 bits
 647++282F FE 20                cp 32
 648++2831 38 04                jr c, PR_ERROR
 649++2833 FE 7F                cp 127
 650++2835 38 02                jr c, PR_ASCII
 651++2837              PR_ERROR:
 652++2837 3E 2A                ld a, '*'
 653++2839              PR_ASCII:
 654++2839 CD B9 24             CALL OUTC
 655++283C C3 45 28             jp PR3                          ; Look for more to print
 656++283F
 657++283F              PRNOTDOLLAR:
 658++283F CD 72 2C             CALL QTSTG                       ; OR IS IT A STRING?
 659++2842 C3 56 28             JP  PR8                          ; IF NOT, MUST BE EXPR.
 660++2845 CD A3 24     PR3:    CALL TSTC                          ; IF ",", GO FIND NEXT
 661++2848 2C                   DB   ','
 662++2849 06                   DB   PR6-$-1
 663++284A CD 9D 2B             CALL FIN                         ; IN THE LIST.
 664++284D C3 16 28             JP  PR0                          ; LIST CONTINUES
 665++2850 CD B7 24     PR6:    CALL CRLF                        ; LIST ENDS
 666++2853 CD F3 24             CALL FINISH
 667++2856 CD DE 24     PR8:    CALL EXPR                          ; EVALUATE THE EXPR
 668++2859 C5                   PUSH BC
 669++285A CD 9F 2C             CALL PRTNUM                      ; PRINT THE VALUE
 670++285D C1                   POP  BC
 671++285E C3 45 28             JP  PR3                          ; MORE TO PRINT?
 672++2861
 673++2861                                                       ; *************************************************************
 674++2861
 675++2861                                                       ; *** GOSUB *** & RETURN ***
 676++2861
 677++2861                                                       ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 678++2861                                                       ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 679++2861                                                       ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 680++2861                                                       ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 681++2861                                                       ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 682++2861                                                       ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 683++2861                                                       ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 684++2861                                                       ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 685++2861                                                       ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 686++2861
 687++2861                                                       ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 688++2861                                                       ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 689++2861                                                       ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 690++2861                                                       ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 691++2861
 692++2861 CD 2E 2D     GOSUB:  CALL PUSHA                       ; SAVE THE CURRENT "FOR"
 693++2864 CD DE 24             CALL EXPR                          ; PARAMETERS
 694++2867 D5                   PUSH DE                          ; AND TEXT POINTER
 695++2868 CD 3A 2C             CALL FNDLN                       ; FIND THE TARGET LINE
 696++286B C2 63 25             JP NZ,AHOW                       ; NOT THERE. SAY "HOW?"
 697++286E 2A 01 80             LD HL,(CURRNT)                   ; FOUND IT, SAVE OLD
 698++2871 E5                   PUSH HL                          ; 'CURRNT' OLD 'STKGOS'
 699++2872 2A 03 80             LD HL,(STKGOS)
 700++2875 E5                   PUSH HL
 701++2876 21 00 00             LD  HL,0                         ; AND LOAD NEW ONES
 702++2879 22 09 80             LD (LOPVAR),HL
 703++287C 39                   ADD HL,SP
 704++287D 22 03 80             LD (STKGOS),HL
 705++2880 C3 C5 27             JP  RUNTSL                       ; THEN RUN THAT LINE
 706++2883 CD B0 2B     RETURN: CALL ENDCHK                      ; THERE MUST BE A CR
 707++2886 2A 03 80             LD HL,(STKGOS)                   ; OLD STACK POINTER
 708++2889 7C                   LD   A,H                         ; 0 MEANS NOT EXIST
 709++288A B5                   OR  L
 710++288B CA B6 2B             JP Z,QWHAT                       ; SO, WE SAY: "WHAT?"
 711++288E F9                   LD SP,HL                         ; ELSE, RESTORE IT
 712++288F E1                   POP  HL
 713++2890 22 03 80             LD (STKGOS),HL                   ; AND THE OLD 'STKGOS'
 714++2893 E1                   POP  HL
 715++2894 22 01 80             LD (CURRNT),HL                   ; AND THE OLD 'CURRNT'
 716++2897 D1                   POP  DE                          ; OLD TEXT POINTER
 717++2898 CD 12 2D             CALL POPA                        ; OLD "FOR" PARAMETERS
 718++289B CD F3 24             CALL FINISH                          ; AND WE ARE BACK HOME
 719++289E
 720++289E                                                       ; *************************************************************
 721++289E
 722++289E                                                       ; *** FOR *** & NEXT ***
 723++289E
 724++289E                                                       ; 'FOR' HAS TWO FORMS:
 725++289E                                                       ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 726++289E                                                       ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 727++289E                                                       ; EXP3=1.  (I.E., WITH A STEP OF +1.)
 728++289E                                                       ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 729++289E                                                       ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 730++289E                                                       ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 731++289E                                                       ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 732++289E                                                       ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 733++289E                                                       ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 734++289E                                                       ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 735++289E                                                       ; BEFORE THE NEW ONE OVERWRITES IT.
 736++289E                                                       ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 737++289E                                                       ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 738++289E                                                       ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 739++289E                                                       ; (PURGED FROM THE STACK..)
 740++289E
 741++289E                                                       ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 742++289E                                                       ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 743++289E                                                       ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 744++289E                                                       ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 745++289E                                                       ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 746++289E                                                       ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 747++289E                                                       ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 748++289E                                                       ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 749++289E                                                       ; IS PURGED AND EXECUTION CONTINUES.
 750++289E
 751++289E CD 2E 2D     FOR:    CALL PUSHA                       ; SAVE THE OLD SAVE AREA
 752++28A1 CD 84 2B             CALL SETVAL                      ; SET THE CONTROL VAR.
 753++28A4 2B                   DEC  HL                          ; HL IS ITS ADDRESS
 754++28A5 22 09 80             LD (LOPVAR),HL                   ; SAVE THAT
 755++28A8 21 98 2F             LD  HL,TAB5-1                    ; USE 'EXEC' TO LOOK
 756++28AB C3 C0 2F             JP  EXEC                         ; FOR THE WORD 'TO'
 757++28AE CD DE 24     FR1:    CALL EXPR                          ; EVALUATE THE LIMIT
 758++28B1 22 0D 80             LD (LOPLMT),HL                   ; SAVE THAT
 759++28B4 21 9E 2F             LD  HL,TAB6-1                    ; USE 'EXEC' TO LOOK
 760++28B7 C3 C0 2F             JP EXEC                          ; FOR THE WORD 'STEP'
 761++28BA CD DE 24     FR2:    CALL EXPR                          ; FOUND IT, GET STEP
 762++28BD C3 C3 28             JP  FR4
 763++28C0 21 01 00     FR3:    LD  HL,1H                        ; NOT FOUND, SET TO 1
 764++28C3 22 0B 80     FR4:    LD (LOPINC),HL                   ; SAVE THAT TOO
 765++28C6 2A 01 80     FR5:    LD HL,(CURRNT)                   ; SAVE CURRENT LINE #
 766++28C9 22 0F 80             LD (LOPLN),HL
 767++28CC EB                   EX DE,HL                         ; AND TEXT POINTER
 768++28CD 22 11 80             LD (LOPPT),HL
 769++28D0 01 0A 00             LD  BC,0AH                       ; DIG INTO STACK TO
 770++28D3 2A 09 80             LD HL,(LOPVAR)                   ; FIND 'LOPVAR'
 771++28D6 EB                   EX DE,HL
 772++28D7 60                   LD   H,B
 773++28D8 68                   LD   L,B                         ; HL=0 NOW
 774++28D9 39                   ADD HL,SP                        ; HERE IS THE STACK
 775++28DA 3E                   DB   3EH
 776++28DB 09           FR7:    ADD HL,BC                        ; EACH LEVEL IS 10 DEEP
 777++28DC 7E                   LD   A,(HL)                      ; GET THAT OLD 'LOPVAR'
 778++28DD 23                   INC  HL
 779++28DE B6                   OR  (HL)
 780++28DF CA FC 28             JP Z,FR8                         ; 0 SAYS NO MORE IN IT
 781++28E2 7E                   LD   A,(HL)
 782++28E3 2B                   DEC  HL
 783++28E4 BA                   CP  D                            ; SAME AS THIS ONE?
 784++28E5 C2 DB 28             JP NZ,FR7
 785++28E8 7E                   LD   A,(HL)                      ; THE OTHER HALF?
 786++28E9 BB                   CP  E
 787++28EA C2 DB 28             JP NZ,FR7
 788++28ED EB                   EX DE,HL                         ; YES, FOUND ONE
 789++28EE 21 00 00             LD  HL,0H
 790++28F1 39                   ADD HL,SP                        ; TRY TO MOVE SP
 791++28F2 44                   LD   B,H
 792++28F3 4D                   LD   C,L
 793++28F4 21 0A 00             LD  HL,0AH
 794++28F7 19                   ADD HL,DE
 795++28F8 CD 03 2D             CALL MVDOWN                      ; AND PURGE 10 WORDS
 796++28FB F9                   LD SP,HL                         ; IN THE STACK
 797++28FC 2A 11 80     FR8:    LD HL,(LOPPT)                    ; JOB DONE, RESTORE DE
 798++28FF EB                   EX DE,HL
 799++2900 CD F3 24             CALL FINISH                          ; AND CONTINUE
 800++2903
 801++2903 CD FA 24     NEXT:   CALL TSTV                          ; GET ADDRESS OF VAR.
 802++2906 DA B6 2B             JP C,QWHAT                       ; NO VARIABLE, "WHAT?"
 803++2909 22 05 80             LD (VARNXT),HL                   ; YES, SAVE IT
 804++290C D5           NX0:    PUSH DE                          ; SAVE TEXT POINTER
 805++290D EB                   EX DE,HL
 806++290E 2A 09 80             LD HL,(LOPVAR)                   ; GET VAR. IN 'FOR'
 807++2911 7C                   LD   A,H
 808++2912 B5                   OR  L                            ; 0 SAYS NEVER HAD ONE
 809++2913 CA B7 2B             JP Z,AWHAT                       ; SO WE ASK: "WHAT?"
 810++2916 CD E5 24             CALL COMP                          ; ELSE WE CHECK THEM
 811++2919 CA 26 29             JP Z,NX3                         ; OK, THEY AGREE
 812++291C D1                   POP  DE                          ; NO, LET'S SEE
 813++291D CD 12 2D             CALL POPA                        ; PURGE CURRENT LOOP
 814++2920 2A 05 80             LD HL,(VARNXT)                   ; AND POP ONE LEVEL
 815++2923 C3 0C 29             JP  NX0                          ; GO CHECK AGAIN
 816++2926 5E           NX3:    LD   E,(HL)                      ; COME HERE WHEN AGREED
 817++2927 23                   INC  HL
 818++2928 56                   LD   D,(HL)                      ; DE=VALUE OF VAR.
 819++2929 2A 0B 80             LD HL,(LOPINC)
 820++292C E5                   PUSH HL
 821++292D 7C                   LD   A,H
 822++292E AA                   XOR  D
 823++292F 7A                   LD   A,D
 824++2930 19                   ADD HL,DE                        ; ADD ONE STEP
 825++2931 FA 38 29             JP M,NX4
 826++2934 AC                   XOR  H
 827++2935 FA 5C 29             JP M,NX5
 828++2938 EB           NX4:    EX DE,HL
 829++2939 2A 09 80             LD HL,(LOPVAR)                   ; PUT IT BACK
 830++293C 73                   LD   (HL),E
 831++293D 23                   INC  HL
 832++293E 72                   LD   (HL),D
 833++293F 2A 0D 80             LD HL,(LOPLMT)                   ; HL->LIMIT
 834++2942 F1                   POP  AF                          ; OLD HL
 835++2943 B7                   OR  A
 836++2944 F2 48 29             JP P,NX1                         ; STEP > 0
 837++2947 EB                   EX DE,HL                         ; STEP < 0
 838++2948 CD 7A 2B     NX1:    CALL CKHLDE                      ; COMPARE WITH LIMIT
 839++294B D1                   POP  DE                          ; RESTORE TEXT POINTER
 840++294C DA 5E 29             JP C,NX2                         ; OUTSIDE LIMIT
 841++294F 2A 0F 80             LD HL,(LOPLN)                    ; WITHIN LIMIT, GO
 842++2952 22 01 80             LD (CURRNT),HL                   ; BACK TO THE SAVED
 843++2955 2A 11 80             LD HL,(LOPPT)                    ; 'CURRNT' AND TEXT
 844++2958 EB                   EX DE,HL                         ; POINTER
 845++2959 CD F3 24             CALL FINISH
 846++295C E1           NX5:    POP  HL
 847++295D D1                   POP  DE
 848++295E CD 12 2D     NX2:    CALL POPA                        ; PURGE THIS LOOP
 849++2961 CD F3 24             CALL FINISH
 850++2964
 851++2964                      ; *************************************************************
 852++2964
 853++2964                      ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 854++2964
 855++2964                      ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 856++2964                      ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 857++2964
 858++2964                      ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 859++2964                      ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 860++2964                      ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 861++2964                      ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 862++2964                      ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 863++2964                      ; EXECUTION CONTINUES AT THE NEXT LINE.
 864++2964
 865++2964                      ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 866++2964                      ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 867++2964                      ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 868++2964                      ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 869++2964                      ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 870++2964                      ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 871++2964                      ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 872++2964                      ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 873++2964                      ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 874++2964                      ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 875++2964
 876++2964                      ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 877++2964                      ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 878++2964                      ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 879++2964                      ; THIS IS HANDLED IN 'INPERR'.
 880++2964
 881++2964                      ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 882++2964                      ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 883++2964                      ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 884++2964                      ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 885++2964                      ; THIS IS DONE BY 'DEFLT'.
 886++2964
 887++2964 21 00 00     REM:    LD  HL,0H                        ; *** REM ***
 888++2967 3E                   DB   3EH                         ; THIS IS LIKE 'IF 0'
 889++2968
 890++2968 CD DE 24     IFF:    CALL EXPR                          ; *** IF ***
 891++296B 7C                   LD   A,H                         ; IS THE EXPR.=0?
 892++296C B5                   OR  L
 893++296D C2 CC 27             JP NZ,RUNSML                     ; NO, CONTINUE
 894++2970 CD 5A 2C             CALL FNDSKP                      ; YES, SKIP REST OF LINE
 895++2973 D2 C5 27             JP NC,RUNTSL                     ; AND RUN THE NEXT LINE
 896++2976 C3 7D 25             JP  RSTART                       ; IF NO NEXT, RE-START
 897++2979
 898++2979 2A 07 80     INPERR: LD HL,(STKINP)                   ; *** INPERR ***
 899++297C F9                   LD SP,HL                         ; RESTORE OLD SP
 900++297D E1                   POP  HL                          ; AND OLD 'CURRNT'
 901++297E 22 01 80             LD (CURRNT),HL
 902++2981 D1                   POP  DE                          ; AND OLD TEXT POINTER
 903++2982 D1                   POP  DE                          ; REDO INPUT
 904++2983
 905++2983              INPUT:                                   ; *** INPUT ***
 906++2983 D5           IP1:    PUSH DE                          ; SAVE IN CASE OF ERROR
 907++2984 CD 72 2C             CALL QTSTG                       ; IS NEXT ITEM A STRING?
 908++2987 C3 93 29             JP  IP2                          ; NO
 909++298A CD FA 24             CALL TSTV                          ; YES, BUT FOLLOWED BY A
 910++298D DA D1 29             JP C,IP4                         ; VARIABLE?   NO.
 911++2990 C3 A5 29             JP  IP3                          ; YES.  INPUT VARIABLE
 912++2993 D5           IP2:    PUSH DE                          ; SAVE FOR 'PRTSTG'
 913++2994 CD FA 24             CALL TSTV                          ; MUST BE VARIABLE NOW
 914++2997 DA B6 2B             JP C,QWHAT                       ; "WHAT?" IT IS NOT?
 915++299A 1A                   LD A,(DE)                        ; GET READY FOR 'PRTSTR'
 916++299B 4F                   LD   C,A
 917++299C 97                   SUB  A
 918++299D 12                   LD (DE),A
 919++299E D1                   POP  DE
 920++299F CD 64 2C             CALL PRTSTG                      ; PRINT STRING AS PROMPT
 921++29A2 79                   LD   A,C                         ; RESTORE TEXT
 922++29A3 1B                   DEC  DE
 923++29A4 12                   LD (DE),A
 924++29A5 D5           IP3:    PUSH DE                          ; SAVE TEXT POINTER
 925++29A6 EB                   EX DE,HL
 926++29A7 2A 01 80             LD HL,(CURRNT)                   ; ALSO SAVE 'CURRNT'
 927++29AA E5                   PUSH HL
 928++29AB 21 83 29             LD  HL,IP1                       ; A NEGATIVE NUMBER
 929++29AE 22 01 80             LD (CURRNT),HL                   ; AS A FLAG
 930++29B1 21 00 00             LD  HL,0H                        ; SAVE SP TOO
 931++29B4 39                   ADD HL,SP
 932++29B5 22 07 80             LD (STKINP),HL
 933++29B8 D5                   PUSH DE                          ; OLD HL
 934++29B9 3E 3A                LD   A,3AH                       ; PRINT THIS TOO
 935++29BB CD EC 2B             CALL GETLN                       ; AND GET A LINE
 936++29BE 11 C0 FD             LD  DE,BUFFER                    ; POINTS TO BUFFER
 937++29C1 CD DE 24             CALL EXPR                          ; EVALUATE INPUT
 938++29C4 00                   NOP                              ; CAN BE 'CALL ENDCHK'
 939++29C5 00                   NOP
 940++29C6 00                   NOP
 941++29C7 D1                   POP  DE                          ; OK, GET OLD HL
 942++29C8 EB                   EX DE,HL
 943++29C9 73                   LD   (HL),E                      ; SAVE VALUE IN VAR.
 944++29CA 23                   INC  HL
 945++29CB 72                   LD   (HL),D
 946++29CC E1                   POP  HL                          ; GET OLD 'CURRNT'
 947++29CD 22 01 80             LD (CURRNT),HL
 948++29D0 D1                   POP  DE                          ; AND OLD TEXT POINTER
 949++29D1 F1           IP4:    POP  AF                          ; PURGE JUNK IN STACK
 950++29D2 CD A3 24             CALL TSTC                          ; IS NEXT CH. ','?
 951++29D5 2C                   DB   ','
 952++29D6 03                   DB   IP5-$-1
 953++29D7 C3 83 29             JP  IP1                          ; YES, MORE ITEMS.
 954++29DA CD F3 24     IP5:    CALL FINISH
 955++29DD
 956++29DD 1A           DEFLT:  LD A,(DE)                        ; ***  DEFLT ***
 957++29DE FE 0D                CP  CR                           ; EMPTY LINE IS OK
 958++29E0 CA EE 29             JP Z,LT1                         ; ELSE IT IS 'LET'
 959++29E3
 960++29E3 CD 84 2B     LET:    CALL SETVAL                      ; *** LET ***
 961++29E6 CD A3 24             CALL TSTC                          ; SET VALUE TO VAR.
 962++29E9 2C                   DB   ','
 963++29EA 03                   DB   LT1-$-1
 964++29EB C3 E3 29             JP  LET                          ; ITEM BY ITEM
 965++29EE CD F3 24     LT1:    CALL FINISH                          ; UNTIL FINISH
 966++29F1
 967++29F1                                                       ; *************************************************************
 968++29F1
 969++29F1                                                       ; *** EXPR ***
 970++29F1
 971++29F1                                                       ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 972++29F1                                                       ; <EXPR>::<EXPR2>
 973++29F1                                                       ; <EXPR2><REL.OP.><EXPR2>
 974++29F1                                                       ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 975++29F1                                                       ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 976++29F1                                                       ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 977++29F1                                                       ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 978++29F1                                                       ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 979++29F1                                                       ; <EXPR4>::=<VARIABLE>
 980++29F1                                                       ; <FUNCTION>
 981++29F1                                                       ; (<EXPR>)
 982++29F1                                                       ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 983++29F1                                                       ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 984++29F1                                                       ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 985++29F1
 986++29F1 21 A6 2F     EXPR1:  LD  HL,TAB8-1                    ; LOOKUP REL.OP.
 987++29F4 C3 C0 2F             JP  EXEC                         ; GO DO IT
 988++29F7 CD 20 2A     XP11:   CALL XP18                        ; REL.OP.">="
 989++29FA D8                   RET C                            ; NO, RETURN HL=0
 990++29FB 6F                   LD   L,A                         ; YES, RETURN HL=1
 991++29FC C9                   RET
 992++29FD CD 20 2A     XP12:   CALL XP18                        ; REL.OP."#"
 993++2A00 C8                   RET Z                            ; FALSE, RETURN HL=0
 994++2A01 6F                   LD   L,A                         ; TRUE, RETURN HL=1
 995++2A02 C9                   RET
 996++2A03 CD 20 2A     XP13:   CALL XP18                        ; REL.OP.">"
 997++2A06 C8                   RET Z                            ; FALSE
 998++2A07 D8                   RET C                            ; ALSO FALSE, HL=0
 999++2A08 6F                   LD   L,A                         ; TRUE, HL=1
1000++2A09 C9                   RET
1001++2A0A CD 20 2A     XP14:   CALL XP18                        ; REL.OP."<="
1002++2A0D 6F                   LD   L,A                         ; SET HL=1
1003++2A0E C8                   RET Z                            ; REL. TRUE, RETURN
1004++2A0F D8                   RET C
1005++2A10 6C                   LD   L,H                         ; ELSE SET HL=0
1006++2A11 C9                   RET
1007++2A12 CD 20 2A     XP15:   CALL XP18                        ; REL.OP."="
1008++2A15 C0                   RET NZ                           ; FALSE, RETURN HL=0
1009++2A16 6F                   LD   L,A                         ; ELSE SET HL=1
1010++2A17 C9                   RET
1011++2A18 CD 20 2A     XP16:   CALL XP18                        ; REL.OP."<"
1012++2A1B D0                   RET NC                           ; FALSE, RETURN HL=0
1013++2A1C 6F                   LD   L,A                         ; ELSE SET HL=1
1014++2A1D C9                   RET
1015++2A1E E1           XP17:   POP  HL                          ; NOT .REL.OP
1016++2A1F C9                   RET                              ; RETURN HL=<EXPR2>
1017++2A20 79           XP18:   LD   A,C                         ; SUBROUTINE FOR ALL
1018++2A21 E1                   POP  HL                          ; REL.OP.'S
1019++2A22 C1                   POP  BC
1020++2A23 E5                   PUSH HL                          ; REVERSE TOP OF STACK
1021++2A24 C5                   PUSH BC
1022++2A25 4F                   LD   C,A
1023++2A26 CD 35 2A             CALL EXPR2                       ; GET 2ND <EXPR2>
1024++2A29 EB                   EX DE,HL                         ; VALUE IN DE NOW
1025++2A2A E3                   EX (SP),HL                       ; 1ST <EXPR2> IN HL
1026++2A2B CD 7A 2B             CALL CKHLDE                      ; COMPARE 1ST WITH 2ND
1027++2A2E D1                   POP  DE                          ; RESTORE TEXT POINTER
1028++2A2F 21 00 00             LD  HL,0H                        ; SET HL=0, A=1
1029++2A32 3E 01                LD   A,1
1030++2A34 C9                   RET
1031++2A35
1032++2A35 CD A3 24     EXPR2:  CALL TSTC                          ; NEGATIVE SIGN?
1033++2A38 2D                   DB   '-'
1034++2A39 06                   DB   XP21-$-1
1035++2A3A 21 00 00             LD  HL,0H                        ; YES, FAKE '0-'
1036++2A3D C3 67 2A             JP  XP26                         ; TREAT LIKE SUBTRACT
1037++2A40 CD A3 24     XP21:   CALL TSTC                          ; POSITIVE SIGN? IGNORE
1038++2A43 2B                   DB   '+'
1039++2A44 00                   DB   XP22-$-1
1040++2A45 CD 71 2A     XP22:   CALL EXPR3                       ; 1ST <EXPR3>
1041++2A48 CD A3 24     XP23:   CALL TSTC                          ; ADD?
1042++2A4B 2B                   DB   '+'
1043++2A4C 15                   DB   XP25-$-1
1044++2A4D E5                   PUSH HL                          ; YES, SAVE VALUE
1045++2A4E CD 71 2A             CALL EXPR3                       ; GET 2ND <EXPR3>
1046++2A51 EB           XP24:   EX DE,HL                         ; 2ND IN DE
1047++2A52 E3                   EX (SP),HL                       ; 1ST IN HL
1048++2A53 7C                   LD   A,H                         ; COMPARE SIGN
1049++2A54 AA                   XOR  D
1050++2A55 7A                   LD   A,D
1051++2A56 19                   ADD HL,DE
1052++2A57 D1                   POP  DE                          ; RESTORE TEXT POINTER
1053++2A58 FA 48 2A             JP M,XP23                        ; 1ST AND 2ND SIGN DIFFER
1054++2A5B AC                   XOR  H                           ; 1ST AND 2ND SIGN EQUAL
1055++2A5C F2 48 2A             JP P,XP23                        ; SO IS RESULT
1056++2A5F C3 62 25             JP  QHOW                         ; ELSE WE HAVE OVERFLOW
1057++2A62 CD A3 24     XP25:   CALL TSTC                          ; SUBTRACT?
1058++2A65 2D                   DB   '-'
1059++2A66 92                   DB   XP42-$-1
1060++2A67 E5           XP26:   PUSH HL                          ; YES, SAVE 1ST <EXPR3>
1061++2A68 CD 71 2A             CALL EXPR3                       ; GET 2ND <EXPR3>
1062++2A6B CD 68 2B             CALL CHGSGN                      ; NEGATE
1063++2A6E C3 51 2A             JP  XP24                         ; AND ADD THEM
1064++2A71
1065++2A71 CD D5 2A     EXPR3:  CALL EXPR4                       ; GET 1ST <EXPR4>
1066++2A74 CD A3 24     XP31:   CALL TSTC                          ; MULTIPLY?
1067++2A77 2A                   DB   '*'
1068++2A78 2D                   DB   XP34-$-1
1069++2A79 E5                   PUSH HL                          ; YES, SAVE 1ST
1070++2A7A CD D5 2A             CALL EXPR4                       ; AND GET 2ND <EXPR4>
1071++2A7D 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1072++2A7F CD 65 2B             CALL CHKSGN                      ; CHECK SIGN
1073++2A82 E3                   EX (SP),HL                       ; 1ST IN HL
1074++2A83 CD 65 2B             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1075++2A86 EB                   EX DE,HL
1076++2A87 E3                   EX (SP),HL
1077++2A88 7C                   LD   A,H                         ; IS HL > 255 ?
1078++2A89 B7                   OR  A
1079++2A8A CA 93 2A             JP Z,XP32                        ; NO
1080++2A8D 7A                   LD   A,D                         ; YES, HOW ABOUT DE
1081++2A8E B2                   OR  D
1082++2A8F EB                   EX DE,HL                         ; PUT SMALLER IN HL
1083++2A90 C2 63 25             JP NZ,AHOW                       ; ALSO >, WILL OVERFLOW
1084++2A93 7D           XP32:   LD   A,L                         ; THIS IS DUMB
1085++2A94 21 00 00             LD  HL,0H                        ; CLEAR RESULT
1086++2A97 B7                   OR  A                            ; ADD AND COUNT
1087++2A98 CA C7 2A             JP Z,XP35
1088++2A9B 19           XP33:   ADD HL,DE
1089++2A9C DA 63 25             JP C,AHOW                        ; OVERFLOW
1090++2A9F 3D                   DEC  A
1091++2AA0 C2 9B 2A             JP NZ,XP33
1092++2AA3 C3 C7 2A             JP  XP35                         ; FINISHED
1093++2AA6 CD A3 24     XP34:   CALL TSTC                          ; DIVIDE?
1094++2AA9 2F                   DB   '/'
1095++2AAA 4E                   DB   XP42-$-1
1096++2AAB E5                   PUSH HL                          ; YES, SAVE 1ST <EXPR4>
1097++2AAC CD D5 2A             CALL EXPR4                       ; AND GET THE SECOND ONE
1098++2AAF 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1099++2AB1 CD 65 2B             CALL CHKSGN                      ; CHECK SIGN OF 2ND
1100++2AB4 E3                   EX (SP),HL                       ; GET 1ST IN HL
1101++2AB5 CD 65 2B             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1102++2AB8 EB                   EX DE,HL
1103++2AB9 E3                   EX (SP),HL
1104++2ABA EB                   EX DE,HL
1105++2ABB 7A                   LD   A,D                         ; DIVIDE BY 0?
1106++2ABC B3                   OR  E
1107++2ABD CA 63 25             JP Z,AHOW                        ; SAY "HOW?"
1108++2AC0 C5                   PUSH BC                          ; ELSE SAVE SIGN
1109++2AC1 CD 48 2B             CALL DIVIDE                      ; USE SUBROUTINE
1110++2AC4 60                   LD   H,B                         ; RESULT IN HL NOW
1111++2AC5 69                   LD   L,C
1112++2AC6 C1                   POP  BC                          ; GET SIGN BACK
1113++2AC7 D1           XP35:   POP  DE                          ; AND TEXT POINTER
1114++2AC8 7C                   LD   A,H                         ; HL MUST BE +
1115++2AC9 B7                   OR  A
1116++2ACA FA 62 25             JP M,QHOW                        ; ELSE IT IS OVERFLOW
1117++2ACD 78                   LD   A,B
1118++2ACE B7                   OR  A
1119++2ACF FC 68 2B             CALL M,CHGSGN                    ; CHANGE SIGN IF NEEDED
1120++2AD2 C3 74 2A             JP  XP31                         ; LOOK FOR MORE TERMS
1121++2AD5
1122++2AD5 21 80 2F     EXPR4:  LD  HL,TAB4-1                    ; FIND FUNCTION IN TAB4
1123++2AD8 C3 C0 2F             JP  EXEC                         ; AND GO DO IT
1124++2ADB CD FA 24     XP40:   CALL TSTV                          ; NO, NOT A FUNCTION
1125++2ADE DA E6 2A             JP C,XP41                        ; NOR A VARIABLE
1126++2AE1 7E                   LD   A,(HL)                      ; VARIABLE
1127++2AE2 23                   INC  HL
1128++2AE3 66                   LD   H,(HL)                      ; VALUE IN HL
1129++2AE4 6F                   LD   L,A
1130++2AE5 C9                   RET
1131++2AE6 CD 38 25     XP41:   CALL TSTNUM                      ; OR IS IT A NUMBER
1132++2AE9 78                   LD   A,B                         ; # OF DIGIT
1133++2AEA B7                   OR  A
1134++2AEB C0                   RET NZ                           ; OK
1135++2AEC CD A3 24     PARN:   CALL TSTC
1136++2AEF 28                   DB   '('
1137++2AF0 09                   DB   XP43-$-1
1138++2AF1 CD DE 24             CALL EXPR                          ; "(EXPR)"
1139++2AF4 CD A3 24             CALL TSTC
1140++2AF7 29                   DB   ')'
1141++2AF8 01                   DB   XP43-$-1
1142++2AF9 C9           XP42:   RET
1143++2AFA C3 B6 2B     XP43:   JP  QWHAT                        ; ELSE SAY: "WHAT?"
1144++2AFD
1145++2AFD CD EC 2A     RND:    CALL PARN                        ; *** RND(EXPR) ***
1146++2B00 7C                   LD   A,H                         ; EXPR MUST BE +
1147++2B01 B7                   OR  A
1148++2B02 FA 62 25             JP M,QHOW
1149++2B05 B5                   OR  L                            ; AND NON-ZERO
1150++2B06 CA 62 25             JP Z,QHOW
1151++2B09 D5                   PUSH DE                          ; SAVE BOTH
1152++2B0A E5                   PUSH HL
1153++2B0B 2A 13 80             LD HL,(RANPNT)                   ; GET MEMORY AS RANDOM
1154++2B0E 11 B5 30             LD  DE,LSTROM                    ; NUMBER
1155++2B11 CD E5 24             CALL COMP
1156++2B14 DA 1A 2B             JP C,RA1                         ; WRAP AROUND IF LAST
1157++2B17 21 9B 24             LD  HL,TBSTART
1158++2B1A 5E           RA1:    LD   E,(HL)
1159++2B1B 23                   INC  HL
1160++2B1C 56                   LD   D,(HL)
1161++2B1D 22 13 80             LD (RANPNT),HL
1162++2B20 E1                   POP  HL
1163++2B21 EB                   EX DE,HL
1164++2B22 C5                   PUSH BC
1165++2B23 CD 48 2B             CALL DIVIDE                      ; RND(N)=MOD(M,N)+1
1166++2B26 C1                   POP  BC
1167++2B27 D1                   POP  DE
1168++2B28 23                   INC  HL
1169++2B29 C9                   RET
1170++2B2A
1171++2B2A CD EC 2A     ABS:    CALL PARN                        ; *** ABS(EXPR) ***
1172++2B2D 1B                   DEC  DE
1173++2B2E CD 65 2B             CALL CHKSGN                      ; CHECK SIGN
1174++2B31 13                   INC  DE
1175++2B32 C9                   RET
1176++2B33
1177++2B33 CD EC 2A     PEEK:   CALL PARN                        ; *** PEEK(EXPR) ***
1178++2B36 7E                   ld a, (hl)                      ; We got a location into hl, so read from it
1179++2B37 6F                   ld l,a
1180++2B38 26 00                ld h,0
1181++2B3A C9                   RET
1182++2B3B
1183++2B3B 2A 15 80     SIZE:   LD HL,(TXTUNF)                   ; *** SIZE ***
1184++2B3E D5                   PUSH DE                          ; GET THE NUMBER OF FREE
1185++2B3F EB                   EX DE,HL                         ; BYTES BETWEEN 'TXTUNF'
1186++2B40 21 89 FD             LD  HL,VARBGN                    ; AND 'VARBGN'
1187++2B43 CD 5E 2B             CALL SUBDE
1188++2B46 D1                   POP  DE
1189++2B47 C9                   RET
1190++2B48
1191++2B48                      ; *************************************************************
1192++2B48
1193++2B48                      ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1194++2B48
1195++2B48                      ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1196++2B48
1197++2B48                      ; 'SUBDE' SUBSTRACTS DE FROM HL
1198++2B48
1199++2B48                      ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1200++2B48                      ; SIGN AND FLIP SIGN OF B.
1201++2B48
1202++2B48                      ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1203++2B48
1204++2B48                      ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1205++2B48                      ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1206++2B48                      ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1207++2B48
1208++2B48 E5           DIVIDE: PUSH HL                          ; *** DIVIDE ***
1209++2B49 6C                   ld   l,h                         ; DIVIDE H BY DE
1210++2B4A 26 00                LD   H,0
1211++2B4C CD 53 2B             CALL DV1
1212++2B4F 41                   LD   B,C                         ; SAVE RESULT IN B
1213++2B50 7D                   LD   A,L                         ; (REMINDER+L)/DE
1214++2B51 E1                   POP  HL
1215++2B52 67                   LD   H,A
1216++2B53 0E FF        DV1:    LD   C,0FFH                      ; RESULT IN C
1217++2B55 0C           DV2:    INC  C                           ; DUMB ROUTINE
1218++2B56 CD 5E 2B             CALL SUBDE                       ; DIVIDE BY SUBTRACT
1219++2B59 D2 55 2B             JP NC,DV2                        ; AND COUNT
1220++2B5C 19                   ADD HL,DE
1221++2B5D C9                   RET
1222++2B5E
1223++2B5E 7D           SUBDE:  LD   A,L                         ; *** SUBDE ***
1224++2B5F 93                   SUB  E                           ; SUBSTRACT DE FROM
1225++2B60 6F                   LD   L,A                         ; HL
1226++2B61 7C                   LD   A,H
1227++2B62 9A                   sbc a,D
1228++2B63 67                   LD   H,A
1229++2B64 C9                   RET
1230++2B65
1231++2B65 7C           CHKSGN: LD   A,H                         ; *** CHKSGN ***
1232++2B66 B7                   OR  A                            ; CHECK SIGN OF HL
1233++2B67 F0                   RET P                            ; IF -, CHANGE SIGN
1234++2B68
1235++2B68 7C           CHGSGN: LD   A,H                         ; *** CHGSGN ***
1236++2B69 F5                   PUSH AF
1237++2B6A 2F                   CPL                              ; CHANGE SIGN OF HL
1238++2B6B 67                   LD   H,A
1239++2B6C 7D                   LD   A,L
1240++2B6D 2F                   CPL
1241++2B6E 6F                   LD   L,A
1242++2B6F 23                   INC  HL
1243++2B70 F1                   POP  AF
1244++2B71 AC                   XOR  H
1245++2B72 F2 62 25             JP P,QHOW
1246++2B75 78                   LD   A,B                         ; AND ALSO FLIP B
1247++2B76 EE 80                XOR  80H
1248++2B78 47                   LD   B,A
1249++2B79 C9                   RET
1250++2B7A
1251++2B7A 7C           CKHLDE: LD   A,H
1252++2B7B AA                   XOR  D                           ; SAME SIGN?
1253++2B7C F2 80 2B             JP P,CK1                         ; YES, COMPARE
1254++2B7F EB                   EX DE,HL                         ; NO, XCH AND COMP
1255++2B80 CD E5 24     CK1:    CALL COMP
1256++2B83 C9                   RET;,5                          ; No idea if this was a typo but it said ret,5 which didn't assemble.
1257++2B84
1258++2B84                      ; *************************************************************
1259++2B84
1260++2B84                      ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1261++2B84
1262++2B84                      ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1263++2B84                      ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1264++2B84                      ; TO THAT VALUE.
1265++2B84
1266++2B84                      ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1267++2B84                      ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1268++2B84                      ; NEXT LINE AND CONTINUE FROM THERE.
1269++2B84
1270++2B84                      ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1271++2B84                      ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1272++2B84
1273++2B84                      ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1274++2B84                      ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1275++2B84                      ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1276++2B84                      ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1277++2B84                      ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1278++2B84                      ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1279++2B84                      ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1280++2B84                      ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1281++2B84                      ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1282++2B84
1283++2B84                      ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1284++2B84                      ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1285++2B84                      ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1286++2B84                      ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1287++2B84                      ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1288++2B84
1289++2B84 CD FA 24     SETVAL: CALL TSTV                          ; *** SETVAL ***
1290++2B87 DA B6 2B             JP C,QWHAT                       ; "WHAT?" NO VARIABLE
1291++2B8A E5                   PUSH HL                          ; SAVE ADDRESS OF VAR.
1292++2B8B CD A3 24             CALL TSTC                          ; PASS "=" SIGN
1293++2B8E 3D                   DB   '='
1294++2B8F 0A                   DB   SV1-$-1
1295++2B90 CD DE 24             CALL EXPR                          ; EVALUATE EXPR.
1296++2B93 44                   LD   B,H                         ; VALUE IS IN BC NOW
1297++2B94 4D                   LD   C,L
1298++2B95 E1                   POP  HL                          ; GET ADDRESS
1299++2B96 71                   LD   (HL),C                      ; SAVE VALUE
1300++2B97 23                   INC  HL
1301++2B98 70                   LD   (HL),B
1302++2B99 C9                   RET
1303++2B9A C3 B6 2B     SV1:    JP  QWHAT                        ; NO "=" SIGN
1304++2B9D
1305++2B9D CD A3 24     FIN:    CALL TSTC                          ; *** FIN ***
1306++2BA0 3B                   DB   3BH
1307++2BA1 04                   DB   FI1-$-1
1308++2BA2 F1                   POP  AF                          ; ";", PURGE RET. ADDR.
1309++2BA3 C3 CC 27             JP  RUNSML                       ; CONTINUE SAME LINE
1310++2BA6 CD A3 24     FI1:    CALL TSTC                          ; NOT ";", IS IT CR?
1311++2BA9 0D                   DB   CR
1312++2BAA 04                   DB   FI2-$-1
1313++2BAB F1                   POP  AF                          ; YES, PURGE RET. ADDR.
1314++2BAC C3 BC 27             JP  RUNNXL                       ; RUN NEXT LINE
1315++2BAF C9           FI2:    RET                              ; ELSE RETURN TO CALLER
1316++2BB0
1317++2BB0 CD EB 24     ENDCHK: CALL IGNBLK                          ; *** ENDCHK ***
1318++2BB3 FE 0D                CP  CR                           ; END WITH CR?
1319++2BB5 C8                   RET Z                            ; OK, ELSE SAY: "WHAT?"
1320++2BB6
1321++2BB6 D5           QWHAT:  PUSH DE                          ; *** QWHAT ***
1322++2BB7 11 71 25     AWHAT:  LD  DE,WHAT                      ; *** AWHAT ***
1323++2BBA 97           ERROR:  SUB  A                           ; *** ERROR ***
1324++2BBB CD 64 2C             CALL PRTSTG                      ; PRINT 'WHAT?', 'HOW?'
1325++2BBE D1                   POP  DE                          ; OR 'SORRY'
1326++2BBF 1A                   LD A,(DE)                        ; SAVE THE CHARACTER
1327++2BC0 F5                   PUSH AF                          ; AT WHERE OLD DE ->
1328++2BC1 97                   SUB  A                           ; AND PUT A 0 THERE
1329++2BC2 12                   LD (DE),A
1330++2BC3 2A 01 80             LD HL,(CURRNT)                   ; GET CURRENT LINE #
1331++2BC6 E5                   PUSH HL
1332++2BC7 7E                   LD   A,(HL)                      ; CHECK THE VALUE
1333++2BC8 23                   INC  HL
1334++2BC9 B6                   OR  (HL)
1335++2BCA D1                   POP  DE
1336++2BCB CA 7D 25             JP Z,RSTART                      ; IF ZERO, JUST RESTART
1337++2BCE 7E                   LD   A,(HL)                      ; IF NEGATIVE,
1338++2BCF B7                   OR  A
1339++2BD0 FA 79 29             JP M,INPERR                      ; REDO INPUT
1340++2BD3 CD E3 2C             CALL PRTLN                       ; ELSE PRINT THE LINE
1341++2BD6 1B                   DEC  DE                          ; UPTO WHERE THE 0 IS
1342++2BD7 F1                   POP  AF                          ; RESTORE THE CHARACTER
1343++2BD8 12                   LD (DE),A
1344++2BD9 3E 3F                LD   A,3FH                       ; PRINT A "?"
1345++2BDB CD B9 24             CALL OUTC
1346++2BDE 97                   SUB  A                           ; AND THE REST OF THE
1347++2BDF CD 64 2C             CALL PRTSTG                      ; LINE
1348++2BE2 C3 7D 25             JP  RSTART                       ; THEN RESTART
1349++2BE5
1350++2BE5 D5           QSORRY: PUSH DE                          ; *** QSORRY ***
1351++2BE6 11 77 25     ASORRY: LD  DE,SORRY                     ; *** ASORRY ***
1352++2BE9 C3 BA 2B             JP  ERROR
1353++2BEC
1354++2BEC                      ; *************************************************************
1355++2BEC
1356++2BEC                      ; *** GETLN *** FNDLN (& FRIENDS) ***
1357++2BEC
1358++2BEC                      ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1359++2BEC                      ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1360++2BEC                      ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1361++2BEC                      ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1362++2BEC                      ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1363++2BEC                      ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1364++2BEC                      ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1365++2BEC
1366++2BEC                      ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1367++2BEC                      ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1368++2BEC                      ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1369++2BEC                      ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1370++2BEC                      ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1371++2BEC                      ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1372++2BEC                      ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1373++2BEC                      ; LINE, FLAGS ARE C & NZ.
1374++2BEC                      ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1375++2BEC                      ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1376++2BEC                      ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1377++2BEC                      ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1378++2BEC                      ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1379++2BEC                      ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1380++2BEC
1381++2BEC CD B9 24     GETLN:  CALL OUTC                          ; *** GETLN ***
1382++2BEF 11 C0 FD             LD  DE,BUFFER                    ; PROMPT AND INIT.
1383++2BF2 CD F4 2E     GL1:    CALL CHKIO                       ; CHECK KEYBOARD
1384++2BF5 CA F2 2B             JP Z,GL1                         ; NO INPUT, WAIT
1385++2BF8 FE 08                CP  08H                          ; DELETE LAST CHARACTER?
1386++2BFA CA 19 2C             JP Z,GL3                         ; YES
1387++2BFD CD B9 24             CALL OUTC                          ; INPUT, ECHO BACK
1388++2C00 FE 0A                CP  0AH                          ; IGNORE LF
1389++2C02 CA F2 2B             JP Z,GL1
1390++2C05 B7                   OR  A                            ; IGNORE NULL
1391++2C06 CA F2 2B             JP Z,GL1
1392++2C09 FE 7D                CP  7DH                          ; DELETE THE WHOLE LINE?
1393++2C0B CA 32 2C             JP Z,GL4                         ; YES
1394++2C0E 12                   LD (DE),A                        ; ELSE SAVE INPUT
1395++2C0F 13                   INC  DE                          ; AND BUMP POINTER
1396++2C10 FE 0D                CP  0DH                          ; WAS IT CR?
1397++2C12 C8                   RET Z                            ; YES, END OF LINE
1398++2C13 7B                   LD   A,E                         ; ELSE MORE FREE ROOM?
1399++2C14 FE 00                CP  BUFEND & 0FFH
1400++2C16 C2 F2 2B             JP NZ,GL1                        ; YES, GET NEXT INPUT
1401++2C19 7B           GL3:    LD   A,E                         ; DELETE LAST CHARACTER
1402++2C1A FE C0                CP  BUFFER & 0FFH                ; BUT DO WE HAVE ANY?
1403++2C1C CA 32 2C             JP Z,GL4                         ; NO, REDO WHOLE LINE
1404++2C1F 1B                   DEC  DE                          ; YES, BACKUP POINTER
1405++2C20 3E 08                LD   A,08H                       ; AND move cursor left, print space, cursor left again (to rub-out)
1406++2C22 CD B9 24             CALL OUTC
1407++2C25 3E 20                ld a, ' '
1408++2C27 CD B9 24             CALL OUTC
1409++2C2A 3E 08                ld a, 08h
1410++2C2C CD B9 24             CALL OUTC
1411++2C2F C3 F2 2B             JP  GL1                          ; GO GET NEXT INPUT
1412++2C32 CD B7 24     GL4:    CALL CRLF                        ; REDO ENTIRE LINE
1413++2C35 3E 5E                LD   A,05EH                      ; CR, LF AND UP-ARROW
1414++2C37 C3 EC 2B             JP  GETLN
1415++2C3A
1416++2C3A 7C           FNDLN:  LD   A,H                         ; *** FNDLN ***
1417++2C3B B7                   OR  A                            ; CHECK SIGN OF HL
1418++2C3C FA 62 25             JP M,QHOW                        ; IT CANNOT BE -
1419++2C3F 11 19 80             LD  DE,TXTBGN                    ; INIT TEXT POINTER
1420++2C42
1421++2C42              FNDLP:                                   ; *** FDLNP ***
1422++2C42 E5           FL1:    PUSH HL                          ; SAVE LINE #
1423++2C43 2A 15 80             LD HL,(TXTUNF)                   ; CHECK IF WE PASSED END
1424++2C46 2B                   DEC  HL
1425++2C47 CD E5 24             CALL COMP
1426++2C4A E1                   POP  HL                          ; GET LINE # BACK
1427++2C4B D8                   RET C                            ; C,NZ PASSED END
1428++2C4C 1A                   LD A,(DE)                        ; WE DID NOT, GET BYTE 1
1429++2C4D 95                   SUB  L                           ; IS THIS THE LINE?
1430++2C4E 47                   LD   B,A                         ; COMPARE LOW ORDER
1431++2C4F 13                   INC  DE
1432++2C50 1A                   LD A,(DE)                        ; GET BYTE 2
1433++2C51 9C                   sbc a,H                          ; COMPARE HIGH ORDER
1434++2C52 DA 59 2C             JP C,FL2                         ; NO, NOT THERE YET
1435++2C55 1B                   DEC  DE                          ; ELSE WE EITHER FOUND
1436++2C56 B0                   OR  B                            ; IT, OR IT IS NOT THERE
1437++2C57 C9                   RET                              ; NC,Z:FOUND, NC,NZ:NO
1438++2C58
1439++2C58              FNDNXT:                                  ; *** FNDNXT ***
1440++2C58 13                   INC  DE                          ; FIND NEXT LINE
1441++2C59 13           FL2:    INC  DE                          ; JUST PASSED BYTE 1 & 2
1442++2C5A
1443++2C5A 1A           FNDSKP: LD A,(DE)                        ; *** FNDSKP ***
1444++2C5B FE 0D                CP  CR                           ; TRY TO FIND CR
1445++2C5D C2 59 2C             JP NZ,FL2                        ; KEEP LOOKING
1446++2C60 13                   INC  DE                          ; FOUND CR, SKIP OVER
1447++2C61 C3 42 2C             JP  FL1                          ; CHECK IF END OF TEXT
1448++2C64
1449++2C64                                                       ; *************************************************************
1450++2C64
1451++2C64                                                       ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1452++2C64
1453++2C64                                                       ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1454++2C64                                                       ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1455++2C64                                                       ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1456++2C64                                                       ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1457++2C64
1458++2C64                                                       ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1459++2C64                                                       ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACKSLASH,
1460++2C64                                                       ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1461++2C64                                                       ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1462++2C64                                                       ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1463++2C64                                                       ; OVER (USUALLY A JUMP INSTRUCTION.
1464++2C64
1465++2C64                                                       ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1466++2C64                                                       ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1467++2C64                                                       ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1468++2C64                                                       ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1469++2C64                                                       ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1470++2C64
1471++2C64                                                       ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1472++2C64
1473++2C64 47           PRTSTG: LD   B,A                         ; *** PRTSTG ***
1474++2C65 1A           PS1:    LD A,(DE)                        ; GET A CHARACTER
1475++2C66 13                   INC  DE                          ; BUMP POINTER
1476++2C67 B8                   CP  B                            ; SAME AS OLD A?
1477++2C68 C8                   RET Z                            ; YES, RETURN
1478++2C69 CD B9 24             CALL OUTC                          ; ELSE PRINT IT
1479++2C6C FE 0D                CP  CR                           ; WAS IT A CR?
1480++2C6E C2 65 2C             JP NZ,PS1                        ; NO, NEXT
1481++2C71 C9                   RET                              ; YES, RETURN
1482++2C72
1483++2C72 CD A3 24     QTSTG:  CALL TSTC                          ; *** QTSTG ***
1484++2C75 22                   DB   34                          ; ascii for quote
1485++2C76 0F                   DB   QT3-$-1
1486++2C77 3E 22                LD   A,22H                       ; IT IS A quote
1487++2C79 CD 64 2C     QT1:    CALL PRTSTG                      ; PRINT UNTIL ANOTHER
1488++2C7C FE 0D                CP  CR                           ; WAS LAST ONE A CR?
1489++2C7E E1                   POP  HL                          ; RETURN ADDRESS
1490++2C7F CA BC 27             JP Z,RUNNXL                      ; WAS CR, RUN NEXT LINE
1491++2C82 23           QT2:    INC  HL                          ; SKIP 3 BYTES ON RETURN
1492++2C83 23                   INC  HL
1493++2C84 23                   INC  HL
1494++2C85 E9                   JP (HL)                          ; RETURN
1495++2C86 CD A3 24     QT3:    CALL TSTC                          ; IS IT A '?
1496++2C89 27                   DB   27H
1497++2C8A 05                   DB   QT4-$-1
1498++2C8B 3E 27                LD   A,27H                       ; YES, DO THE SAME
1499++2C8D C3 79 2C             JP  QT1                          ; AS IN quote
1500++2C90 CD A3 24     QT4:    CALL TSTC                          ; IS IT BACKSLASH " \ "?
1501++2C93 5C                   DB   5CH
1502++2C94 09                   DB   QT5-$-1
1503++2C95 3E 0D                LD   A,0DH                       ; YES, CR WITHOUT LF
1504++2C97 CD B9 24             CALL OUTC
1505++2C9A E1                   POP  HL                          ; RETURN ADDRESS
1506++2C9B C3 82 2C             JP  QT2
1507++2C9E C9           QT5:    RET                              ; NONE OF ABOVE
1508++2C9F
1509++2C9F 06 00        PRTNUM: LD   B,0                         ; *** PRTNUM ***
1510++2CA1 CD 65 2B             CALL CHKSGN                      ; CHECK SIGN
1511++2CA4 F2 AA 2C             JP P,PN1                         ; NO SIGN
1512++2CA7 06 2D                LD   B,'-'                       ; B=SIGN
1513++2CA9 0D                   DEC  C                           ; '-' TAKES SPACE
1514++2CAA D5           PN1:    PUSH DE                          ; SAVE
1515++2CAB 11 0A 00             LD  DE,0AH                       ; DECIMAL
1516++2CAE D5                   PUSH DE                          ; SAVE AS A FLAG
1517++2CAF 0D                   DEC  C                           ; C=SPACES
1518++2CB0 C5                   PUSH BC                          ; SAVE SIGN & SPACE
1519++2CB1 CD 48 2B     PN2:    CALL DIVIDE                      ; DIVIDE HL BY 10
1520++2CB4 78                   LD   A,B                         ; RESULT 0?
1521++2CB5 B1                   OR  C
1522++2CB6 CA C1 2C             JP Z,PN3                         ; YES, WE GOT ALL
1523++2CB9 E3                   EX (SP),HL                       ; NO, SAVE REMAINDER
1524++2CBA 2D                   DEC  L                           ; AND COUNT SPACE
1525++2CBB E5                   PUSH HL                          ; HL IS OLD BC
1526++2CBC 60                   LD   H,B                         ; MOVE RESULT TO BC
1527++2CBD 69                   LD   L,C
1528++2CBE C3 B1 2C             JP  PN2                          ; AND DIVIDE BY 10
1529++2CC1 C1           PN3:    POP  BC                          ; WE GOT ALL DIGITS IN
1530++2CC2 0D           PN4:    DEC  C                           ; THE STACK
1531++2CC3 79                   LD   A,C                         ; LOOK AT SPACE COUNT
1532++2CC4 B7                   OR  A
1533++2CC5 FA D0 2C             JP M,PN5                         ; NO LEADING BLANKS
1534++2CC8 3E 20                LD   A,20H                       ; LEADING BLANKS
1535++2CCA CD B9 24             CALL OUTC
1536++2CCD C3 C2 2C             JP  PN4                          ; MORE?
1537++2CD0 78           PN5:    LD   A,B                         ; PRINT SIGN
1538++2CD1 B7                   OR  A
1539++2CD2 C4 10 00             CALL NZ,10H
1540++2CD5 5D                   LD   E,L                         ; LAST REMAINDER IN E
1541++2CD6 7B           PN6:    LD   A,E                         ; CHECK DIGIT IN E
1542++2CD7 FE 0A                CP  0AH                          ; 10 IS FLAG FOR NO MORE
1543++2CD9 D1                   POP  DE
1544++2CDA C8                   RET Z                            ; IF SO, RETURN
1545++2CDB C6 30                ADD  A,30H                       ; ELSE CONVERT TO ASCII
1546++2CDD CD B9 24             CALL OUTC                          ; AND PRINT THE DIGIT
1547++2CE0 C3 D6 2C             JP  PN6                          ; GO BACK FOR MORE
1548++2CE3
1549++2CE3 1A           PRTLN:  LD A,(DE)                        ; *** PRTLN ***
1550++2CE4 6F                   LD   L,A                         ; LOW ORDER LINE #
1551++2CE5 13                   INC  DE
1552++2CE6 1A                   LD A,(DE)                        ; HIGH ORDER
1553++2CE7 67                   LD   H,A
1554++2CE8 13                   INC  DE
1555++2CE9 0E 04                LD   C,4H                        ; PRINT 4 DIGIT LINE #
1556++2CEB CD 9F 2C             CALL PRTNUM
1557++2CEE 3E 20                LD   A,20H                       ; FOLLOWED BY A BLANK
1558++2CF0 CD B9 24             CALL OUTC
1559++2CF3 97                   SUB  A                           ; AND THEN THE NEXT
1560++2CF4 CD 64 2C             CALL PRTSTG
1561++2CF7 C9                   RET
1562++2CF8
1563++2CF8                      ; *************************************************************
1564++2CF8
1565++2CF8                      ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1566++2CF8
1567++2CF8                      ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1568++2CF8                      ; DE = HL
1569++2CF8
1570++2CF8                      ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1571++2CF8                      ; UNTIL DE = BC
1572++2CF8
1573++2CF8                      ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1574++2CF8                      ; STACK
1575++2CF8
1576++2CF8                      ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1577++2CF8                      ; STACK
1578++2CF8
1579++2CF8 CD E5 24     MVUP:   CALL COMP                          ; *** MVUP ***
1580++2CFB C8                   RET Z                            ; DE = HL, RETURN
1581++2CFC 1A                   LD A,(DE)                        ; GET ONE BYTE
1582++2CFD 02                   LD (BC),A                        ; MOVE IT
1583++2CFE 13                   INC  DE                          ; INCREASE BOTH POINTERS
1584++2CFF 03                   INC  BC
1585++2D00 C3 F8 2C             JP  MVUP                         ; UNTIL DONE
1586++2D03
1587++2D03 78           MVDOWN: LD   A,B                         ; *** MVDOWN ***
1588++2D04 92                   SUB  D                           ; TEST IF DE = BC
1589++2D05 C2 0B 2D             JP NZ,MD1                        ; NO, GO MOVE
1590++2D08 79                   LD   A,C                         ; MAYBE, OTHER BYTE?
1591++2D09 93                   SUB  E
1592++2D0A C8                   RET Z                            ; YES, RETURN
1593++2D0B 1B           MD1:    DEC  DE                          ; ELSE MOVE A BYTE
1594++2D0C 2B                   DEC  HL                          ; BUT FIRST DECREASE
1595++2D0D 1A                   LD A,(DE)                        ; BOTH POINTERS AND
1596++2D0E 77                   LD   (HL),A                      ; THEN DO IT
1597++2D0F C3 03 2D             JP  MVDOWN                       ; LOOP BACK
1598++2D12
1599++2D12 C1           POPA:   POP  BC                          ; BC = RETURN ADDR.
1600++2D13 E1                   POP  HL                          ; RESTORE LOPVAR, BUT
1601++2D14 22 09 80             LD (LOPVAR),HL                   ; =0 MEANS NO MORE
1602++2D17 7C                   LD   A,H
1603++2D18 B5                   OR  L
1604++2D19 CA 2C 2D             JP Z,PP1                         ; YEP, GO RETURN
1605++2D1C E1                   POP  HL                          ; NOP, RESTORE OTHERS
1606++2D1D 22 0B 80             LD (LOPINC),HL
1607++2D20 E1                   POP  HL
1608++2D21 22 0D 80             LD (LOPLMT),HL
1609++2D24 E1                   POP  HL
1610++2D25 22 0F 80             LD (LOPLN),HL
1611++2D28 E1                   POP  HL
1612++2D29 22 11 80             LD (LOPPT),HL
1613++2D2C C5           PP1:    PUSH BC                          ; BC = RETURN ADDR.
1614++2D2D C9                   RET
1615++2D2E
1616++2D2E 21 01 FE     PUSHA:  LD  HL,STKLMT                    ; *** PUSHA ***
1617++2D31 CD 68 2B             CALL CHGSGN
1618++2D34 C1                   POP  BC                          ; BC=RETURN ADDRESS
1619++2D35 39                   ADD HL,SP                        ; IS STACK NEAR THE TOP?
1620++2D36 D2 E5 2B             JP NC,QSORRY                     ; YES, SORRY FOR THAT
1621++2D39 2A 09 80             LD HL,(LOPVAR)                   ; ELSE SAVE LOOP VAR'S
1622++2D3C 7C                   LD   A,H                         ; BUT IF LOPVAR IS 0
1623++2D3D B5                   OR  L                            ; THAT WILL BE ALL
1624++2D3E CA 54 2D             JP Z,PU1
1625++2D41 2A 11 80             LD HL,(LOPPT)                    ; ELSE, MORE TO SAVE
1626++2D44 E5                   PUSH HL
1627++2D45 2A 0F 80             LD HL,(LOPLN)
1628++2D48 E5                   PUSH HL
1629++2D49 2A 0D 80             LD HL,(LOPLMT)
1630++2D4C E5                   PUSH HL
1631++2D4D 2A 0B 80             LD HL,(LOPINC)
1632++2D50 E5                   PUSH HL
1633++2D51 2A 09 80             LD HL,(LOPVAR)
1634++2D54 E5           PU1:    PUSH HL
1635++2D55 C5                   PUSH BC                          ; BC = RETURN ADDR.
1636++2D56 C9                   RET
1637++2D57
1638++2D57                      ; *************************************************************
1639++2D57
1640++2D57                      ; *** OUTC *** & CHKIO ***
1641++2D57
1642++2D57                      ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1643++2D57                      ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1644++2D57                      ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1645++2D57                      ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1646++2D57                      ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1647++2D57                      ; ARE RESTORED.
1648++2D57
1649++2D57                      ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1650++2D57                      ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1651++2D57                      ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1652++2D57                      ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1653++2D57                      ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1654++2D57                      ; RESTART TBI AND DOES NOT RETURN TO THE CALLER.
1655++2D57
1656++2D57
1657++2D57
1658++2D57
1659++2D57 32 00 80     INIT:   LD  (OCSW),A
1660++2D5A
1661++2D5A CD 82 07             call message
1662++2D5D 1B 5B 32 4A          DB 27,'[2J',27,'[H'
1662++2D61 1B 5B 48
1663++2D64 C9 CD CD CD          DB 201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,CR,LF
1663++2D68 CD CD CD CD
1663++2D6C CD CD CD CD
1663++2D70 CD CD CD CD
1663++2D74 CD CD CD CD
1663++2D78 CD CD CD CD
1663++2D7C CD CD CD CD
1663++2D80 CD CD CD CD
1663++2D84 CD CD CD CD
1663++2D88 CD CD CD BB
1663++2D8C 0D 0A
1664++2D8E BA 20 20 54          DB 186,'  TINY BASIC v2.2 for Z80 Playground  ',186,CR,LF
1664++2D92 49 4E 59 20
1664++2D96 42 41 53 49
1664++2D9A 43 20 76 32
1664++2D9E 2E 32 20 66
1664++2DA2 6F 72 20 5A
1664++2DA6 38 30 20 50
1664++2DAA 6C 61 79 67
1664++2DAE 72 6F 75 6E
1664++2DB2 64 20 20 BA
1664++2DB6 0D 0A
1665++2DB8 C8 CD CD CD          DB 200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,CR,LF
1665++2DBC CD CD CD CD
1665++2DC0 CD CD CD CD
1665++2DC4 CD CD CD CD
1665++2DC8 CD CD CD CD
1665++2DCC CD CD CD CD
1665++2DD0 CD CD CD CD
1665++2DD4 CD CD CD CD
1665++2DD8 CD CD CD CD
1665++2DDC CD CD CD BC
1665++2DE0 0D 0A
1666++2DE2 0D 0A                DB CR,LF
1667++2DE4 44 69 73 6B          db 'Disk commands are:',CR,LF
1667++2DE8 20 63 6F 6D
1667++2DEC 6D 61 6E 64
1667++2DF0 73 20 61 72
1667++2DF4 65 3A 0D 0A
1668++2DF8 20 20 44 49          db '  DIR',CR,LF
1668++2DFC 52 0D 0A
1669++2DFF 20 20 53 41          db '  SAVE "filename"',CR,LF
1669++2E03 56 45 20 22
1669++2E07 66 69 6C 65
1669++2E0B 6E 61 6D 65
1669++2E0F 22 0D 0A
1670++2E12 20 20 4C 4F          db '  LOAD "filename"',CR,LF
1670++2E16 41 44 20 22
1670++2E1A 66 69 6C 65
1670++2E1E 6E 61 6D 65
1670++2E22 22 0D 0A
1671++2E25 20 20 45 52          db '  ERASE "filename"',CR,LF
1671++2E29 41 53 45 20
1671++2E2D 22 66 69 6C
1671++2E31 65 6E 61 6D
1671++2E35 65 22 0D 0A
1672++2E39 4F 74 68 65          db 'Other keywords:',CR,LF
1672++2E3D 72 20 6B 65
1672++2E41 79 77 6F 72
1672++2E45 64 73 3A 0D
1672++2E49 0A
1673++2E4A
1674++2E4A 20 20 52 45          DB   '  REM, '
1674++2E4E 4D 2C 20
1675++2E51 4E 45 57 2C          DB   'NEW, '
1675++2E55 20
1676++2E56 4C 49 53 54          DB   'LIST, '
1676++2E5A 2C 20
1677++2E5C 52 55 4E 2C          DB   'RUN, '
1677++2E60 20
1678++2E61 4C 45 54 2C          DB   'LET, '
1678++2E65 20
1679++2E66 49 46 2C 20          DB   'IF, '
1680++2E6A 47 4F 54 4F          DB   'GOTO, '
1680++2E6E 2C 20
1681++2E70 47 4F 53 55          DB   'GOSUB,',13,10
1681++2E74 42 2C 0D 0A
1682++2E78 20 20 52 45          DB   '  RETURN, '
1682++2E7C 54 55 52 4E
1682++2E80 2C 20
1683++2E82 46 4F 52 2C          DB   'FOR, '
1683++2E86 20
1684++2E87 54 4F 2C 20          DB   'TO, '
1685++2E8B 53 54 45 50          DB   'STEP, '
1685++2E8F 2C 20
1686++2E91 4E 45 58 54          DB   'NEXT, '
1686++2E95 2C 20
1687++2E97 49 4E 50 55          DB   'INPUT, '
1687++2E9B 54 2C 20
1688++2E9E 50 52 49 4E          DB   'PRINT, '
1688++2EA2 54 2C 20
1689++2EA5 53 54 4F 50          DB   'STOP, '
1689++2EA9 2C 20
1690++2EAB 52 4E 44 2C          DB   'RND, '
1690++2EAF 20
1691++2EB0 41 42 53 2C          DB   'ABS, '
1691++2EB4 20
1692++2EB5 53 49 5A 45          DB   'SIZE, '
1692++2EB9 2C 20
1693++2EBB 50 45 45 4B          DB   'PEEK',13,10
1693++2EBF 0D 0A
1694++2EC1 54 68 69 73          db 'This version is case-insensitive!'
1694++2EC5 20 76 65 72
1694++2EC9 73 69 6F 6E
1694++2ECD 20 69 73 20
1694++2ED1 63 61 73 65
1694++2ED5 2D 69 6E 73
1694++2ED9 65 6E 73 69
1694++2EDD 74 69 76 65
1694++2EE1 21
1695++2EE2 0D 0A 00             DB CR,LF,0
1696++2EE5
1697++2EE5 21 9B 24             LD  HL,TBSTART
1698++2EE8 22 13 80             LD (RANPNT),HL
1699++2EEB 21 19 80             LD  HL,TXTBGN
1700++2EEE 22 15 80             LD (TXTUNF),HL
1701++2EF1 C3 7D 25             JP  RSTART
1702++2EF4
1703++2EF4              CHKIO:
1704++2EF4 DB BD                in a,(uart_LSR)                  ; get status from Line Status Register
1705++2EF6 CB 47                bit 0,a                          ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
1706++2EF8                                                       ; "logic 0 = no data in receive holding register."
1707++2EF8 C8                   ret z                            ; zero = no char received
1708++2EF9 DB B8                in a,(uart_tx_rx)                ; Get the incoming char from the keyboard
1709++2EFB FE 00                cp 0
1710++2EFD C8                   ret z                            ; If no key pressed, return Z
1711++2EFE
1712++2EFE E6 7F                AND  7FH                         ; MASK BIT 7 OFF
1713++2F00 FE 0F                CP  0FH                          ; IS IT CONTROL-O?
1714++2F02 C2 0F 2F             JP NZ,CI1                        ; NO, MORE CHECKING
1715++2F05 3A 00 80             LD  A,(OCSW)                     ; CONTROL-O FLIPS OCSW
1716++2F08 2F                   CPL                              ; ON TO OFF, OFF TO ON
1717++2F09 32 00 80             LD  (OCSW),A
1718++2F0C C3 F4 2E             JP  CHKIO                        ; GET ANOTHER INPUT
1719++2F0F FE 03        CI1:    CP  3H                           ; IS IT CONTROL-C?
1720++2F11 C0                   RET NZ                           ; NO, RETURN "NZ"
1721++2F12 C3 7D 25             JP  RSTART                       ; YES, RESTART TBI
1722++2F15
1723++2F15                      ; *************************************************************
1724++2F15
1725++2F15                      ; *** TABLES *** DIRECT *** & EXEC ***
1726++2F15
1727++2F15                      ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1728++2F15                      ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1729++2F15                      ; OF CODE ACCORDING TO THE TABLE.
1730++2F15
1731++2F15                      ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1732++2F15                      ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1733++2F15                      ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1734++2F15                      ; ALL DIRECT AND STATEMENT COMMANDS.
1735++2F15
1736++2F15                      ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1737++2F15                      ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1738++2F15                      ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1739++2F15
1740++2F15                      ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1741++2F15                      ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1742++2F15                      ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1743++2F15                      ; BYTE SET TO 1.
1744++2F15
1745++2F15                      ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1746++2F15                      ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1747++2F15                      ; MATCH THIS NULL ITEM AS DEFAULT.
1748++2F15
1749++2F15              TAB1:                                    ; DIRECT COMMANDS
1750++2F15 4C 49 53 54          DB   'LIST'
1751++2F19                      DWA  LIST
1751++2F19 27          >        DB LIST>>8+128
1751++2F1A E6          >        DB LIST&0FFH
1752++2F1B 52 55 4E             DB   'RUN'
1753++2F1E                      DWA  RUN
1753++2F1E 27          >        DB RUN>>8+128
1753++2F1F B6          >        DB RUN&0FFH
1754++2F20 4E 45 57             DB   'NEW'
1755++2F23                      DWA  NEW
1755++2F23 25          >        DB NEW>>8+128
1755++2F24 F9          >        DB NEW&0FFH
1756++2F25 44 49 52             DB   'DIR'
1757++2F28                      DWA  TBDIR
1757++2F28 26          >        DB TBDIR>>8+128
1757++2F29 08          >        DB TBDIR&0FFH
1758++2F2A 53 41 56 45          DB   'SAVE'
1759++2F2E                      DWA  SAVE
1759++2F2E 26          >        DB SAVE>>8+128
1759++2F2F 86          >        DB SAVE&0FFH
1760++2F30 4C 4F 41 44          DB   'LOAD'
1761++2F34                      DWA  LOAD
1761++2F34 27          >        DB LOAD>>8+128
1761++2F35 10          >        DB LOAD&0FFH
1762++2F36 45 52 41 53          DB   'ERASE'
1762++2F3A 45
1763++2F3B                      DWA  ERASE
1763++2F3B 27          >        DB ERASE>>8+128
1763++2F3C 88          >        DB ERASE&0FFH
1764++2F3D
1765++2F3D              TAB2:                                    ; DIRECT/STATEMENT
1766++2F3D 4E 45 58 54          DB   'NEXT'
1767++2F41                      DWA  NEXT
1767++2F41 29          >        DB NEXT>>8+128
1767++2F42 03          >        DB NEXT&0FFH
1768++2F43 4C 45 54             DB   'LET'
1769++2F46                      DWA  LET
1769++2F46 29          >        DB LET>>8+128
1769++2F47 E3          >        DB LET&0FFH
1770++2F48 49 46                DB   'IF'
1771++2F4A                      DWA  IFF
1771++2F4A 29          >        DB IFF>>8+128
1771++2F4B 68          >        DB IFF&0FFH
1772++2F4C 47 4F 54 4F          DB   'GOTO'
1773++2F50                      DWA  GOTO
1773++2F50 27          >        DB GOTO>>8+128
1773++2F51 D5          >        DB GOTO&0FFH
1774++2F52 47 4F 53 55          DB   'GOSUB'
1774++2F56 42
1775++2F57                      DWA  GOSUB
1775++2F57 28          >        DB GOSUB>>8+128
1775++2F58 61          >        DB GOSUB&0FFH
1776++2F59 52 45 54 55          DB   'RETURN'
1776++2F5D 52 4E
1777++2F5F                      DWA  RETURN
1777++2F5F 28          >        DB RETURN>>8+128
1777++2F60 83          >        DB RETURN&0FFH
1778++2F61 52 45 4D             DB   'REM'
1779++2F64                      DWA  REM
1779++2F64 29          >        DB REM>>8+128
1779++2F65 64          >        DB REM&0FFH
1780++2F66 46 4F 52             DB   'FOR'
1781++2F69                      DWA  FOR
1781++2F69 28          >        DB FOR>>8+128
1781++2F6A 9E          >        DB FOR&0FFH
1782++2F6B 49 4E 50 55          DB   'INPUT'
1782++2F6F 54
1783++2F70                      DWA  INPUT
1783++2F70 29          >        DB INPUT>>8+128
1783++2F71 83          >        DB INPUT&0FFH
1784++2F72 50 52 49 4E          DB   'PRINT'
1784++2F76 54
1785++2F77                      DWA  PRINT
1785++2F77 27          >        DB PRINT>>8+128
1785++2F78 FE          >        DB PRINT&0FFH
1786++2F79 53 54 4F 50          DB   'STOP'
1787++2F7D                      DWA  STOP
1787++2F7D 26          >        DB STOP>>8+128
1787++2F7E 02          >        DB STOP&0FFH
1788++2F7F                      DWA  DEFLT
1788++2F7F 29          >        DB DEFLT>>8+128
1788++2F80 DD          >        DB DEFLT&0FFH
1789++2F81
1790++2F81              TAB4:                                    ; FUNCTIONS
1791++2F81 52 4E 44             DB   'RND'
1792++2F84                      DWA  RND
1792++2F84 2A          >        DB RND>>8+128
1792++2F85 FD          >        DB RND&0FFH
1793++2F86 41 42 53             DB   'ABS'
1794++2F89                      DWA  ABS
1794++2F89 2B          >        DB ABS>>8+128
1794++2F8A 2A          >        DB ABS&0FFH
1795++2F8B 53 49 5A 45          DB   'SIZE'
1796++2F8F                      DWA  SIZE
1796++2F8F 2B          >        DB SIZE>>8+128
1796++2F90 3B          >        DB SIZE&0FFH
1797++2F91 50 45 45 4B          DB   'PEEK'
1798++2F95                      DWA  PEEK
1798++2F95 2B          >        DB PEEK>>8+128
1798++2F96 33          >        DB PEEK&0FFH
1799++2F97                      DWA  XP40
1799++2F97 2A          >        DB XP40>>8+128
1799++2F98 DB          >        DB XP40&0FFH
1800++2F99
1801++2F99              TAB5:                                    ; "TO" IN "FOR"
1802++2F99 54 4F                DB   'TO'
1803++2F9B                      DWA  FR1
1803++2F9B 28          >        DB FR1>>8+128
1803++2F9C AE          >        DB FR1&0FFH
1804++2F9D                      DWA  QWHAT
1804++2F9D 2B          >        DB QWHAT>>8+128
1804++2F9E B6          >        DB QWHAT&0FFH
1805++2F9F
1806++2F9F              TAB6:                                    ; "STEP" IN "FOR"
1807++2F9F 53 54 45 50          DB   'STEP'
1808++2FA3                      DWA  FR2
1808++2FA3 28          >        DB FR2>>8+128
1808++2FA4 BA          >        DB FR2&0FFH
1809++2FA5                      DWA  FR3
1809++2FA5 28          >        DB FR3>>8+128
1809++2FA6 C0          >        DB FR3&0FFH
1810++2FA7
1811++2FA7              TAB8:                                    ; RELATION OPERATORS
1812++2FA7 3E 3D                DB   '>='
1813++2FA9                      DWA  XP11
1813++2FA9 29          >        DB XP11>>8+128
1813++2FAA F7          >        DB XP11&0FFH
1814++2FAB 23                   DB   '#'
1815++2FAC                      DWA  XP12
1815++2FAC 29          >        DB XP12>>8+128
1815++2FAD FD          >        DB XP12&0FFH
1816++2FAE 3E                   DB   '>'
1817++2FAF                      DWA  XP13
1817++2FAF 2A          >        DB XP13>>8+128
1817++2FB0 03          >        DB XP13&0FFH
1818++2FB1 3D                   DB   '='
1819++2FB2                      DWA  XP15
1819++2FB2 2A          >        DB XP15>>8+128
1819++2FB3 12          >        DB XP15&0FFH
1820++2FB4 3C 3D                DB   '<='
1821++2FB6                      DWA  XP14
1821++2FB6 2A          >        DB XP14>>8+128
1821++2FB7 0A          >        DB XP14&0FFH
1822++2FB8 3C                   DB   '<'
1823++2FB9                      DWA  XP16
1823++2FB9 2A          >        DB XP16>>8+128
1823++2FBA 18          >        DB XP16&0FFH
1824++2FBB                      DWA  XP17
1824++2FBB 2A          >        DB XP17>>8+128
1824++2FBC 1E          >        DB XP17&0FFH
1825++2FBD
1826++2FBD 21 14 2F     DIRECT: LD  HL,TAB1-1                    ; *** DIRECT ***
1827++2FC0
1828++2FC0              EXEC:                                    ; *** EXEC ***
1829++2FC0 CD EB 24     EX0:    CALL IGNBLK                          ; IGNORE LEADING BLANKS
1830++2FC3 D5                   PUSH DE                          ; SAVE POINTER
1831++2FC4 1A           EX1:    LD A,(DE)                        ; IF FOUND '.' IN STRING
1832++2FC5 13                   INC  DE                          ; BEFORE ANY MISMATCH
1833++2FC6 FE 2E                CP  '.'                          ; WE DECLARE A MATCH
1834++2FC8 CA E7 2F             JP Z,EX3
1835++2FCB FE 61                cp 'a'                           ; If text is in lowercase,
1836++2FCD 38 02                jr c,not_lowercase               ; uppercase it
1837++2FCF CB AF                res 5,a                          ; by clearing bit 5
1838++2FD1              not_lowercase:
1839++2FD1 23                   INC  HL                          ; HL->TABLE
1840++2FD2 BE                   CP  (HL)                         ; IF MATCH, TEST NEXT
1841++2FD3 CA C4 2F             JP Z,EX1
1842++2FD6 3E 7F                LD   A,07FH                      ; ELSE SEE IF BIT 7
1843++2FD8 1B                   DEC  DE                          ; OF TABLE IS SET, WHICH
1844++2FD9 BE                   CP  (HL)                         ; IS THE JUMP ADDR. (HI)
1845++2FDA                                                       ; TODO: Change this to use "BIT" instruction?
1846++2FDA DA EE 2F             JP C,EX5                         ; C:YES, MATCHED
1847++2FDD 23           EX2:    INC  HL                          ; NC:NO, FIND JUMP ADDR.
1848++2FDE BE                   CP  (HL)
1849++2FDF D2 DD 2F             JP NC,EX2
1850++2FE2 23                   INC  HL                          ; BUMP TO NEXT TAB. ITEM
1851++2FE3 D1                   POP  DE                          ; RESTORE STRING POINTER
1852++2FE4 C3 C0 2F             JP  EX0                          ; TEST AGAINST NEXT ITEM
1853++2FE7 3E 7F        EX3:    LD   A,07FH                      ; PARTIAL MATCH, FIND
1854++2FE9 23           EX4:    INC  HL                          ; JUMP ADDR., WHICH IS
1855++2FEA BE                   CP  (HL)                         ; FLAGGED BY BIT 7
1856++2FEB D2 E9 2F             JP NC,EX4
1857++2FEE 7E           EX5:    LD   A,(HL)                      ; LOAD HL WITH THE JUMP
1858++2FEF 23                   INC  HL                          ; ADDRESS FROM THE TABLE
1859++2FF0 6E                   LD   L,(HL)
1860++2FF1 E6 7F                AND  7FH                         ; MASK OFF BIT 7
1861++2FF3 67                   LD   H,A
1862++2FF4 F1                   POP  AF                          ; CLEAN UP THE GABAGE
1863++2FF5 E9                   JP (HL)                          ; AND WE GO DO IT
1864++2FF6
1865++2FF6              READ_QUOTED_FILENAME:
1866++2FF6 CD EB 24             call IGNBLK                     ; Skip any spaces after "save".
1867++2FF9 CD A3 24             CALL TSTC                       ; Is this followed by quoted string?
1868++2FFC 22                   DB   '"'                        ; ascii for quote
1869++2FFD 74                   DB   SAVE_NO_QUOTE-$-1
1870++2FFE
1871++2FFE CD EB 24             call IGNBLK                     ; Skip leading spaces at the start of the name.
1872++3001 21 EB FF             ld hl, filename_buffer          ; Clear out the filename and extension with NULLs
1873++3004 06 0E                ld b, 14
1874++3006              CLEAR_FILENAME_LOOP:
1875++3006 36 00                ld (hl), 0
1876++3008 23                   inc hl
1877++3009 10 FB                djnz CLEAR_FILENAME_LOOP
1878++300B
1879++300B 21 EB FF             ld hl, filename_buffer          ; We store the filename here.
1880++300E 06 08                ld b, 8
1881++3010              READ_FILE_NAME:
1882++3010 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1883++3011 13                   INC  DE
1884++3012 FE 2E                CP  '.'                         ; Found dot?
1885++3014 28 26                jr z, CONTINUE_TO_EXTENSION
1886++3016 FE 22                CP  '"'                         ; Found end quote?
1887++3018 28 52                jr z, READ_FILE_NAME_DONE
1888++301A FE 0D                cp CR                           ; Or has command ended?
1889++301C CA B6 2B             jp z, QWHAT                         ; Well that's an error.
1890++301F
1891++301F FE 21                cp 33
1892++3021 38 0C                jr c, KILL_CONTROL              ; Don't allow control chars or spaces!!!
1893++3023 FE 60                cp 96
1894++3025 38 0A                jr c, USE_LETTER                ; Do allow numbers and upper case letters
1895++3027 FE 7F                cp 127
1896++3029 30 04                jr nc, KILL_CONTROL             ; Don't allow weird chars
1897++302B E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1898++302D 18 02                jr USE_LETTER
1899++302F
1900++302F              KILL_CONTROL:
1901++302F 3E 5F                ld a, '_'
1902++3031              USE_LETTER:
1903++3031 77                   ld (hl),a                       ; store this letter
1904++3032 23                   inc hl
1905++3033 10 DB                djnz READ_FILE_NAME
1906++3035
1907++3035 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1908++3036 13                   INC  DE
1909++3037 FE 2E                CP  '.'                         ; Found dot?
1910++3039 C2 B6 2B             jp nz, QWHAT                    ; Error if not
1911++303C              CONTINUE_TO_EXTENSION:
1912++303C 77                   ld (hl), a
1913++303D 23                   inc hl
1914++303E
1915++303E 06 03                ld b, 3                         ; 3 chars max for extension
1916++3040              READ_EXTENSION:
1917++3040 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1918++3041 13                   INC  DE
1919++3042 FE 2E                CP  '.'                         ; Found dot?
1920++3044 CA B6 2B             jp z, QWHAT
1921++3047 FE 22                CP  '"'                         ; Found end quote?
1922++3049 28 21                jr z, READ_FILE_NAME_DONE
1923++304B FE 0D                cp CR                           ; Or has command ended?
1924++304D CA B6 2B             jp z, QWHAT                         ; Well that's an error.
1925++3050
1926++3050 FE 20                cp 32
1927++3052 38 0C                jr c, KILL_CONTROL_EXT          ; Don't allow control chars
1928++3054 FE 60                cp 96
1929++3056 38 0A                jr c, USE_LETTER_EXT            ; Do allow numbers and upper case letters
1930++3058 FE 7F                cp 127
1931++305A 30 04                jr nc, KILL_CONTROL_EXT         ; Don't allow weird chars
1932++305C E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1933++305E 18 02                jr USE_LETTER_EXT
1934++3060
1935++3060              KILL_CONTROL_EXT:
1936++3060 3E 5F                ld a, '_'
1937++3062              USE_LETTER_EXT:
1938++3062 77                   ld (hl),a                       ; store this letter
1939++3063 23                   inc hl
1940++3064 10 DA                djnz READ_EXTENSION
1941++3066
1942++3066 1A                   ld a, (de)                      ; So now there must be a quote
1943++3067 13                   inc de
1944++3068 FE 22                cp '"'
1945++306A 20 06                jr nz, SAVE_NO_QUOTE
1946++306C
1947++306C              READ_FILE_NAME_DONE:
1948++306C 36 00                ld (hl), 0
1949++306E CD B0 2B             call ENDCHK
1950++3071
1951++3071              ;        call debug
1952++3071              ;        db 'Filename is [',0
1953++3071              ;        ld b, 14
1954++3071              ;        ld hl, filename_buffer
1955++3071              ;x1:
1956++3071              ;        ld a, (hl)
1957++3071              ;        inc hl
1958++3071              ;        call OUTC
1959++3071              ;        djnz x1
1960++3071
1961++3071              ;        ld a, ']'
1962++3071              ;        call OUTC
1963++3071              ;        call newline
1964++3071
1965++3071 C9                   ret
1966++3072
1967++3072              SAVE_NO_QUOTE:
1968++3072 CD 82 07             call message
1969++3075 50 6C 65 61          db 'Please specify a filename in quotes, such as "FILENAME.TXT"',13,0
1969++3079 73 65 20 73
1969++307D 70 65 63 69
1969++3081 66 79 20 61
1969++3085 20 66 69 6C
1969++3089 65 6E 61 6D
1969++308D 65 20 69 6E
1969++3091 20 71 75 6F
1969++3095 74 65 73 2C
1969++3099 20 73 75 63
1969++309D 68 20 61 73
1969++30A1 20 22 46 49
1969++30A5 4C 45 4E 41
1969++30A9 4D 45 2E 54
1969++30AD 58 54 22 0D
1969++30B1 00
1970++30B2 C3 7D 25             jp RSTART
1971++30B5
1972++30B5              LSTROM	equ	$                             ; ALL ABOVE CAN BE ROM
1973++30B5
1974++30B5
1975++30B5                                                       ; HERE DOWN MUST BE RAM
1976++30B5              RAMSTART equ 08000H                     ; This assumes we are switched into 32K ROM / 32K RAM mode. TODO: Maybe change this to 16k rom, 48k ram???
1977++30B5
1978++30B5              OCSW    equ	RAMSTART                     ; SWITCH FOR OUTPUT		1 byte
1979++30B5              CURRNT	equ	OCSW+1                        ; POINTS TO CURRENT LINE		2 bytes
1980++30B5              STKGOS	equ	CURRNT+2                      ; SAVES SP IN 'GOSUB'		2 bytes
1981++30B5              VARNXT	equ	STKGOS+2                      ; TEMP STORAGE			2 bytes
1982++30B5              STKINP	equ VARNXT+2                      ; SAVES SP IN 'INPUT'		2 bytes
1983++30B5              LOPVAR	equ STKINP+2                      ; 'FOR' LOOP SAVE AREA		2 bytes
1984++30B5              LOPINC	equ LOPVAR+2                      ; INCREMENT			2 bytes
1985++30B5              LOPLMT	equ LOPINC+2                      ; LIMIT				2 bytes
1986++30B5              LOPLN	equ LOPLMT+2                       ; LINE NUMBER			2 bytes
1987++30B5              LOPPT	equ LOPLN+2                        ; TEXT POINTER			2 bytes
1988++30B5              RANPNT	equ LOPPT+2                       ; RANDOM NUMBER POINTER		2 bytes
1989++30B5              TXTUNF	equ RANPNT+2                      ; ->UNFILLED TEXT AREA		2 bytes
1990++30B5
1991++30B5              store_hl	equ	TXTUNF+2	; Temporary store for hl                2 bytes
1992++30B5
1993++30B5              TXTBGN	equ store_hl+2                      ; TEXT SAVE AREA BEGINS		2 bytes - This is where the program starts.
1994++30B5
1995++30B5
1996++30B5              TBSTACK	equ 0FF00h                         ; STACK STARTS HERE		allow 255 byte stack
1997++30B5              STKLMT	equ	TBSTACK-255                     ; TOP LIMIT FOR STACK		1 byte
1998++30B5              BUFEND	equ	STKLMT-1                      ; BUFFER ENDS			1 byte
1999++30B5              BUFFER	equ	BUFEND-64                     ; INPUT BUFFER			64 bytes
2000++30B5              VARBGN	equ	BUFFER-55                     ; VARIABLE @(0)			55 bytes
2001++30B5
2002++30B5              tb_dir_count equ VARBGN-1
2003++30B5              TXTEND	equ	tb_dir_count-1                      ; TEXT SAVE AREA ENDS		1 byte - This is the top limit for the program
2004++30B5
2005++30B5                                                      ; Just for reference for my tired brain:
2006++30B5                                                      ; if a has 30 in it
2007++30B5                                                      ; cp 32
2008++30B5                                                      ; jr c, IF A < 32
2009++30B5                                                      ; jr nc, IF A >= 32
2010++30B5                                                      ; jr z, IF A == 32
2011++30B5
# file closed: tiny-basic.asm
 913+ 30B5                  include "GOFL.asm"
# file opened: GOFL.asm
   1++30B5              ; Conway's Game Of Life for the Z80 Playground.
   2++30B5              ; This was written by Albert Pauw in February 2021, originally for CP/M,
   3++30B5              ; and adapted for the Z80 playground Monitor by john Squires.
   4++30B5
   5++30B5              ; After boiling it down A LOT, it turns out that Game-Of-Life is very simple:
   6++30B5              ; Arrange a large grid of cells, where each can be either alive = 1 or dead = 0.
   7++30B5              ; Make sure there is an empty row all around the grid with a dead cell in it, like this:
   8++30B5              ; 0000000000
   9++30B5              ; 0XXXXXXXX0
  10++30B5              ; 0XXXXXXXX0
  11++30B5              ; 0000000000 Where 0 = dead cell, and X = active area which can be 0s or 1s.
  12++30B5              ;
  13++30B5              ; Iterate over all the cells in the active area. For each:
  14++30B5              ; Make a note of whether the cell is alive or dead.
  15++30B5              ; Start counting neighbours for the cell, starting at 0.
  16++30B5              ; Add to this value the alive/dead value of all 8 neighbouring cells around it.
  17++30B5              ; Store the neighbour count in the top 4 bits, and the alive/dead state of the cell
  18++30B5              ; in bit 0. You will then end up with each cell having a binary value something like these examples:
  19++30B5              ; 0010 0001 - This is 2 neighbours and the cell is currently alive.
  20++30B5              ; 0011 0000 - This is a dead cell with 3 neighbours.
  21++30B5              ; 1000 0001 - This is an alive cell with 8 neighbours.
  22++30B5              ;
  23++30B5              ; Now, it turns out that all possible combinations result in the death of a cell, or
  24++30B5              ; a dead cell staying dead, except these three:
  25++30B5              ; 0010 0001 - Alive cell with 2 neighbours stays alive.
  26++30B5              ; 0011 0001 - Alive cell with 3 neighbours stays alive.
  27++30B5              ; 0011 0000 - Dead cell with 3 neighbours comes to life.
  28++30B5              ;
  29++30B5              ; So all we need to do is iterate over the cells again.
  30++30B5              ; If the cell contains one of these 3 values, set the cell to 1.
  31++30B5              ; Otherwise set it to 0.
  32++30B5              ;
  33++30B5              ; Then show all cells on screen, and start again!
  34++30B5
  35++30B5              Width:   EQU 80
  36++30B5              Height:  EQU 25
  37++30B5              PatternWidth: equ 80
  38++30B5              Size:    EQU Width*Height
  39++30B5              DOT:     EQU '.' ; ASCII 46, so EVEN. This is important later!
  40++30B5              HASH:    EQU '#' ; ASCII 25, so ODD. This is important later!
  41++30B5              ESC:     EQU 27
  42++30B5
  43++30B5              GOFL_Begin:
  44++30B5 CD 18 49             call show_intro_screen
  45++30B8 CD 32 07             call long_pause
  46++30BB CD 4B 4A             call wait_for_key
  47++30BE 78                   ld a, b
  48++30BF FE C8                cp 200
  49++30C1 D2 D9 30             jp nc, copy_pattern3
  50++30C4 FE 64                cp 100
  51++30C6 D2 D1 30             jp nc, copy_pattern2
  52++30C9              copy_pattern1:
  53++30C9 21 A8 31             ld hl, initial_pattern1
  54++30CC CD 57 4A             call copy_initial_pattern
  55++30CF 18 10                jr GOFL_Begin1
  56++30D1              copy_pattern2:
  57++30D1 21 78 39             ld hl, initial_pattern2
  58++30D4 CD 57 4A             call copy_initial_pattern
  59++30D7 18 08                jr GOFL_Begin1
  60++30D9              copy_pattern3:
  61++30D9 21 48 41             ld hl, initial_pattern3
  62++30DC CD 57 4A             call copy_initial_pattern
  63++30DF 18 00                jr GOFL_Begin1
  64++30E1              GOFL_Begin1:
  65++30E1 CD 92 31             CALL GOFL_HCursor   ; Hide cursor
  66++30E4 CD 86 31             CALL GOFL_Cls       ; Clear screen
  67++30E7
  68++30E7              main_gofl_loop:
  69++30E7                      ; First, iterate over the cells, counting the neighbours
  70++30E7 0E 19                ld c, Height
  71++30E9 26 81                ld h, BufferPage+1              ; h = y coord, l = x coord
  72++30EB              iterate_outer:
  73++30EB 2E 01                ld l, 1                         ; Start at coord 1,1
  74++30ED 06 50                ld b, Width
  75++30EF              iterate_loop:
  76++30EF 7E                   ld a, (hl)                      ; Get original cell content
  77++30F0 E6 01                and %00000001
  78++30F2 57                   ld d, a                         ; Store in d
  79++30F3
  80++30F3 AF                   xor a                           ; Clear a
  81++30F4
  82++30F4 2D                   dec l                           ; West neighbour
  83++30F5 86                   add a, (hl)
  84++30F6 25                   dec h                           ; North-West neighbour
  85++30F7 86                   add a, (hl)
  86++30F8 2C                   inc l                           ; North neighbour
  87++30F9 86                   add a, (hl)
  88++30FA 2C                   inc l                           ; North-East neighbour
  89++30FB 86                   add a, (hl)
  90++30FC 24                   inc h                           ; East neighbour
  91++30FD 86                   add a, (hl)
  92++30FE 24                   inc h                           ; South-East neighbour
  93++30FF 86                   add a, (hl)
  94++3100 2D                   dec l                           ; South neighbour
  95++3101 86                   add a, (hl)
  96++3102 2D                   dec l                           ; South-West neighbour
  97++3103 86                   add a, (hl)
  98++3104 2C                   inc l                           ; Get back to center cell
  99++3105 25                   dec h
 100++3106
 101++3106 CB 27                sla a                           ; rotate left
 102++3108 CB 27                sla a                           ; rotate left
 103++310A CB 27                sla a                           ; rotate left
 104++310C CB 27                sla a                           ; rotate left
 105++310E B2                   or d                            ; Put back the original cell content
 106++310F 77                   ld (hl), a                      ; Store final result
 107++3110
 108++3110 2C                   inc l
 109++3111 10 DC                djnz iterate_loop
 110++3113 24                   inc h
 111++3114 2E 01                ld l, 1
 112++3116 0D                   dec c
 113++3117 20 D2                jr nz, iterate_outer
 114++3119
 115++3119
 116++3119                      ; Now iterate over the cells again, applying the rules
 117++3119              apply_rules:
 118++3119 0E 19                ld c, Height
 119++311B 26 81                ld h, BufferPage+1
 120++311D              apply_rules_outer:
 121++311D 2E 01                ld l, 1                         ; Start at 1,1
 122++311F 06 50                ld b, Width
 123++3121              apply_rules_loop:
 124++3121                      ; 0010 0001 - Alive cell with 2 neighbours stays alive.
 125++3121                      ; 0011 0001 - Alive cell with 3 neighbours stays alive.
 126++3121                      ; 0011 0000 - Dead cell with 3 neighbours comes to life.
 127++3121
 128++3121 7E                   ld a, (hl)                      ; Get the content into a
 129++3122 FE 21                cp %00100001
 130++3124 28 0D                jr z, cell_alive
 131++3126 FE 31                cp %00110001
 132++3128 28 09                jr z, cell_alive
 133++312A FE 30                cp %00110000
 134++312C 28 05                jr z, cell_alive
 135++312E 36 00                ld (hl), 0                      ; Cell dies
 136++3130 C3 35 31             jp apply_rules_continue
 137++3133              cell_alive:
 138++3133 36 01                ld (hl), 1                      ; Cell lives
 139++3135              apply_rules_continue:
 140++3135 2C                   inc l
 141++3136 10 E9                djnz apply_rules_loop
 142++3138 24                   inc h
 143++3139 2E 01                ld l, 1
 144++313B 0D                   dec c
 145++313C 20 DF                jr nz, apply_rules_outer
 146++313E
 147++313E
 148++313E                      ; Now print the cells to the screen
 149++313E              GOFL_Print:
 150++313E CD 7E 31             call GOFL_Home
 151++3141 26 81                ld h, BufferPage+1
 152++3143 2E 01                ld l, 1                         ; Start at 1,1
 153++3145 0E 19                LD c, Height                    ; Set size for loops, height...
 154++3147              Pr0:
 155++3147 06 50                ld b, Width                     ; ...and width
 156++3149              Pr1:
 157++3149 7E                   LD A,(HL)                       ; Get cell value in buffer
 158++314A E6 01                and 1                           ; Is it ODD?
 159++314C CA 54 31             jp z, print_empty_cell          ; If not, it is an empty cell
 160++314F 16 23                ld d, HASH
 161++3151 C3 56 31             jp print_got_character
 162++3154              print_empty_cell:
 163++3154 16 2E                ld d, DOT
 164++3156              print_got_character:
 165++3156 DB BD                in a,(uart_LSR)                 ; check UART is ready to send.
 166++3158 CB 6F                bit 5,a                         ; zero flag set to true if bit 5 is 0
 167++315A CA 56 31             jp z, print_got_character       ; non-zero = ready for next char.
 168++315D 7A                   ld a, d
 169++315E D3 B8                out (uart_tx_rx), a             ; AND SEND IT OUT
 170++3160
 171++3160 2C                   INC L                           ; Next character in buffer
 172++3161 10 E6                djnz Pr1                        ; Count down and loop
 173++3163
 174++3163 0D                   dec c                           ; decrease row counter
 175++3164 CA 6A 31             jp z, skip_newline_on_last_row
 176++3167 CD 07 07             call newline
 177++316A              skip_newline_on_last_row:
 178++316A 2E 01                ld l, 1                         ; Back to start of row
 179++316C 24                   inc h                           ; Move down a row
 180++316D 79                   ld a, c
 181++316E FE 00                cp 0
 182++3170 C2 47 31             jp nz, Pr0                      ; Loop over rows
 183++3173
 184++3173
 185++3173                      ; Now check for key press to end
 186++3173 CD 18 07             CALL char_in                    ; Check for keypress
 187++3176 A7                   AND A                           ;
 188++3177 CA E7 30             jp Z,main_gofl_loop             ; Loop around again if no key
 189++317A CD 9D 31             call GOFL_SCursor               ; Turn cursor back ok
 190++317D C9                   ret
 191++317E
 192++317E
 193++317E
 194++317E
 195++317E
 196++317E                      ; Helper routines
 197++317E              GOFL_Home:
 198++317E CD 82 07             call message
 199++3181 1B 5B 48 00          DB ESC,'[H',0
 200++3185 C9                   ret
 201++3186
 202++3186              GOFL_Cls:
 203++3186 CD 82 07             call message
 204++3189 1B 5B 32 4A          DB ESC,'[2J',ESC,'[H',0
 204++318D 1B 5B 48 00
 205++3191 C9                   ret
 206++3192
 207++3192              GOFL_HCursor:
 208++3192                      ; ANSI hide cursor
 209++3192 CD 82 07             call message
 210++3195 1B 5B 3F 32          DB ESC,'[?25l',0
 210++3199 35 6C 00
 211++319C C9                   ret
 212++319D
 213++319D              GOFL_SCursor:
 214++319D                      ; ANSI show cursor
 215++319D CD 82 07             call message
 216++31A0 1B 5B 3F 32          DB ESC,'[?25h',0
 216++31A4 35 68 00
 217++31A7 C9                   ret
 218++31A8
 219++31A8              initial_pattern1:
 220++31A8 2E 2E 2E 2E          DB '................................................................................'
 220++31AC 2E 2E 2E 2E
 220++31B0 2E 2E 2E 2E
 220++31B4 2E 2E 2E 2E
 220++31B8 2E 2E 2E 2E
 220++31BC 2E 2E 2E 2E
 220++31C0 2E 2E 2E 2E
 220++31C4 2E 2E 2E 2E
 220++31C8 2E 2E 2E 2E
 220++31CC 2E 2E 2E 2E
 220++31D0 2E 2E 2E 2E
 220++31D4 2E 2E 2E 2E
 220++31D8 2E 2E 2E 2E
 220++31DC 2E 2E 2E 2E
 220++31E0 2E 2E 2E 2E
 220++31E4 2E 2E 2E 2E
 220++31E8 2E 2E 2E 2E
 220++31EC 2E 2E 2E 2E
 220++31F0 2E 2E 2E 2E
 220++31F4 2E 2E 2E 2E
 221++31F8 2E 2E 2E 2E          DB '................................................................................'
 221++31FC 2E 2E 2E 2E
 221++3200 2E 2E 2E 2E
 221++3204 2E 2E 2E 2E
 221++3208 2E 2E 2E 2E
 221++320C 2E 2E 2E 2E
 221++3210 2E 2E 2E 2E
 221++3214 2E 2E 2E 2E
 221++3218 2E 2E 2E 2E
 221++321C 2E 2E 2E 2E
 221++3220 2E 2E 2E 2E
 221++3224 2E 2E 2E 2E
 221++3228 2E 2E 2E 2E
 221++322C 2E 2E 2E 2E
 221++3230 2E 2E 2E 2E
 221++3234 2E 2E 2E 2E
 221++3238 2E 2E 2E 2E
 221++323C 2E 2E 2E 2E
 221++3240 2E 2E 2E 2E
 221++3244 2E 2E 2E 2E
 222++3248 2E 2E 2E 2E          DB '................................................................................'
 222++324C 2E 2E 2E 2E
 222++3250 2E 2E 2E 2E
 222++3254 2E 2E 2E 2E
 222++3258 2E 2E 2E 2E
 222++325C 2E 2E 2E 2E
 222++3260 2E 2E 2E 2E
 222++3264 2E 2E 2E 2E
 222++3268 2E 2E 2E 2E
 222++326C 2E 2E 2E 2E
 222++3270 2E 2E 2E 2E
 222++3274 2E 2E 2E 2E
 222++3278 2E 2E 2E 2E
 222++327C 2E 2E 2E 2E
 222++3280 2E 2E 2E 2E
 222++3284 2E 2E 2E 2E
 222++3288 2E 2E 2E 2E
 222++328C 2E 2E 2E 2E
 222++3290 2E 2E 2E 2E
 222++3294 2E 2E 2E 2E
 223++3298 2E 2E 2E 2E          DB '................................................................................'
 223++329C 2E 2E 2E 2E
 223++32A0 2E 2E 2E 2E
 223++32A4 2E 2E 2E 2E
 223++32A8 2E 2E 2E 2E
 223++32AC 2E 2E 2E 2E
 223++32B0 2E 2E 2E 2E
 223++32B4 2E 2E 2E 2E
 223++32B8 2E 2E 2E 2E
 223++32BC 2E 2E 2E 2E
 223++32C0 2E 2E 2E 2E
 223++32C4 2E 2E 2E 2E
 223++32C8 2E 2E 2E 2E
 223++32CC 2E 2E 2E 2E
 223++32D0 2E 2E 2E 2E
 223++32D4 2E 2E 2E 2E
 223++32D8 2E 2E 2E 2E
 223++32DC 2E 2E 2E 2E
 223++32E0 2E 2E 2E 2E
 223++32E4 2E 2E 2E 2E
 224++32E8 2E 2E 2E 2E          DB '................................................................................'
 224++32EC 2E 2E 2E 2E
 224++32F0 2E 2E 2E 2E
 224++32F4 2E 2E 2E 2E
 224++32F8 2E 2E 2E 2E
 224++32FC 2E 2E 2E 2E
 224++3300 2E 2E 2E 2E
 224++3304 2E 2E 2E 2E
 224++3308 2E 2E 2E 2E
 224++330C 2E 2E 2E 2E
 224++3310 2E 2E 2E 2E
 224++3314 2E 2E 2E 2E
 224++3318 2E 2E 2E 2E
 224++331C 2E 2E 2E 2E
 224++3320 2E 2E 2E 2E
 224++3324 2E 2E 2E 2E
 224++3328 2E 2E 2E 2E
 224++332C 2E 2E 2E 2E
 224++3330 2E 2E 2E 2E
 224++3334 2E 2E 2E 2E
 225++3338 2E 2E 2E 2E          DB '................................................................................'
 225++333C 2E 2E 2E 2E
 225++3340 2E 2E 2E 2E
 225++3344 2E 2E 2E 2E
 225++3348 2E 2E 2E 2E
 225++334C 2E 2E 2E 2E
 225++3350 2E 2E 2E 2E
 225++3354 2E 2E 2E 2E
 225++3358 2E 2E 2E 2E
 225++335C 2E 2E 2E 2E
 225++3360 2E 2E 2E 2E
 225++3364 2E 2E 2E 2E
 225++3368 2E 2E 2E 2E
 225++336C 2E 2E 2E 2E
 225++3370 2E 2E 2E 2E
 225++3374 2E 2E 2E 2E
 225++3378 2E 2E 2E 2E
 225++337C 2E 2E 2E 2E
 225++3380 2E 2E 2E 2E
 225++3384 2E 2E 2E 2E
 226++3388 2E 2E 2E 2E          DB '................................................................................'
 226++338C 2E 2E 2E 2E
 226++3390 2E 2E 2E 2E
 226++3394 2E 2E 2E 2E
 226++3398 2E 2E 2E 2E
 226++339C 2E 2E 2E 2E
 226++33A0 2E 2E 2E 2E
 226++33A4 2E 2E 2E 2E
 226++33A8 2E 2E 2E 2E
 226++33AC 2E 2E 2E 2E
 226++33B0 2E 2E 2E 2E
 226++33B4 2E 2E 2E 2E
 226++33B8 2E 2E 2E 2E
 226++33BC 2E 2E 2E 2E
 226++33C0 2E 2E 2E 2E
 226++33C4 2E 2E 2E 2E
 226++33C8 2E 2E 2E 2E
 226++33CC 2E 2E 2E 2E
 226++33D0 2E 2E 2E 2E
 226++33D4 2E 2E 2E 2E
 227++33D8 2E 2E 2E 2E          DB '................................................................................'
 227++33DC 2E 2E 2E 2E
 227++33E0 2E 2E 2E 2E
 227++33E4 2E 2E 2E 2E
 227++33E8 2E 2E 2E 2E
 227++33EC 2E 2E 2E 2E
 227++33F0 2E 2E 2E 2E
 227++33F4 2E 2E 2E 2E
 227++33F8 2E 2E 2E 2E
 227++33FC 2E 2E 2E 2E
 227++3400 2E 2E 2E 2E
 227++3404 2E 2E 2E 2E
 227++3408 2E 2E 2E 2E
 227++340C 2E 2E 2E 2E
 227++3410 2E 2E 2E 2E
 227++3414 2E 2E 2E 2E
 227++3418 2E 2E 2E 2E
 227++341C 2E 2E 2E 2E
 227++3420 2E 2E 2E 2E
 227++3424 2E 2E 2E 2E
 228++3428 2E 2E 2E 2E          DB '................................................................................'
 228++342C 2E 2E 2E 2E
 228++3430 2E 2E 2E 2E
 228++3434 2E 2E 2E 2E
 228++3438 2E 2E 2E 2E
 228++343C 2E 2E 2E 2E
 228++3440 2E 2E 2E 2E
 228++3444 2E 2E 2E 2E
 228++3448 2E 2E 2E 2E
 228++344C 2E 2E 2E 2E
 228++3450 2E 2E 2E 2E
 228++3454 2E 2E 2E 2E
 228++3458 2E 2E 2E 2E
 228++345C 2E 2E 2E 2E
 228++3460 2E 2E 2E 2E
 228++3464 2E 2E 2E 2E
 228++3468 2E 2E 2E 2E
 228++346C 2E 2E 2E 2E
 228++3470 2E 2E 2E 2E
 228++3474 2E 2E 2E 2E
 229++3478 2E 2E 2E 2E          DB '................................................................................'
 229++347C 2E 2E 2E 2E
 229++3480 2E 2E 2E 2E
 229++3484 2E 2E 2E 2E
 229++3488 2E 2E 2E 2E
 229++348C 2E 2E 2E 2E
 229++3490 2E 2E 2E 2E
 229++3494 2E 2E 2E 2E
 229++3498 2E 2E 2E 2E
 229++349C 2E 2E 2E 2E
 229++34A0 2E 2E 2E 2E
 229++34A4 2E 2E 2E 2E
 229++34A8 2E 2E 2E 2E
 229++34AC 2E 2E 2E 2E
 229++34B0 2E 2E 2E 2E
 229++34B4 2E 2E 2E 2E
 229++34B8 2E 2E 2E 2E
 229++34BC 2E 2E 2E 2E
 229++34C0 2E 2E 2E 2E
 229++34C4 2E 2E 2E 2E
 230++34C8 2E 2E 2E 2E          DB '................................................................................'
 230++34CC 2E 2E 2E 2E
 230++34D0 2E 2E 2E 2E
 230++34D4 2E 2E 2E 2E
 230++34D8 2E 2E 2E 2E
 230++34DC 2E 2E 2E 2E
 230++34E0 2E 2E 2E 2E
 230++34E4 2E 2E 2E 2E
 230++34E8 2E 2E 2E 2E
 230++34EC 2E 2E 2E 2E
 230++34F0 2E 2E 2E 2E
 230++34F4 2E 2E 2E 2E
 230++34F8 2E 2E 2E 2E
 230++34FC 2E 2E 2E 2E
 230++3500 2E 2E 2E 2E
 230++3504 2E 2E 2E 2E
 230++3508 2E 2E 2E 2E
 230++350C 2E 2E 2E 2E
 230++3510 2E 2E 2E 2E
 230++3514 2E 2E 2E 2E
 231++3518 2E 2E 2E 2E          DB '................................................................................'
 231++351C 2E 2E 2E 2E
 231++3520 2E 2E 2E 2E
 231++3524 2E 2E 2E 2E
 231++3528 2E 2E 2E 2E
 231++352C 2E 2E 2E 2E
 231++3530 2E 2E 2E 2E
 231++3534 2E 2E 2E 2E
 231++3538 2E 2E 2E 2E
 231++353C 2E 2E 2E 2E
 231++3540 2E 2E 2E 2E
 231++3544 2E 2E 2E 2E
 231++3548 2E 2E 2E 2E
 231++354C 2E 2E 2E 2E
 231++3550 2E 2E 2E 2E
 231++3554 2E 2E 2E 2E
 231++3558 2E 2E 2E 2E
 231++355C 2E 2E 2E 2E
 231++3560 2E 2E 2E 2E
 231++3564 2E 2E 2E 2E
 232++3568 2E 2E 2E 2E          DB '................................................................................'
 232++356C 2E 2E 2E 2E
 232++3570 2E 2E 2E 2E
 232++3574 2E 2E 2E 2E
 232++3578 2E 2E 2E 2E
 232++357C 2E 2E 2E 2E
 232++3580 2E 2E 2E 2E
 232++3584 2E 2E 2E 2E
 232++3588 2E 2E 2E 2E
 232++358C 2E 2E 2E 2E
 232++3590 2E 2E 2E 2E
 232++3594 2E 2E 2E 2E
 232++3598 2E 2E 2E 2E
 232++359C 2E 2E 2E 2E
 232++35A0 2E 2E 2E 2E
 232++35A4 2E 2E 2E 2E
 232++35A8 2E 2E 2E 2E
 232++35AC 2E 2E 2E 2E
 232++35B0 2E 2E 2E 2E
 232++35B4 2E 2E 2E 2E
 233++35B8 2E 2E 2E 2E          DB '...................................................#............................'
 233++35BC 2E 2E 2E 2E
 233++35C0 2E 2E 2E 2E
 233++35C4 2E 2E 2E 2E
 233++35C8 2E 2E 2E 2E
 233++35CC 2E 2E 2E 2E
 233++35D0 2E 2E 2E 2E
 233++35D4 2E 2E 2E 2E
 233++35D8 2E 2E 2E 2E
 233++35DC 2E 2E 2E 2E
 233++35E0 2E 2E 2E 2E
 233++35E4 2E 2E 2E 2E
 233++35E8 2E 2E 2E 23
 233++35EC 2E 2E 2E 2E
 233++35F0 2E 2E 2E 2E
 233++35F4 2E 2E 2E 2E
 233++35F8 2E 2E 2E 2E
 233++35FC 2E 2E 2E 2E
 233++3600 2E 2E 2E 2E
 233++3604 2E 2E 2E 2E
 234++3608 2E 2E 2E 2E          DB '.....................................................#..........................'
 234++360C 2E 2E 2E 2E
 234++3610 2E 2E 2E 2E
 234++3614 2E 2E 2E 2E
 234++3618 2E 2E 2E 2E
 234++361C 2E 2E 2E 2E
 234++3620 2E 2E 2E 2E
 234++3624 2E 2E 2E 2E
 234++3628 2E 2E 2E 2E
 234++362C 2E 2E 2E 2E
 234++3630 2E 2E 2E 2E
 234++3634 2E 2E 2E 2E
 234++3638 2E 2E 2E 2E
 234++363C 2E 23 2E 2E
 234++3640 2E 2E 2E 2E
 234++3644 2E 2E 2E 2E
 234++3648 2E 2E 2E 2E
 234++364C 2E 2E 2E 2E
 234++3650 2E 2E 2E 2E
 234++3654 2E 2E 2E 2E
 235++3658 2E 2E 2E 2E          DB '..................................................##..###.......................'
 235++365C 2E 2E 2E 2E
 235++3660 2E 2E 2E 2E
 235++3664 2E 2E 2E 2E
 235++3668 2E 2E 2E 2E
 235++366C 2E 2E 2E 2E
 235++3670 2E 2E 2E 2E
 235++3674 2E 2E 2E 2E
 235++3678 2E 2E 2E 2E
 235++367C 2E 2E 2E 2E
 235++3680 2E 2E 2E 2E
 235++3684 2E 2E 2E 2E
 235++3688 2E 2E 23 23
 235++368C 2E 2E 23 23
 235++3690 23 2E 2E 2E
 235++3694 2E 2E 2E 2E
 235++3698 2E 2E 2E 2E
 235++369C 2E 2E 2E 2E
 235++36A0 2E 2E 2E 2E
 235++36A4 2E 2E 2E 2E
 236++36A8 2E 2E 2E 2E          DB '................................................................................'
 236++36AC 2E 2E 2E 2E
 236++36B0 2E 2E 2E 2E
 236++36B4 2E 2E 2E 2E
 236++36B8 2E 2E 2E 2E
 236++36BC 2E 2E 2E 2E
 236++36C0 2E 2E 2E 2E
 236++36C4 2E 2E 2E 2E
 236++36C8 2E 2E 2E 2E
 236++36CC 2E 2E 2E 2E
 236++36D0 2E 2E 2E 2E
 236++36D4 2E 2E 2E 2E
 236++36D8 2E 2E 2E 2E
 236++36DC 2E 2E 2E 2E
 236++36E0 2E 2E 2E 2E
 236++36E4 2E 2E 2E 2E
 236++36E8 2E 2E 2E 2E
 236++36EC 2E 2E 2E 2E
 236++36F0 2E 2E 2E 2E
 236++36F4 2E 2E 2E 2E
 237++36F8 2E 2E 2E 2E          DB '................................................................................'
 237++36FC 2E 2E 2E 2E
 237++3700 2E 2E 2E 2E
 237++3704 2E 2E 2E 2E
 237++3708 2E 2E 2E 2E
 237++370C 2E 2E 2E 2E
 237++3710 2E 2E 2E 2E
 237++3714 2E 2E 2E 2E
 237++3718 2E 2E 2E 2E
 237++371C 2E 2E 2E 2E
 237++3720 2E 2E 2E 2E
 237++3724 2E 2E 2E 2E
 237++3728 2E 2E 2E 2E
 237++372C 2E 2E 2E 2E
 237++3730 2E 2E 2E 2E
 237++3734 2E 2E 2E 2E
 237++3738 2E 2E 2E 2E
 237++373C 2E 2E 2E 2E
 237++3740 2E 2E 2E 2E
 237++3744 2E 2E 2E 2E
 238++3748 2E 2E 2E 2E          DB '................................................................................'
 238++374C 2E 2E 2E 2E
 238++3750 2E 2E 2E 2E
 238++3754 2E 2E 2E 2E
 238++3758 2E 2E 2E 2E
 238++375C 2E 2E 2E 2E
 238++3760 2E 2E 2E 2E
 238++3764 2E 2E 2E 2E
 238++3768 2E 2E 2E 2E
 238++376C 2E 2E 2E 2E
 238++3770 2E 2E 2E 2E
 238++3774 2E 2E 2E 2E
 238++3778 2E 2E 2E 2E
 238++377C 2E 2E 2E 2E
 238++3780 2E 2E 2E 2E
 238++3784 2E 2E 2E 2E
 238++3788 2E 2E 2E 2E
 238++378C 2E 2E 2E 2E
 238++3790 2E 2E 2E 2E
 238++3794 2E 2E 2E 2E
 239++3798 2E 2E 2E 2E          DB '................................................................................'
 239++379C 2E 2E 2E 2E
 239++37A0 2E 2E 2E 2E
 239++37A4 2E 2E 2E 2E
 239++37A8 2E 2E 2E 2E
 239++37AC 2E 2E 2E 2E
 239++37B0 2E 2E 2E 2E
 239++37B4 2E 2E 2E 2E
 239++37B8 2E 2E 2E 2E
 239++37BC 2E 2E 2E 2E
 239++37C0 2E 2E 2E 2E
 239++37C4 2E 2E 2E 2E
 239++37C8 2E 2E 2E 2E
 239++37CC 2E 2E 2E 2E
 239++37D0 2E 2E 2E 2E
 239++37D4 2E 2E 2E 2E
 239++37D8 2E 2E 2E 2E
 239++37DC 2E 2E 2E 2E
 239++37E0 2E 2E 2E 2E
 239++37E4 2E 2E 2E 2E
 240++37E8 2E 2E 2E 2E          DB '................................................................................'
 240++37EC 2E 2E 2E 2E
 240++37F0 2E 2E 2E 2E
 240++37F4 2E 2E 2E 2E
 240++37F8 2E 2E 2E 2E
 240++37FC 2E 2E 2E 2E
 240++3800 2E 2E 2E 2E
 240++3804 2E 2E 2E 2E
 240++3808 2E 2E 2E 2E
 240++380C 2E 2E 2E 2E
 240++3810 2E 2E 2E 2E
 240++3814 2E 2E 2E 2E
 240++3818 2E 2E 2E 2E
 240++381C 2E 2E 2E 2E
 240++3820 2E 2E 2E 2E
 240++3824 2E 2E 2E 2E
 240++3828 2E 2E 2E 2E
 240++382C 2E 2E 2E 2E
 240++3830 2E 2E 2E 2E
 240++3834 2E 2E 2E 2E
 241++3838 2E 2E 2E 2E          DB '................................................................................'
 241++383C 2E 2E 2E 2E
 241++3840 2E 2E 2E 2E
 241++3844 2E 2E 2E 2E
 241++3848 2E 2E 2E 2E
 241++384C 2E 2E 2E 2E
 241++3850 2E 2E 2E 2E
 241++3854 2E 2E 2E 2E
 241++3858 2E 2E 2E 2E
 241++385C 2E 2E 2E 2E
 241++3860 2E 2E 2E 2E
 241++3864 2E 2E 2E 2E
 241++3868 2E 2E 2E 2E
 241++386C 2E 2E 2E 2E
 241++3870 2E 2E 2E 2E
 241++3874 2E 2E 2E 2E
 241++3878 2E 2E 2E 2E
 241++387C 2E 2E 2E 2E
 241++3880 2E 2E 2E 2E
 241++3884 2E 2E 2E 2E
 242++3888 2E 2E 2E 2E          DB '................................................................................'
 242++388C 2E 2E 2E 2E
 242++3890 2E 2E 2E 2E
 242++3894 2E 2E 2E 2E
 242++3898 2E 2E 2E 2E
 242++389C 2E 2E 2E 2E
 242++38A0 2E 2E 2E 2E
 242++38A4 2E 2E 2E 2E
 242++38A8 2E 2E 2E 2E
 242++38AC 2E 2E 2E 2E
 242++38B0 2E 2E 2E 2E
 242++38B4 2E 2E 2E 2E
 242++38B8 2E 2E 2E 2E
 242++38BC 2E 2E 2E 2E
 242++38C0 2E 2E 2E 2E
 242++38C4 2E 2E 2E 2E
 242++38C8 2E 2E 2E 2E
 242++38CC 2E 2E 2E 2E
 242++38D0 2E 2E 2E 2E
 242++38D4 2E 2E 2E 2E
 243++38D8 2E 2E 2E 2E          DB '................................................................................'
 243++38DC 2E 2E 2E 2E
 243++38E0 2E 2E 2E 2E
 243++38E4 2E 2E 2E 2E
 243++38E8 2E 2E 2E 2E
 243++38EC 2E 2E 2E 2E
 243++38F0 2E 2E 2E 2E
 243++38F4 2E 2E 2E 2E
 243++38F8 2E 2E 2E 2E
 243++38FC 2E 2E 2E 2E
 243++3900 2E 2E 2E 2E
 243++3904 2E 2E 2E 2E
 243++3908 2E 2E 2E 2E
 243++390C 2E 2E 2E 2E
 243++3910 2E 2E 2E 2E
 243++3914 2E 2E 2E 2E
 243++3918 2E 2E 2E 2E
 243++391C 2E 2E 2E 2E
 243++3920 2E 2E 2E 2E
 243++3924 2E 2E 2E 2E
 244++3928 2E 2E 2E 2E          DB '................................................................................'
 244++392C 2E 2E 2E 2E
 244++3930 2E 2E 2E 2E
 244++3934 2E 2E 2E 2E
 244++3938 2E 2E 2E 2E
 244++393C 2E 2E 2E 2E
 244++3940 2E 2E 2E 2E
 244++3944 2E 2E 2E 2E
 244++3948 2E 2E 2E 2E
 244++394C 2E 2E 2E 2E
 244++3950 2E 2E 2E 2E
 244++3954 2E 2E 2E 2E
 244++3958 2E 2E 2E 2E
 244++395C 2E 2E 2E 2E
 244++3960 2E 2E 2E 2E
 244++3964 2E 2E 2E 2E
 244++3968 2E 2E 2E 2E
 244++396C 2E 2E 2E 2E
 244++3970 2E 2E 2E 2E
 244++3974 2E 2E 2E 2E
 245++3978
 246++3978              initial_pattern2:
 247++3978 2E 2E 2E 2E          DB '................................................................................'
 247++397C 2E 2E 2E 2E
 247++3980 2E 2E 2E 2E
 247++3984 2E 2E 2E 2E
 247++3988 2E 2E 2E 2E
 247++398C 2E 2E 2E 2E
 247++3990 2E 2E 2E 2E
 247++3994 2E 2E 2E 2E
 247++3998 2E 2E 2E 2E
 247++399C 2E 2E 2E 2E
 247++39A0 2E 2E 2E 2E
 247++39A4 2E 2E 2E 2E
 247++39A8 2E 2E 2E 2E
 247++39AC 2E 2E 2E 2E
 247++39B0 2E 2E 2E 2E
 247++39B4 2E 2E 2E 2E
 247++39B8 2E 2E 2E 2E
 247++39BC 2E 2E 2E 2E
 247++39C0 2E 2E 2E 2E
 247++39C4 2E 2E 2E 2E
 248++39C8 2E 2E 23 23          DB '..##............................................................................'
 248++39CC 2E 2E 2E 2E
 248++39D0 2E 2E 2E 2E
 248++39D4 2E 2E 2E 2E
 248++39D8 2E 2E 2E 2E
 248++39DC 2E 2E 2E 2E
 248++39E0 2E 2E 2E 2E
 248++39E4 2E 2E 2E 2E
 248++39E8 2E 2E 2E 2E
 248++39EC 2E 2E 2E 2E
 248++39F0 2E 2E 2E 2E
 248++39F4 2E 2E 2E 2E
 248++39F8 2E 2E 2E 2E
 248++39FC 2E 2E 2E 2E
 248++3A00 2E 2E 2E 2E
 248++3A04 2E 2E 2E 2E
 248++3A08 2E 2E 2E 2E
 248++3A0C 2E 2E 2E 2E
 248++3A10 2E 2E 2E 2E
 248++3A14 2E 2E 2E 2E
 249++3A18 2E 2E 2E 2E          DB '.........................#......................................................'
 249++3A1C 2E 2E 2E 2E
 249++3A20 2E 2E 2E 2E
 249++3A24 2E 2E 2E 2E
 249++3A28 2E 2E 2E 2E
 249++3A2C 2E 2E 2E 2E
 249++3A30 2E 23 2E 2E
 249++3A34 2E 2E 2E 2E
 249++3A38 2E 2E 2E 2E
 249++3A3C 2E 2E 2E 2E
 249++3A40 2E 2E 2E 2E
 249++3A44 2E 2E 2E 2E
 249++3A48 2E 2E 2E 2E
 249++3A4C 2E 2E 2E 2E
 249++3A50 2E 2E 2E 2E
 249++3A54 2E 2E 2E 2E
 249++3A58 2E 2E 2E 2E
 249++3A5C 2E 2E 2E 2E
 249++3A60 2E 2E 2E 2E
 249++3A64 2E 2E 2E 2E
 250++3A68 2E 2E 2E 2E          DB '.......................#.#......................................................'
 250++3A6C 2E 2E 2E 2E
 250++3A70 2E 2E 2E 2E
 250++3A74 2E 2E 2E 2E
 250++3A78 2E 2E 2E 2E
 250++3A7C 2E 2E 2E 23
 250++3A80 2E 23 2E 2E
 250++3A84 2E 2E 2E 2E
 250++3A88 2E 2E 2E 2E
 250++3A8C 2E 2E 2E 2E
 250++3A90 2E 2E 2E 2E
 250++3A94 2E 2E 2E 2E
 250++3A98 2E 2E 2E 2E
 250++3A9C 2E 2E 2E 2E
 250++3AA0 2E 2E 2E 2E
 250++3AA4 2E 2E 2E 2E
 250++3AA8 2E 2E 2E 2E
 250++3AAC 2E 2E 2E 2E
 250++3AB0 2E 2E 2E 2E
 250++3AB4 2E 2E 2E 2E
 251++3AB8 2E 2E 2E 2E          DB '.............##......##............##...........................................'
 251++3ABC 2E 2E 2E 2E
 251++3AC0 2E 2E 2E 2E
 251++3AC4 2E 23 23 2E
 251++3AC8 2E 2E 2E 2E
 251++3ACC 2E 23 23 2E
 251++3AD0 2E 2E 2E 2E
 251++3AD4 2E 2E 2E 2E
 251++3AD8 2E 2E 2E 23
 251++3ADC 23 2E 2E 2E
 251++3AE0 2E 2E 2E 2E
 251++3AE4 2E 2E 2E 2E
 251++3AE8 2E 2E 2E 2E
 251++3AEC 2E 2E 2E 2E
 251++3AF0 2E 2E 2E 2E
 251++3AF4 2E 2E 2E 2E
 251++3AF8 2E 2E 2E 2E
 251++3AFC 2E 2E 2E 2E
 251++3B00 2E 2E 2E 2E
 251++3B04 2E 2E 2E 2E
 252++3B08 2E 2E 2E 2E          DB '............#...#....##............##...........................................'
 252++3B0C 2E 2E 2E 2E
 252++3B10 2E 2E 2E 2E
 252++3B14 23 2E 2E 2E
 252++3B18 23 2E 2E 2E
 252++3B1C 2E 23 23 2E
 252++3B20 2E 2E 2E 2E
 252++3B24 2E 2E 2E 2E
 252++3B28 2E 2E 2E 23
 252++3B2C 23 2E 2E 2E
 252++3B30 2E 2E 2E 2E
 252++3B34 2E 2E 2E 2E
 252++3B38 2E 2E 2E 2E
 252++3B3C 2E 2E 2E 2E
 252++3B40 2E 2E 2E 2E
 252++3B44 2E 2E 2E 2E
 252++3B48 2E 2E 2E 2E
 252++3B4C 2E 2E 2E 2E
 252++3B50 2E 2E 2E 2E
 252++3B54 2E 2E 2E 2E
 253++3B58 2E 23 23 2E          DB '.##........#.....#...##.........................................................'
 253++3B5C 2E 2E 2E 2E
 253++3B60 2E 2E 2E 23
 253++3B64 2E 2E 2E 2E
 253++3B68 2E 23 2E 2E
 253++3B6C 2E 23 23 2E
 253++3B70 2E 2E 2E 2E
 253++3B74 2E 2E 2E 2E
 253++3B78 2E 2E 2E 2E
 253++3B7C 2E 2E 2E 2E
 253++3B80 2E 2E 2E 2E
 253++3B84 2E 2E 2E 2E
 253++3B88 2E 2E 2E 2E
 253++3B8C 2E 2E 2E 2E
 253++3B90 2E 2E 2E 2E
 253++3B94 2E 2E 2E 2E
 253++3B98 2E 2E 2E 2E
 253++3B9C 2E 2E 2E 2E
 253++3BA0 2E 2E 2E 2E
 253++3BA4 2E 2E 2E 2E
 254++3BA8 2E 23 23 2E          DB '.##........#...#.##....#.#......................................................'
 254++3BAC 2E 2E 2E 2E
 254++3BB0 2E 2E 2E 23
 254++3BB4 2E 2E 2E 23
 254++3BB8 2E 23 23 2E
 254++3BBC 2E 2E 2E 23
 254++3BC0 2E 23 2E 2E
 254++3BC4 2E 2E 2E 2E
 254++3BC8 2E 2E 2E 2E
 254++3BCC 2E 2E 2E 2E
 254++3BD0 2E 2E 2E 2E
 254++3BD4 2E 2E 2E 2E
 254++3BD8 2E 2E 2E 2E
 254++3BDC 2E 2E 2E 2E
 254++3BE0 2E 2E 2E 2E
 254++3BE4 2E 2E 2E 2E
 254++3BE8 2E 2E 2E 2E
 254++3BEC 2E 2E 2E 2E
 254++3BF0 2E 2E 2E 2E
 254++3BF4 2E 2E 2E 2E
 255++3BF8 2E 2E 2E 2E          DB '...........#.....#.......#......................................................'
 255++3BFC 2E 2E 2E 2E
 255++3C00 2E 2E 2E 23
 255++3C04 2E 2E 2E 2E
 255++3C08 2E 23 2E 2E
 255++3C0C 2E 2E 2E 2E
 255++3C10 2E 23 2E 2E
 255++3C14 2E 2E 2E 2E
 255++3C18 2E 2E 2E 2E
 255++3C1C 2E 2E 2E 2E
 255++3C20 2E 2E 2E 2E
 255++3C24 2E 2E 2E 2E
 255++3C28 2E 2E 2E 2E
 255++3C2C 2E 2E 2E 2E
 255++3C30 2E 2E 2E 2E
 255++3C34 2E 2E 2E 2E
 255++3C38 2E 2E 2E 2E
 255++3C3C 2E 2E 2E 2E
 255++3C40 2E 2E 2E 2E
 255++3C44 2E 2E 2E 2E
 256++3C48 2E 2E 2E 2E          DB '............#...#...............................................................'
 256++3C4C 2E 2E 2E 2E
 256++3C50 2E 2E 2E 2E
 256++3C54 23 2E 2E 2E
 256++3C58 23 2E 2E 2E
 256++3C5C 2E 2E 2E 2E
 256++3C60 2E 2E 2E 2E
 256++3C64 2E 2E 2E 2E
 256++3C68 2E 2E 2E 2E
 256++3C6C 2E 2E 2E 2E
 256++3C70 2E 2E 2E 2E
 256++3C74 2E 2E 2E 2E
 256++3C78 2E 2E 2E 2E
 256++3C7C 2E 2E 2E 2E
 256++3C80 2E 2E 2E 2E
 256++3C84 2E 2E 2E 2E
 256++3C88 2E 2E 2E 2E
 256++3C8C 2E 2E 2E 2E
 256++3C90 2E 2E 2E 2E
 256++3C94 2E 2E 2E 2E
 257++3C98 2E 2E 2E 2E          DB '.............##.................................................................'
 257++3C9C 2E 2E 2E 2E
 257++3CA0 2E 2E 2E 2E
 257++3CA4 2E 23 23 2E
 257++3CA8 2E 2E 2E 2E
 257++3CAC 2E 2E 2E 2E
 257++3CB0 2E 2E 2E 2E
 257++3CB4 2E 2E 2E 2E
 257++3CB8 2E 2E 2E 2E
 257++3CBC 2E 2E 2E 2E
 257++3CC0 2E 2E 2E 2E
 257++3CC4 2E 2E 2E 2E
 257++3CC8 2E 2E 2E 2E
 257++3CCC 2E 2E 2E 2E
 257++3CD0 2E 2E 2E 2E
 257++3CD4 2E 2E 2E 2E
 257++3CD8 2E 2E 2E 2E
 257++3CDC 2E 2E 2E 2E
 257++3CE0 2E 2E 2E 2E
 257++3CE4 2E 2E 2E 2E
 258++3CE8 2E 2E 2E 2E          DB '................................................................................'
 258++3CEC 2E 2E 2E 2E
 258++3CF0 2E 2E 2E 2E
 258++3CF4 2E 2E 2E 2E
 258++3CF8 2E 2E 2E 2E
 258++3CFC 2E 2E 2E 2E
 258++3D00 2E 2E 2E 2E
 258++3D04 2E 2E 2E 2E
 258++3D08 2E 2E 2E 2E
 258++3D0C 2E 2E 2E 2E
 258++3D10 2E 2E 2E 2E
 258++3D14 2E 2E 2E 2E
 258++3D18 2E 2E 2E 2E
 258++3D1C 2E 2E 2E 2E
 258++3D20 2E 2E 2E 2E
 258++3D24 2E 2E 2E 2E
 258++3D28 2E 2E 2E 2E
 258++3D2C 2E 2E 2E 2E
 258++3D30 2E 2E 2E 2E
 258++3D34 2E 2E 2E 2E
 259++3D38 2E 2E 2E 2E          DB '................................................................................'
 259++3D3C 2E 2E 2E 2E
 259++3D40 2E 2E 2E 2E
 259++3D44 2E 2E 2E 2E
 259++3D48 2E 2E 2E 2E
 259++3D4C 2E 2E 2E 2E
 259++3D50 2E 2E 2E 2E
 259++3D54 2E 2E 2E 2E
 259++3D58 2E 2E 2E 2E
 259++3D5C 2E 2E 2E 2E
 259++3D60 2E 2E 2E 2E
 259++3D64 2E 2E 2E 2E
 259++3D68 2E 2E 2E 2E
 259++3D6C 2E 2E 2E 2E
 259++3D70 2E 2E 2E 2E
 259++3D74 2E 2E 2E 2E
 259++3D78 2E 2E 2E 2E
 259++3D7C 2E 2E 2E 2E
 259++3D80 2E 2E 2E 2E
 259++3D84 2E 2E 2E 2E
 260++3D88 2E 2E 2E 2E          DB '................................................................................'
 260++3D8C 2E 2E 2E 2E
 260++3D90 2E 2E 2E 2E
 260++3D94 2E 2E 2E 2E
 260++3D98 2E 2E 2E 2E
 260++3D9C 2E 2E 2E 2E
 260++3DA0 2E 2E 2E 2E
 260++3DA4 2E 2E 2E 2E
 260++3DA8 2E 2E 2E 2E
 260++3DAC 2E 2E 2E 2E
 260++3DB0 2E 2E 2E 2E
 260++3DB4 2E 2E 2E 2E
 260++3DB8 2E 2E 2E 2E
 260++3DBC 2E 2E 2E 2E
 260++3DC0 2E 2E 2E 2E
 260++3DC4 2E 2E 2E 2E
 260++3DC8 2E 2E 2E 2E
 260++3DCC 2E 2E 2E 2E
 260++3DD0 2E 2E 2E 2E
 260++3DD4 2E 2E 2E 2E
 261++3DD8 2E 2E 2E 2E          DB '................................................................................'
 261++3DDC 2E 2E 2E 2E
 261++3DE0 2E 2E 2E 2E
 261++3DE4 2E 2E 2E 2E
 261++3DE8 2E 2E 2E 2E
 261++3DEC 2E 2E 2E 2E
 261++3DF0 2E 2E 2E 2E
 261++3DF4 2E 2E 2E 2E
 261++3DF8 2E 2E 2E 2E
 261++3DFC 2E 2E 2E 2E
 261++3E00 2E 2E 2E 2E
 261++3E04 2E 2E 2E 2E
 261++3E08 2E 2E 2E 2E
 261++3E0C 2E 2E 2E 2E
 261++3E10 2E 2E 2E 2E
 261++3E14 2E 2E 2E 2E
 261++3E18 2E 2E 2E 2E
 261++3E1C 2E 2E 2E 2E
 261++3E20 2E 2E 2E 2E
 261++3E24 2E 2E 2E 2E
 262++3E28 2E 2E 2E 2E          DB '................................................................................'
 262++3E2C 2E 2E 2E 2E
 262++3E30 2E 2E 2E 2E
 262++3E34 2E 2E 2E 2E
 262++3E38 2E 2E 2E 2E
 262++3E3C 2E 2E 2E 2E
 262++3E40 2E 2E 2E 2E
 262++3E44 2E 2E 2E 2E
 262++3E48 2E 2E 2E 2E
 262++3E4C 2E 2E 2E 2E
 262++3E50 2E 2E 2E 2E
 262++3E54 2E 2E 2E 2E
 262++3E58 2E 2E 2E 2E
 262++3E5C 2E 2E 2E 2E
 262++3E60 2E 2E 2E 2E
 262++3E64 2E 2E 2E 2E
 262++3E68 2E 2E 2E 2E
 262++3E6C 2E 2E 2E 2E
 262++3E70 2E 2E 2E 2E
 262++3E74 2E 2E 2E 2E
 263++3E78 2E 2E 2E 2E          DB '................................................................................'
 263++3E7C 2E 2E 2E 2E
 263++3E80 2E 2E 2E 2E
 263++3E84 2E 2E 2E 2E
 263++3E88 2E 2E 2E 2E
 263++3E8C 2E 2E 2E 2E
 263++3E90 2E 2E 2E 2E
 263++3E94 2E 2E 2E 2E
 263++3E98 2E 2E 2E 2E
 263++3E9C 2E 2E 2E 2E
 263++3EA0 2E 2E 2E 2E
 263++3EA4 2E 2E 2E 2E
 263++3EA8 2E 2E 2E 2E
 263++3EAC 2E 2E 2E 2E
 263++3EB0 2E 2E 2E 2E
 263++3EB4 2E 2E 2E 2E
 263++3EB8 2E 2E 2E 2E
 263++3EBC 2E 2E 2E 2E
 263++3EC0 2E 2E 2E 2E
 263++3EC4 2E 2E 2E 2E
 264++3EC8 2E 2E 2E 2E          DB '................................................................................'
 264++3ECC 2E 2E 2E 2E
 264++3ED0 2E 2E 2E 2E
 264++3ED4 2E 2E 2E 2E
 264++3ED8 2E 2E 2E 2E
 264++3EDC 2E 2E 2E 2E
 264++3EE0 2E 2E 2E 2E
 264++3EE4 2E 2E 2E 2E
 264++3EE8 2E 2E 2E 2E
 264++3EEC 2E 2E 2E 2E
 264++3EF0 2E 2E 2E 2E
 264++3EF4 2E 2E 2E 2E
 264++3EF8 2E 2E 2E 2E
 264++3EFC 2E 2E 2E 2E
 264++3F00 2E 2E 2E 2E
 264++3F04 2E 2E 2E 2E
 264++3F08 2E 2E 2E 2E
 264++3F0C 2E 2E 2E 2E
 264++3F10 2E 2E 2E 2E
 264++3F14 2E 2E 2E 2E
 265++3F18 2E 2E 2E 2E          DB '................................................................................'
 265++3F1C 2E 2E 2E 2E
 265++3F20 2E 2E 2E 2E
 265++3F24 2E 2E 2E 2E
 265++3F28 2E 2E 2E 2E
 265++3F2C 2E 2E 2E 2E
 265++3F30 2E 2E 2E 2E
 265++3F34 2E 2E 2E 2E
 265++3F38 2E 2E 2E 2E
 265++3F3C 2E 2E 2E 2E
 265++3F40 2E 2E 2E 2E
 265++3F44 2E 2E 2E 2E
 265++3F48 2E 2E 2E 2E
 265++3F4C 2E 2E 2E 2E
 265++3F50 2E 2E 2E 2E
 265++3F54 2E 2E 2E 2E
 265++3F58 2E 2E 2E 2E
 265++3F5C 2E 2E 2E 2E
 265++3F60 2E 2E 2E 2E
 265++3F64 2E 2E 2E 2E
 266++3F68 2E 2E 2E 2E          DB '................................................................................'
 266++3F6C 2E 2E 2E 2E
 266++3F70 2E 2E 2E 2E
 266++3F74 2E 2E 2E 2E
 266++3F78 2E 2E 2E 2E
 266++3F7C 2E 2E 2E 2E
 266++3F80 2E 2E 2E 2E
 266++3F84 2E 2E 2E 2E
 266++3F88 2E 2E 2E 2E
 266++3F8C 2E 2E 2E 2E
 266++3F90 2E 2E 2E 2E
 266++3F94 2E 2E 2E 2E
 266++3F98 2E 2E 2E 2E
 266++3F9C 2E 2E 2E 2E
 266++3FA0 2E 2E 2E 2E
 266++3FA4 2E 2E 2E 2E
 266++3FA8 2E 2E 2E 2E
 266++3FAC 2E 2E 2E 2E
 266++3FB0 2E 2E 2E 2E
 266++3FB4 2E 2E 2E 2E
 267++3FB8 2E 2E 2E 2E          DB '................................................................................'
 267++3FBC 2E 2E 2E 2E
 267++3FC0 2E 2E 2E 2E
 267++3FC4 2E 2E 2E 2E
 267++3FC8 2E 2E 2E 2E
 267++3FCC 2E 2E 2E 2E
 267++3FD0 2E 2E 2E 2E
 267++3FD4 2E 2E 2E 2E
 267++3FD8 2E 2E 2E 2E
 267++3FDC 2E 2E 2E 2E
 267++3FE0 2E 2E 2E 2E
 267++3FE4 2E 2E 2E 2E
 267++3FE8 2E 2E 2E 2E
 267++3FEC 2E 2E 2E 2E
 267++3FF0 2E 2E 2E 2E
 267++3FF4 2E 2E 2E 2E
 267++3FF8 2E 2E 2E 2E
 267++3FFC 2E 2E 2E 2E
 267++4000 2E 2E 2E 2E
 267++4004 2E 2E 2E 2E
 268++4008 2E 2E 2E 2E          DB '................................................................................'
 268++400C 2E 2E 2E 2E
 268++4010 2E 2E 2E 2E
 268++4014 2E 2E 2E 2E
 268++4018 2E 2E 2E 2E
 268++401C 2E 2E 2E 2E
 268++4020 2E 2E 2E 2E
 268++4024 2E 2E 2E 2E
 268++4028 2E 2E 2E 2E
 268++402C 2E 2E 2E 2E
 268++4030 2E 2E 2E 2E
 268++4034 2E 2E 2E 2E
 268++4038 2E 2E 2E 2E
 268++403C 2E 2E 2E 2E
 268++4040 2E 2E 2E 2E
 268++4044 2E 2E 2E 2E
 268++4048 2E 2E 2E 2E
 268++404C 2E 2E 2E 2E
 268++4050 2E 2E 2E 2E
 268++4054 2E 2E 2E 2E
 269++4058 2E 2E 2E 2E          DB '................................................................................'
 269++405C 2E 2E 2E 2E
 269++4060 2E 2E 2E 2E
 269++4064 2E 2E 2E 2E
 269++4068 2E 2E 2E 2E
 269++406C 2E 2E 2E 2E
 269++4070 2E 2E 2E 2E
 269++4074 2E 2E 2E 2E
 269++4078 2E 2E 2E 2E
 269++407C 2E 2E 2E 2E
 269++4080 2E 2E 2E 2E
 269++4084 2E 2E 2E 2E
 269++4088 2E 2E 2E 2E
 269++408C 2E 2E 2E 2E
 269++4090 2E 2E 2E 2E
 269++4094 2E 2E 2E 2E
 269++4098 2E 2E 2E 2E
 269++409C 2E 2E 2E 2E
 269++40A0 2E 2E 2E 2E
 269++40A4 2E 2E 2E 2E
 270++40A8 2E 2E 2E 2E          DB '................................................................................'
 270++40AC 2E 2E 2E 2E
 270++40B0 2E 2E 2E 2E
 270++40B4 2E 2E 2E 2E
 270++40B8 2E 2E 2E 2E
 270++40BC 2E 2E 2E 2E
 270++40C0 2E 2E 2E 2E
 270++40C4 2E 2E 2E 2E
 270++40C8 2E 2E 2E 2E
 270++40CC 2E 2E 2E 2E
 270++40D0 2E 2E 2E 2E
 270++40D4 2E 2E 2E 2E
 270++40D8 2E 2E 2E 2E
 270++40DC 2E 2E 2E 2E
 270++40E0 2E 2E 2E 2E
 270++40E4 2E 2E 2E 2E
 270++40E8 2E 2E 2E 2E
 270++40EC 2E 2E 2E 2E
 270++40F0 2E 2E 2E 2E
 270++40F4 2E 2E 2E 2E
 271++40F8 2E 2E 2E 2E          DB '................................................................................'
 271++40FC 2E 2E 2E 2E
 271++4100 2E 2E 2E 2E
 271++4104 2E 2E 2E 2E
 271++4108 2E 2E 2E 2E
 271++410C 2E 2E 2E 2E
 271++4110 2E 2E 2E 2E
 271++4114 2E 2E 2E 2E
 271++4118 2E 2E 2E 2E
 271++411C 2E 2E 2E 2E
 271++4120 2E 2E 2E 2E
 271++4124 2E 2E 2E 2E
 271++4128 2E 2E 2E 2E
 271++412C 2E 2E 2E 2E
 271++4130 2E 2E 2E 2E
 271++4134 2E 2E 2E 2E
 271++4138 2E 2E 2E 2E
 271++413C 2E 2E 2E 2E
 271++4140 2E 2E 2E 2E
 271++4144 2E 2E 2E 2E
 272++4148
 273++4148              initial_pattern3:
 274++4148 2E 2E 2E 2E          DB '................................................................................'
 274++414C 2E 2E 2E 2E
 274++4150 2E 2E 2E 2E
 274++4154 2E 2E 2E 2E
 274++4158 2E 2E 2E 2E
 274++415C 2E 2E 2E 2E
 274++4160 2E 2E 2E 2E
 274++4164 2E 2E 2E 2E
 274++4168 2E 2E 2E 2E
 274++416C 2E 2E 2E 2E
 274++4170 2E 2E 2E 2E
 274++4174 2E 2E 2E 2E
 274++4178 2E 2E 2E 2E
 274++417C 2E 2E 2E 2E
 274++4180 2E 2E 2E 2E
 274++4184 2E 2E 2E 2E
 274++4188 2E 2E 2E 2E
 274++418C 2E 2E 2E 2E
 274++4190 2E 2E 2E 2E
 274++4194 2E 2E 2E 2E
 275++4198 2E 2E 2E 2E          DB '................................................................................'
 275++419C 2E 2E 2E 2E
 275++41A0 2E 2E 2E 2E
 275++41A4 2E 2E 2E 2E
 275++41A8 2E 2E 2E 2E
 275++41AC 2E 2E 2E 2E
 275++41B0 2E 2E 2E 2E
 275++41B4 2E 2E 2E 2E
 275++41B8 2E 2E 2E 2E
 275++41BC 2E 2E 2E 2E
 275++41C0 2E 2E 2E 2E
 275++41C4 2E 2E 2E 2E
 275++41C8 2E 2E 2E 2E
 275++41CC 2E 2E 2E 2E
 275++41D0 2E 2E 2E 2E
 275++41D4 2E 2E 2E 2E
 275++41D8 2E 2E 2E 2E
 275++41DC 2E 2E 2E 2E
 275++41E0 2E 2E 2E 2E
 275++41E4 2E 2E 2E 2E
 276++41E8 2E 2E 2E 2E          DB '....................................................................##..........'
 276++41EC 2E 2E 2E 2E
 276++41F0 2E 2E 2E 2E
 276++41F4 2E 2E 2E 2E
 276++41F8 2E 2E 2E 2E
 276++41FC 2E 2E 2E 2E
 276++4200 2E 2E 2E 2E
 276++4204 2E 2E 2E 2E
 276++4208 2E 2E 2E 2E
 276++420C 2E 2E 2E 2E
 276++4210 2E 2E 2E 2E
 276++4214 2E 2E 2E 2E
 276++4218 2E 2E 2E 2E
 276++421C 2E 2E 2E 2E
 276++4220 2E 2E 2E 2E
 276++4224 2E 2E 2E 2E
 276++4228 2E 2E 2E 2E
 276++422C 23 23 2E 2E
 276++4230 2E 2E 2E 2E
 276++4234 2E 2E 2E 2E
 277++4238 2E 2E 2E 2E          DB '....................................................................##..........'
 277++423C 2E 2E 2E 2E
 277++4240 2E 2E 2E 2E
 277++4244 2E 2E 2E 2E
 277++4248 2E 2E 2E 2E
 277++424C 2E 2E 2E 2E
 277++4250 2E 2E 2E 2E
 277++4254 2E 2E 2E 2E
 277++4258 2E 2E 2E 2E
 277++425C 2E 2E 2E 2E
 277++4260 2E 2E 2E 2E
 277++4264 2E 2E 2E 2E
 277++4268 2E 2E 2E 2E
 277++426C 2E 2E 2E 2E
 277++4270 2E 2E 2E 2E
 277++4274 2E 2E 2E 2E
 277++4278 2E 2E 2E 2E
 277++427C 23 23 2E 2E
 277++4280 2E 2E 2E 2E
 277++4284 2E 2E 2E 2E
 278++4288 2E 2E 2E 2E          DB '................................................................................'
 278++428C 2E 2E 2E 2E
 278++4290 2E 2E 2E 2E
 278++4294 2E 2E 2E 2E
 278++4298 2E 2E 2E 2E
 278++429C 2E 2E 2E 2E
 278++42A0 2E 2E 2E 2E
 278++42A4 2E 2E 2E 2E
 278++42A8 2E 2E 2E 2E
 278++42AC 2E 2E 2E 2E
 278++42B0 2E 2E 2E 2E
 278++42B4 2E 2E 2E 2E
 278++42B8 2E 2E 2E 2E
 278++42BC 2E 2E 2E 2E
 278++42C0 2E 2E 2E 2E
 278++42C4 2E 2E 2E 2E
 278++42C8 2E 2E 2E 2E
 278++42CC 2E 2E 2E 2E
 278++42D0 2E 2E 2E 2E
 278++42D4 2E 2E 2E 2E
 279++42D8 2E 2E 2E 2E          DB '.....................#..#.......................................................'
 279++42DC 2E 2E 2E 2E
 279++42E0 2E 2E 2E 2E
 279++42E4 2E 2E 2E 2E
 279++42E8 2E 2E 2E 2E
 279++42EC 2E 23 2E 2E
 279++42F0 23 2E 2E 2E
 279++42F4 2E 2E 2E 2E
 279++42F8 2E 2E 2E 2E
 279++42FC 2E 2E 2E 2E
 279++4300 2E 2E 2E 2E
 279++4304 2E 2E 2E 2E
 279++4308 2E 2E 2E 2E
 279++430C 2E 2E 2E 2E
 279++4310 2E 2E 2E 2E
 279++4314 2E 2E 2E 2E
 279++4318 2E 2E 2E 2E
 279++431C 2E 2E 2E 2E
 279++4320 2E 2E 2E 2E
 279++4324 2E 2E 2E 2E
 280++4328 2E 2E 2E 2E          DB '.........................#.......................####...........................'
 280++432C 2E 2E 2E 2E
 280++4330 2E 2E 2E 2E
 280++4334 2E 2E 2E 2E
 280++4338 2E 2E 2E 2E
 280++433C 2E 2E 2E 2E
 280++4340 2E 23 2E 2E
 280++4344 2E 2E 2E 2E
 280++4348 2E 2E 2E 2E
 280++434C 2E 2E 2E 2E
 280++4350 2E 2E 2E 2E
 280++4354 2E 2E 2E 2E
 280++4358 2E 23 23 23
 280++435C 23 2E 2E 2E
 280++4360 2E 2E 2E 2E
 280++4364 2E 2E 2E 2E
 280++4368 2E 2E 2E 2E
 280++436C 2E 2E 2E 2E
 280++4370 2E 2E 2E 2E
 280++4374 2E 2E 2E 2E
 281++4378 2E 2E 2E 2E          DB '.....................#...#......................................................'
 281++437C 2E 2E 2E 2E
 281++4380 2E 2E 2E 2E
 281++4384 2E 2E 2E 2E
 281++4388 2E 2E 2E 2E
 281++438C 2E 23 2E 2E
 281++4390 2E 23 2E 2E
 281++4394 2E 2E 2E 2E
 281++4398 2E 2E 2E 2E
 281++439C 2E 2E 2E 2E
 281++43A0 2E 2E 2E 2E
 281++43A4 2E 2E 2E 2E
 281++43A8 2E 2E 2E 2E
 281++43AC 2E 2E 2E 2E
 281++43B0 2E 2E 2E 2E
 281++43B4 2E 2E 2E 2E
 281++43B8 2E 2E 2E 2E
 281++43BC 2E 2E 2E 2E
 281++43C0 2E 2E 2E 2E
 281++43C4 2E 2E 2E 2E
 282++43C8 2E 2E 2E 2E          DB '......................####.........................####.........................'
 282++43CC 2E 2E 2E 2E
 282++43D0 2E 2E 2E 2E
 282++43D4 2E 2E 2E 2E
 282++43D8 2E 2E 2E 2E
 282++43DC 2E 2E 23 23
 282++43E0 23 23 2E 2E
 282++43E4 2E 2E 2E 2E
 282++43E8 2E 2E 2E 2E
 282++43EC 2E 2E 2E 2E
 282++43F0 2E 2E 2E 2E
 282++43F4 2E 2E 2E 2E
 282++43F8 2E 2E 2E 23
 282++43FC 23 23 23 2E
 282++4400 2E 2E 2E 2E
 282++4404 2E 2E 2E 2E
 282++4408 2E 2E 2E 2E
 282++440C 2E 2E 2E 2E
 282++4410 2E 2E 2E 2E
 282++4414 2E 2E 2E 2E
 283++4418 2E 2E 2E 2E          DB '................................................................................'
 283++441C 2E 2E 2E 2E
 283++4420 2E 2E 2E 2E
 283++4424 2E 2E 2E 2E
 283++4428 2E 2E 2E 2E
 283++442C 2E 2E 2E 2E
 283++4430 2E 2E 2E 2E
 283++4434 2E 2E 2E 2E
 283++4438 2E 2E 2E 2E
 283++443C 2E 2E 2E 2E
 283++4440 2E 2E 2E 2E
 283++4444 2E 2E 2E 2E
 283++4448 2E 2E 2E 2E
 283++444C 2E 2E 2E 2E
 283++4450 2E 2E 2E 2E
 283++4454 2E 2E 2E 2E
 283++4458 2E 2E 2E 2E
 283++445C 2E 2E 2E 2E
 283++4460 2E 2E 2E 2E
 283++4464 2E 2E 2E 2E
 284++4468 2E 2E 2E 2E          DB '....#...........................................................................'
 284++446C 23 2E 2E 2E
 284++4470 2E 2E 2E 2E
 284++4474 2E 2E 2E 2E
 284++4478 2E 2E 2E 2E
 284++447C 2E 2E 2E 2E
 284++4480 2E 2E 2E 2E
 284++4484 2E 2E 2E 2E
 284++4488 2E 2E 2E 2E
 284++448C 2E 2E 2E 2E
 284++4490 2E 2E 2E 2E
 284++4494 2E 2E 2E 2E
 284++4498 2E 2E 2E 2E
 284++449C 2E 2E 2E 2E
 284++44A0 2E 2E 2E 2E
 284++44A4 2E 2E 2E 2E
 284++44A8 2E 2E 2E 2E
 284++44AC 2E 2E 2E 2E
 284++44B0 2E 2E 2E 2E
 284++44B4 2E 2E 2E 2E
 285++44B8 2E 2E 2E 2E          DB '.....#..........................................................................'
 285++44BC 2E 23 2E 2E
 285++44C0 2E 2E 2E 2E
 285++44C4 2E 2E 2E 2E
 285++44C8 2E 2E 2E 2E
 285++44CC 2E 2E 2E 2E
 285++44D0 2E 2E 2E 2E
 285++44D4 2E 2E 2E 2E
 285++44D8 2E 2E 2E 2E
 285++44DC 2E 2E 2E 2E
 285++44E0 2E 2E 2E 2E
 285++44E4 2E 2E 2E 2E
 285++44E8 2E 2E 2E 2E
 285++44EC 2E 2E 2E 2E
 285++44F0 2E 2E 2E 2E
 285++44F4 2E 2E 2E 2E
 285++44F8 2E 2E 2E 2E
 285++44FC 2E 2E 2E 2E
 285++4500 2E 2E 2E 2E
 285++4504 2E 2E 2E 2E
 286++4508 2E 2E 2E 23          DB '...###..........................................................................'
 286++450C 23 23 2E 2E
 286++4510 2E 2E 2E 2E
 286++4514 2E 2E 2E 2E
 286++4518 2E 2E 2E 2E
 286++451C 2E 2E 2E 2E
 286++4520 2E 2E 2E 2E
 286++4524 2E 2E 2E 2E
 286++4528 2E 2E 2E 2E
 286++452C 2E 2E 2E 2E
 286++4530 2E 2E 2E 2E
 286++4534 2E 2E 2E 2E
 286++4538 2E 2E 2E 2E
 286++453C 2E 2E 2E 2E
 286++4540 2E 2E 2E 2E
 286++4544 2E 2E 2E 2E
 286++4548 2E 2E 2E 2E
 286++454C 2E 2E 2E 2E
 286++4550 2E 2E 2E 2E
 286++4554 2E 2E 2E 2E
 287++4558 2E 2E 2E 2E          DB '...................................................................#..#.........'
 287++455C 2E 2E 2E 2E
 287++4560 2E 2E 2E 2E
 287++4564 2E 2E 2E 2E
 287++4568 2E 2E 2E 2E
 287++456C 2E 2E 2E 2E
 287++4570 2E 2E 2E 2E
 287++4574 2E 2E 2E 2E
 287++4578 2E 2E 2E 2E
 287++457C 2E 2E 2E 2E
 287++4580 2E 2E 2E 2E
 287++4584 2E 2E 2E 2E
 287++4588 2E 2E 2E 2E
 287++458C 2E 2E 2E 2E
 287++4590 2E 2E 2E 2E
 287++4594 2E 2E 2E 2E
 287++4598 2E 2E 2E 23
 287++459C 2E 2E 23 2E
 287++45A0 2E 2E 2E 2E
 287++45A4 2E 2E 2E 2E
 288++45A8 2E 2E 2E 2E          DB '..................................................................#.............'
 288++45AC 2E 2E 2E 2E
 288++45B0 2E 2E 2E 2E
 288++45B4 2E 2E 2E 2E
 288++45B8 2E 2E 2E 2E
 288++45BC 2E 2E 2E 2E
 288++45C0 2E 2E 2E 2E
 288++45C4 2E 2E 2E 2E
 288++45C8 2E 2E 2E 2E
 288++45CC 2E 2E 2E 2E
 288++45D0 2E 2E 2E 2E
 288++45D4 2E 2E 2E 2E
 288++45D8 2E 2E 2E 2E
 288++45DC 2E 2E 2E 2E
 288++45E0 2E 2E 2E 2E
 288++45E4 2E 2E 2E 2E
 288++45E8 2E 2E 23 2E
 288++45EC 2E 2E 2E 2E
 288++45F0 2E 2E 2E 2E
 288++45F4 2E 2E 2E 2E
 289++45F8 2E 2E 2E 2E          DB '..................................................................#...#.........'
 289++45FC 2E 2E 2E 2E
 289++4600 2E 2E 2E 2E
 289++4604 2E 2E 2E 2E
 289++4608 2E 2E 2E 2E
 289++460C 2E 2E 2E 2E
 289++4610 2E 2E 2E 2E
 289++4614 2E 2E 2E 2E
 289++4618 2E 2E 2E 2E
 289++461C 2E 2E 2E 2E
 289++4620 2E 2E 2E 2E
 289++4624 2E 2E 2E 2E
 289++4628 2E 2E 2E 2E
 289++462C 2E 2E 2E 2E
 289++4630 2E 2E 2E 2E
 289++4634 2E 2E 2E 2E
 289++4638 2E 2E 23 2E
 289++463C 2E 2E 23 2E
 289++4640 2E 2E 2E 2E
 289++4644 2E 2E 2E 2E
 290++4648 2E 2E 2E 2E          DB '...........................................###....................####..........'
 290++464C 2E 2E 2E 2E
 290++4650 2E 2E 2E 2E
 290++4654 2E 2E 2E 2E
 290++4658 2E 2E 2E 2E
 290++465C 2E 2E 2E 2E
 290++4660 2E 2E 2E 2E
 290++4664 2E 2E 2E 2E
 290++4668 2E 2E 2E 2E
 290++466C 2E 2E 2E 2E
 290++4670 2E 2E 2E 23
 290++4674 23 23 2E 2E
 290++4678 2E 2E 2E 2E
 290++467C 2E 2E 2E 2E
 290++4680 2E 2E 2E 2E
 290++4684 2E 2E 2E 2E
 290++4688 2E 2E 23 23
 290++468C 23 23 2E 2E
 290++4690 2E 2E 2E 2E
 290++4694 2E 2E 2E 2E
 291++4698 2E 2E 2E 2E          DB '..........................................###...................................'
 291++469C 2E 2E 2E 2E
 291++46A0 2E 2E 2E 2E
 291++46A4 2E 2E 2E 2E
 291++46A8 2E 2E 2E 2E
 291++46AC 2E 2E 2E 2E
 291++46B0 2E 2E 2E 2E
 291++46B4 2E 2E 2E 2E
 291++46B8 2E 2E 2E 2E
 291++46BC 2E 2E 2E 2E
 291++46C0 2E 2E 23 23
 291++46C4 23 2E 2E 2E
 291++46C8 2E 2E 2E 2E
 291++46CC 2E 2E 2E 2E
 291++46D0 2E 2E 2E 2E
 291++46D4 2E 2E 2E 2E
 291++46D8 2E 2E 2E 2E
 291++46DC 2E 2E 2E 2E
 291++46E0 2E 2E 2E 2E
 291++46E4 2E 2E 2E 2E
 292++46E8 2E 2E 2E 2E          DB '................................................................................'
 292++46EC 2E 2E 2E 2E
 292++46F0 2E 2E 2E 2E
 292++46F4 2E 2E 2E 2E
 292++46F8 2E 2E 2E 2E
 292++46FC 2E 2E 2E 2E
 292++4700 2E 2E 2E 2E
 292++4704 2E 2E 2E 2E
 292++4708 2E 2E 2E 2E
 292++470C 2E 2E 2E 2E
 292++4710 2E 2E 2E 2E
 292++4714 2E 2E 2E 2E
 292++4718 2E 2E 2E 2E
 292++471C 2E 2E 2E 2E
 292++4720 2E 2E 2E 2E
 292++4724 2E 2E 2E 2E
 292++4728 2E 2E 2E 2E
 292++472C 2E 2E 2E 2E
 292++4730 2E 2E 2E 2E
 292++4734 2E 2E 2E 2E
 293++4738 2E 2E 2E 2E          DB '................................................................................'
 293++473C 2E 2E 2E 2E
 293++4740 2E 2E 2E 2E
 293++4744 2E 2E 2E 2E
 293++4748 2E 2E 2E 2E
 293++474C 2E 2E 2E 2E
 293++4750 2E 2E 2E 2E
 293++4754 2E 2E 2E 2E
 293++4758 2E 2E 2E 2E
 293++475C 2E 2E 2E 2E
 293++4760 2E 2E 2E 2E
 293++4764 2E 2E 2E 2E
 293++4768 2E 2E 2E 2E
 293++476C 2E 2E 2E 2E
 293++4770 2E 2E 2E 2E
 293++4774 2E 2E 2E 2E
 293++4778 2E 2E 2E 2E
 293++477C 2E 2E 2E 2E
 293++4780 2E 2E 2E 2E
 293++4784 2E 2E 2E 2E
 294++4788 2E 2E 2E 2E          DB '................................................................................'
 294++478C 2E 2E 2E 2E
 294++4790 2E 2E 2E 2E
 294++4794 2E 2E 2E 2E
 294++4798 2E 2E 2E 2E
 294++479C 2E 2E 2E 2E
 294++47A0 2E 2E 2E 2E
 294++47A4 2E 2E 2E 2E
 294++47A8 2E 2E 2E 2E
 294++47AC 2E 2E 2E 2E
 294++47B0 2E 2E 2E 2E
 294++47B4 2E 2E 2E 2E
 294++47B8 2E 2E 2E 2E
 294++47BC 2E 2E 2E 2E
 294++47C0 2E 2E 2E 2E
 294++47C4 2E 2E 2E 2E
 294++47C8 2E 2E 2E 2E
 294++47CC 2E 2E 2E 2E
 294++47D0 2E 2E 2E 2E
 294++47D4 2E 2E 2E 2E
 295++47D8 2E 2E 2E 2E          DB '................................................................................'
 295++47DC 2E 2E 2E 2E
 295++47E0 2E 2E 2E 2E
 295++47E4 2E 2E 2E 2E
 295++47E8 2E 2E 2E 2E
 295++47EC 2E 2E 2E 2E
 295++47F0 2E 2E 2E 2E
 295++47F4 2E 2E 2E 2E
 295++47F8 2E 2E 2E 2E
 295++47FC 2E 2E 2E 2E
 295++4800 2E 2E 2E 2E
 295++4804 2E 2E 2E 2E
 295++4808 2E 2E 2E 2E
 295++480C 2E 2E 2E 2E
 295++4810 2E 2E 2E 2E
 295++4814 2E 2E 2E 2E
 295++4818 2E 2E 2E 2E
 295++481C 2E 2E 2E 2E
 295++4820 2E 2E 2E 2E
 295++4824 2E 2E 2E 2E
 296++4828 2E 2E 2E 2E          DB '................................................................................'
 296++482C 2E 2E 2E 2E
 296++4830 2E 2E 2E 2E
 296++4834 2E 2E 2E 2E
 296++4838 2E 2E 2E 2E
 296++483C 2E 2E 2E 2E
 296++4840 2E 2E 2E 2E
 296++4844 2E 2E 2E 2E
 296++4848 2E 2E 2E 2E
 296++484C 2E 2E 2E 2E
 296++4850 2E 2E 2E 2E
 296++4854 2E 2E 2E 2E
 296++4858 2E 2E 2E 2E
 296++485C 2E 2E 2E 2E
 296++4860 2E 2E 2E 2E
 296++4864 2E 2E 2E 2E
 296++4868 2E 2E 2E 2E
 296++486C 2E 2E 2E 2E
 296++4870 2E 2E 2E 2E
 296++4874 2E 2E 2E 2E
 297++4878 2E 2E 2E 2E          DB '................##..............................................................'
 297++487C 2E 2E 2E 2E
 297++4880 2E 2E 2E 2E
 297++4884 2E 2E 2E 2E
 297++4888 23 23 2E 2E
 297++488C 2E 2E 2E 2E
 297++4890 2E 2E 2E 2E
 297++4894 2E 2E 2E 2E
 297++4898 2E 2E 2E 2E
 297++489C 2E 2E 2E 2E
 297++48A0 2E 2E 2E 2E
 297++48A4 2E 2E 2E 2E
 297++48A8 2E 2E 2E 2E
 297++48AC 2E 2E 2E 2E
 297++48B0 2E 2E 2E 2E
 297++48B4 2E 2E 2E 2E
 297++48B8 2E 2E 2E 2E
 297++48BC 2E 2E 2E 2E
 297++48C0 2E 2E 2E 2E
 297++48C4 2E 2E 2E 2E
 298++48C8 2E 2E 2E 2E          DB '................##..............................................................'
 298++48CC 2E 2E 2E 2E
 298++48D0 2E 2E 2E 2E
 298++48D4 2E 2E 2E 2E
 298++48D8 23 23 2E 2E
 298++48DC 2E 2E 2E 2E
 298++48E0 2E 2E 2E 2E
 298++48E4 2E 2E 2E 2E
 298++48E8 2E 2E 2E 2E
 298++48EC 2E 2E 2E 2E
 298++48F0 2E 2E 2E 2E
 298++48F4 2E 2E 2E 2E
 298++48F8 2E 2E 2E 2E
 298++48FC 2E 2E 2E 2E
 298++4900 2E 2E 2E 2E
 298++4904 2E 2E 2E 2E
 298++4908 2E 2E 2E 2E
 298++490C 2E 2E 2E 2E
 298++4910 2E 2E 2E 2E
 298++4914 2E 2E 2E 2E
 299++4918
 300++4918              show_intro_screen:
 301++4918 CD 86 31         call GOFL_Cls
 302++491B CD 82 07         call message
 303++491E 54 68 69 73      db 'This is the "Game Of Life", originally devised by John Conway in the 1970s.',13,10
 303++4922 20 69 73 20
 303++4926 74 68 65 20
 303++492A 22 47 61 6D
 303++492E 65 20 4F 66
 303++4932 20 4C 69 66
 303++4936 65 22 2C 20
 303++493A 6F 72 69 67
 303++493E 69 6E 61 6C
 303++4942 6C 79 20 64
 303++4946 65 76 69 73
 303++494A 65 64 20 62
 303++494E 79 20 4A 6F
 303++4952 68 6E 20 43
 303++4956 6F 6E 77 61
 303++495A 79 20 69 6E
 303++495E 20 74 68 65
 303++4962 20 31 39 37
 303++4966 30 73 2E 0D
 303++496A 0A
 304++496B 54 68 69 73      db 'This implementation was written by Albert Pauw on a Z80 Playground using CP/M.',13,10
 304++496F 20 69 6D 70
 304++4973 6C 65 6D 65
 304++4977 6E 74 61 74
 304++497B 69 6F 6E 20
 304++497F 77 61 73 20
 304++4983 77 72 69 74
 304++4987 74 65 6E 20
 304++498B 62 79 20 41
 304++498F 6C 62 65 72
 304++4993 74 20 50 61
 304++4997 75 77 20 6F
 304++499B 6E 20 61 20
 304++499F 5A 38 30 20
 304++49A3 50 6C 61 79
 304++49A7 67 72 6F 75
 304++49AB 6E 64 20 75
 304++49AF 73 69 6E 67
 304++49B3 20 43 50 2F
 304++49B7 4D 2E 0D 0A
 305++49BB 49 74 20 68      db 'It has been adapted to run in the Monitor as a demo.',13,10
 305++49BF 61 73 20 62
 305++49C3 65 65 6E 20
 305++49C7 61 64 61 70
 305++49CB 74 65 64 20
 305++49CF 74 6F 20 72
 305++49D3 75 6E 20 69
 305++49D7 6E 20 74 68
 305++49DB 65 20 4D 6F
 305++49DF 6E 69 74 6F
 305++49E3 72 20 61 73
 305++49E7 20 61 20 64
 305++49EB 65 6D 6F 2E
 305++49EF 0D 0A
 306++49F1 4D 61 6B 65      db 'Make sure you have a screen of at least 80 x 25 characters.',13,10
 306++49F5 20 73 75 72
 306++49F9 65 20 79 6F
 306++49FD 75 20 68 61
 306++4A01 76 65 20 61
 306++4A05 20 73 63 72
 306++4A09 65 65 6E 20
 306++4A0D 6F 66 20 61
 306++4A11 74 20 6C 65
 306++4A15 61 73 74 20
 306++4A19 38 30 20 78
 306++4A1D 20 32 35 20
 306++4A21 63 68 61 72
 306++4A25 61 63 74 65
 306++4A29 72 73 2E 0D
 306++4A2D 0A
 307++4A2E 50 72 65 73      db 'Press any key to start...',13,10,0
 307++4A32 73 20 61 6E
 307++4A36 79 20 6B 65
 307++4A3A 79 20 74 6F
 307++4A3E 20 73 74 61
 307++4A42 72 74 2E 2E
 307++4A46 2E 0D 0A 00
 308++4A4A C9               ret
 309++4A4B
 310++4A4B              wait_for_key:
 311++4A4B                      ; Waits for a key, and generates a random number in b, which it returns!
 312++4A4B 06 00                ld b, 0
 313++4A4D              wait_for_key1:
 314++4A4D 04                   inc b
 315++4A4E CD 18 07             call char_in
 316++4A51 FE 00                cp 0
 317++4A53 CA 4D 4A             jp z, wait_for_key1
 318++4A56 C9                   ret
 319++4A57
 320++4A57              copy_initial_pattern:
 321++4A57                  ; Copy the starting pattern into the buffer.
 322++4A57                  ; The pointer to the pattern is passed in HL.
 323++4A57                  ; The pattern is made of "." and "#" but we store it in the buffer as
 324++4A57                  ; 1s and 0s. We do this by ANDing the char with %00000001, which is
 325++4A57                  ; why the '#' char needs to be ODD and the '.' char needs to be EVEN.
 326++4A57
 327++4A57 E5               push hl
 328++4A58                  ; But first, totally zero out the entire buffer
 329++4A58 21 00 80         ld hl, Buffer
 330++4A5B 36 00            ld (hl), 0
 331++4A5D 11 01 80         ld de, Buffer+1
 332++4A60 06 1C            ld b, Height+3
 333++4A62 0E 00            ld c, 0
 334++4A64 ED B0            ldir
 335++4A66
 336++4A66 E1               pop hl
 337++4A67
 338++4A67                  ; Now copy the pattern to the buffer
 339++4A67 16 81            ld d, BufferPage+1                  ; Initialise at location 1,1
 340++4A69 1E 01            ld e, 1                             ; in the buffer (top left is 0,0)
 341++4A6B 0E 19            ld c, Height
 342++4A6D              copy_initial_pattern_rows:
 343++4A6D 06 50            ld b, Width
 344++4A6F E5               push hl                             ; Store pattern pointer
 345++4A70              copy_initial_pattern_cols:
 346++4A70 7E               ld a, (hl)                          ; Copy from pattern to buffer
 347++4A71 E6 01            and %00000001                       ; Isolate bit 0 only
 348++4A73 12               ld (de), a
 349++4A74 23               inc hl                              ; Move to next location in pattern
 350++4A75 1C               inc e                               ; next column
 351++4A76 10 F8            djnz copy_initial_pattern_cols      ; loop columns
 352++4A78 E1               pop hl                              ; Back to start of current row in pattern
 353++4A79 D5               push de
 354++4A7A 11 50 00         ld de, PatternWidth
 355++4A7D 19               add hl, de                          ; Move to next row in pattern
 356++4A7E D1               pop de
 357++4A7F 1E 01            ld e, 1                             ; Back to start of buffer row
 358++4A81 14               inc d                               ; But move down a row
 359++4A82 0D               dec c                               ; loop rows
 360++4A83 20 E8            jr nz, copy_initial_pattern_rows
 361++4A85 C9               ret
 362++4A86
 363++4A86              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 364++4A86              ; The buffer needs to be in RAM... ;
 365++4A86              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 366++4A86              Buffer equ $8000
 367++4A86              BufferPage equ $80
 368++4A86
 369++4A86
 370++4A86
 371++4A86
 372++4A86
 373++4A86
 374++4A86
# file closed: GOFL.asm
# file closed: cpm.asm
   5  4A86
# file closed: build.asm
