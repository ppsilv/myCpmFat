# file opened: cpm.asm
   1  0000              ; This monitor & loader has two functions:
   2  0000              ; (1) The monitor part enables you to view ram, rom and various config parameters.
   3  0000              ; (2) The Loader part loads CP/M
   4  0000
   5  0000              ; CP/M v2.2 was implemented at the BDOS level by John Squires.
   6  0000              ; The CORE, BIOS & BDOS are my own work.
   7  0000              ;
   8  0000              ; How the CP/M loader works:
   9  0000              ; The 4 main sections need to end up at the top of memory.
  10  0000              ; For now let's say at $C000, $D000 and $E000 & $F000.
  11  0000              ; The CORE goes at the top of ram. This contains the routines to use the hardware.
  12  0000              ; The BIOS is just a stub of a BIOS and does very little.
  13  0000              ; The BDOS is the heart of CP/M and implements all the function.
  14  0000              ; The CCP is the face of CP/M. The current one is the original from Digital Research 1978.
  15  0000              ; In order to load CP/M we need a loader that grabs them from somewhere and copies them
  16  0000              ; to those locations. That loader is this program, and is located in ROM at $0000.
  17  0000              ; The CP/M loader's job is to:
  18  0000              ; (1) Configure the Z80 Playground.
  19  0000              ; (2) Load the CORE and BIOS from disk and put them in their corresponding locations.
  20  0000              ; (3) Put the tiny jump table in place at the bottom of memory.
  21  0000              ; (4) Switch off the ROM.
  22  0000              ; (5) Jump into CP/M by calling BIOS cold boot.
  23  0000              ; From there the BIOS loads the BDOS & CCP.
  24  0000
  25  0000                  org $0000
  26  0000
  27  0000              ; RST 00
  28  0000              ;
  29  0000 F3           			DI
  30  0001 C3 3A 00     			JP loader_entry
  31  0004 00 00 00 00  			DS 4
  32  0008              ;
  33  0008              ; RST 08 - Read char from I/O
  34  0008              ;
  35  0008 C3 61 07     			JP Read_Char_NB
  36  000B 00 00 00...  			DS 5
  37  0010                          ;DS  8
  38  0010              ;
  39  0010              ; RST 10 - Output char to I/O
  40  0010              ;
  41  0010 C3 64 07     			JP print_a
  42  0013 00 00 00...  			DS 5
  43  0018                          ;DS  8
  44  0018              ;
  45  0018              ; RST 18
  46  0018              ;
  47  0018 00 00 00...  			DS 8
  48  0020              ;
  49  0020              ; RST 20
  50  0020              ;
  51  0020 00 00 00...  			DS 8
  52  0028              ;
  53  0028              ; RST 28
  54  0028              ;
  55  0028 00 00 00...  			DS 8
  56  0030              ;
  57  0030              ; RST 30
  58  0030              ;
  59  0030 00 00 00...  			DS 8
  60  0038              ;
  61  0038              ; RST 38 - NMI
  62  0038              ;
  63  0038 FB           			EI
  64  0039 C9           			RET
  65  003A
  66  003A
  67  003A
  68  003A              ; INT routine. This runs when you press the /INT button. All it does is toggle the USER led.
  69  003A              ;	org $0038
  70  003A              ;int:
  71  003A              ;	ex af, af'
  72  003A              ;	exx
  73  003A              ;	call disk_toggle
  74  003A              ;	call short_pause
  75  003A              ;	exx
  76  003A              ;	ex af, af'
  77  003A              ;	ei
  78  003A              ;	reti
  79  003A
  80  003A              ; NMI routine
  81  003A              ;	org $0066
  82  003A              ;nmi:
  83  003A              ;	ex af, af'
  84  003A              ;	exx
  85  003A              ;	call user_toggle
  86  003A              ;	call short_pause
  87  003A              ;	exx
  88  003A              ;	ex af, af'
  89  003A              ;	retn
  90  003A              loader_entry:
  91  003A F3               di
  92  003B 21 6A C0         ld  hl, loader_stack
  93  003E F9               ld  sp, hl
  94  003F                  ;jp skip_over_int_and_nmi
  95  003F
  96  003F              skip_over_int_and_nmi:
  97  003F 3E 80        	LD      A, 0x80 			; All ports output A,B and C
  98  0041 D3 AB        	OUT     (PIO_M), A		;
  99  0043 3E A0        	LD      A, 0xA0
 100  0045 D3 A8        	OUT     (PIO_A), A
 101  0047 21 14 07         LD  HL, UART_BAUD_38400
 102  004A 3E 03            LD  A,  0x03
 103  004C CD 1D 07         call configure_uart         ; Put these settings into the UART
 104  004F CD BC 07         call    long_pause
 105  0052
 106  0052 CD 0C 08         call message
 107  0055 1B 5B 32 4A     	db 27,'[2J',27,'[H'
 107  0059 1B 5B 48
 108  005C 5A 38 30 20      db 'Z80 Sandbox Monitor & CP/M Loader v2.0',13,10,0
 108  0060 53 61 6E 64
 108  0064 62 6F 78 20
 108  0068 4D 6F 6E 69
 108  006C 74 6F 72 20
 108  0070 26 20 43 50
 108  0074 2F 4D 20 4C
 108  0078 6F 61 64 65
 108  007C 72 20 76 32
 108  0080 2E 30 0D 0A
 108  0084 00
 109  0085
 110  0085
 111  0085                  ; Check MCR
 112  0085 3E 22            ld a, %00100010
 113  0087 D3 BC            out (uart_MCR), a
 114  0089 CD 0C 08         call message
 115  008C 31 36 43 35      db '16C550: ',0
 115  0090 35 30 3A 20
 115  0094 00
 116  0095 DB BC            in a, (uart_MCR)
 117  0097 CD 2A 08         call show_a_as_hex
 118  009A CD 91 07         call newline
 119  009D
 120  009D CD 0C 08         call message
 121  00A0 43 6F 6E 66      db 'Configure USB Drive...',13,10,0
 121  00A4 69 67 75 72
 121  00A8 65 20 55 53
 121  00AC 42 20 44 72
 121  00B0 69 76 65 2E
 121  00B4 2E 2E 0D 0A
 121  00B8 00
 122  00B9 CD 89 0C         call configure_memorystick
 123  00BC CD 0C 08         call message
 124  00BF 43 68 65 63      db 'Check CH376 module exists...',13,10,0
 124  00C3 6B 20 43 48
 124  00C7 33 37 36 20
 124  00CB 6D 6F 64 75
 124  00CF 6C 65 20 65
 124  00D3 78 69 73 74
 124  00D7 73 2E 2E 2E
 124  00DB 0D 0A 00
 125  00DE CD C8 0C         call check_module_exists
 126  00E1 CD 0C 08         call message
 127  00E4 47 65 74 20      db 'Get CH376 module version...',13,10,0
 127  00E8 43 48 33 37
 127  00EC 36 20 6D 6F
 127  00F0 64 75 6C 65
 127  00F4 20 76 65 72
 127  00F8 73 69 6F 6E
 127  00FC 2E 2E 2E 0D
 127  0100 0A 00
 128  0102 CD FE 0C         call get_module_version
 129  0105
 130  0105                  ; Now read the baud rate configuration from uart.cfg
 131  0105 3E FF            ld a, $FF
 132  0107 32 AF FF         ld (baud_rate_divisor), a           ; Reset the two UART parameters
 133  010A 32 AE FF         ld (flow_control_value), a
 134  010D 3E 00            ld a, 0
 135  010F 32 FF 8F         ld (auto_run_char), a               ; Reset the auto-run character
 136  0112 21 F9 06         ld hl, UART_CFG_NAME
 137  0115 CD B8 02         call load_config_file
 138  0118 CD AD 03         call parse_uart_config_file         ; this gets b=baud and c=flowcontrol
 139  011B
 140  011B 3A AF FF         ld a, (baud_rate_divisor)           ; Check if we managed to get both baudrate and flowcontrol
 141  011E FE FF            cp $FF
 142  0120 CA BB 01         jp z, failed_to_read_uart_config    ; If not, don't reconfigure uart
 143  0123 47               ld b, a
 144  0124
 145  0124 3A AE FF         ld a, (flow_control_value)
 146  0127 FE FF            cp $FF
 147  0129 CA BB 01         jp z, failed_to_read_uart_config
 148  012C 4F               ld c, a
 149  012D
 150  012D CD 0C 08         call message
 151  0130 43 6F 6E 66      db 'Configuring UART to settings in UART.CFG',13,10,0
 151  0134 69 67 75 72
 151  0138 69 6E 67 20
 151  013C 55 41 52 54
 151  0140 20 74 6F 20
 151  0144 73 65 74 74
 151  0148 69 6E 67 73
 151  014C 20 69 6E 20
 151  0150 55 41 52 54
 151  0154 2E 43 46 47
 151  0158 0D 0A 00
 152  015B
 153  015B C5               push bc
 154  015C CD 0C 08         call message
 155  015F 42 41 55 44      db 'BAUD ',0
 155  0163 20 00
 156  0165 78               ld a, b
 157  0166 CD 2A 08         call show_a_as_hex
 158  0169 C1               pop bc
 159  016A
 160  016A C5               push bc
 161  016B CD 0C 08         call message
 162  016E 2C 20 46 4C      db ', FLOW ',0
 162  0172 4F 57 20 00
 163  0176 79               ld a, c
 164  0177 CD 2A 08         call show_a_as_hex
 165  017A CD 91 07         call newline
 166  017D C1               pop bc
 167  017E
 168  017E 3A AF FF         LD A, (baud_rate_divisor)
 169  0181 CD 0C 08         call message
 170  0184 42 61 75 64      db 'Baudrate value: ',0
 170  0188 72 61 74 65
 170  018C 20 76 61 6C
 170  0190 75 65 3A 20
 170  0194 00
 171  0195 CD 2A 08         call show_a_as_hex
 172  0198 CD 91 07         call newline
 173  019B 3A AF FF         LD A, (baud_rate_divisor)
 174  019E CD 38 07         call configure_uart_cpm                 ; Put these settings into the UART
 175  01A1
 176  01A1                  ; Report on the AUTO-RUN-CHAR and start the monitor
 177  01A1 3A FF 8F         ld a, (auto_run_char)
 178  01A4 FE 00            cp 0
 179  01A6 CA D8 01         jp z, start_monitor
 180  01A9 CD 0C 08         call message
 181  01AC 41 55 54 4F      db 'AUTO ',0
 181  01B0 20 00
 182  01B2 CD 05 1D         call show_a_safe
 183  01B5 CD 91 07         call newline
 184  01B8 C3 D8 01         jp start_monitor
 185  01BB
 186  01BB              failed_to_read_uart_config:
 187  01BB CD 0C 08         call message
 188  01BE 43 6F 75 6C      db 'Could not read UART.CFG',13,10,0
 188  01C2 64 20 6E 6F
 188  01C6 74 20 72 65
 188  01CA 61 64 20 55
 188  01CE 41 52 54 2E
 188  01D2 43 46 47 0D
 188  01D6 0A 00
 189  01D8
 190  01D8              start_monitor:
 191  01D8 C3 CA 10         jp monitor_start
 192  01DB
 193  01DB              start_cpm:
 194  01DB CD 0C 08         call message
 195  01DE 43 68 65 63      db 'Checking disks...',13,10,0
 195  01E2 6B 69 6E 67
 195  01E6 20 64 69 73
 195  01EA 6B 73 2E 2E
 195  01EE 2E 0D 0A 00
 196  01F2 CD 69 0B         call check_cpmdisks_structure
 197  01F5
 198  01F5                  ; Copy 8 byte bootstrap sequence into Low Storage at location 0
 199  01F5                  ; but note that we patch it up in a bit with the real jump locations.
 200  01F5 11 00 00         ld de, 0
 201  01F8 21 02 07         ld hl, first_eight_bytes
 202  01FB 01 08 00         ld bc, 8
 203  01FE ED B0            ldir
 204  0200
 205  0200                  ; Load CPM config file into memory
 206  0200 21 F1 06         ld hl, CPM_CFG_NAME
 207  0203 CD B8 02         call load_config_file
 208  0206 CD 0C 08         call message
 209  0209 43 46 47 20      db 'CFG loaded!',13,10,0
 209  020D 6C 6F 61 64
 209  0211 65 64 21 0D
 209  0215 0A 00
 210  0217                  ; Parse it to get out the locations
 211  0217 CD E3 02         call parse_cpm_config_file
 212  021A CD 0C 08         call message
 213  021D 43 46 47 20      db 'CFG parsed!',13,10,0
 213  0221 70 61 72 73
 213  0225 65 64 21 0D
 213  0229 0A 00
 214  022B
 215  022B CD 28 06         call show_config
 216  022E CD 8E 06         call validate_config
 217  0231
 218  0231 CD 0C 08         call message
 219  0234 43 46 47 20      db 'CFG validated!',13,10,0
 219  0238 76 61 6C 69
 219  023C 64 61 74 65
 219  0240 64 21 0D 0A
 219  0244 00
 220  0245
 221  0245
 222  0245                  ; Load CORE.BIN into its proper location
 223  0245 21 DF 06         ld hl, NAME_OF_CORE
 224  0248 CD AD 0E         call copy_filename_to_buffer
 225  024B ED 5B C3 FF      ld de, (core_location)
 226  024F CD C0 09         call load_bin_file
 227  0252 CD 0C 08         call message
 228  0255 43 4F 52 45      db 'CORE loaded!',13,10,0
 228  0259 20 6C 6F 61
 228  025D 64 65 64 21
 228  0261 0D 0A 00
 229  0264
 230  0264                  ; Load the BIOS to the proper location
 231  0264 21 D6 06         ld hl, NAME_OF_BIOS
 232  0267 CD AD 0E         call copy_filename_to_buffer
 233  026A ED 5B C1 FF      ld de, (bios_location)
 234  026E CD C0 09         call load_bin_file
 235  0271 CD 0C 08         call message
 236  0274 42 49 4F 53      db 'BIOS loaded!',13,10,0
 236  0278 20 6C 6F 61
 236  027C 64 65 64 21
 236  0280 0D 0A 00
 237  0283
 238  0283                  ; copy bios_start into bytes 1 & 2 after adding 3 to it
 239  0283 2A C1 FF         ld hl, (bios_location)
 240  0286 23               inc hl
 241  0287 23               inc hl
 242  0288 23               inc hl                              ; hl now point to BIOS warm boot
 243  0289 22 01 00         ld (1), hl
 244  028C
 245  028C                  ; copy bdos_start into bytes 6 & 7
 246  028C 2A BF FF         ld hl, (bdos_location)
 247  028F 22 06 00         ld (6), hl
 248  0292
 249  0292                  ; OK, let's go!
 250  0292 CD 0C 08         call message
 251  0295 42 69 6F 73      db 'Bios location: ',0
 251  0299 20 6C 6F 63
 251  029D 61 74 69 6F
 251  02A1 6E 3A 20 00
 252  02A5 2A C1 FF         ld hl, (bios_location)
 253  02A8
 254  02A8 7C               ld  a, h
 255  02A9 CD 2A 08         call show_a_as_hex
 256  02AC 7D               ld  a, l
 257  02AD CD 2A 08         call show_a_as_hex
 258  02B0 CD 91 07         call newline
 259  02B3
 260  02B3 2A C1 FF         ld hl, (bios_location)
 261  02B6
 262  02B6 E9               jp (hl) ; BIOS COLD BOOT - Note that this is PC=HL not PC=(HL). Confusing eh?
 263  02B7 76               halt    ; Just in case we ever get back here somehow
 264  02B8
 265  02B8
 266  02B8              load_config_file:
 267  02B8 CD 0C 08         call message
 268  02BB 4C 6F 61 64      db 'Loading config file...',13,10,0
 268  02BF 69 6E 67 20
 268  02C3 63 6F 6E 66
 268  02C7 69 67 20 66
 268  02CB 69 6C 65 2E
 268  02CF 2E 2E 0D 0A
 268  02D3 00
 269  02D4                  ; Opens the file such as /CPM/cpm.cfg or /CPM/uart.cfg. Point to one of these names in hl.
 270  02D4                  ; Read it into an area of memory starting at config_file_loc
 271  02D4                  ; and puts \0 at the end so we can spot the end of the file later
 272  02D4 CD AD 0E         call copy_filename_to_buffer
 273  02D7 11 00 90         ld de, config_file_loc
 274  02DA CD C0 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 275  02DD C2 62 03         jp nz, load_config_file_error
 276  02E0 36 00            ld (hl), 0
 277  02E2 C9               ret
 278  02E3
 279  02E3              parse_cpm_config_file:
 280  02E3 CD 0C 08         call message
 281  02E6 50 61 72 73      db 'Parsing the CPM config file...',13,10,0
 281  02EA 69 6E 67 20
 281  02EE 74 68 65 20
 281  02F2 43 50 4D 20
 281  02F6 63 6F 6E 66
 281  02FA 69 67 20 66
 281  02FE 69 6C 65 2E
 281  0302 2E 2E 0D 0A
 281  0306 00
 282  0307                  ; Go through the config file one line at a time.
 283  0307                  ; If we encounter a \0 then the file has ended.
 284  0307                  ; If a line starts with ";" then ignore it.
 285  0307                  ; If a line starts with "CORE" then read in the bex value for CORE_START
 286  0307 21 00 90         ld hl, config_file_loc
 287  030A              parse_cpm_config_file_loop:
 288  030A CD 00 06         call has_file_ended
 289  030D CA 61 03         jp z, parse_config_file_end
 290  0310
 291  0310 CD A6 04         call is_this_line_a_comment
 292  0313 C2 1B 03         jp nz, not_a_comment
 293  0316 CD 0B 06         call go_to_next_line
 294  0319 18 EF            jr parse_cpm_config_file_loop
 295  031B
 296  031B              not_a_comment:
 297  031B CD AE 04         call is_this_line_the_core_location
 298  031E 20 0B            jr nz, not_core_location
 299  0320 11 C3 FF         ld de, core_location
 300  0323              consume_location:
 301  0323 CD 18 04         call parse_4_digit_hex_value
 302  0326 CD 0B 06         call go_to_next_line
 303  0329 18 DF            jr parse_cpm_config_file_loop
 304  032B
 305  032B              not_core_location:
 306  032B CD 5A 05         call is_this_line_the_bios_location
 307  032E 20 05            jr nz, not_bios_location
 308  0330 11 C1 FF         ld de, bios_location
 309  0333 18 EE            jr consume_location
 310  0335
 311  0335              not_bios_location:
 312  0335 CD 85 05         call is_this_line_the_bdos_location
 313  0338 20 05            jr nz, not_bdos_location
 314  033A 11 BF FF         ld de, bdos_location
 315  033D 18 E4            jr consume_location
 316  033F
 317  033F              not_bdos_location:
 318  033F CD B0 05         call is_this_line_the_ccp_location
 319  0342 20 05            jr nz, not_ccp_location
 320  0344 11 BD FF         ld de, ccp_location
 321  0347 18 DA            jr consume_location
 322  0349
 323  0349              not_ccp_location:
 324  0349 CD D6 05         call is_this_line_the_ccp_name
 325  034C 20 05            jr nz, not_ccp_name
 326  034E 11 B0 FF         ld de, ccp_name
 327  0351 18 06            jr consume_name
 328  0353
 329  0353              not_ccp_name:
 330  0353                  ; Unknown line so ignore it
 331  0353 CD 0B 06         call go_to_next_line
 332  0356 C3 0A 03         jp parse_cpm_config_file_loop
 333  0359
 334  0359              consume_name:
 335  0359                  ; hl points to the name in the file
 336  0359                  ; de points to where we want to store it
 337  0359 CD 82 03         call parse_name
 338  035C CD 0B 06         call go_to_next_line
 339  035F 18 A9            jr parse_cpm_config_file_loop
 340  0361
 341  0361              parse_config_file_end:
 342  0361 C9               ret
 343  0362
 344  0362              load_config_file_error:
 345  0362 CD 0C 08         call message
 346  0365 45 72 72 6F      db 'Error loading config file',13,10,0
 346  0369 72 20 6C 6F
 346  036D 61 64 69 6E
 346  0371 67 20 63 6F
 346  0375 6E 66 69 67
 346  0379 20 66 69 6C
 346  037D 65 0D 0A 00
 347  0381 76               halt
 348  0382
 349  0382              parse_name:
 350  0382                  ; hl = current location in file
 351  0382                  ; de = where we want to put the parsed filename
 352  0382 06 09            ld b, 9                 ; max 8 chars in filename
 353  0384              parse_name_loop:
 354  0384 CD 04 06         call get_cfg_char
 355  0387 FE 21            cp ' '+1
 356  0389 DA A3 04         jp c, bad_hex_digit
 357  038C FE 2E            cp '.'
 358  038E 28 07            jr z, parse_extension
 359  0390 12               ld (de), a
 360  0391 13               inc de
 361  0392 10 F0            djnz parse_name_loop
 362  0394 C3 A3 04         jp bad_hex_digit
 363  0397              parse_extension:
 364  0397 3E 2E            ld a, '.'
 365  0399 12               ld (de), a
 366  039A 13               inc de
 367  039B
 368  039B 06 03            ld b, 3                 ; max 3 chars in filename
 369  039D              parse_extension_loop:
 370  039D CD 04 06         call get_cfg_char
 371  03A0 FE 21            cp ' '+1
 372  03A2 38 04            jr c, parse_name_done
 373  03A4 12               ld (de), a
 374  03A5 13               inc de
 375  03A6 10 F5            djnz parse_extension_loop
 376  03A8                  ; fall through to...
 377  03A8
 378  03A8              parse_name_done:
 379  03A8 3E 00            ld a, 0                         ; null terminator for the name
 380  03AA 12               ld (de), a
 381  03AB BF               cp a                            ; Set zero flag for success
 382  03AC C9               ret
 383  03AD
 384  03AD              parse_uart_config_file:
 385  03AD CD 0C 08         call message
 386  03B0 50 61 72 73      db 'Parsing the UART config file...',13,10,0
 386  03B4 69 6E 67 20
 386  03B8 74 68 65 20
 386  03BC 55 41 52 54
 386  03C0 20 63 6F 6E
 386  03C4 66 69 67 20
 386  03C8 66 69 6C 65
 386  03CC 2E 2E 2E 0D
 386  03D0 0A 00
 387  03D2                  ; Go through the config file one line at a time.
 388  03D2                  ; If we encounter a \0 then the file has ended.
 389  03D2                  ; If a line starts with ";" then ignore it.
 390  03D2                  ; If a line starts with "BAUD" or "FLOW" then read in the hex value.
 391  03D2                  ; If a line starts with "AUTO" then read in a char.
 392  03D2 21 00 90         ld hl, config_file_loc
 393  03D5              parse_uart_config_file_loop:
 394  03D5 CD 00 06         call has_file_ended
 395  03D8 CA 61 03         jp z, parse_config_file_end
 396  03DB
 397  03DB CD A6 04         call is_this_line_a_comment
 398  03DE C2 E6 03         jp nz, not_a_uart_comment
 399  03E1 CD 0B 06         call go_to_next_line
 400  03E4 18 EF            jr parse_uart_config_file_loop
 401  03E6
 402  03E6              not_a_uart_comment:
 403  03E6 CD D9 04         call is_this_line_the_baud_rate
 404  03E9 20 13            jr nz, not_baud_rate
 405  03EB 11 AF FF         ld de, baud_rate_divisor
 406  03EE              consume_uart_value:
 407  03EE CD 60 04         call parse_2_digit_hex_value
 408  03F1 CD 0B 06         call go_to_next_line
 409  03F4 18 DF            jr parse_uart_config_file_loop
 410  03F6
 411  03F6              consume_char:
 412  03F6                  ; hl points to the char in the file
 413  03F6                  ; de points to where we want to store it
 414  03F6 CD 55 04         call parse_char
 415  03F9 CD 0B 06         call go_to_next_line
 416  03FC 18 D7            jr parse_uart_config_file_loop
 417  03FE
 418  03FE
 419  03FE              not_baud_rate:
 420  03FE CD 04 05         call is_this_line_the_flow_control
 421  0401 20 05            jr nz, not_flow_control
 422  0403 11 AE FF         ld de, flow_control_value
 423  0406 18 E6            jr consume_uart_value
 424  0408
 425  0408              not_flow_control:
 426  0408 CD 2F 05         call is_this_line_the_auto_char
 427  040B 20 05            jr nz, not_auto_char
 428  040D 11 FF 8F         ld de, auto_run_char
 429  0410 18 E4            jr consume_char
 430  0412
 431  0412              not_auto_char:
 432  0412                  ; Unknown line so ignore it
 433  0412 CD 0B 06         call go_to_next_line
 434  0415 C3 D5 03         jp parse_uart_config_file_loop
 435  0418
 436  0418              parse_4_digit_hex_value:
 437  0418                  ; hl = current location in file
 438  0418                  ; de = where we want to put the parsed value
 439  0418 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 440  041A 12               ld (de), a
 441  041B 13               inc de
 442  041C 12               ld (de), a                              ; de now pointing to high byte of result area
 443  041D
 444  041D CD 04 06         call get_cfg_char
 445  0420 CD 7F 04         call parse_hex_digit
 446  0423 C2 62 03         jp nz, load_config_file_error
 447  0426 87               add a, a                                ; a = a * 2
 448  0427 87               add a, a                                ; a = a * 4
 449  0428 87               add a, a                                ; a = a * 8
 450  0429 87               add a, a                                ; a = a * 16
 451  042A 12               ld (de), a                              ; Store highest 4 bits of high byte
 452  042B
 453  042B CD 04 06         call get_cfg_char
 454  042E CD 7F 04         call parse_hex_digit
 455  0431 C2 62 03         jp nz, load_config_file_error
 456  0434 47               ld b, a
 457  0435 1A               ld a, (de)
 458  0436 80               add a, b
 459  0437 12               ld (de), a                              ; Stored all of high byte now
 460  0438 1B               dec de                                  ; de now points to low byte of result
 461  0439
 462  0439 CD 04 06         call get_cfg_char
 463  043C CD 7F 04         call parse_hex_digit
 464  043F C2 62 03         jp nz, load_config_file_error
 465  0442 87               add a, a                                ; a = a * 2
 466  0443 87               add a, a                                ; a = a * 4
 467  0444 87               add a, a                                ; a = a * 8
 468  0445 87               add a, a                                ; a = a * 16
 469  0446 12               ld (de), a                              ; Store highest 4 bits of low byte
 470  0447
 471  0447 CD 04 06         call get_cfg_char
 472  044A CD 7F 04         call parse_hex_digit
 473  044D C2 62 03         jp nz, load_config_file_error
 474  0450 47               ld b, a
 475  0451 1A               ld a, (de)
 476  0452 80               add a, b
 477  0453 12               ld (de), a                              ; Stored all of low byte now
 478  0454
 479  0454 C9               ret
 480  0455
 481  0455              parse_char:
 482  0455 7E               ld a, (hl)
 483  0456 FE 20            cp 32
 484  0458 38 02            jr c, parse_char_blank
 485  045A 12               ld (de), a
 486  045B C9               ret
 487  045C              parse_char_blank:
 488  045C 3E 00            ld a, 0
 489  045E 12               ld (de), a
 490  045F C9               ret
 491  0460
 492  0460              parse_2_digit_hex_value:
 493  0460                  ; hl = current location in file
 494  0460                  ; de = where we want to put the parsed value
 495  0460 3E 00            ld a, 0                                 ; First, clear out the result area to zeros
 496  0462 12               ld (de), a
 497  0463
 498  0463 CD 04 06         call get_cfg_char
 499  0466 CD 7F 04         call parse_hex_digit
 500  0469 C2 62 03         jp nz, load_config_file_error
 501  046C 87               add a, a                                ; a = a * 2
 502  046D 87               add a, a                                ; a = a * 4
 503  046E 87               add a, a                                ; a = a * 8
 504  046F 87               add a, a                                ; a = a * 16
 505  0470 12               ld (de), a                              ; Store highest 4 bits of byte
 506  0471
 507  0471 CD 04 06         call get_cfg_char
 508  0474 CD 7F 04         call parse_hex_digit
 509  0477 C2 62 03         jp nz, load_config_file_error
 510  047A 47               ld b, a
 511  047B 1A               ld a, (de)
 512  047C 80               add a, b
 513  047D 12               ld (de), a                              ; Stored all of byte now
 514  047E C9               ret
 515  047F
 516  047F              parse_hex_digit:
 517  047F                  ; Parses the hex ascii char in A into a hex value 0-15 in A
 518  047F                  ; returns NZ if not valid
 519  047F                  ; Preserves hl & de
 520  047F FE 30            cp '0'
 521  0481 38 20            jr c, bad_hex_digit
 522  0483 FE 3A            cp '9'+1
 523  0485 30 04            jr nc, not_09
 524  0487 D6 30            sub '0'
 525  0489 18 16            jr parse_hex_digit_done
 526  048B              not_09:
 527  048B FE 41            cp 'A'
 528  048D 38 14            jr c, bad_hex_digit
 529  048F FE 47            cp 'F'+1
 530  0491 30 04            jr nc, not_AZ_uppercase
 531  0493 D6 37            sub 55
 532  0495 18 0A            jr parse_hex_digit_done
 533  0497              not_AZ_uppercase:
 534  0497 FE 61            cp 'a'
 535  0499 38 08            jr c, bad_hex_digit
 536  049B FE 67            cp 'f'+1
 537  049D 30 04            jr nc, bad_hex_digit
 538  049F D6 57            sub 87
 539  04A1                  ; fall through to...
 540  04A1              parse_hex_digit_done:
 541  04A1 BF               cp a                            ; Set zero flag for success
 542  04A2 C9               ret
 543  04A3
 544  04A3              bad_hex_digit:
 545  04A3 F6 01            or 1                            ; clear zero flag for failure
 546  04A5 C9               ret
 547  04A6
 548  04A6              is_this_line_a_comment:
 549  04A6                  ; Check if the line starts with ";"
 550  04A6                  ; Returns Z if so.
 551  04A6                  ; Always leaves hl at the start of the line
 552  04A6 E5               push hl
 553  04A7 CD 04 06         call get_cfg_char
 554  04AA E1               pop hl
 555  04AB FE 3B            cp ';'
 556  04AD C9               ret
 557  04AE
 558  04AE              is_this_line_the_core_location:
 559  04AE                  ; Checks if the line starts with "CORE"
 560  04AE                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 561  04AE                  ; If not returns NZ and leaves hl pointing to the start of the line
 562  04AE E5               push hl
 563  04AF CD 04 06         call get_cfg_char
 564  04B2 FE 43            cp 'C'
 565  04B4 C2 FC 05         jp nz, is_this_line_NO
 566  04B7
 567  04B7 CD 04 06         call get_cfg_char
 568  04BA FE 4F            cp 'O'
 569  04BC C2 FC 05         jp nz, is_this_line_NO
 570  04BF
 571  04BF CD 04 06         call get_cfg_char
 572  04C2 FE 52            cp 'R'
 573  04C4 C2 FC 05         jp nz, is_this_line_NO
 574  04C7
 575  04C7 CD 04 06         call get_cfg_char
 576  04CA FE 45            cp 'E'
 577  04CC C2 FC 05         jp nz, is_this_line_NO
 578  04CF
 579  04CF CD 04 06         call get_cfg_char
 580  04D2 FE 20            cp ' '
 581  04D4 C2 FC 05         jp nz, is_this_line_NO
 582  04D7 D1               pop de                          ; throw away the value we pushed
 583  04D8 C9               ret                             ; returns Z
 584  04D9
 585  04D9              is_this_line_the_baud_rate:
 586  04D9                  ; Checks if the line starts with "BAUD"
 587  04D9                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 588  04D9                  ; If not returns NZ and leaves hl pointing to the start of the line
 589  04D9 E5               push hl
 590  04DA CD 04 06         call get_cfg_char
 591  04DD FE 42            cp 'B'
 592  04DF C2 FC 05         jp nz, is_this_line_NO
 593  04E2
 594  04E2 CD 04 06         call get_cfg_char
 595  04E5 FE 41            cp 'A'
 596  04E7 C2 FC 05         jp nz, is_this_line_NO
 597  04EA
 598  04EA CD 04 06         call get_cfg_char
 599  04ED FE 55            cp 'U'
 600  04EF C2 FC 05         jp nz, is_this_line_NO
 601  04F2
 602  04F2 CD 04 06         call get_cfg_char
 603  04F5 FE 44            cp 'D'
 604  04F7 C2 FC 05         jp nz, is_this_line_NO
 605  04FA
 606  04FA CD 04 06         call get_cfg_char
 607  04FD FE 20            cp ' '
 608  04FF C2 FC 05         jp nz, is_this_line_NO
 609  0502 D1               pop de                          ; throw away the value we pushed
 610  0503 C9               ret                             ; returns Z
 611  0504
 612  0504              is_this_line_the_flow_control:
 613  0504                  ; Checks if the line starts with "FLOW"
 614  0504                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 615  0504                  ; If not returns NZ and leaves hl pointing to the start of the line
 616  0504 E5               push hl
 617  0505 CD 04 06         call get_cfg_char
 618  0508 FE 46            cp 'F'
 619  050A C2 FC 05         jp nz, is_this_line_NO
 620  050D
 621  050D CD 04 06         call get_cfg_char
 622  0510 FE 4C            cp 'L'
 623  0512 C2 FC 05         jp nz, is_this_line_NO
 624  0515
 625  0515 CD 04 06         call get_cfg_char
 626  0518 FE 4F            cp 'O'
 627  051A C2 FC 05         jp nz, is_this_line_NO
 628  051D
 629  051D CD 04 06         call get_cfg_char
 630  0520 FE 57            cp 'W'
 631  0522 C2 FC 05         jp nz, is_this_line_NO
 632  0525
 633  0525 CD 04 06         call get_cfg_char
 634  0528 FE 20            cp ' '
 635  052A C2 FC 05         jp nz, is_this_line_NO
 636  052D D1               pop de                          ; throw away the value we pushed
 637  052E C9               ret                             ; returns Z
 638  052F
 639  052F              is_this_line_the_auto_char:
 640  052F                  ; Checks if the line starts with "AUTO"
 641  052F                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 642  052F                  ; If not returns NZ and leaves hl pointing to the start of the line
 643  052F E5               push hl
 644  0530 CD 04 06         call get_cfg_char
 645  0533 FE 41            cp 'A'
 646  0535 C2 FC 05         jp nz, is_this_line_NO
 647  0538
 648  0538 CD 04 06         call get_cfg_char
 649  053B FE 55            cp 'U'
 650  053D C2 FC 05         jp nz, is_this_line_NO
 651  0540
 652  0540 CD 04 06         call get_cfg_char
 653  0543 FE 54            cp 'T'
 654  0545 C2 FC 05         jp nz, is_this_line_NO
 655  0548
 656  0548 CD 04 06         call get_cfg_char
 657  054B FE 4F            cp 'O'
 658  054D C2 FC 05         jp nz, is_this_line_NO
 659  0550
 660  0550 CD 04 06         call get_cfg_char
 661  0553 FE 20            cp ' '
 662  0555 C2 FC 05         jp nz, is_this_line_NO
 663  0558 D1               pop de                          ; throw away the value we pushed
 664  0559 C9               ret                             ; returns Z
 665  055A
 666  055A              is_this_line_the_bios_location:
 667  055A                  ; Checks if the line starts with "BIOS "
 668  055A                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 669  055A                  ; If not returns NZ and leaves hl pointing to the start of the line
 670  055A E5               push hl
 671  055B CD 04 06         call get_cfg_char
 672  055E FE 42            cp 'B'
 673  0560 C2 FC 05         jp nz, is_this_line_NO
 674  0563
 675  0563 CD 04 06         call get_cfg_char
 676  0566 FE 49            cp 'I'
 677  0568 C2 FC 05         jp nz, is_this_line_NO
 678  056B
 679  056B CD 04 06         call get_cfg_char
 680  056E FE 4F            cp 'O'
 681  0570 C2 FC 05         jp nz, is_this_line_NO
 682  0573
 683  0573 CD 04 06         call get_cfg_char
 684  0576 FE 53            cp 'S'
 685  0578 C2 FC 05         jp nz, is_this_line_NO
 686  057B
 687  057B CD 04 06         call get_cfg_char
 688  057E FE 20            cp ' '
 689  0580 C2 FC 05         jp nz, is_this_line_NO
 690  0583 D1               pop de
 691  0584 C9               ret                             ; returns Z
 692  0585
 693  0585              is_this_line_the_bdos_location:
 694  0585                  ; Checks if the line starts with "BDOS "
 695  0585                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 696  0585                  ; If not returns NZ and leaves hl pointing to the start of the line
 697  0585 E5               push hl
 698  0586 CD 04 06         call get_cfg_char
 699  0589 FE 42            cp 'B'
 700  058B C2 FC 05         jp nz, is_this_line_NO
 701  058E
 702  058E CD 04 06         call get_cfg_char
 703  0591 FE 44            cp 'D'
 704  0593 C2 FC 05         jp nz, is_this_line_NO
 705  0596
 706  0596 CD 04 06         call get_cfg_char
 707  0599 FE 4F            cp 'O'
 708  059B C2 FC 05         jp nz, is_this_line_NO
 709  059E
 710  059E CD 04 06         call get_cfg_char
 711  05A1 FE 53            cp 'S'
 712  05A3 C2 FC 05         jp nz, is_this_line_NO
 713  05A6
 714  05A6 CD 04 06         call get_cfg_char
 715  05A9 FE 20            cp ' '
 716  05AB C2 FC 05         jp nz, is_this_line_NO
 717  05AE D1               pop de
 718  05AF C9               ret                             ; returns Z
 719  05B0
 720  05B0              is_this_line_the_ccp_location:
 721  05B0                  ; Checks if the line starts with "CCPL "
 722  05B0                  ; Returns Z if so and leaves hl pointing to the start of the address after the word.
 723  05B0                  ; If not returns NZ and leaves hl pointing to the start of the line
 724  05B0 E5               push hl
 725  05B1 CD 04 06         call get_cfg_char
 726  05B4 FE 43            cp 'C'
 727  05B6 20 44            jr nz, is_this_line_NO
 728  05B8
 729  05B8 CD 04 06         call get_cfg_char
 730  05BB FE 43            cp 'C'
 731  05BD 20 3D            jr nz, is_this_line_NO
 732  05BF
 733  05BF CD 04 06         call get_cfg_char
 734  05C2 FE 50            cp 'P'
 735  05C4 20 36            jr nz, is_this_line_NO
 736  05C6
 737  05C6 CD 04 06         call get_cfg_char
 738  05C9 FE 4C            cp 'L'
 739  05CB 20 2F            jr nz, is_this_line_NO
 740  05CD
 741  05CD CD 04 06         call get_cfg_char
 742  05D0 FE 20            cp ' '
 743  05D2 20 28            jr nz, is_this_line_NO
 744  05D4 D1               pop de
 745  05D5 C9               ret                             ; returns Z
 746  05D6
 747  05D6              is_this_line_the_ccp_name:
 748  05D6                  ; Checks if the line starts with "CCPN "
 749  05D6                  ; Returns Z if so and leaves hl pointing to the start of the filename after the word.
 750  05D6                  ; If not returns NZ and leaves hl pointing to the start of the line
 751  05D6 E5               push hl
 752  05D7 CD 04 06         call get_cfg_char
 753  05DA FE 43            cp 'C'
 754  05DC 20 1E            jr nz, is_this_line_NO
 755  05DE
 756  05DE CD 04 06         call get_cfg_char
 757  05E1 FE 43            cp 'C'
 758  05E3 20 17            jr nz, is_this_line_NO
 759  05E5
 760  05E5 CD 04 06         call get_cfg_char
 761  05E8 FE 50            cp 'P'
 762  05EA 20 10            jr nz, is_this_line_NO
 763  05EC
 764  05EC CD 04 06         call get_cfg_char
 765  05EF FE 4E            cp 'N'
 766  05F1 20 09            jr nz, is_this_line_NO
 767  05F3
 768  05F3 CD 04 06         call get_cfg_char
 769  05F6 FE 20            cp ' '
 770  05F8 20 02            jr nz, is_this_line_NO
 771  05FA D1               pop de
 772  05FB C9               ret                             ; returns Z
 773  05FC
 774  05FC              is_this_line_NO:
 775  05FC E1               pop hl
 776  05FD F6 01            or 1                            ; clear zero flag for failure
 777  05FF C9               ret
 778  0600
 779  0600              has_file_ended:
 780  0600                  ; The file has ended if the next char is a \0
 781  0600 7E               ld a, (hl)
 782  0601 FE 00            cp 0
 783  0603 C9               ret
 784  0604
 785  0604              get_cfg_char:
 786  0604                  ; Gets A from the next location in the config file, pointed to by HL.
 787  0604                  ; Increases hl so we skip over the char.
 788  0604                  ; If the char is a \0 then we are at the end of the file, so return \0 and don't increase hl
 789  0604 7E               ld a, (hl)
 790  0605 FE 00            cp 0                            ; Have we found the end of the file?
 791  0607 C8               ret z                           ; and return
 792  0608              get_cfg_char1:
 793  0608 23               inc hl
 794  0609 BF               cp a                            ; Set zero flag for success
 795  060A C9               ret
 796  060B
 797  060B              go_to_next_line:
 798  060B 7E               ld a, (hl)
 799  060C FE 00            cp 0                            ; Have we found the end of the file?
 800  060E C8               ret z                           ; if so return
 801  060F
 802  060F FE 20            cp 32
 803  0611 30 0A            jr nc, skip_letters
 804  0613              skip_control_chars:
 805  0613 23               inc hl
 806  0614 7E               ld a, (hl)
 807  0615 FE 00            cp 0
 808  0617 C8               ret z
 809  0618 FE 20            cp 32
 810  061A 38 F7            jr c, skip_control_chars
 811  061C C9               ret
 812  061D
 813  061D              skip_letters:
 814  061D 23               inc hl
 815  061E 7E               ld a, (hl)
 816  061F FE 00            cp 0
 817  0621 C8               ret z
 818  0622 FE 20            cp 32
 819  0624 30 F7            jr nc, skip_letters
 820  0626 18 EB            jr skip_control_chars
 821  0628
 822  0628              show_config:
 823  0628 CD 0C 08         call message
 824  062B 43 4F 52 45      db 'CORE: ',0
 824  062F 3A 20 00
 825  0632 2A C3 FF         ld hl, (core_location)
 826  0635 CD 21 08         call show_hl_as_hex
 827  0638
 828  0638 CD 0C 08         call message
 829  063B 2C 20 42 49      db ', BIOS: ',0
 829  063F 4F 53 3A 20
 829  0643 00
 830  0644 2A C1 FF         ld hl, (bios_location)
 831  0647 CD 21 08         call show_hl_as_hex
 832  064A
 833  064A CD 0C 08         call message
 834  064D 2C 20 42 44      db ', BDOS: ',0
 834  0651 4F 53 3A 20
 834  0655 00
 835  0656 2A BF FF         ld hl, (bdos_location)
 836  0659 CD 21 08         call show_hl_as_hex
 837  065C
 838  065C CD 0C 08         call message
 839  065F 2C 20 43 43      db ', CCPL: ',0
 839  0663 50 4C 3A 20
 839  0667 00
 840  0668 2A BD FF         ld hl, (ccp_location)
 841  066B CD 21 08         call show_hl_as_hex
 842  066E
 843  066E CD 0C 08         call message
 844  0671 2C 20 43 43      db ', CCPN: ',0
 844  0675 50 4E 3A 20
 844  0679 00
 845  067A 21 B0 FF         ld hl, ccp_name
 846  067D              show_name_loop:
 847  067D 7E               ld a, (hl)
 848  067E FE 00            cp 0
 849  0680 28 08            jr z, finished_showing_name
 850  0682 E5               push hl
 851  0683 CD 64 07         call print_a
 852  0686 E1               pop hl
 853  0687 23               inc hl
 854  0688 18 F3            jr show_name_loop
 855  068A              finished_showing_name:
 856  068A CD 91 07         call newline
 857  068D C9               ret
 858  068E
 859  068E              validate_config:
 860  068E 21 C3 FF         ld hl, core_location
 861  0691 CD A7 06         call must_not_be_zero
 862  0694 21 C1 FF         ld hl, bios_location
 863  0697 CD A7 06         call must_not_be_zero
 864  069A 21 BF FF         ld hl, bdos_location
 865  069D CD A7 06         call must_not_be_zero
 866  06A0 21 BD FF         ld hl, ccp_location
 867  06A3 CD A7 06         call must_not_be_zero
 868  06A6 C9               ret
 869  06A7
 870  06A7              must_not_be_zero:
 871  06A7 7E               ld a, (hl)
 872  06A8 FE 00            cp 0
 873  06AA C0               ret nz
 874  06AB 23               inc hl
 875  06AC 7E               ld a, (hl)
 876  06AD FE 00            cp 0
 877  06AF C0               ret nz
 878  06B0 CD 0C 08         call message
 879  06B3 49 6E 76 61      db 'Invalid configuration',13,10,0
 879  06B7 6C 69 64 20
 879  06BB 63 6F 6E 66
 879  06BF 69 67 75 72
 879  06C3 61 74 69 6F
 879  06C7 6E 0D 0A 00
 880  06CB 76               halt
 881  06CC
 882  06CC
 883  06CC
 884  06CC              NAME_OF_BDOS:
 885  06CC 2F 42 44 4F      db '/BDOS.BIN',0
 885  06D0 53 2E 42 49
 885  06D4 4E 00
 886  06D6              NAME_OF_BIOS:
 887  06D6 42 49 4F 53      db 'BIOS.BIN',0
 887  06DA 2E 42 49 4E
 887  06DE 00
 888  06DF              NAME_OF_CORE:
 889  06DF 43 4F 52 45      db 'CORE.BIN',0
 889  06E3 2E 42 49 4E
 889  06E7 00
 890  06E8              NAME_OF_CCP:
 891  06E8 2F 43 43 50      db '/CCP.BIN',0
 891  06EC 2E 42 49 4E
 891  06F0 00
 892  06F1
 893  06F1              CPM_CFG_NAME:
 894  06F1 43 50 4D 2E      db 'CPM.CFG',0
 894  06F5 43 46 47 00
 895  06F9              UART_CFG_NAME:
 896  06F9 55 41 52 54      db 'UART.CFG',0
 896  06FD 2E 43 46 47
 896  0701 00
 897  0702
 898  0702
 899  0702              first_eight_bytes:
 900  0702 C3 03 F4 00      db $C3, $03, $F4, $00, $00, $C3, $00, $EA
 900  0706 00 C3 00 EA
 901  070A              ; JP BIOS-warm-boot, 0, 0, JP BDOS
 902  070A
 903  070A
 904  070A              filesize_buffer equ $C000
 905  070A
 906  070A              filesize_buffer_copy equ filesize_buffer+6
 907  070A
 908  070A              loader_stack equ filesize_buffer_copy+100
 909  070A
 910  070A
 911  070A              filesize_units:
 912  070A 00               ds 1
 913  070B
 914  070B              dma_address:
 915  070B 00 00            ds 2
 916  070D
 917  070D
 918  070D              config_file_loc equ $9000
 919  070D              auto_run_char   equ $8FFF
 920  070D
 921  070D              filename_buffer equ 65535-20
 922  070D              DRIVE_NAME      equ filename_buffer-2
 923  070D              disk_buffer     equ DRIVE_NAME-36
 924  070D
 925  070D              core_location   equ disk_buffer-2         ; Stores the core_start location
 926  070D              bios_location   equ core_location-2       ; Stores the bios_start location
 927  070D              bdos_location   equ bios_location-2       ; Stores the bdos_start location
 928  070D              ccp_location    equ bdos_location-2        ; Stores the ccp_start location
 929  070D              ccp_name        equ ccp_location-13            ; stores the name of the ccp file, e.g. MYCCP.BIN with a zero terminator
 930  070D
 931  070D              baud_rate_divisor   equ ccp_name-1
 932  070D              flow_control_value  equ baud_rate_divisor-1
 933  070D
 934  070D                  include "uart.asm"
# file opened: uart.asm
   1+ 070D              ; uart routines
   2+ 070D              ; These are routines connected with the 16C550 uart.
   3+ 070D
   4+ 070D              unimplemented_start_monitor:
   5+ 070D              	; Not implemented yet
   6+ 070D C9           	ret
   7+ 070E
   8+ 070E              UART_FREQUENCY: EQU 19660800	; 82C50 | 16C550 CLOCK
   9+ 070E
  10+ 070E 80 00        UART_BAUD_9600:		DW	UART_FREQUENCY/(9600 * 16)
  11+ 0710 55 00        UART_BAUD_14400:	DW	UART_FREQUENCY/(14400 * 16)
  12+ 0712 40 00        UART_BAUD_19200:	DW	UART_FREQUENCY/(19200 * 16)
  13+ 0714 20 00        UART_BAUD_38400:	DW	UART_FREQUENCY/(38400 * 16)
  14+ 0716 15 00        UART_BAUD_57600:	DW	UART_FREQUENCY/(57600 * 16)
  15+ 0718 0A 00        UART_BAUD_115200:	DW	UART_FREQUENCY/(115200 * 16)
  16+ 071A
  17+ 071A              ; Initialises the 16c550c UART for input/output
  18+ 071A              ;configure_uart:
  19+ 071A              	; Configure the UART 16550 after a reset.
  20+ 071A              	; For the sake of definitely getting the job done, let's pause here for ages before doing it.
  21+ 071A              	; Without this pause the Z80 can get started before the UART is ready.
  22+ 071A              	; Don't ask me how I know this.
  23+ 071A              	;
  24+ 071A              	; Pass in the required BAUD rate divisor in b.
  25+ 071A              	; Pass in the required hardware flow control in c.
  26+ 071A              ;	push bc
  27+ 071A              ;	call long_pause
  28+ 071A              ;	pop bc
  29+ 071A
  30+ 071A              ;	LD		A,	0x00
  31+ 071A              ;	OUT 	(uart_IER),A			; Disable interrupts
  32+ 071A
  33+ 071A              ;    ld 		A,	80H                 ; Go into "Divisor Latch Setting mode"
  34+ 071A              ;    out 	(uart_LCR),a            ; by writing 1 into bit 7 of the Line Control register
  35+ 071A              ;    nop								; These tiny "nop" pauses probably do nothing. TODO: Try removing them!
  36+ 071A
  37+ 071A              ;    ld 		A, b                    ; low byte of divisor
  38+ 071A              ;    out 	(uart_tx_rx), A
  39+ 071A              ;    nop
  40+ 071A              ;    ld 		A, 0                          ; high byte
  41+ 071A              ;    out 	(uart_IER), A
  42+ 071A              ;    nop
  43+ 071A
  44+ 071A              ;    ld a,03H                        ; Configure stop bits etc, and exit
  45+ 071A                                                  ; "Divisor latch setting mode"
  46+ 071A
  47+ 071A              ;    out (uart_LCR),a                ; 8 bits, no parity, 1 stop bit, bit 7 = 0
  48+ 071A              ;	nop								; a slight pause to allow the UART to get going
  49+ 071A
  50+ 071A              ;	ld a, 0x81 						;%10000001					; Turn on FIFO, with trigger level of 8.
  51+ 071A              ;	out (uart_ISR), a				; This definitely helps receive 16 chars very fast!
  52+ 071A
  53+ 071A              	;ld a, c
  54+ 071A              	;cp 0
  55+ 071A              	;jr z, flowcontrol_done
  56+ 071A
  57+ 071A              	;LD      A,0x00                  ;no flow control
  58+ 071A              	;ld a, %00100010
  59+ 071A              	;out (uart_MCR), a				; Enable auto flow control for /RTS and /CTS
  60+ 071A              ;	ret
  61+ 071A              flowcontrol_done:
  62+ 071A 00           	nop
  63+ 071B 00           	nop
  64+ 071C C9               ret
  65+ 071D
  66+ 071D              configure_uart:
  67+ 071D F5           UART_INIT:	PUSH	AF
  68+ 071E 7E           			LD		A,(HL)
  69+ 071F 23           			INC 	HL
  70+ 0720 66           			LD		H,(HL)
  71+ 0721 6F           			LD 		L,A
  72+ 0722 3E 00        			LD		A,0x00
  72+ 0724 D3 B9          OUT (uart_IER),A	; Disable interrupts
  73+ 0726 3E 80        			LD		A,0x80
  73+ 0728 D3 BB          OUT (uart_LCR),A 	; Turn DLAB on
  74+ 072A 7D           			LD		A,L
  74+ 072B D3 B8         	OUT (uart_tx_rx),A	; Set divisor low
  75+ 072D 7C           			LD		A,H
  75+ 072E D3 B9         	OUT (uart_IER),A	; Set divisor high
  76+ 0730 F1           			POP		AF
  76+ 0731 D3 BB         		OUT (uart_LCR),A	; Write out flow control bits 8,1,N
  77+ 0733 3E 81        			LD 		A, 0x81						; Turn on FIFO, with trigger level of 8.
  78+ 0735 D3 BA        			OUT (uart_ISR), A					; This turn on the 16bytes buffer!
  79+ 0737 C9           			RET
  80+ 0738
  81+ 0738              configure_uart_cpm:
  82+ 0738 26 00        			LD		H, 0x00
  83+ 073A 6F           			LD 		L,A
  84+ 073B 3E 00        			LD		A,0x00
  84+ 073D D3 B9          OUT (uart_IER),A	; Disable interrupts
  85+ 073F 3E 80        			LD		A,0x80
  85+ 0741 D3 BB          OUT (uart_LCR),A 	; Turn DLAB on
  86+ 0743 7D           			LD		A,L
  86+ 0744 D3 B8         	OUT (uart_tx_rx),A	; Set divisor low
  87+ 0746 7C           			LD		A,H
  87+ 0747 D3 B9         	OUT (uart_IER),A	; Set divisor high
  88+ 0749 3E 03        			LD		A, 0x03
  88+ 074B D3 BB         		OUT (uart_LCR),A	; Write out flow control bits 8,1,N
  89+ 074D 3E 81        			LD 		A, 0x81						; Turn on FIFO, with trigger level of 8.
  90+ 074F D3 BA        			OUT (uart_ISR), A					; This turn on the 16bytes buffer!
  91+ 0751 C9           			RET
  92+ 0752
  93+ 0752              UART_TX_WAIT		EQU	600		; Count before a TX times out
  94+ 0752
  95+ 0752              ; A: Data read
  96+ 0752              ; Returns:
  97+ 0752              ; F = C if character read
  98+ 0752              ; F = NC if no character read
  99+ 0752              ;
 100+ 0752 DB BD        UART_RX:	IN	A,(uart_LSR)		; Get the line status register
 101+ 0754 E6 01        			AND 	0x01				; Check for characters in buffer
 102+ 0756 C8           			ret	Z					; Just ret (with carry clear) if no characters
 103+ 0757 DB B8        			IN	A,(uart_tx_rx)		; Read the character from the UART receive buffer
 104+ 0759 37           			SCF 						; Set the carry flag
 105+ 075A C9           			RET
 106+ 075B
 107+ 075B              ; Read a character - waits for input
 108+ 075B              ; NB is the non-blocking variant
 109+ 075B              ;  A: ASCII character read
 110+ 075B              ;  F: NC if no character read (non-blocking)
 111+ 075B              ;  F:  C if character read (non-blocking)
 112+ 075B              ;
 113+ 075B CD 52 07     Read_Char:              CALL    UART_RX
 114+ 075E 30 FB                                JR      NC,Read_Char
 115+ 0760 C9                                   RET
 116+ 0761              ; Read a character - NO waits for input
 117+ 0761              ; NB is the non-blocking variant
 118+ 0761              ;  A: ASCII character read
 119+ 0761              ;  F: NC if no character read (non-blocking)
 120+ 0761              ;  F:  C if character read (non-blocking)
 121+ 0761 C3 52 07     Read_Char_NB:           JP      UART_RX
 122+ 0764
 123+ 0764              ; Print A to the screen as an ASCII character, preserving all registers.
 124+ 0764              print_a:
 125+ 0764 E5           UART_TX:	PUSH 	HL
 126+ 0765 D5           			PUSH 	DE
 127+ 0766 C5           			PUSH	BC						; Stack BC
 128+ 0767 F5           			PUSH	AF 						; Stack AF
 129+ 0768 06 58        			LD	B,low  UART_TX_WAIT			; Set CB to the transmit timeout
 130+ 076A 0E 02        			LD	C,high UART_TX_WAIT
 131+ 076C DB BD        1:			IN	A,(uart_LSR)			; Get the line status register
 132+ 076E E6 60        			AND 	0x60					; Check for TX empty
 133+ 0770 20 0B        			JR	NZ,2F						; If set, then TX is empty, goto transmit
 134+ 0772 10 F8        			DJNZ	1B
 134+ 0774 0D             DEC	C
 134+ 0775 20 F5          JR NZ,1B		; Otherwise loop
 135+ 0777 F1           			POP	AF							; We've timed out at this point so
 136+ 0778 B7           			OR	A							; Clear the carry flag and preserve A
 137+ 0779 C1           			POP	BC							; Restore the stack
 138+ 077A D1           			POP DE
 139+ 077B E1           			POP	HL
 140+ 077C C9           			RET
 141+ 077D F1           2:			POP	AF							; Good to send at this point, so
 142+ 077E D3 B8        			OUT	(uart_tx_rx),A			; Write the character to the UART transmit buffer
 143+ 0780 CD 88 07     			call	delay2
 144+ 0783 C1           			POP	BC							; Restore the stack
 145+ 0784 D1           			POP DE
 146+ 0785 E1           			POP	HL
 147+ 0786 37           			SCF								; Set the carry flag
 148+ 0787 C9           			RET
 149+ 0788              ;******************************************************************
 150+ 0788              ; This routine delay 746us
 151+ 0788              delay2:
 152+ 0788 F5           			PUSH   AF
 153+ 0789 3E FF        			LD     A, 0xFF
 154+ 078B 3D           delay2loop: DEC    A
 155+ 078C C2 8B 07     			JP     NZ, delay2loop  ; JUMP TO DELAYLOOP2 IF A <> 0.
 156+ 078F F1           			POP    AF
 157+ 0790 C9           			RET
 158+ 0791
 159+ 0791              ;    push af                         ; Store A for a bit
 160+ 0791              ;print_a1:
 161+ 0791              ;    in a,(uart_LSR)                 ; check UART is ready to send.
 162+ 0791              ;    bit 5,a                         ; zero flag set to true if bit 5 is 0
 163+ 0791              ;    jp z, print_a1                  ; non-zero = ready for next char.;
 164+ 0791
 165+ 0791              ;    pop af                          ; UART IS READY, GET OLD "A" BACK
 166+ 0791              ;    out (uart_tx_rx),a              ; AND SEND IT OUT
 167+ 0791              ;	ret
 168+ 0791
 169+ 0791              newline:
 170+ 0791 3E 0D        	ld a,13
 171+ 0793 CD 64 07     	call print_a
 172+ 0796 3E 0A        	ld a,10
 173+ 0798 CD 64 07     	call print_a
 174+ 079B C9           	ret
 175+ 079C
 176+ 079C              space:
 177+ 079C 3E 20        	ld a,32
 178+ 079E CD 64 07     	call print_a
 179+ 07A1 C9           	ret
 180+ 07A2
 181+ 07A2              ; To receive a char over Serial we need to check if there is one. If not we return 0.
 182+ 07A2              ; If there is, we get it and return it (in a).
 183+ 07A2              char_in:
 184+ 07A2 DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 185+ 07A4 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 186+ 07A6              							; "logic 0 = no data in receive holding register."
 187+ 07A6 CA AC 07     	jp z,char_in1    		; zero = no char received
 188+ 07A9 DB B8        	in a,(uart_tx_rx)		; Get the incoming char
 189+ 07AB C9           	ret						; Return it in A
 190+ 07AC              char_in1:
 191+ 07AC 3E 00        	ld a,0					; Return a zero in A
 192+ 07AE C9           	ret
 193+ 07AF
 194+ 07AF              char_available:
 195+ 07AF DB BD        	in a,(uart_LSR)			; get status from Line Status Register
 196+ 07B1 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
 197+ 07B3              							; "logic 0 = no data in receive holding register."
 198+ 07B3 CA B9 07     	jp z,char_available1	; zero = no char received
 199+ 07B6 3E FF        	ld a, $FF		        ; return true
 200+ 07B8 C9           	ret						; in A
 201+ 07B9              char_available1:
 202+ 07B9 3E 00        	ld a,0					; Return a zero in A
 203+ 07BB C9           	ret
 204+ 07BC
 205+ 07BC
 206+ 07BC              long_pause:
 207+ 07BC 01 E8 FD     	ld bc,65000
 208+ 07BF 18 08            jr pause0
 209+ 07C1              medium_pause:
 210+ 07C1 01 C8 AF     	ld bc,45000
 211+ 07C4 18 03            jr pause0
 212+ 07C6              short_pause:
 213+ 07C6 01 64 00     	ld bc,100
 214+ 07C9              pause0:
 215+ 07C9 0B           	dec bc
 216+ 07CA 78           	ld a,b
 217+ 07CB B1           	or c
 218+ 07CC C2 C9 07     	jp nz,pause0
 219+ 07CF C9           	ret
 220+ 07D0
 221+ 07D0              disk_toggle:
 222+ 07D0 DB BC        	in a, (uart_MCR)
 223+ 07D2 E6 04        	and %00000100
 224+ 07D4 28 07        	jr z, disk_on
 225+ 07D6              	; fall through to...
 226+ 07D6              disk_off:
 227+ 07D6               	; disk light off
 228+ 07D6 DB BC        	in a, (uart_MCR)
 229+ 07D8 E6 FB        	and %11111011
 230+ 07DA D3 BC        	out (uart_MCR), a
 231+ 07DC C9           	ret
 232+ 07DD
 233+ 07DD              disk_on:
 234+ 07DD              	; disk light on
 235+ 07DD DB BC        	in a, (uart_MCR)
 236+ 07DF F6 04        	or %00000100
 237+ 07E1 D3 BC        	out (uart_MCR), a
 238+ 07E3 C9           	ret
 239+ 07E4
 240+ 07E4              user_on:
 241+ 07E4              	; user light on
 242+ 07E4 DB BC        	in a, (uart_MCR)
 243+ 07E6 F6 01        	or %00000001
 244+ 07E8 D3 BC        	out (uart_MCR), a
 245+ 07EA C9           	ret
 246+ 07EB
 247+ 07EB              user_toggle:
 248+ 07EB              	; user1 light invert
 249+ 07EB DB BC        	in a, (uart_MCR)
 250+ 07ED E6 01        	and %00000001
 251+ 07EF 28 F3        	jr z, user_on
 252+ 07F1              	; fall through to...
 253+ 07F1              user_off:
 254+ 07F1               	; user light off
 255+ 07F1 DB BC        	in a, (uart_MCR)
 256+ 07F3 E6 FE        	and %11111110
 257+ 07F5 D3 BC        	out (uart_MCR), a
 258+ 07F7 C9           	ret
 259+ 07F8
 260+ 07F8              rom_toggle:
 261+ 07F8 DB BC        	in a, (uart_MCR)
 262+ 07FA E6 08        	and %00001000
 263+ 07FC 28 07        	jr z, rom_off
 264+ 07FE              	; fall through to...
 265+ 07FE              rom_on:
 266+ 07FE              	; rom light on
 267+ 07FE DB BC        	in a, (uart_MCR)
 268+ 0800 E6 F7        	and %11110111
 269+ 0802 D3 BC        	out (uart_MCR), a
 270+ 0804 C9           	ret
 271+ 0805
 272+ 0805              rom_off:
 273+ 0805              	; rom light off
 274+ 0805 DB BC        	in a, (uart_MCR)
 275+ 0807 F6 08        	or %00001000
 276+ 0809 D3 BC        	out (uart_MCR), a
 277+ 080B C9           	ret
 278+ 080C
 279+ 080C              	include "port_numbers.asm"
# file opened: port_numbers.asm
   1++080C              ; port_numbers.asm
   2++080C
   3++080C              ; Here are the port numbers for various UART registers:
   4++080C              uart_tx_rx 		equ   0xB8   ; 	8
   5++080C              uart_IER 		equ   0xB9   ; 	9
   6++080C              uart_ISR 		equ   0xBA   ;  10  ; Also known as FCR
   7++080C              uart_LCR 		equ   0xBB   ;  11
   8++080C              uart_MCR 		equ   0xBC   ;  12  ; modem control reg
   9++080C              uart_LSR 		equ   0xBD   ;  13
  10++080C              uart_MSR 		equ   0xBE   ;  14
  11++080C              uart_scratch 	equ   0xBF   ;  15
  12++080C
  13++080C              PIO_A	equ	0xA8		; CA80 user 8255 base address 	  (port A)
  14++080C              PIO_B	equ	0xA9		; CA80 user 8255 base address + 1 (port B)
  15++080C              PIO_C	equ	0xAA		; CA80 user 8255 base address + 2 (fport C)
  16++080C              PIO_M	equ	0xAB		; CA80 user 8255 control register
  17++080C
# file closed: port_numbers.asm
 280+ 080C
# file closed: uart.asm
 935  080C                  include "message.asm"
# file opened: message.asm
   1+ 080C              ; message
   2+ 080C              message:
   3+ 080C E3           	ex (sp), hl                   ; top of stack is now mangled, but hl is pointing to our message
   4+ 080D F5           	push	af
   5+ 080E C5           	push	bc
   6+ 080F D5           	push	de
   7+ 0810
   8+ 0810              message_loop_001:
   9+ 0810 7E           	ld a, (hl)
  10+ 0811 FE 00        	cp 0
  11+ 0813 28 06        	jr z, message_complete_001
  12+ 0815 23           	inc hl
  13+ 0816 CD 64 07     	call print_a                  ; print a character (Mangles 2 items below top of stack)
  14+ 0819 18 F5        	jr message_loop_001               ; Loop until done
  15+ 081B
  16+ 081B              message_complete_001:
  17+ 081B D1           	pop de
  18+ 081C C1           	pop bc
  19+ 081D F1           	pop af
  20+ 081E 23           	inc hl
  21+ 081F E3           	ex (sp), hl
  22+ 0820 C9           	ret
  23+ 0821
  24+ 0821
  25+ 0821              ; -------------------------------------------------------------------------------------------------
  26+ 0821
  27+ 0821              ;message:
  28+ 0821              ;	; Use this handy helper function to display an inline message easily.
  29+ 0821              ;	; It preserves all registers (which was tricky to do).
  30+ 0821              ;	; This expects to be called from code where the message follows the "call debug" in-line, like this:
  31+ 0821              ;	;
  32+ 0821              ;	; ld a, 10 ; (or whatever code you like)
  33+ 0821              ;	; call message
  34+ 0821              ;	; db "my message", 0
  35+ 0821              ;	; ld b, 10 ; (or whatever code you like)
  36+ 0821              ;	;
  37+ 0821              ;	; When we return we make sure sp is pointing to the next line of code after the message.
  38+ 0821              ;
  39+ 0821              ;							; sp -> ret-addr
  40+ 0821              ;
  41+ 0821              ;	push af					; We have stored af
  42+ 0821              ;	push af					; We do this 3 times
  43+ 0821              ;	push af					; to allow spare stack space.
  44+ 0821              ;							; sp -> AF, AF, AF, ret-addr
  45+ 0821              ;	push bc					; sp -> BC, AF, AF, AF, ret-addr
  46+ 0821              ;	push de					; sp -> DE, BC, AF, AF, AF, ret-addr
  47+ 0821              ;	push hl					; sp -> HL, DE, BC, AF, AF, AF, ret-addr
  48+ 0821              ;
  49+ 0821              ;	inc sp
  50+ 0821              ;	inc sp					; adjust the stack to overlook the stored afx3, BC, DE & HL
  51+ 0821              ;							; HL, sp -> DE, BC, AF, AF, AF, ret-addr
  52+ 0821              ;	inc sp
  53+ 0821              ;	inc sp					; HL, DE, sp -> BC, AF, AF, AF, ret-addr
  54+ 0821              ;
  55+ 0821              ;	inc sp
  56+ 0821              ;	inc sp					; HL, DE, BC, sp -> AF, AF, AF, ret-addr
  57+ 0821              ;
  58+ 0821              ;	inc sp
  59+ 0821              ;	inc sp
  60+ 0821              ;
  61+ 0821              ;	inc sp
  62+ 0821              ;	inc sp
  63+ 0821              ;
  64+ 0821              ;	inc sp
  65+ 0821              ;	inc sp					; HL, DE, BC, AF, AF, AF, sp -> ret-addr
  66+ 0821              ;
  67+ 0821              ;	ex (sp), hl				; top of stack is now mangled, but hl is pointing to our message
  68+ 0821              ;							; HL, DE, BC, AF, AF, AF, sp -> HL
  69+ 0821              ;
  70+ 0821              ;message_loop:
  71+ 0821              ;	ld a, (hl)
  72+ 0821              ;	cp 0
  73+ 0821              ;	jr z,message_complete
  74+ 0821              ;	inc hl
  75+ 0821              ;	call print_a			; print a character (Mangles 2 items below top of stack)
  76+ 0821              ;	jr message_loop			; Loop until done
  77+ 0821              ;							; HL, DE, BC, AF, XX, XX, sp -> HL
  78+ 0821              ;
  79+ 0821              ;message_complete:
  80+ 0821              ;	inc hl
  81+ 0821              ;	ex (sp), hl				; restore top of stack, after we have incremented it so it points to the subsequent instruction
  82+ 0821              ;							; HL, DE, BC, AF, XX, XX, sp -> new-ret-addr
  83+ 0821              ;	dec sp
  84+ 0821              ;	dec sp
  85+ 0821              ;
  86+ 0821              ;	dec sp
  87+ 0821              ;	dec sp
  88+ 0821              ;
  89+ 0821              ;	dec sp
  90+ 0821              ;	dec sp					; adjust stack because of our pushed "af"
  91+ 0821              ;							; HL, DE, BC, sp -> AF, XX, XX, new-ret-addr
  92+ 0821              ;	dec sp
  93+ 0821              ;	dec sp					; adjust stack because of our pushed "BC"
  94+ 0821              ;							; HL, DE, sp -> BC, AF, XX, XX, new-ret-addr
  95+ 0821              ;	dec sp
  96+ 0821              ;	dec sp					; adjust stack because of our pushed "DE"
  97+ 0821              ;							; HL, sp -> DE, BC, AF, XX, XX, new-ret-addr
  98+ 0821              ;	dec sp
  99+ 0821              ;	dec sp					; adjust stack because of our pushed "HL"
 100+ 0821              ;							; sp -> HL, DE, BC, AF, XX, XX, new-ret-addr
 101+ 0821              ;
 102+ 0821              ;	pop hl					; HL is restored
 103+ 0821              ;							; sp -> DE, BC, AF, XX, XX, new-ret-addr
 104+ 0821              ;	pop de					; DE is restored
 105+ 0821              ;							; sp -> BC, AF, XX, XX, new-ret-addr
 106+ 0821              ;	pop bc					; BC is restored
 107+ 0821              ;							; sp -> AF, XX, XX, new-ret-addr
 108+ 0821              ;	pop af					; we have restored af
 109+ 0821              ;							; sp -> XX, XX, new-ret-addr
 110+ 0821              ;
 111+ 0821              ;	inc sp
 112+ 0821              ;	inc sp
 113+ 0821              ;	inc sp
 114+ 0821              ;	inc sp
 115+ 0821              ;							; sp -> new-ret-addr
 116+ 0821              ;
 117+ 0821              ;	ret						; return to the instruction after the message
 118+ 0821
 119+ 0821              show_hl_as_hex:
 120+ 0821 7C               ld a, h
 121+ 0822 CD 2A 08         call show_a_as_hex
 122+ 0825 7D               ld a, l
 123+ 0826 CD 2A 08         call show_a_as_hex
 124+ 0829 C9               ret
 125+ 082A
 126+ 082A              show_a_as_hex:
 127+ 082A F5               push af
 128+ 082B CB 3F            srl a
 129+ 082D CB 3F            srl a
 130+ 082F CB 3F            srl a
 131+ 0831 CB 3F            srl a
 132+ 0833 C6 30            add a,'0'
 133+ 0835 FE 3A        	cp ':'
 134+ 0837 38 02        	jr c, show_a_as_hex1
 135+ 0839 C6 07        	add a, 7
 136+ 083B              show_a_as_hex1:
 137+ 083B CD 64 07         call print_a
 138+ 083E F1               pop af
 139+ 083F E6 0F            and %00001111
 140+ 0841 C6 30            add a,'0'
 141+ 0843 FE 3A        	cp ':'
 142+ 0845 38 02        	jr c, show_a_as_hex2
 143+ 0847 C6 07        	add a, 7
 144+ 0849              show_a_as_hex2:
 145+ 0849 CD 64 07         call print_a
 146+ 084C C9               ret
 147+ 084D
 148+ 084D              ;---------------------------------------------------
 149+ 084D              ; show_all shows all the CPU registers!
 150+ 084D
 151+ 084D              show_all:
 152+ 084D ED 73 AC 08  	ld (store_sp), sp
 153+ 0851 F5           	push af
 154+ 0852 E5           	push hl
 155+ 0853 D5           	push de
 156+ 0854 C5           	push bc
 157+ 0855
 158+ 0855 CD 0C 08     	call message
 159+ 0858 41 3D 00     	db 'A=',0
 160+ 085B CD 2A 08     	call show_a_as_hex
 161+ 085E
 162+ 085E E1           	pop hl
 163+ 085F CD 0C 08     	call message
 164+ 0862 2C 20 42 43  	db ', BC=',0
 164+ 0866 3D 00
 165+ 0868 CD 21 08     	call show_hl_as_hex
 166+ 086B C5           	push bc
 167+ 086C
 168+ 086C C1           	pop bc
 169+ 086D E1           	pop hl
 170+ 086E CD 0C 08     	call message
 171+ 0871 2C 20 44 45  	db ', DE=',0
 171+ 0875 3D 00
 172+ 0877 CD 21 08     	call show_hl_as_hex
 173+ 087A D5           	push de
 174+ 087B C5           	push bc
 175+ 087C
 176+ 087C C1           	pop bc
 177+ 087D D1           	pop de
 178+ 087E E1           	pop hl
 179+ 087F CD 0C 08     	call message
 180+ 0882 2C 20 48 4C  	db ', HL=',0
 180+ 0886 3D 00
 181+ 0888 CD 21 08     	call show_hl_as_hex
 182+ 088B E5           	push hl
 183+ 088C D5           	push de
 184+ 088D C5           	push bc
 185+ 088E
 186+ 088E CD 0C 08     	call message
 187+ 0891 2C 20 53 50  	db ', SP=',0
 187+ 0895 3D 00
 188+ 0897 2A AC 08     	ld hl, (store_sp)
 189+ 089A CD 21 08     	call show_hl_as_hex
 190+ 089D
 191+ 089D 3E 0D        	ld a, 13
 192+ 089F CD 64 07     	call print_a
 193+ 08A2 3E 0A        	ld a, 10
 194+ 08A4 CD 64 07     	call print_a
 195+ 08A7
 196+ 08A7 C1           	pop bc
 197+ 08A8 D1           	pop de
 198+ 08A9 E1           	pop hl
 199+ 08AA F1           	pop af
 200+ 08AB C9           	ret
 201+ 08AC
 202+ 08AC              store_sp:
 203+ 08AC 00 00        	 ds 2
# file closed: message.asm
 936  08AE                  include "memorystick.asm"
# file opened: memorystick.asm
   1+ 08AE              ; memorystick.asm
   2+ 08AE
   3+ 08AE              store_de:
   4+ 08AE 00 00            dw 0
   5+ 08B0              store_a:
   6+ 08B0 00               db 0
   7+ 08B1              ;-----------------------------------------------------------------
   8+ 08B1              ; For DIRectory listing, the filename is passed in the filename_buffer.
   9+ 08B1              ; DE -> DMA AREA
  10+ 08B1              ; a = Current User
  11+ 08B1              ; It will be something like A/ffffffff.xxx
  12+ 08B1              ; A result gets put into the area pointed to by DE, normally the DMA area, in 8.3 format
  13+ 08B1              dir:
  14+ 08B1 ED 53 AE 08      ld (store_de), de
  15+ 08B5 32 B0 08         ld (store_a), a
  16+ 08B8
  17+ 08B8 CD DD 07         call disk_on
  18+ 08BB
  19+ 08BB 21 2B 0F         ld hl, CPM_FOLDER_NAME                    ; Start at /CPM
  20+ 08BE CD 25 0E         call open_file
  21+ 08C1 21 38 0F         ld hl, CPM_DISKS_NAME                    ; Then DISKS
  22+ 08C4 CD 25 0E         call open_file
  23+ 08C7
  24+ 08C7 21 EB FF         ld hl, filename_buffer
  25+ 08CA 7E               ld a, (hl)
  26+ 08CB 21 E9 FF         ld hl, DRIVE_NAME                       ; Move to "A" .. "P" for required disk
  27+ 08CE 77               ld (hl), a
  28+ 08CF 23               inc hl
  29+ 08D0 36 00            ld (hl), 0
  30+ 08D2 2B               dec hl
  31+ 08D3 CD 25 0E         call open_file
  32+ 08D6
  33+ 08D6                  ; Now user number (if greater than 0)
  34+ 08D6 3A B0 08         ld a, (store_a)
  35+ 08D9 FE 00            cp 0
  36+ 08DB 28 0E            jr z, ignore_user
  37+ 08DD
  38+ 08DD CD 7F 0C         call convert_user_number_to_folder_name
  39+ 08E0 21 E9 FF         ld hl, DRIVE_NAME                   ; Move to "1" .. "F" for required user
  40+ 08E3 77               ld (hl), a
  41+ 08E4 23               inc hl
  42+ 08E5 36 00            ld (hl), 0
  43+ 08E7 2B               dec hl
  44+ 08E8 CD 25 0E         call open_file
  45+ 08EB
  46+ 08EB              ignore_user:
  47+ 08EB 21 29 0F         ld hl, STAR_DOT_STAR                    ; Specify search pattern "*"
  48+ 08EE CD 25 0E         call open_file
  49+ 08F1
  50+ 08F1                  ; Read a file if there is something to read
  51+ 08F1              dir_loop:
  52+ 08F1                  ; at this point DE is in store_de, containing address of dma-area
  53+ 08F1 FE 1D            cp USB_INT_DISK_READ
  54+ 08F3 28 2E            jr z, dir_loop_good
  55+ 08F5
  56+ 08F5 FE 42            cp ERR_MISS_FILE    ; This is what you normally get at the end of a dir listing
  57+ 08F7 28 24            jr z, dir_no_file
  58+ 08F9
  59+ 08F9 FE A1            cp ERR_BPB_ERROR    ; This means a disk format error
  60+ 08FB 20 20            jr nz, dir_no_file
  61+ 08FD
  62+ 08FD CD 0C 08         call message
  63+ 0900 55 53 42 20      db 'USB Drive ERROR: FAT only!',13,10,0
  63+ 0904 44 72 69 76
  63+ 0908 65 20 45 52
  63+ 090C 52 4F 52 3A
  63+ 0910 20 46 41 54
  63+ 0914 20 6F 6E 6C
  63+ 0918 79 21 0D 0A
  63+ 091C 00
  64+ 091D              dir_no_file:
  65+ 091D CD D6 07         call disk_off
  66+ 0920 3E FF            ld a, 255
  67+ 0922 C9               ret
  68+ 0923
  69+ 0923              dir_loop_good:
  70+ 0923                  ; at this point DE is on stack, containing address of dma-area
  71+ 0923 3E 27            ld a, RD_USB_DATA0
  72+ 0925 CD D5 0E         call send_command_byte
  73+ 0928 CD DE 0E         call read_data_byte                 ; Find out how many bytes there are to read
  74+ 092B
  75+ 092B CD E4 0E         call read_data_bytes_into_buffer    ; read them into disk_buffer
  76+ 092E FE 20            cp 32                               ; Did we read at least 32 bytes?
  77+ 0930 30 03            jr nc, good_length
  78+ 0932 C3 B5 09         jp dir_next
  79+ 0935
  80+ 0935              good_length:
  81+ 0935                  ; at this point DE is in store_de, containing address of dma-area
  82+ 0935                  ; Get the attributes for this entry. $02 = system, $04 = hidden, $10 = directory
  83+ 0935 CD D6 07         call disk_off
  84+ 0938 3A D0 FF         ld a, (disk_buffer+11)
  85+ 093B E6 16            and $16                         ; Check for hidden or system files, or directories
  86+ 093D CA 43 09         jp z, it_is_not_system
  87+ 0940 C3 B5 09         jp dir_next                     ; and skip accordingly.
  88+ 0943
  89+ 0943              it_is_not_system:
  90+ 0943                  ; Does it match the search pattern?
  91+ 0943 06 0B            ld b, 11
  92+ 0945 21 C5 FF         ld hl, disk_buffer
  93+ 0948 11 ED FF         ld de, filename_buffer+2
  94+ 094B              matching_loop:
  95+ 094B                  ; If the filename_buffer has a '.' then skip over it
  96+ 094B                  ; and move disk_buffer to start of extension
  97+ 094B 1A               ld a, (de)
  98+ 094C FE 2E            cp '.'
  99+ 094E 20 06            jr nz, matching_loop1
 100+ 0950
 101+ 0950 13               inc de
 102+ 0951 21 CD FF         ld hl, disk_buffer+8
 103+ 0954 06 03            ld b, 3
 104+ 0956
 105+ 0956              matching_loop1
 106+ 0956 1A               ld a, (de)
 107+ 0957 FE 3F            cp '?'
 108+ 0959 28 05            jr z, matching_loop_good
 109+ 095B BE               cp (hl)
 110+ 095C 28 02            jr z, matching_loop_good
 111+ 095E 18 55            jr dir_next
 112+ 0960
 113+ 0960              matching_loop_good:
 114+ 0960 13               inc de
 115+ 0961 23               inc hl
 116+ 0962 10 E7            djnz matching_loop
 117+ 0964
 118+ 0964                  ; Copy 11 byte filename + extension
 119+ 0964 01 0B 00         ld bc, 11
 120+ 0967 21 C5 FF         ld hl, disk_buffer
 121+ 096A ED 5B AE 08      ld de, (store_de)
 122+ 096E
 123+ 096E                  ; The Usernumber goes into the first byte of the FCB
 124+ 096E 3A B0 08         ld a, (store_a)
 125+ 0971 E6 0F            and %00001111
 126+ 0973 12               ld (de), a                      ; Store user number in FCB result
 127+ 0974 13               inc de
 128+ 0975 ED B0            ldir                            ; Copy filename & extension
 129+ 0977
 130+ 0977                  ; Fill in a few more details. File size into normal place, plus random record info.
 131+ 0977                  ; The filesize is a 32 bit number in FAT_DIR_INFO at loc $1C, 1D, 1E and 1F.
 132+ 0977                  ; We want it in 128 byte sectors, so need to divide by 128.
 133+ 0977 21 E1 FF         ld hl, disk_buffer+$1C
 134+ 097A 5E               ld e, (hl)
 135+ 097B 23               inc hl
 136+ 097C 56               ld d, (hl)
 137+ 097D 23               inc hl
 138+ 097E 4E               ld c, (hl)
 139+ 097F 23               inc hl
 140+ 0980 46               ld b, (hl)                          ; BCDE has file size
 141+ 0981 EB               ex de, hl                           ; 32-bit filesize now in BCHL
 142+ 0982
 143+ 0982                  ; Divide by 128
 144+ 0982 CB 25            sla l                               ; Shift all left by 1 bit
 145+ 0984 CB 14            rl h
 146+ 0986 CB 11            rl c
 147+ 0988 CB 10            rl b
 148+ 098A
 149+ 098A 6C               ld l, h
 150+ 098B 61               ld h, c
 151+ 098C 48               ld c, b
 152+ 098D 06 00            ld b, 0                             ; We've shifted right 8 bits, so effectively divided by 128!
 153+ 098F
 154+ 098F ED 5B AE 08      ld de, (store_de)
 155+ 0993
 156+ 0993 C5               push bc                             ; Store the size that is in bchl
 157+ 0994 E5               push hl
 158+ 0995 CD 2F 0C         call set_random_pointer_in_fcb      ; store hl in FCB random pointer (bc is thrown away!)
 159+ 0998 E1               pop hl
 160+ 0999 C1               pop bc                              ; restore bchl
 161+ 099A
 162+ 099A EB               ex de, hl                           ; hl = fcb, bcde = filesize
 163+ 099B 2A AE 08         ld hl, (store_de)
 164+ 099E CD 3E 0C         call set_file_size_in_fcb
 165+ 09A1
 166+ 09A1                  ; Clear all 16 disk allocation bytes. TODO: Actually, fill with sensible values
 167+ 09A1 ED 5B AE 08      ld de, (store_de)
 168+ 09A5 21 10 00         ld hl, 16
 169+ 09A8 19               add hl, de
 170+ 09A9 EB               ex de, hl
 171+ 09AA 06 14            ld b, 16+4
 172+ 09AC 3E 00            ld a, 0
 173+ 09AE              clear_allocation_loop:
 174+ 09AE 12               ld (de), a
 175+ 09AF 13               inc de
 176+ 09B0 10 FC            djnz clear_allocation_loop
 177+ 09B2              good_length1:
 178+ 09B2 3E 00            ld a, 0                                 ; 0 = success
 179+ 09B4 C9               ret
 180+ 09B5
 181+ 09B5              dir_next:
 182+ 09B5 3E 33            ld a, FILE_ENUM_GO                      ; Go to next entry in the directory
 183+ 09B7 CD D5 0E         call send_command_byte
 184+ 09BA CD 1A 0F         call read_status_byte
 185+ 09BD C3 F1 08         jp dir_loop
 186+ 09C0
 187+ 09C0              ;-----------------------------------------
 188+ 09C0              ; Load bin File
 189+ 09C0              ; The filename needs to be in the filename buffer.
 190+ 09C0              ; The file must be in the /CPM folder.
 191+ 09C0              ; DE points to the location to load it into.
 192+ 09C0              ; The file is loaded into the workspace.
 193+ 09C0              ; There is no check whether the file is too big!!!!
 194+ 09C0              ; Returns zero flag set if success, zero flag cleared on file-not-found.
 195+ 09C0
 196+ 09C0              load_bin_file:
 197+ 09C0 D5               push de                             ; Store target location for later
 198+ 09C1 CD DD 07         call disk_on
 199+ 09C4 CD 4B 0D         call connect_to_disk
 200+ 09C7 CD 7A 0D         call mount_disk
 201+ 09CA
 202+ 09CA 21 2B 0F         ld hl, CPM_FOLDER_NAME              ; Start at /CPM
 203+ 09CD CD 25 0E         call open_file
 204+ 09D0
 205+ 09D0 21 EB FF         ld hl, filename_buffer              ; Specify filename
 206+ 09D3 CD 25 0E         call open_file
 207+ 09D6
 208+ 09D6 28 2B            jr z, load_file_found
 209+ 09D8 CD D6 07         call disk_off
 210+ 09DB CD 0C 08         call message
 211+ 09DE 46 69 6C 65      db 'File not found ',0
 211+ 09E2 20 6E 6F 74
 211+ 09E6 20 66 6F 75
 211+ 09EA 6E 64 20 00
 212+ 09EE 21 EB FF         ld hl, filename_buffer
 213+ 09F1              load_file1:
 214+ 09F1 7E               ld a, (hl)
 215+ 09F2 FE 00            cp 0
 216+ 09F4 28 06            jr z, load_file2
 217+ 09F6 CD 64 07         call print_a
 218+ 09F9 23               inc hl
 219+ 09FA 18 F5            jr load_file1
 220+ 09FC              load_file2:
 221+ 09FC CD 91 07         call newline
 222+ 09FF D1               pop de                              ; Keep stack clear!
 223+ 0A00 F6 01            or 1                                ; Clear zero flag for failure
 224+ 0A02 C9               ret
 225+ 0A03              load_file_found:
 226+ 0A03 CD D6 07         call disk_off
 227+ 0A06 3E 3A            ld a, BYTE_READ
 228+ 0A08 CD D5 0E         call send_command_byte
 229+ 0A0B 3E FF            ld a, 255                           ; Request all of the file
 230+ 0A0D CD B9 0E         call send_data_byte
 231+ 0A10 3E FF            ld a, 255                           ; Yes, all!
 232+ 0A12 CD B9 0E         call send_data_byte
 233+ 0A15
 234+ 0A15 3E 22            ld a, GET_STATUS
 235+ 0A17 CD D5 0E         call send_command_byte
 236+ 0A1A CD DE 0E         call read_data_byte
 237+ 0A1D E1               pop hl                              ; Get back the target address
 238+ 0A1E              load_loop1:
 239+ 0A1E FE 1D            cp USB_INT_DISK_READ
 240+ 0A20 20 25            jr nz, load_finished
 241+ 0A22
 242+ 0A22 E5               push hl
 243+ 0A23 CD DD 07         call disk_on
 244+ 0A26 3E 27            ld a, RD_USB_DATA0
 245+ 0A28 CD D5 0E         call send_command_byte
 246+ 0A2B CD DE 0E         call read_data_byte
 247+ 0A2E E1               pop hl
 248+ 0A2F CD E7 0E         call read_data_bytes_into_hl        ; Read this block of data
 249+ 0A32 E5               push hl
 250+ 0A33 CD D6 07         call disk_off
 251+ 0A36 3E 3B            ld a, BYTE_RD_GO
 252+ 0A38 CD D5 0E         call send_command_byte
 253+ 0A3B 3E 22            ld a, GET_STATUS
 254+ 0A3D CD D5 0E         call send_command_byte
 255+ 0A40 CD DE 0E         call read_data_byte
 256+ 0A43 E1               pop hl
 257+ 0A44 C3 1E 0A         jp load_loop1
 258+ 0A47              load_finished:
 259+ 0A47 E5               push hl
 260+ 0A48 CD 38 0E         call close_file
 261+ 0A4B E1               pop hl
 262+ 0A4C BF               cp a                                ; set zero flag for success
 263+ 0A4D C9               ret
 264+ 0A4E
 265+ 0A4E              ; ---------------------------------
 266+ 0A4E              ; Directory info read.
 267+ 0A4E              ; Reads a directory entry (of the currently open file) into disk_buffer
 268+ 0A4E              ; Returns ZERO FLAG = set if ok
 269+ 0A4E              dir_info_read:
 270+ 0A4E 3E 37            ld a, DIR_INFO_READ
 271+ 0A50 CD D5 0E         call send_command_byte
 272+ 0A53 3E FF            ld a, $FF                           ; Current open file
 273+ 0A55 CD B9 0E         call send_data_byte
 274+ 0A58
 275+ 0A58 CD 1A 0F         call read_status_byte
 276+ 0A5B FE 14            cp USB_INT_SUCCESS
 277+ 0A5D C0               ret nz
 278+ 0A5E
 279+ 0A5E 3E 27            ld a, RD_USB_DATA0
 280+ 0A60 CD D5 0E         call send_command_byte
 281+ 0A63 CD DE 0E         call read_data_byte                 ; Find out how many bytes there are to read
 282+ 0A66
 283+ 0A66 CD E4 0E         call read_data_bytes_into_buffer
 284+ 0A69 FE 20            cp $20                              ; Must have read 32 bytes
 285+ 0A6B C0               ret nz                              ; or else it is an error
 286+ 0A6C              ;     call message
 287+ 0A6C              ;     db 'Read this many bytes: ',0
 288+ 0A6C              ;     call show_a_as_hex
 289+ 0A6C              ;     call newline
 290+ 0A6C
 291+ 0A6C              ;     ld b, $20
 292+ 0A6C              ;     ld hl, disk_buffer
 293+ 0A6C              ; dir_info_read1:
 294+ 0A6C              ;     ld a, (hl)
 295+ 0A6C              ;     push hl
 296+ 0A6C              ;     push bc
 297+ 0A6C              ;     call show_a_as_hex
 298+ 0A6C              ;     ld a, ','
 299+ 0A6C              ;     call print_a
 300+ 0A6C              ;     pop bc
 301+ 0A6C              ;     pop hl
 302+ 0A6C              ;     inc hl
 303+ 0A6C              ;     djnz dir_info_read1
 304+ 0A6C              ;     call newline
 305+ 0A6C
 306+ 0A6C BF               cp a                                ; set zero flag for success
 307+ 0A6D C9               ret
 308+ 0A6E
 309+ 0A6E              ; DIR_INFO_WRITE
 310+ 0A6E              ; writes a dir_info block from disk_buffer to the USB drive
 311+ 0A6E              ; for the currently open file
 312+ 0A6E              dir_info_write:
 313+ 0A6E 3E 37            ld a, DIR_INFO_READ
 314+ 0A70 CD D5 0E         call send_command_byte
 315+ 0A73 3E FF            ld a, $FF                           ; Current open file
 316+ 0A75 CD B9 0E         call send_data_byte
 317+ 0A78
 318+ 0A78 CD 1A 0F         call read_status_byte
 319+ 0A7B                  ;call report_on_status
 320+ 0A7B FE 14            cp USB_INT_SUCCESS
 321+ 0A7D 20 28            jr nz, dir_info_write2
 322+ 0A7F
 323+ 0A7F 3E 2E            ld a, WR_OFS_DATA
 324+ 0A81 CD D5 0E         call send_command_byte
 325+ 0A84 3E 00            ld a, 0
 326+ 0A86 CD B9 0E         call send_data_byte
 327+ 0A89 3E 20            ld a, $20
 328+ 0A8B CD B9 0E         call send_data_byte
 329+ 0A8E 06 20            ld b, $20
 330+ 0A90 21 C5 FF         ld hl, disk_buffer
 331+ 0A93              dir_info_write1:
 332+ 0A93 7E               ld a, (hl)
 333+ 0A94 E5               push hl
 334+ 0A95 C5               push bc
 335+ 0A96 CD B9 0E         call send_data_byte
 336+ 0A99 C1               pop bc
 337+ 0A9A E1               pop hl
 338+ 0A9B 23               inc hl
 339+ 0A9C 10 F5            djnz dir_info_write1
 340+ 0A9E
 341+ 0A9E 3E 38            ld a, DIR_INFO_SAVE
 342+ 0AA0 CD D5 0E         call send_command_byte
 343+ 0AA3 CD DE 0E         call read_data_byte
 344+ 0AA6                  ;call report_on_status
 345+ 0AA6 C9               ret
 346+ 0AA7
 347+ 0AA7              dir_info_write2:
 348+ 0AA7 C9               ret
 349+ 0AA8
 350+ 0AA8              ;----------------------------------
 351+ 0AA8              ; WRITE TO FILE
 352+ 0AA8
 353+ 0AA8              write_to_file:
 354+ 0AA8                  ; writes 128 bytes from current location pointed to by DE, to the open file
 355+ 0AA8 D5               push de
 356+ 0AA9 3E 3C            ld a, BYTE_WRITE
 357+ 0AAB CD D5 0E         call send_command_byte
 358+ 0AAE
 359+ 0AAE                  ; Send number of bytes we are about to write, as 16 bit number, low first
 360+ 0AAE 3E 80            ld a, 128
 361+ 0AB0 CD B9 0E         call send_data_byte
 362+ 0AB3 3E 00            ld a, 0
 363+ 0AB5 CD B9 0E         call send_data_byte
 364+ 0AB8
 365+ 0AB8 E1               pop hl                              ; hl -> the data
 366+ 0AB9
 367+ 0AB9              write_loop
 368+ 0AB9 CD 1A 0F         call read_status_byte
 369+ 0ABC FE 1E            cp USB_INT_DISK_WRITE
 370+ 0ABE 20 24            jr nz, write_finished
 371+ 0AC0
 372+ 0AC0 E5               push hl
 373+ 0AC1                  ; Ask if we can send some bytes
 374+ 0AC1 3E 2D            ld a, WR_REQ_DATA
 375+ 0AC3 CD D5 0E         call send_command_byte
 376+ 0AC6 CD DE 0E         call read_data_byte
 377+ 0AC9 E1               pop hl
 378+ 0ACA FE 00            cp 0
 379+ 0ACC 28 16            jr z, write_finished
 380+ 0ACE
 381+ 0ACE                  ; push hl
 382+ 0ACE                  ; push af
 383+ 0ACE                  ; call message
 384+ 0ACE                  ; db 'Bytes to send: ',0
 385+ 0ACE                  ; pop af
 386+ 0ACE                  ; push af
 387+ 0ACE                  ; call show_a_as_hex
 388+ 0ACE                  ; call newline
 389+ 0ACE                  ; pop af
 390+ 0ACE                  ; pop hl
 391+ 0ACE
 392+ 0ACE 47               ld b, a
 393+ 0ACF              block_loop:
 394+ 0ACF 7E               ld a, (hl)
 395+ 0AD0 E5               push hl
 396+ 0AD1 C5               push bc
 397+ 0AD2 CD B9 0E         call send_data_byte
 398+ 0AD5 C1               pop bc
 399+ 0AD6 E1               pop hl
 400+ 0AD7 23               inc hl
 401+ 0AD8 10 F5            djnz block_loop
 402+ 0ADA
 403+ 0ADA E5               push hl
 404+ 0ADB 3E 3D            ld a, BYTE_WR_GO
 405+ 0ADD CD D5 0E         call send_command_byte
 406+ 0AE0 E1               pop hl
 407+ 0AE1 C3 B9 0A         jp write_loop
 408+ 0AE4
 409+ 0AE4              write_finished:
 410+ 0AE4 C9               ret
 411+ 0AE5
 412+ 0AE5
 413+ 0AE5              ;-------------------------------------------
 414+ 0AE5              ; ERASE FILE
 415+ 0AE5
 416+ 0AE5              erase_file:
 417+ 0AE5 3E 2F            ld a, SET_FILE_NAME
 418+ 0AE7 CD D5 0E         call send_command_byte
 419+ 0AEA 21 EB FF         ld hl, filename_buffer
 420+ 0AED CD BF 0E         call send_data_string
 421+ 0AF0 3E 35            ld a, FILE_ERASE
 422+ 0AF2 CD D5 0E         call send_command_byte
 423+ 0AF5 CD 1A 0F         call read_status_byte
 424+ 0AF8 C9               ret
 425+ 0AF9
 426+ 0AF9              show_filename_buffer:
 427+ 0AF9 21 EB FF         ld hl, filename_buffer
 428+ 0AFC 06 14            ld b, 20
 429+ 0AFE              show_filename_buffer1:
 430+ 0AFE 7E               ld a, (hl)
 431+ 0AFF FE 20            cp 32
 432+ 0B01 38 0A            jr c, control_char
 433+ 0B03              show_filename_buffer2
 434+ 0B03 CD 64 07         call print_a
 435+ 0B06 23               inc hl
 436+ 0B07 10 F5            djnz show_filename_buffer1
 437+ 0B09 CD 91 07         call newline
 438+ 0B0C C9               ret
 439+ 0B0D
 440+ 0B0D              control_char:
 441+ 0B0D C6 40            add a, 64
 442+ 0B0F 4F               ld c, a
 443+ 0B10 3E 5E            ld a, '^'
 444+ 0B12 CD 64 07         call print_a
 445+ 0B15 79               ld a, c
 446+ 0B16 18 EB            jr show_filename_buffer2
 447+ 0B18
 448+ 0B18              check_tbasic_structure:
 449+ 0B18                  ; Check that there is a /TBASIC folder
 450+ 0B18                  ; and if not, make it!
 451+ 0B18 CD 0C 08         call message
 452+ 0B1B 43 68 65 63      db 'Checking /TBASIC',13,10,0
 452+ 0B1F 6B 69 6E 67
 452+ 0B23 20 2F 54 42
 452+ 0B27 41 53 49 43
 452+ 0B2B 0D 0A 00
 453+ 0B2E
 454+ 0B2E 21 30 0F         ld hl, TINY_BASIC_FOLDER_NAME
 455+ 0B31 CD AD 0E         call copy_filename_to_buffer
 456+ 0B34 21 EB FF         ld hl, filename_buffer
 457+ 0B37 CD 25 0E         call open_file
 458+ 0B3A FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 459+ 0B3C C8               ret z                               ; If found, job done.
 460+ 0B3D CD 46 0E         call create_directory
 461+ 0B40 C8               ret z                               ; If created ok, job done.
 462+ 0B41 CD 0C 08         call message
 463+ 0B44 45 52 52 4F      db 'ERROR creating Tiny Basic folder!',13,10,0
 463+ 0B48 52 20 63 72
 463+ 0B4C 65 61 74 69
 463+ 0B50 6E 67 20 54
 463+ 0B54 69 6E 79 20
 463+ 0B58 42 61 73 69
 463+ 0B5C 63 20 66 6F
 463+ 0B60 6C 64 65 72
 463+ 0B64 21 0D 0A 00
 464+ 0B68 C9               ret
 465+ 0B69
 466+ 0B69              check_cpmdisks_structure:
 467+ 0B69                  ; Check that we have a disk structure like this:
 468+ 0B69                  ; /CPMDISKS
 469+ 0B69                  ;          /A
 470+ 0B69                  ;          /B
 471+ 0B69                  ;          /C
 472+ 0B69                  ;          :
 473+ 0B69                  ;          /P
 474+ 0B69
 475+ 0B69                  ; Loop over A..P
 476+ 0B69 06 10            ld b, 16
 477+ 0B6B              check_cpmdisk_loop:
 478+ 0B6B C5               push bc
 479+ 0B6C                  ; Go to /CPM
 480+ 0B6C CD 0C 08         call message
 481+ 0B6F 43 68 65 63      db 'Checking /CPM',13,10,0
 481+ 0B73 6B 69 6E 67
 481+ 0B77 20 2F 43 50
 481+ 0B7B 4D 0D 0A 00
 482+ 0B7F
 483+ 0B7F 21 2B 0F         ld hl, CPM_FOLDER_NAME
 484+ 0B82 CD AD 0E         call copy_filename_to_buffer
 485+ 0B85 21 EB FF         ld hl, filename_buffer
 486+ 0B88 CD 25 0E         call open_file
 487+ 0B8B FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 488+ 0B8D 20 42            jr nz, check_cpmdisks_structure2
 489+ 0B8F
 490+ 0B8F CD 0C 08         call message
 491+ 0B92 43 68 65 63      db 'Checking /CPM/DISKS',13,10,0
 491+ 0B96 6B 69 6E 67
 491+ 0B9A 20 2F 43 50
 491+ 0B9E 4D 2F 44 49
 491+ 0BA2 53 4B 53 0D
 491+ 0BA6 0A 00
 492+ 0BA8 21 38 0F         ld hl, CPM_DISKS_NAME
 493+ 0BAB CD AD 0E         call copy_filename_to_buffer
 494+ 0BAE 21 EB FF         ld hl, filename_buffer
 495+ 0BB1 CD 25 0E         call open_file
 496+ 0BB4 FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 497+ 0BB6 20 19            jr nz, check_cpmdisks_structure2
 498+ 0BB8
 499+ 0BB8 C1               pop bc
 500+ 0BB9 C5               push bc
 501+ 0BBA 78               ld a, b
 502+ 0BBB C6 40            add a, 'A'-1
 503+ 0BBD 32 EB FF         ld (filename_buffer), a
 504+ 0BC0 3E 00            ld a, 0
 505+ 0BC2 32 EC FF         ld (filename_buffer+1),a
 506+ 0BC5 21 EB FF         ld hl, filename_buffer
 507+ 0BC8 CD 25 0E         call open_file
 508+ 0BCB FE 41            cp YES_OPEN_DIR                     ; This is NOT an error, it is a badly named success code!!!!!!
 509+ 0BCD 20 0B            jr nz, check_cpmdisks_structure3
 510+ 0BCF
 511+ 0BCF C1               pop bc                              ; Let's say if we find disk "P" then they are all there!!!
 512+ 0BD0                  ;djnz check_cpmdisk_loop
 513+ 0BD0
 514+ 0BD0 C9               ret
 515+ 0BD1
 516+ 0BD1              check_cpmdisks_structure2:
 517+ 0BD1 C1               pop bc
 518+ 0BD2                  ; Try to create the missing folder
 519+ 0BD2                  ;ld hl, CPMDISKS_NAME
 520+ 0BD2                  ;call copy_filename_to_buffer
 521+ 0BD2 CD 46 0E         call create_directory
 522+ 0BD5 20 0D            jr nz, check_cpmdisks_structure_fail
 523+ 0BD7
 524+ 0BD7                  ; Start all over again
 525+ 0BD7 C3 69 0B         jp check_cpmdisks_structure
 526+ 0BDA
 527+ 0BDA              check_cpmdisks_structure3:
 528+ 0BDA CD 46 0E         call create_directory
 529+ 0BDD 20 04            jr nz, check_cpmdisks_subdir_fail
 530+ 0BDF C1               pop bc                                          ; All good, so do the next subdir
 531+ 0BE0 C3 6B 0B         jp check_cpmdisk_loop
 532+ 0BE3
 533+ 0BE3              check_cpmdisks_subdir_fail:
 534+ 0BE3 C1               pop bc
 535+ 0BE4                  ; Continue through to the next bit...
 536+ 0BE4              check_cpmdisks_structure_fail:
 537+ 0BE4 CD 0C 08         call message
 538+ 0BE7 45 52 52 4F      db 'ERROR creating CP/M disks!',13,10,0
 538+ 0BEB 52 20 63 72
 538+ 0BEF 65 61 74 69
 538+ 0BF3 6E 67 20 43
 538+ 0BF7 50 2F 4D 20
 538+ 0BFB 64 69 73 6B
 538+ 0BFF 73 21 0D 0A
 538+ 0C03 00
 539+ 0C04 C9               ret
 540+ 0C05
 541+ 0C05              move_to_file_pointer:
 542+ 0C05                  ; Set the BYTE_LOCATE file position in the currently open file.
 543+ 0C05                  ; Value is passed in bcde.
 544+ 0C05 C5               push bc
 545+ 0C06 D5               push de
 546+ 0C07 3E 39            ld a, BYTE_LOCATE
 547+ 0C09 CD D5 0E         call send_command_byte
 548+ 0C0C D1               pop de
 549+ 0C0D D5               push de
 550+ 0C0E 7B               ld a, e
 551+ 0C0F CD B9 0E         call send_data_byte
 552+ 0C12 D1               pop de
 553+ 0C13 7A               ld a, d
 554+ 0C14 CD B9 0E         call send_data_byte
 555+ 0C17 C1               pop bc
 556+ 0C18 C5               push bc
 557+ 0C19 79               ld a, c
 558+ 0C1A CD B9 0E         call send_data_byte
 559+ 0C1D C1               pop bc
 560+ 0C1E 78               ld a, b
 561+ 0C1F CD B9 0E         call send_data_byte
 562+ 0C22 CD 1A 0F         call read_status_byte
 563+ 0C25 FE 14            cp USB_INT_SUCCESS
 564+ 0C27 20 03            jr nz, move_to_file_pointer_fail        ; We expect USB_INT_SUCCESS here
 565+ 0C29
 566+ 0C29 3E 14            ld a, USB_INT_SUCCESS                   ; Return success
 567+ 0C2B C9               ret
 568+ 0C2C              move_to_file_pointer_fail:
 569+ 0C2C 3E 1F            ld a, USB_INT_DISK_ERR                  ; Return fail
 570+ 0C2E C9               ret
 571+ 0C2F
 572+ 0C2F              set_random_pointer_in_fcb:
 573+ 0C2F                  ; pass in de -> fcb
 574+ 0C2F                  ; Pass hl = random pointer value
 575+ 0C2F                  ; Random pointer goes to fcb + 33 & 34. fcb + 35 gets 0.
 576+ 0C2F                  ; preserve de
 577+ 0C2F D5               push de
 578+ 0C30 EB               ex de, hl
 579+ 0C31 01 21 00         ld bc, 33
 580+ 0C34 09               add hl, bc
 581+ 0C35 73               ld (hl), e
 582+ 0C36 23               inc hl
 583+ 0C37 72               ld (hl), d
 584+ 0C38 23               inc hl
 585+ 0C39 36 00            ld (hl), 0
 586+ 0C3B EB               ex de, hl
 587+ 0C3C D1               pop de
 588+ 0C3D C9               ret
 589+ 0C3E
 590+ 0C3E              set_file_size_in_fcb:
 591+ 0C3E                  ; Pass HL -> FCB (Note that this is an unusual way to pass it in)
 592+ 0C3E                  ; Pass file pointer (in 128-byte records) in bcde.
 593+ 0C3E                  ; Preserves hl
 594+ 0C3E
 595+ 0C3E                  ; The following details are from http://www.primrosebank.net/computers/cpm/cpm_software_mfs.htm
 596+ 0C3E                  ; RC = record counter, goes from 0 to $80. $80 means full, and represents 128*128=16K.
 597+ 0C3E                  ; EX = 0 for files < 16K, otherwise 1 - 31 for Extents of 16K each.
 598+ 0C3E                  ; S2 = high byte for the EXc ounter, so if EX wants to be bigger than 31, overflow it into here.
 599+ 0C3E
 600+ 0C3E                  ; Split bcde into S2, EX & RC.
 601+ 0C3E                  ; To do this:
 602+ 0C3E                  ; RC = e & %0111 1111               (i.e. a number 0..127)
 603+ 0C3E                  ; Divide bcde by 128                (Shift right 7 bits, or shift left 1 bit then right 8)
 604+ 0C3E                  ; EX = e & %0001 1111               (i.e. it has a max of 31)
 605+ 0C3E                  ; Shift left 3 places
 606+ 0C3E                  ; S2 = d
 607+ 0C3E
 608+ 0C3E                  ; RC = e & %0111 1111
 609+ 0C3E E5               push hl
 610+ 0C3F 7B               ld a, e
 611+ 0C40 E6 7F            and %01111111                       ; RC is in A
 612+ 0C42
 613+ 0C42 CB 23            sla e                               ; Shift all left by 1 bit
 614+ 0C44 CB 12            rl d
 615+ 0C46 CB 11            rl c
 616+ 0C48 CB 10            rl b
 617+ 0C4A
 618+ 0C4A 5A               ld e, d                             ; Shift all right by 8 bits
 619+ 0C4B 51               ld d, c
 620+ 0C4C 48               ld c, b
 621+ 0C4D 06 00            ld b, 0                             ; We've effectively shifted right by 7 bits
 622+ 0C4F
 623+ 0C4F 01 0F 00         ld bc, 15                           ; ex is as FCB+12, s2 is at FCB+14, rc is at FCB + 15
 624+ 0C52 09               add hl, bc                          ; hl -> FCB.RC
 625+ 0C53 77               ld (hl), a                          ; RC is now stored in FCB
 626+ 0C54
 627+ 0C54 2B               dec hl
 628+ 0C55 2B               dec hl
 629+ 0C56 2B               dec hl                              ; hl -> FCB.EX
 630+ 0C57 7B               ld a, e
 631+ 0C58 E6 1F            and %00011111                       ; EX is in A
 632+ 0C5A 77               ld (hl), a
 633+ 0C5B
 634+ 0C5B CB 23            sla e                               ; Shift all left by 1 bit
 635+ 0C5D CB 12            rl d
 636+ 0C5F CB 11            rl c
 637+ 0C61 CB 10            rl b
 638+ 0C63 CB 23            sla e                               ; Shift all left by 1 bit
 639+ 0C65 CB 12            rl d
 640+ 0C67 CB 11            rl c
 641+ 0C69 CB 10            rl b
 642+ 0C6B CB 23            sla e                               ; Shift all left by 1 bit
 643+ 0C6D CB 12            rl d
 644+ 0C6F CB 11            rl c
 645+ 0C71 CB 10            rl b
 646+ 0C73
 647+ 0C73 23               inc hl
 648+ 0C74 3E 00            ld a, 0
 649+ 0C76 36 00            ld (hl), 0                          ; Blank out the mystery byte called "unused"
 650+ 0C78 23               inc hl                              ; hl -> FCB.S2
 651+ 0C79
 652+ 0C79 7A               ld a, d
 653+ 0C7A E6 1F            and %00011111                       ; S2 is in A
 654+ 0C7C 77               ld (hl), a
 655+ 0C7D
 656+ 0C7D E1               pop hl
 657+ 0C7E C9               ret
 658+ 0C7F
 659+ 0C7F              convert_user_number_to_folder_name:
 660+ 0C7F                  ; Pass in 1 to 15 in A.
 661+ 0C7F                  ; This returns "1" to "F"
 662+ 0C7F E6 0F            and %00001111
 663+ 0C81 C6 30            add a, '0'                             ; Convert 1-9 => "1".."9"
 664+ 0C83 FE 3A            cp ':'
 665+ 0C85 D8               ret c
 666+ 0C86 C6 07            add a, 7
 667+ 0C88 C9               ret
 668+ 0C89
 669+ 0C89                  include "memorystick_low_level.asm"
# file opened: memorystick_low_level.asm
   1++0C89              ; memorystick_low_level.asm
   2++0C89              ;--------------------;
   3++0C89              ; LOW LEVEL ROUTINES ;
   4++0C89              ;--------------------;
   5++0C89
   6++0C89              configure_memorystick:
   7++0C89 06 05            ld b, 5                                 ; Have 5 attempts at configuring the module before giving up
   8++0C8B              configure_memorystick1:
   9++0C8B C5               push bc
  10++0C8C CD 07 0E         call connect_to_usb_drive
  11++0C8F 20 08            jr nz, failed_to_setup
  12++0C91 CD 4B 0D         call connect_to_disk
  13++0C94 CD 7A 0D         call mount_disk
  14++0C97 C1               pop bc
  15++0C98 C9               ret
  16++0C99              failed_to_setup:
  17++0C99 CD BC 07         call long_pause
  18++0C9C CD BC 07         call long_pause
  19++0C9F CD BC 07         call long_pause
  20++0CA2 CD BC 07         call long_pause
  21++0CA5 C1               pop bc
  22++0CA6 10 E3            djnz configure_memorystick1
  23++0CA8 CD 0C 08         call message
  24++0CAB 43 48 33 37      db 'CH376S error.',13,10,0
  24++0CAF 36 53 20 65
  24++0CB3 72 72 6F 72
  24++0CB7 2E 0D 0A 00
  25++0CBB C9               ret
  26++0CBC
  27++0CBC              ;----------------------------------------------------------------
  28++0CBC              ; Call this once at startup
  29++0CBC              reset_ch376_module:
  30++0CBC 3E 05            ld a, RESET_ALL
  31++0CBE CD D5 0E         call send_command_byte
  32++0CC1 CD BC 07         call long_pause
  33++0CC4 CD BC 07         call long_pause
  34++0CC7 C9               ret
  35++0CC8
  36++0CC8              ;-----------------------------------------------------------------
  37++0CC8              check_module_exists:
  38++0CC8 3E 06            ld a, CHECK_EXIST
  39++0CCA CD D5 0E         call send_command_byte
  40++0CCD
  41++0CCD 3E 7B            ld a, 123               ; We send an arbitrary number
  42++0CCF CD B9 0E         call send_data_byte
  43++0CD2
  44++0CD2 CD DE 0E         call read_data_byte
  45++0CD5
  46++0CD5 FE 84            cp 255-123      ; The result is 255 minus what we sent in
  47++0CD7 C8               ret z
  48++0CD8 CD 0C 08         call message
  49++0CDB 45 52 52 4F      db 'ERROR: CH376S module not found.',13,10,0
  49++0CDF 52 3A 20 43
  49++0CE3 48 33 37 36
  49++0CE7 53 20 6D 6F
  49++0CEB 64 75 6C 65
  49++0CEF 20 6E 6F 74
  49++0CF3 20 66 6F 75
  49++0CF7 6E 64 2E 0D
  49++0CFB 0A 00
  50++0CFD C9               ret
  51++0CFE
  52++0CFE              ;-----------------------------------------------------------------
  53++0CFE              get_module_version:
  54++0CFE 3E 01            ld a, GET_IC_VER
  55++0D00 CD D5 0E         call send_command_byte
  56++0D03
  57++0D03 CD DE 0E         call read_data_byte
  58++0D06 E6 1F            and %00011111
  59++0D08
  60++0D08 CD 0C 08         call message
  61++0D0B 46 6F 75 6E      db 'Found CH376S v',0 ; Mine is v3!!!
  61++0D0F 64 20 43 48
  61++0D13 33 37 36 53
  61++0D17 20 76 00
  62++0D1A CD 2A 08         call show_a_as_hex
  63++0D1D CD 91 07         call newline
  64++0D20 C9               ret
  65++0D21
  66++0D21              ;-----------------------------------------------------------------
  67++0D21              set_usb_host_mode:
  68++0D21 3E 15            ld a, SET_USB_MODE
  69++0D23 CD D5 0E         call send_command_byte
  70++0D26 3E 06            ld a, 6
  71++0D28 CD B9 0E         call send_data_byte
  72++0D2B CD 1A 0F         call read_status_byte
  73++0D2E FE 15            cp USB_INT_CONNECT
  74++0D30 C8               ret z
  75++0D31 CD 0C 08         call message
  76++0D34 45 52 52 4F      db 'ERROR: No USB Disk?',13,10,0
  76++0D38 52 3A 20 4E
  76++0D3C 6F 20 55 53
  76++0D40 42 20 44 69
  76++0D44 73 6B 3F 0D
  76++0D48 0A 00
  77++0D4A C9               ret
  78++0D4B
  79++0D4B              ;-----------------------------------------------------------------
  80++0D4B              connect_to_disk:
  81++0D4B 3E 30            ld a, DISK_CONNECT
  82++0D4D CD D5 0E         call send_command_byte
  83++0D50 3E 22            ld a, GET_STATUS
  84++0D52 CD 1A 0F         call read_status_byte
  85++0D55 C8               ret z
  86++0D56 CD 0C 08         call message
  87++0D59 45 52 52 4F      db 'ERROR connecting to USB Disk.',13,10,0
  87++0D5D 52 20 63 6F
  87++0D61 6E 6E 65 63
  87++0D65 74 69 6E 67
  87++0D69 20 74 6F 20
  87++0D6D 55 53 42 20
  87++0D71 44 69 73 6B
  87++0D75 2E 0D 0A 00
  88++0D79 C9               ret
  89++0D7A
  90++0D7A              ;-----------------------------------------------------------------
  91++0D7A              mount_disk:
  92++0D7A 3E 31            ld a, DISK_MOUNT
  93++0D7C CD D5 0E         call send_command_byte
  94++0D7F 3E 22            ld a, GET_STATUS
  95++0D81 CD 1A 0F         call read_status_byte
  96++0D84 C8               ret z
  97++0D85 CD 0C 08         call message
  98++0D88 45 52 52 4F      db 'ERROR mounting USB Disk.',13,10,0
  98++0D8C 52 20 6D 6F
  98++0D90 75 6E 74 69
  98++0D94 6E 67 20 55
  98++0D98 53 42 20 44
  98++0D9C 69 73 6B 2E
  98++0DA0 0D 0A 00
  99++0DA3 C9               ret
 100++0DA4
 101++0DA4              ;-----------------------------------------------------------------
 102++0DA4              read_disk_signature:
 103++0DA4 3E 27            ld a, RD_USB_DATA0
 104++0DA6 CD D5 0E         call send_command_byte
 105++0DA9 CD DE 0E         call read_data_byte                 ; A = length of bytes to now read
 106++0DAC FE 24            cp 36
 107++0DAE 20 39            jr nz, could_not_read_disk_sig
 108++0DB0
 109++0DB0                  ; Ignore the first 8 bytes
 110++0DB0 06 08            ld b, 8
 111++0DB2              read_disk_signature1:
 112++0DB2 C5               push bc
 113++0DB3 CD E1 0E         call read_data_byte_silent
 114++0DB6 C1               pop bc
 115++0DB7 10 F9            djnz read_disk_signature1
 116++0DB9
 117++0DB9                  ; Display the next 8 bytes (Manufacturer)
 118++0DB9 06 08            ld b, 8
 119++0DBB              read_disk_signature2:
 120++0DBB C5               push bc
 121++0DBC CD E1 0E         call read_data_byte_silent
 122++0DBF CD 64 07         call print_a
 123++0DC2 C1               pop bc
 124++0DC3 10 F6            djnz read_disk_signature2
 125++0DC5 CD 91 07         call newline
 126++0DC8
 127++0DC8                  ; Display the next 16 bytes (Model)
 128++0DC8 06 10            ld b, 16
 129++0DCA              read_disk_signature3:
 130++0DCA C5               push bc
 131++0DCB CD E1 0E         call read_data_byte_silent
 132++0DCE CD 64 07         call print_a
 133++0DD1 C1               pop bc
 134++0DD2 10 F6            djnz read_disk_signature3
 135++0DD4
 136++0DD4 3E 20            ld a, ' '
 137++0DD6 CD 64 07         call print_a
 138++0DD9
 139++0DD9                  ; Display the next 4 bytes (Version)
 140++0DD9 06 04            ld b, 4
 141++0DDB              read_disk_signature4:
 142++0DDB C5               push bc
 143++0DDC CD E1 0E         call read_data_byte_silent
 144++0DDF CD 64 07         call print_a
 145++0DE2 C1               pop bc
 146++0DE3 10 F6            djnz read_disk_signature4
 147++0DE5 CD 91 07         call newline
 148++0DE8 C9               ret
 149++0DE9
 150++0DE9              could_not_read_disk_sig:
 151++0DE9 CD 0C 08         call message
 152++0DEC 45 52 52 4F      db 'ERROR reading disk sig.',13,10,0
 152++0DF0 52 20 72 65
 152++0DF4 61 64 69 6E
 152++0DF8 67 20 64 69
 152++0DFC 73 6B 20 73
 152++0E00 69 67 2E 0D
 152++0E04 0A 00
 153++0E06 C9               ret
 154++0E07
 155++0E07              connect_to_usb_drive:
 156++0E07                  ; Connects us up to the USB Drive.
 157++0E07                  ; Returns Zero flag = true if we can connect ok.
 158++0E07 CD BC 0C         call reset_ch376_module
 159++0E0A CD 21 0D         call set_usb_host_mode
 160++0E0D FE 15            cp USB_INT_CONNECT
 161++0E0F C9               ret
 162++0E10
 163++0E10              create_file:
 164++0E10                  ; pass in DE = pointer to filename
 165++0E10 D5               push de
 166++0E11 3E 2F            ld a, SET_FILE_NAME
 167++0E13 CD D5 0E         call send_command_byte
 168++0E16 E1               pop hl
 169++0E17 CD BF 0E         call send_data_string
 170++0E1A
 171++0E1A 3E 34            ld a, FILE_CREATE
 172++0E1C CD D5 0E         call send_command_byte
 173++0E1F
 174++0E1F CD 1A 0F         call read_status_byte
 175++0E22 FE 14            cp USB_INT_SUCCESS
 176++0E24 C9               ret
 177++0E25
 178++0E25              open_file:
 179++0E25                  ; Tells the module to use the filename from the filename_buffer.
 180++0E25                  ; Returns z=true if ok to proceed.
 181++0E25                  ; Pass in hl -> directory string, e.g. "/folder"
 182++0E25              ;      push hl
 183++0E25              ;      call message
 184++0E25              ;      db 'open_file:[',0
 185++0E25              ;  open_file1:
 186++0E25              ;      ld a, (hl)
 187++0E25              ;      cp 0
 188++0E25              ;      jr z, open_file2
 189++0E25              ;      call print_a
 190++0E25              ;      inc hl
 191++0E25              ;      jr open_file1
 192++0E25
 193++0E25              ;  open_file2:
 194++0E25              ;      ld a, ']'
 195++0E25              ;      call print_a
 196++0E25              ;      call newline
 197++0E25              ;      pop hl
 198++0E25
 199++0E25 3E 2F            ld a, SET_FILE_NAME
 200++0E27 CD D5 0E         call send_command_byte
 201++0E2A CD BF 0E         call send_data_string
 202++0E2D 3E 32            ld a, FILE_OPEN
 203++0E2F CD D5 0E         call send_command_byte
 204++0E32 CD 1A 0F         call read_status_byte
 205++0E35 FE 14            cp USB_INT_SUCCESS
 206++0E37 C9               ret
 207++0E38
 208++0E38              close_file:
 209++0E38 3E 36            ld a, FILE_CLOSE
 210++0E3A CD D5 0E         call send_command_byte
 211++0E3D 3E 01            ld a, 1                             ; 1 = update file size if necessary
 212++0E3F CD B9 0E         call send_data_byte
 213++0E42 CD 1A 0F         call read_status_byte
 214++0E45 C9               ret
 215++0E46
 216++0E46              create_directory:
 217++0E46                  ; Tells the module to use the filename from the filename_buffer to create a directory of that name.
 218++0E46                  ; Returns z=true if ok to proceed.
 219++0E46 21 EB FF         ld hl, filename_buffer
 220++0E49              ; create_directory1:
 221++0E49              ;     ld a, (hl)
 222++0E49              ;     cp 0
 223++0E49              ;     jr z, create_directory2
 224++0E49              ;     inc hl
 225++0E49              ;     call print_a
 226++0E49              ;     jr create_directory1
 227++0E49
 228++0E49              create_directory2:
 229++0E49
 230++0E49 3E 2F            ld a, SET_FILE_NAME
 231++0E4B CD D5 0E         call send_command_byte
 232++0E4E 21 EB FF         ld hl, filename_buffer
 233++0E51 CD BF 0E         call send_data_string
 234++0E54 3E 40            ld a, DIR_CREATE
 235++0E56 CD D5 0E         call send_command_byte
 236++0E59 CD 1A 0F         call read_status_byte
 237++0E5C FE 14            cp USB_INT_SUCCESS
 238++0E5E C9               ret
 239++0E5F
 240++0E5F              read_from_file:
 241++0E5F                  ; Ask to read 128 bytes from the current file into the dma_address area pointed to by DE.
 242++0E5F                  ; Returns Zero flag set for success, clear for fail.
 243++0E5F D5               push de
 244++0E60 3E 3A            ld a, BYTE_READ
 245++0E62 CD D5 0E         call send_command_byte
 246++0E65 3E 80            ld a, 128                           ; Request 128 bytes
 247++0E67 CD B9 0E         call send_data_byte
 248++0E6A 3E 00            ld a, 0
 249++0E6C CD B9 0E         call send_data_byte
 250++0E6F
 251++0E6F CD 1A 0F         call read_status_byte
 252++0E72              read_from_file1:
 253++0E72 FE 1D            cp USB_INT_DISK_READ                    ; This means "go ahead and read"
 254++0E74 28 07            jr z, read_from_file3
 255++0E76 FE 14            cp USB_INT_SUCCESS                      ; Bizarrely this means we are finished
 256++0E78 CA A9 0E         jp z, read_from_file_cannot
 257++0E7B 18 2C            jr read_from_file_cannot
 258++0E7D
 259++0E7D              read_from_file3:
 260++0E7D 3E 27            ld a, RD_USB_DATA0                      ; Find out how many bytes are available to read
 261++0E7F CD D5 0E         call send_command_byte
 262++0E82 CD DE 0E         call read_data_byte                     ; A = number of bytes available to read
 263++0E85
 264++0E85                  ; If there are less than 128 bytes to read, fill the buffer with 0s first
 265++0E85 FE 80            cp 128
 266++0E87 30 0B            jr nc, read_from_file_128
 267++0E89 E1               pop hl
 268++0E8A E5               push hl
 269++0E8B F5               push af
 270++0E8C 06 80            ld b, 128
 271++0E8E              read_from_file_padding:
 272++0E8E 36 00            ld (hl), 0
 273++0E90 23               inc hl
 274++0E91 10 FB            djnz read_from_file_padding
 275++0E93 F1               pop af
 276++0E94
 277++0E94              read_from_file_128:
 278++0E94 E1               pop hl
 279++0E95 CD E7 0E         call read_data_bytes_into_hl        ; Read this block of data
 280++0E98 E5               push hl
 281++0E99 3E 3B            ld a, BYTE_RD_GO
 282++0E9B CD D5 0E         call send_command_byte
 283++0E9E 3E 22            ld a, GET_STATUS
 284++0EA0 CD D5 0E         call send_command_byte
 285++0EA3 CD DE 0E         call read_data_byte
 286++0EA6 E1               pop hl
 287++0EA7                  ; All done, so return ZERO for success
 288++0EA7 BF               cp a                                ; set zero flag for success
 289++0EA8 C9               ret
 290++0EA9
 291++0EA9              read_from_file_cannot:
 292++0EA9 D1               pop de
 293++0EAA F6 01            or 1                                ; clear zero flag
 294++0EAC C9               ret
 295++0EAD
 296++0EAD              copy_filename_to_buffer:
 297++0EAD                  ; Enter with hl->zero-terminated-filename-string
 298++0EAD                  ; Copies this to filename_buffer
 299++0EAD 11 EB FF         ld de, filename_buffer
 300++0EB0              copy_filename_to_buffer1:
 301++0EB0 7E               ld a, (hl)
 302++0EB1 12               ld (de), a
 303++0EB2 23               inc hl
 304++0EB3 13               inc de
 305++0EB4 FE 00            cp 0
 306++0EB6 C8               ret z
 307++0EB7 18 F7            jr copy_filename_to_buffer1
 308++0EB9
 309++0EB9              send_data_byte:
 310++0EB9                  ; push af
 311++0EB9                  ; call message
 312++0EB9                  ; db 'send_data_byte ', 0
 313++0EB9                  ; pop af
 314++0EB9                  ; push af
 315++0EB9                  ; call show_a_as_hex
 316++0EB9                  ; call newline
 317++0EB9                  ; pop af
 318++0EB9 D3 A0            out (mem_stick_data_port), a
 319++0EBB                  ;call tiny_pause
 320++0EBB CD EF 0E         call wait_til_not_busy
 321++0EBE C9               ret
 322++0EBF
 323++0EBF              send_data_string:
 324++0EBF                  ; The string is pointed to by HL
 325++0EBF 7E               ld a, (hl)
 326++0EC0 FE 00            cp 0
 327++0EC2 28 0B            jr z, send_data_string_done
 328++0EC4 F5               push af
 329++0EC5 E5               push hl
 330++0EC6 CD B9 0E         call send_data_byte
 331++0EC9 E1               pop hl
 332++0ECA F1               pop af
 333++0ECB 23               inc hl
 334++0ECC C3 BF 0E         jp send_data_string
 335++0ECF              send_data_string_done:
 336++0ECF 3E 00            ld a, 0
 337++0ED1 CD B9 0E         call send_data_byte
 338++0ED4 C9               ret
 339++0ED5
 340++0ED5              send_command_byte:
 341++0ED5                  ; push af
 342++0ED5                  ; call message
 343++0ED5                  ; db 'send_command_byte ',0
 344++0ED5                  ; pop af
 345++0ED5                  ; push af
 346++0ED5                  ; call show_a_as_hex
 347++0ED5                  ; call newline
 348++0ED5                  ; pop af
 349++0ED5 D3 A1            out (mem_stick_command_port), a
 350++0ED7                  ;call tiny_pause
 351++0ED7 CD EF 0E         call wait_til_not_busy
 352++0EDA C9               ret
 353++0EDB
 354++0EDB              read_command_byte:
 355++0EDB                  ; call message
 356++0EDB                  ; db 'read_command_byte: ', 0
 357++0EDB DB A1            in a, (mem_stick_command_port)
 358++0EDD                  ; push af
 359++0EDD                  ; call show_a_as_hex
 360++0EDD                  ; call newline
 361++0EDD                  ; pop af
 362++0EDD C9               ret
 363++0EDE
 364++0EDE              read_data_byte:
 365++0EDE                  ; call message
 366++0EDE                  ; db 'read_data_byte: ', 0
 367++0EDE DB A0            in a, (mem_stick_data_port)
 368++0EE0                  ; push af
 369++0EE0                  ; call show_a_as_hex
 370++0EE0                  ; call newline
 371++0EE0                  ; pop af
 372++0EE0 C9               ret
 373++0EE1
 374++0EE1              read_data_byte_silent:
 375++0EE1 DB A0            in a, (mem_stick_data_port)
 376++0EE3 C9               ret
 377++0EE4
 378++0EE4              read_data_bytes_into_buffer:
 379++0EE4                  ; The number of bytes should be in A.
 380++0EE4                  ; Read that many bytes into the buffer.
 381++0EE4                  ; The value of A is retained.
 382++0EE4 21 C5 FF         ld hl, disk_buffer
 383++0EE7              read_data_bytes_into_hl:
 384++0EE7                  ; This entry point will read A bytes into the area pointed to by HL.
 385++0EE7                  ; On exit HL will point to the location after where the bytes were added.
 386++0EE7 F5               push af
 387++0EE8 47               ld b, a
 388++0EE9 0E A0            ld c, mem_stick_data_port
 389++0EEB              read_data_bytes_into_buffer1:
 390++0EEB ED B2            inir                    ; A rare use of In, Increase & Repeat!!!
 391++0EED F1               pop af
 392++0EEE C9               ret
 393++0EEF
 394++0EEF              wait_til_not_busy:
 395++0EEF                  ; call message
 396++0EEF                  ; db 'waiting...', 13, 10, 0
 397++0EEF 01 60 EA         ld bc, 60000            ; retry max 60000 times!!!
 398++0EF2              wait_til_not_busy1:
 399++0EF2 C5               push bc
 400++0EF3 CD DB 0E         call read_command_byte
 401++0EF6 E6 10            and %00010000
 402++0EF8 C2 FD 0E         jp nz, wait_til_not_busy2
 403++0EFB C1               pop bc
 404++0EFC C9               ret
 405++0EFD              wait_til_not_busy2:
 406++0EFD CD C6 07         call short_pause
 407++0F00 C1               pop bc
 408++0F01 0B               dec bc
 409++0F02 78               ld a, b
 410++0F03 B1               or c
 411++0F04 20 EC            jr nz, wait_til_not_busy1
 412++0F06 CD 0C 08         call message
 413++0F09 5B 55 53 42      db '[USB TIMEOUT]', 13, 10, 0
 413++0F0D 20 54 49 4D
 413++0F11 45 4F 55 54
 413++0F15 5D 0D 0A 00
 414++0F19 C9               ret
 415++0F1A
 416++0F1A              read_status_byte:
 417++0F1A 3E 22            ld a, GET_STATUS
 418++0F1C CD D5 0E         call send_command_byte
 419++0F1F CD DE 0E         call read_data_byte
 420++0F22 C9               ret
 421++0F23
 422++0F23              ; show_status:
 423++0F23              ;     call read_status_byte
 424++0F23              ;     push af
 425++0F23              ;     call report_on_status
 426++0F23              ;     pop af
 427++0F23              ;     ret                     ; The status is returned in A
 428++0F23
 429++0F23              ; report_on_status:
 430++0F23              ;     cp USB_INT_SUCCESS
 431++0F23              ;     jr nz, ros1
 432++0F23              ;     call message
 433++0F23              ;     db 'USB_INT_SUCCESS',13,10,0
 434++0F23              ;     ret
 435++0F23              ; ros1:
 436++0F23              ;     cp USB_INT_CONNECT
 437++0F23              ;     jr nz, ros2
 438++0F23              ;     call message
 439++0F23              ;     db 'USB_INT_CONNECT',13,10,0
 440++0F23              ;     ret
 441++0F23              ; ros2:
 442++0F23              ;     cp USB_INT_DISCONNECT
 443++0F23              ;     jr nz, ros3
 444++0F23              ;     call message
 445++0F23              ;     db 'USB_INT_DISCONNECT',13,10,0
 446++0F23              ;     ret
 447++0F23              ; ros3:
 448++0F23              ;     cp USB_INT_BUF_OVER
 449++0F23              ;     jr nz, ros4
 450++0F23              ;     call message
 451++0F23              ;     db 'USB_INT_BUF_OVER',13,10,0
 452++0F23              ;     ret
 453++0F23              ; ros4:
 454++0F23              ;     cp USB_INT_USB_READY
 455++0F23              ;     jr nz, ros5
 456++0F23              ;     call message
 457++0F23              ;     db 'USB_INT_USB_READY',13,10,0
 458++0F23              ;     ret
 459++0F23              ; ros5:
 460++0F23              ;     cp USB_INT_DISK_READ
 461++0F23              ;     jr nz, ros6
 462++0F23              ;     call message
 463++0F23              ;     db 'USB_INT_DISK_READ',13,10,0
 464++0F23              ;     ret
 465++0F23              ; ros6:
 466++0F23              ;     cp USB_INT_DISK_WRITE
 467++0F23              ;     jr nz, ros7
 468++0F23              ;     call message
 469++0F23              ;     db 'USB_INT_DISK_WRITE',13,10,0
 470++0F23              ;     ret
 471++0F23              ; ros7:
 472++0F23              ;     cp USB_INT_DISK_ERR
 473++0F23              ;     jr nz, ros8
 474++0F23              ;     call message
 475++0F23              ;     db 'USB_INT_DISK_ERR',13,10,0
 476++0F23              ;     ret
 477++0F23              ; ros8:
 478++0F23              ;     cp YES_OPEN_DIR
 479++0F23              ;     jr nz, ros9
 480++0F23              ;     call message
 481++0F23              ;     db 'YES_OPEN_DIR',13,10,0
 482++0F23              ;     ret
 483++0F23              ; ros9:
 484++0F23              ;     cp ERR_MISS_FILE
 485++0F23              ;     jr nz, ros10
 486++0F23              ;     call message
 487++0F23              ;     db 'ERR_MISS_FILE',13,10,0
 488++0F23              ;     ret
 489++0F23              ; ros10:
 490++0F23              ;     cp ERR_FOUND_NAME
 491++0F23              ;     jr nz, ros11
 492++0F23              ;     call message
 493++0F23              ;     db 'ERR_FOUND_NAME',13,10,0
 494++0F23              ;     ret
 495++0F23              ; ros11:
 496++0F23              ;     cp ERR_DISK_DISCON
 497++0F23              ;     jr nz, ros12
 498++0F23              ;     call message
 499++0F23              ;     db 'ERR_DISK_DISCON',13,10,0
 500++0F23              ;     ret
 501++0F23              ; ros12:
 502++0F23              ;     cp ERR_LARGE_SECTOR
 503++0F23              ;     jr nz, ros13
 504++0F23              ;     call message
 505++0F23              ;     db 'ERR_LARGE_SECTOR',13,10,0
 506++0F23              ;     ret
 507++0F23              ; ros13:
 508++0F23              ;     cp ERR_TYPE_ERROR
 509++0F23              ;     jr nz, ros14
 510++0F23              ;     call message
 511++0F23              ;     db 'ERR_TYPE_ERROR',13,10,0
 512++0F23              ;     ret
 513++0F23              ; ros14:
 514++0F23              ;     cp ERR_BPB_ERROR
 515++0F23              ;     jr nz, ros15
 516++0F23              ;     call message
 517++0F23              ;     db 'ERR_BPB_ERROR',13,10,0
 518++0F23              ;     ret
 519++0F23              ; ros15:
 520++0F23              ;     cp ERR_DISK_FULL
 521++0F23              ;     jr nz, ros16
 522++0F23              ;     call message
 523++0F23              ;     db 'ERR_DISK_FULL',13,10,0
 524++0F23              ;     ret
 525++0F23              ; ros16:
 526++0F23              ;     cp ERR_FDT_OVER
 527++0F23              ;     jr nz, ros17
 528++0F23              ;     call message
 529++0F23              ;     db 'ERR_FDT_OVER',13,10,0
 530++0F23              ;     ret
 531++0F23              ; ros17:
 532++0F23              ;     cp ERR_FILE_CLOSE
 533++0F23              ;     jr nz, ros18
 534++0F23              ;     call message
 535++0F23              ;     db 'ERR_FILE_CLOSE',13,10,0
 536++0F23              ;     ret
 537++0F23              ; ros18:
 538++0F23              ;     call message
 539++0F23              ;     db 'UNKNOWN STATUS: ',0
 540++0F23              ;     call show_a_as_hex
 541++0F23              ;     call newline
 542++0F23              ;     ret
 543++0F23
 544++0F23
 545++0F23              mem_stick_data_port     equ 0xA0
 546++0F23              mem_stick_command_port  equ 0xA1
 547++0F23
 548++0F23              GET_IC_VER equ $01
 549++0F23              SET_BAUDRATE equ $02
 550++0F23              RESET_ALL equ $05
 551++0F23              CHECK_EXIST equ $06
 552++0F23              GET_FILE_SIZE equ $0C
 553++0F23              SET_USB_MODE equ $15
 554++0F23              GET_STATUS equ $22
 555++0F23              RD_USB_DATA0 equ $27
 556++0F23              WR_USB_DATA equ $2C
 557++0F23              WR_REQ_DATA equ $2D
 558++0F23              WR_OFS_DATA equ $2E
 559++0F23              SET_FILE_NAME equ $2F
 560++0F23              DISK_CONNECT equ $30
 561++0F23              DISK_MOUNT equ $31
 562++0F23              FILE_OPEN equ $32
 563++0F23              FILE_ENUM_GO equ $33
 564++0F23              FILE_CREATE equ $34
 565++0F23              FILE_ERASE equ $35
 566++0F23              FILE_CLOSE equ $36
 567++0F23              DIR_INFO_READ equ $37
 568++0F23              DIR_INFO_SAVE equ $38
 569++0F23              BYTE_LOCATE equ $39
 570++0F23              BYTE_READ equ $3A
 571++0F23              BYTE_RD_GO equ $3B
 572++0F23              BYTE_WRITE equ $3C
 573++0F23              BYTE_WR_GO equ $3D
 574++0F23              DISK_CAPACITY equ $3E
 575++0F23              DISK_QUERY equ $3F
 576++0F23              DIR_CREATE equ $40
 577++0F23
 578++0F23
 579++0F23              ; Statuses
 580++0F23              USB_INT_SUCCESS equ $14
 581++0F23              USB_INT_CONNECT equ $15
 582++0F23              USB_INT_DISCONNECT equ $16
 583++0F23              USB_INT_BUF_OVER equ $17
 584++0F23              USB_INT_USB_READY equ $18
 585++0F23              USB_INT_DISK_READ equ $1D
 586++0F23              USB_INT_DISK_WRITE equ $1E
 587++0F23              USB_INT_DISK_ERR equ $1F
 588++0F23              YES_OPEN_DIR equ $41
 589++0F23              ERR_MISS_FILE equ $42
 590++0F23              ERR_FOUND_NAME equ $43
 591++0F23              ERR_DISK_DISCON equ $82
 592++0F23              ERR_LARGE_SECTOR equ $84
 593++0F23              ERR_TYPE_ERROR equ $92
 594++0F23              ERR_BPB_ERROR equ $A1
 595++0F23              ERR_DISK_FULL equ $B1
 596++0F23              ERR_FDT_OVER equ $B2
 597++0F23              ERR_FILE_CLOSE equ $B4
 598++0F23
 599++0F23              ROOT_DIRECTORY:
 600++0F23 2A 00            db '*',0
 601++0F25
 602++0F25              SLASH:
 603++0F25 2F 00            db '/',0
 604++0F27
 605++0F27              ;SAVE_FILENAME:
 606++0F27              ;    db 'TESTING',0
 607++0F27
 608++0F27              ;TARGET_FILENAME:
 609++0F27              ;    db '/TARGET2.TXT',0
 610++0F27
 611++0F27              ;NO_EXTENSION:
 612++0F27              ;    db '   ',0
 613++0F27
 614++0F27              ;TXT_EXTENSION:
 615++0F27              ;    db 'TXT',0
 616++0F27
# file closed: memorystick_low_level.asm
 670+ 0F27
 671+ 0F27              ROOT_NAME:
 672+ 0F27 2F 00            db '/',0
 673+ 0F29
 674+ 0F29              STAR_DOT_STAR:
 675+ 0F29 2A 00            db '*',0
 676+ 0F2B
 677+ 0F2B              CPM_FOLDER_NAME:
 678+ 0F2B 2F 43 50 4D      db '/CPM',0
 678+ 0F2F 00
 679+ 0F30
 680+ 0F30              TINY_BASIC_FOLDER_NAME:
 681+ 0F30 2F 54 42 41           db '/TBASIC',0
 681+ 0F34 53 49 43 00
 682+ 0F38
 683+ 0F38              CPM_DISKS_NAME:
 684+ 0F38 44 49 53 4B      db 'DISKS',0
 684+ 0F3C 53 00
 685+ 0F3E
 686+ 0F3E
 687+ 0F3E
# file closed: memorystick.asm
 937  0F3E                  include "filesize.asm"
# file opened: filesize.asm
   1+ 0F3E              ; Routines to help print file sizes for DIR commands.
   2+ 0F3E              ; 1KB = 1024 bytes (00 00 04 00 h)
   3+ 0F3E              ; 1MB = 1024 KB = 1,048,576 bytes (00 10 00 00 h)
   4+ 0F3E              ; 1GB = 1024 MB = 40 00 00 00 h
   5+ 0F3E              ; Largest 32 bit number is FFFFFFFF which is 4,294,967,295 which is 4.2GB
   6+ 0F3E              ; So this routine can only display file sizes up to 4.2GB.
   7+ 0F3E              ; However, I've allowed a 6 byte buffer to store it in for 2 reasons:
   8+ 0F3E              ; (1) In the future I may want to use more digits (but probably not!!!)
   9+ 0F3E              ; (2) We multiply in incoming number by 10 to show 1 decimal place later in the process.
  10+ 0F3E              ; The largest number we ever need to actually show is 1023 because we
  11+ 0F3E              ; always divide the number down into larger units.
  12+ 0F3E              ; For example, 1023 would be shown as 1023 bytes
  13+ 0F3E              ; but 1024 would be shown as 1K.
  14+ 0F3E              ; This means we need a divide-by-1024 routine, which is simply Right Shift 10 times!
  15+ 0F3E              ; Which is simplified by shifting the whole number right by one byte, then Right Shift twice.
  16+ 0F3E              ; This is of course integer maths, so no decimal places.
  17+ 0F3E              ; However, we use a trick! First we multiply the number by 10 so that once we have done all
  18+ 0F3E              ; the calculations we can simply insert a dot before the last digit to give ourselves 1 decimal place.
  19+ 0F3E              ; Therefore 2000 would be shown as 1.9K, but 2048 would be shown as 2.0K.
  20+ 0F3E              ; We also do some post-processing to get rid of the leading zeros.
  21+ 0F3E              ;
  22+ 0F3E              ; Any number less than 00000400h is shown in bytes.
  23+ 0F3E              ; Any number less than 00100000h is shown in KB.
  24+ 0F3E              ; Any number less than 40000000h is shown in MB.
  25+ 0F3E              ; Higher numbers are show in GB.
  26+ 0F3E
  27+ 0F3E              show_filesize:
  28+ 0F3E                  ; Pass in 32 bit filesize in the lowest 4 bytes of the 6 byte filesize_buffer.
  29+ 0F3E                  ; First work out the units
  30+ 0F3E 3A 02 C0         ld a, (filesize_buffer+2)
  31+ 0F41 67               ld h, a
  32+ 0F42 3A 03 C0         ld a, (filesize_buffer+3)
  33+ 0F45 6F               ld l, a
  34+ 0F46 11 00 40         ld de, $4000
  35+ 0F49 B7               or a
  36+ 0F4A ED 52            sbc hl,de                   ; Compare hl with de
  37+ 0F4C 30 4A            jr nc, show_gigabytes
  38+ 0F4E
  39+ 0F4E 3A 02 C0         ld a, (filesize_buffer+2)
  40+ 0F51 67               ld h, a
  41+ 0F52 3A 03 C0         ld a, (filesize_buffer+3)
  42+ 0F55 6F               ld l, a
  43+ 0F56 11 10 00         ld de, $0010
  44+ 0F59 B7               or a
  45+ 0F5A ED 52            sbc hl,de                   ; Compare hl with de
  46+ 0F5C 30 29            jr nc, show_megabytes
  47+ 0F5E
  48+ 0F5E 3A 04 C0         ld a, (filesize_buffer+4)
  49+ 0F61 67               ld h, a
  50+ 0F62 3A 05 C0         ld a, (filesize_buffer+5)
  51+ 0F65 6F               ld l, a
  52+ 0F66 11 00 04         ld de, $0400
  53+ 0F69 B7               or a
  54+ 0F6A ED 52            sbc hl,de                   ; Compare hl with de
  55+ 0F6C 30 0B            jr nc, show_kilobytes
  56+ 0F6E
  57+ 0F6E              show_bytes:
  58+ 0F6E CD 0E 10         call multiply_filesize_by_10
  59+ 0F71 3E 42            ld a, 'B'
  60+ 0F73 32 0A 07         ld (filesize_units),a
  61+ 0F76 C3 AC 0F         jp show_filesize1
  62+ 0F79              show_kilobytes:
  63+ 0F79 CD 0E 10         call multiply_filesize_by_10
  64+ 0F7C 3E 4B            ld a, 'K'
  65+ 0F7E 32 0A 07         ld (filesize_units),a
  66+ 0F81 CD 4E 10         call divide_filesize_by_1024
  67+ 0F84 C3 AC 0F         jp show_filesize1
  68+ 0F87              show_megabytes:
  69+ 0F87 CD 0E 10         call multiply_filesize_by_10
  70+ 0F8A 3E 4D            ld a, 'M'
  71+ 0F8C 32 0A 07         ld (filesize_units),a
  72+ 0F8F CD 4E 10         call divide_filesize_by_1024
  73+ 0F92 CD 4E 10         call divide_filesize_by_1024
  74+ 0F95 C3 AC 0F         jp show_filesize1
  75+ 0F98              show_gigabytes:
  76+ 0F98 CD 0E 10         call multiply_filesize_by_10
  77+ 0F9B 3E 47            ld a, 'G'
  78+ 0F9D 32 0A 07         ld (filesize_units),a
  79+ 0FA0 CD 4E 10         call divide_filesize_by_1024
  80+ 0FA3 CD 4E 10         call divide_filesize_by_1024
  81+ 0FA6 CD 4E 10         call divide_filesize_by_1024
  82+ 0FA9 C3 AC 0F         jp show_filesize1
  83+ 0FAC
  84+ 0FAC              show_filesize1:
  85+ 0FAC                  ; We now have a number from 0 to 1023 in the filesize_buffer bytes 4 & 5.
  86+ 0FAC 3A 04 C0         ld a, (filesize_buffer+4)
  87+ 0FAF 67               ld h, a
  88+ 0FB0 3A 05 C0         ld a, (filesize_buffer+5)
  89+ 0FB3 6F               ld l, a
  90+ 0FB4 CD A3 10         call show_hl_as_decimal_to_buffer
  91+ 0FB7
  92+ 0FB7                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading zeros
  93+ 0FB7
  94+ 0FB7 CD EC 0F         call remove_leading_zeros
  95+ 0FBA
  96+ 0FBA                  ; By this point the number is in filesize_buffer as a string of 5 digits with leading spaces
  97+ 0FBA
  98+ 0FBA 11 00 C0         ld de, filesize_buffer
  99+ 0FBD 06 04            ld b, 4                         ; show first 4 digits of filesize
 100+ 0FBF              show_filesize2:
 101+ 0FBF 1A               ld a, (de)
 102+ 0FC0 CD 64 07         call print_a
 103+ 0FC3 13               inc de
 104+ 0FC4 10 F9            djnz show_filesize2
 105+ 0FC6 3E 2E            ld a, '.'                       ; then a dot
 106+ 0FC8 CD 64 07         call print_a
 107+ 0FCB 1A               ld a, (de)                      ; then the last digit
 108+ 0FCC CD 64 07         call print_a
 109+ 0FCF CD 9C 07         call space
 110+ 0FD2
 111+ 0FD2 3A 0A 07         ld a, (filesize_units)
 112+ 0FD5 FE 42            cp 'B'
 113+ 0FD7 20 0A            jr nz, show_filesize3
 114+ 0FD9 CD 0C 08         call message
 115+ 0FDC 62 79 74 65      db 'bytes',0
 115+ 0FE0 73 00
 116+ 0FE2 C9               ret
 117+ 0FE3
 118+ 0FE3              show_filesize3:
 119+ 0FE3 CD 64 07         call print_a
 120+ 0FE6 3E 42            ld a, 'B'
 121+ 0FE8 CD 64 07         call print_a
 122+ 0FEB C9               ret
 123+ 0FEC
 124+ 0FEC              remove_leading_zeros:
 125+ 0FEC 3A 00 C0         ld a, (filesize_buffer)
 126+ 0FEF FE 30            cp '0'
 127+ 0FF1 C0               ret nz
 128+ 0FF2 3E 20            ld a, ' '
 129+ 0FF4 32 00 C0         ld (filesize_buffer), a
 130+ 0FF7
 131+ 0FF7 3A 01 C0         ld a, (filesize_buffer+1)
 132+ 0FFA FE 30            cp '0'
 133+ 0FFC C0               ret nz
 134+ 0FFD 3E 20            ld a, ' '
 135+ 0FFF 32 01 C0         ld (filesize_buffer+1), a
 136+ 1002
 137+ 1002 3A 02 C0         ld a, (filesize_buffer+2)
 138+ 1005 FE 30            cp '0'
 139+ 1007 C0               ret nz
 140+ 1008 3E 20            ld a, ' '
 141+ 100A 32 02 C0         ld (filesize_buffer+2), a
 142+ 100D C9               ret
 143+ 100E
 144+ 100E              multiply_filesize_by_10:
 145+ 100E                  ; To multiply N by 10 we do this:
 146+ 100E                  ; Shift-left to get N x 2
 147+ 100E                  ; Shift-left twice more to get N x 8
 148+ 100E                  ; Add the two totals together
 149+ 100E CD 8D 10         call shift_left_filesize_buffer
 150+ 1011 CD 42 10         call copy_filesize_buffer               ; This is N x 2
 151+ 1014 CD 8D 10         call shift_left_filesize_buffer
 152+ 1017 CD 8D 10         call shift_left_filesize_buffer         ; Buffer has N x 8
 153+ 101A CD 1E 10         call add_filesize_buffer_copy           ; Add N*8 and N*2
 154+ 101D C9               ret
 155+ 101E
 156+ 101E              add_filesize_buffer_copy:
 157+ 101E                  ; Add the copy of the filesize_buffer back onto the real one
 158+ 101E 11 05 C0         ld de, filesize_buffer+5
 159+ 1021 21 0B C0         ld hl, filesize_buffer_copy+5
 160+ 1024 1A               ld a, (de)
 161+ 1025 B7               or a                        ; clear carry
 162+ 1026 8E               adc a, (hl)
 163+ 1027 12               ld (de), a
 164+ 1028 1B               dec de
 165+ 1029 2B               dec hl
 166+ 102A
 167+ 102A 1A               ld a, (de)
 168+ 102B 8E               adc a, (hl)
 169+ 102C 12               ld (de), a
 170+ 102D 1B               dec de
 171+ 102E 2B               dec hl
 172+ 102F
 173+ 102F 1A               ld a, (de)
 174+ 1030 8E               adc a, (hl)
 175+ 1031 12               ld (de), a
 176+ 1032 1B               dec de
 177+ 1033 2B               dec hl
 178+ 1034
 179+ 1034 1A               ld a, (de)
 180+ 1035 8E               adc a, (hl)
 181+ 1036 12               ld (de), a
 182+ 1037 1B               dec de
 183+ 1038 2B               dec hl
 184+ 1039
 185+ 1039 1A               ld a, (de)
 186+ 103A 8E               adc a, (hl)
 187+ 103B 12               ld (de), a
 188+ 103C 1B               dec de
 189+ 103D 2B               dec hl
 190+ 103E
 191+ 103E 1A               ld a, (de)
 192+ 103F 8E               adc a, (hl)
 193+ 1040 12               ld (de), a
 194+ 1041
 195+ 1041 C9               ret
 196+ 1042
 197+ 1042              copy_filesize_buffer:
 198+ 1042 11 06 C0         ld de, filesize_buffer_copy
 199+ 1045 21 00 C0         ld hl, filesize_buffer
 200+ 1048 01 06 00         ld bc, 6
 201+ 104B ED B0            ldir
 202+ 104D C9               ret
 203+ 104E
 204+ 104E              divide_filesize_by_1024:
 205+ 104E                  ; Shift everything right by 1 byte
 206+ 104E 3A 04 C0         ld a, (filesize_buffer+4)
 207+ 1051 32 05 C0         ld (filesize_buffer+5), a
 208+ 1054 3A 03 C0         ld a, (filesize_buffer+3)
 209+ 1057 32 04 C0         ld (filesize_buffer+4), a
 210+ 105A 3A 02 C0         ld a, (filesize_buffer+2)
 211+ 105D 32 03 C0         ld (filesize_buffer+3), a
 212+ 1060 3A 01 C0         ld a, (filesize_buffer+1)
 213+ 1063 32 02 C0         ld (filesize_buffer+2), a
 214+ 1066 3A 00 C0         ld a, (filesize_buffer+0)
 215+ 1069 32 01 C0         ld (filesize_buffer+1), a
 216+ 106C 97               sub a                       ; Put zero in top byte
 217+ 106D 32 00 C0         ld (filesize_buffer+0), a
 218+ 1070
 219+ 1070                  ; Then SHIFT-RIGHT by two bits
 220+ 1070 CD 77 10         call shift_right_filesize_buffer
 221+ 1073 CD 77 10         call shift_right_filesize_buffer
 222+ 1076 C9               ret
 223+ 1077
 224+ 1077              shift_right_filesize_buffer:
 225+ 1077 21 00 C0         ld hl, filesize_buffer
 226+ 107A B7               or a                        ; clear carry
 227+ 107B CB 1E            rr (hl)
 228+ 107D 23               inc hl
 229+ 107E CB 1E            rr (hl)
 230+ 1080 23               inc hl
 231+ 1081 CB 1E            rr (hl)
 232+ 1083 23               inc hl
 233+ 1084 CB 1E            rr (hl)
 234+ 1086 23               inc hl
 235+ 1087 CB 1E            rr (hl)
 236+ 1089 23               inc hl
 237+ 108A CB 1E            rr (hl)
 238+ 108C C9               ret
 239+ 108D
 240+ 108D              shift_left_filesize_buffer:
 241+ 108D 21 05 C0         ld hl, filesize_buffer+5
 242+ 1090 B7               or a                        ; clear carry
 243+ 1091 CB 16            rl (hl)
 244+ 1093 2B               dec hl
 245+ 1094 CB 16            rl (hl)
 246+ 1096 2B               dec hl
 247+ 1097 CB 16            rl (hl)
 248+ 1099 2B               dec hl
 249+ 109A CB 16            rl (hl)
 250+ 109C 2B               dec hl
 251+ 109D CB 16            rl (hl)
 252+ 109F 2B               dec hl
 253+ 10A0 CB 16            rl (hl)
 254+ 10A2 C9               ret
 255+ 10A3
 256+ 10A3              show_hl_as_decimal_to_buffer:
 257+ 10A3                  ; Routine adapted from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Other:DispHL
 258+ 10A3 11 00 C0         ld de, filesize_buffer  ; We put the result here as a string
 259+ 10A6 01 F0 D8     	ld	bc,-10000
 260+ 10A9 CD BF 10     	call	show_hl_as_decimal_to_buffer1
 261+ 10AC 01 18 FC     	ld	bc,-1000
 262+ 10AF CD BF 10     	call	show_hl_as_decimal_to_buffer1
 263+ 10B2 01 9C FF     	ld	bc,-100
 264+ 10B5 CD BF 10     	call	show_hl_as_decimal_to_buffer1
 265+ 10B8 0E F6        	ld	c,-10
 266+ 10BA CD BF 10     	call	show_hl_as_decimal_to_buffer1
 267+ 10BD 0E FF        	ld	c,-1
 268+ 10BF              show_hl_as_decimal_to_buffer1:
 269+ 10BF 3E 2F            ld	a,'0'-1
 270+ 10C1              show_hl_as_decimal_to_buffer2:
 271+ 10C1 3C               inc	a
 272+ 10C2 09           	add	hl,bc
 273+ 10C3 38 FC        	jr	c,show_hl_as_decimal_to_buffer2
 274+ 10C5 ED 42        	sbc	hl,bc
 275+ 10C7 12           	ld (de), a
 276+ 10C8 13               inc de
 277+ 10C9 C9           	ret
 278+ 10CA
# file closed: filesize.asm
 938  10CA                  include "monitor.asm"
# file opened: monitor.asm
   1+ 10CA              ; monitor.asm
   2+ 10CA              ; The low-level monitor
   3+ 10CA
   4+ 10CA              monitor_start:
   5+ 10CA CD D2 14         call monitor_init
   6+ 10CD
   7+ 10CD              monitor_restart:
   8+ 10CD CD C0 1C     	call clear_screen
   9+ 10D0 CD C0 12     	call show_welcome_message
  10+ 10D3
  11+ 10D3              	; If there is an auto-run-character defined, use that instead of a key press.
  12+ 10D3 3A FF 8F     	ld a, (auto_run_char)
  13+ 10D6 FE 00        	cp 0
  14+ 10D8 20 08        	jr nz, monitor_loop2
  15+ 10DA
  16+ 10DA              monitor_loop:
  17+ 10DA 3E 3E        	ld a, '>'
  18+ 10DC CD 64 07     	call print_a
  19+ 10DF              monitor_loop1:
  20+ 10DF CD A2 07     	call char_in			; get a char from keyboard
  21+ 10E2              monitor_loop2:
  22+ 10E2 FE 00        	cp 0					; If it's null, ignore it
  23+ 10E4 28 F9        	jr z,monitor_loop1
  24+ 10E6 FE 30        	cp '0'					; '0' = go to page 0
  25+ 10E8 20 06        	jr nz,not0
  26+ 10EA CD B0 19     	call goto_page_0
  27+ 10ED C3 DA 10     	jp monitor_loop
  28+ 10F0              not0:
  29+ 10F0 FE 75        	cp 'u'					; User light toggle
  30+ 10F2 20 1D        	jr nz,notu
  31+ 10F4 CD 0C 08     	call message
  32+ 10F7 55 73 65 72  	db 'User LED toggled!',13,10,0
  32+ 10FB 20 4C 45 44
  32+ 10FF 20 74 6F 67
  32+ 1103 67 6C 65 64
  32+ 1107 21 0D 0A 00
  33+ 110B CD EB 07     	call user_toggle
  34+ 110E C3 DA 10     	jp monitor_loop
  35+ 1111              notu:
  36+ 1111 FE 33        	cp '3'					; ROM light on
  37+ 1113 20 1F        	jr nz,not3
  38+ 1115 CD 0C 08     	call message
  39+ 1118 52 4F 4D 20  	db 'ROM light is now ON',13,10,0
  39+ 111C 6C 69 67 68
  39+ 1120 74 20 69 73
  39+ 1124 20 6E 6F 77
  39+ 1128 20 4F 4E 0D
  39+ 112C 0A 00
  40+ 112E CD FE 07     	call rom_on
  41+ 1131 C3 DA 10     	jp monitor_loop
  42+ 1134              not3:
  43+ 1134 FE 34        	cp '4'					; ROM light off
  44+ 1136 20 20        	jr nz,not4
  45+ 1138 CD 0C 08     	call message
  46+ 113B 52 4F 4D 20  	db 'ROM light is now OFF',13,10,0
  46+ 113F 6C 69 67 68
  46+ 1143 74 20 69 73
  46+ 1147 20 6E 6F 77
  46+ 114B 20 4F 46 46
  46+ 114F 0D 0A 00
  47+ 1152 CD 05 08     	call rom_off
  48+ 1155 C3 DA 10     	jp monitor_loop
  49+ 1158              not4:
  50+ 1158 FE 64        	cp 'd'					; Disk LED toggle
  51+ 115A 20 1D        	jr nz,not5
  52+ 115C CD 0C 08     	call message
  53+ 115F 44 49 53 4B  	db 'DISK LED toggled!',13,10,0
  53+ 1163 20 4C 45 44
  53+ 1167 20 74 6F 67
  53+ 116B 67 6C 65 64
  53+ 116F 21 0D 0A 00
  54+ 1173 CD D0 07     	call disk_toggle
  55+ 1176 C3 DA 10     	jp monitor_loop
  56+ 1179              not5:
  57+ 1179 FE 35        	cp '5'					; ROM light off
  58+ 117B 20 19        	jr nz,notd
  59+ 117D CD 0C 08     	call message
  60+ 1180 52 41 4D 20  	db 'RAM copied...',13,10,0
  60+ 1184 63 6F 70 69
  60+ 1188 65 64 2E 2E
  60+ 118C 2E 0D 0A 00
  61+ 1190 CD FD 14     	call copy_ram
  62+ 1193 C3 DA 10     	jp monitor_loop
  63+ 1196              notd:
  64+ 1196 FE 68        	cp 'h'					; Higher page
  65+ 1198 20 0D        	jr nz,not66
  66+ 119A 3A 64 EA     	ld a,(current_page)
  67+ 119D 3C           	inc a
  68+ 119E 32 64 EA     	ld (current_page),a
  69+ 11A1 CD CC 1C     	call show_page
  70+ 11A4 C3 DA 10     	jp monitor_loop
  71+ 11A7              not66:
  72+ 11A7 FE 36        	cp '6'					; Higher page
  73+ 11A9 20 0B        	jr nz,noth
  74+ 11AB 3E 80        	ld a, 0x80
  75+ 11AD 32 64 EA     	ld (current_page),a
  76+ 11B0 CD CC 1C     	call show_page
  77+ 11B3 C3 DA 10     	jp monitor_loop
  78+ 11B6              noth:
  79+ 11B6 FE 6C        	cp 'l'					; Lower page
  80+ 11B8 20 0D        	jr nz,notl
  81+ 11BA 3A 64 EA     	ld a,(current_page)
  82+ 11BD 3D           	dec a
  83+ 11BE 32 64 EA     	ld (current_page),a
  84+ 11C1 CD CC 1C     	call show_page
  85+ 11C4 C3 DA 10     	jp monitor_loop
  86+ 11C7              notl:
  87+ 11C7 FE 6D        	cp 'm'					; Memory map
  88+ 11C9 20 06        	jr nz,notm
  89+ 11CB CD 1C 15     	call show_memory_map
  90+ 11CE C3 DA 10     	jp monitor_loop
  91+ 11D1
  92+ 11D1              notm:
  93+ 11D1 FE 2F        	cp '/'					; Show Menu
  94+ 11D3 20 09        	jr nz,not_slash
  95+ 11D5 CD C0 1C     	call clear_screen
  96+ 11D8 CD C0 12     	call show_welcome_message
  97+ 11DB C3 DA 10     	jp monitor_loop
  98+ 11DE
  99+ 11DE              not_slash:
 100+ 11DE FE 36        	cp '6'					; Test Uart
 101+ 11E0 20 0F        	jr nz,not6
 102+ 11E2 CD C0 1C     	call clear_screen
 103+ 11E5 CD 5A 1D     	call test_uart
 104+ 11E8 CD C0 1C     	call clear_screen
 105+ 11EB CD C0 12     	call show_welcome_message
 106+ 11EE C3 DA 10     	jp monitor_loop
 107+ 11F1
 108+ 11F1              not6:
 109+ 11F1 FE 23        	cp '#'					; HALT
 110+ 11F3 20 3C        	jr nz,not_hash
 111+ 11F5 CD 0C 08     	call message
 112+ 11F8 48 41 4C 54  	db 'HALTing Z80. You will need to press Reset after this!',13,10,0
 112+ 11FC 69 6E 67 20
 112+ 1200 5A 38 30 2E
 112+ 1204 20 59 6F 75
 112+ 1208 20 77 69 6C
 112+ 120C 6C 20 6E 65
 112+ 1210 65 64 20 74
 112+ 1214 6F 20 70 72
 112+ 1218 65 73 73 20
 112+ 121C 52 65 73 65
 112+ 1220 74 20 61 66
 112+ 1224 74 65 72 20
 112+ 1228 74 68 69 73
 112+ 122C 21 0D 0A 00
 113+ 1230 76           	halt
 114+ 1231
 115+ 1231              not_hash:
 116+ 1231 FE 63        	cp 'c'					; CP/M
 117+ 1233 20 5A        	jr nz, not_c
 118+ 1235 CD 0C 08         call message
 119+ 1238 53 74 61 72      db 'Starting CP/M... ',13,10
 119+ 123C 74 69 6E 67
 119+ 1240 20 43 50 2F
 119+ 1244 4D 2E 2E 2E
 119+ 1248 20 0D 0A
 120+ 124B 4D 61 6B 65  	db 'Make sure you have selected MSX ',13,10
 120+ 124F 20 73 75 72
 120+ 1253 65 20 79 6F
 120+ 1257 75 20 68 61
 120+ 125B 76 65 20 73
 120+ 125F 65 6C 65 63
 120+ 1263 74 65 64 20
 120+ 1267 4D 53 58 20
 120+ 126B 0D 0A
 121+ 126D 70 72 6F 70  	db 'proper slot memory decoder".',13,10,0
 121+ 1271 65 72 20 73
 121+ 1275 6C 6F 74 20
 121+ 1279 6D 65 6D 6F
 121+ 127D 72 79 20 64
 121+ 1281 65 63 6F 64
 121+ 1285 65 72 22 2E
 121+ 1289 0D 0A 00
 122+ 128C C3 DB 01         jp start_cpm
 123+ 128F
 124+ 128F              not_c:
 125+ 128F FE 74        	cp 't'					; Tiny Basic
 126+ 1291 20 09        	jr nz, not_t
 127+ 1293 CD 18 0B         call check_tbasic_structure
 128+ 1296 CD 1B 27         call TBSTART
 129+ 1299 C3 CD 10     	jp monitor_restart
 130+ 129C
 131+ 129C              not_t:
 132+ 129C FE 67        	cp 'g'					; Game-of-Life
 133+ 129E 20 06        	jr nz, not_g
 134+ 12A0 CD 35 33         call GOFL_Begin
 135+ 12A3 C3 CD 10     	jp monitor_restart
 136+ 12A6
 137+ 12A6              not_g:
 138+ 12A6 FE 62        	cp 'b'					; Burn-in test
 139+ 12A8 20 06        	jr nz, not_b
 140+ 12AA CD BC 19         call burn_in
 141+ 12AD C3 CD 10     	jp monitor_restart
 142+ 12B0
 143+ 12B0              not_b:
 144+ 12B0 FE 6A        	cp 'j'					; Load jupiter.bin
 145+ 12B2 20 03        	jr nz, unknown_char
 146+ 12B4 C3 33 26         jp load_jupiter_ace
 147+ 12B7
 148+ 12B7              unknown_char:
 149+ 12B7 CD 64 07     	call print_a			; If we don't understand it, show it!
 150+ 12BA CD 91 07     	call newline
 151+ 12BD C3 DA 10     	jp monitor_loop
 152+ 12C0
 153+ 12C0              show_welcome_message:
 154+ 12C0 CD 0C 08     	call message
 155+ 12C3 0D 0A        	db 13,10
 156+ 12C5 1B 5B 34 32  	db 27,'[42m','+---------------------------------+',13,10
 156+ 12C9 6D 2B 2D 2D
 156+ 12CD 2D 2D 2D 2D
 156+ 12D1 2D 2D 2D 2D
 156+ 12D5 2D 2D 2D 2D
 156+ 12D9 2D 2D 2D 2D
 156+ 12DD 2D 2D 2D 2D
 156+ 12E1 2D 2D 2D 2D
 156+ 12E5 2D 2D 2D 2D
 156+ 12E9 2D 2D 2D 2B
 156+ 12ED 0D 0A
 157+ 12EF 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                                 ',27,'[42m','|',13,10
 157+ 12F3 6D 7C 1B 5B
 157+ 12F7 34 30 6D 20
 157+ 12FB 20 20 20 20
 157+ 12FF 20 20 20 20
 157+ 1303 20 20 20 20
 157+ 1307 20 20 20 20
 157+ 130B 20 20 20 20
 157+ 130F 20 20 20 20
 157+ 1313 20 20 20 20
 157+ 1317 20 20 20 20
 157+ 131B 1B 5B 34 32
 157+ 131F 6D 7C 0D 0A
 158+ 1323 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','          Z80 Sandbox            ',27,'[42m','|',13,10
 158+ 1327 6D 7C 1B 5B
 158+ 132B 34 30 6D 20
 158+ 132F 20 20 20 20
 158+ 1333 20 20 20 20
 158+ 1337 20 5A 38 30
 158+ 133B 20 53 61 6E
 158+ 133F 64 62 6F 78
 158+ 1343 20 20 20 20
 158+ 1347 20 20 20 20
 158+ 134B 20 20 20 20
 158+ 134F 1B 5B 34 32
 158+ 1353 6D 7C 0D 0A
 159+ 1357 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','           by pdsilva            ',27,'[42m','|',13,10
 159+ 135B 6D 7C 1B 5B
 159+ 135F 34 30 6D 20
 159+ 1363 20 20 20 20
 159+ 1367 20 20 20 20
 159+ 136B 20 20 62 79
 159+ 136F 20 70 64 73
 159+ 1373 69 6C 76 61
 159+ 1377 20 20 20 20
 159+ 137B 20 20 20 20
 159+ 137F 20 20 20 20
 159+ 1383 1B 5B 34 32
 159+ 1387 6D 7C 0D 0A
 160+ 138B 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','     Monitor v2.00 July 2022     ',27,'[42m','|',13,10
 160+ 138F 6D 7C 1B 5B
 160+ 1393 34 30 6D 20
 160+ 1397 20 20 20 20
 160+ 139B 4D 6F 6E 69
 160+ 139F 74 6F 72 20
 160+ 13A3 76 32 2E 30
 160+ 13A7 30 20 4A 75
 160+ 13AB 6C 79 20 32
 160+ 13AF 30 32 32 20
 160+ 13B3 20 20 20 20
 160+ 13B7 1B 5B 34 32
 160+ 13BB 6D 7C 0D 0A
 161+ 13BF 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','   CP/M Loader  v2.00 july 2022  ',27,'[42m','|',13,10
 161+ 13C3 6D 7C 1B 5B
 161+ 13C7 34 30 6D 20
 161+ 13CB 20 20 43 50
 161+ 13CF 2F 4D 20 4C
 161+ 13D3 6F 61 64 65
 161+ 13D7 72 20 20 76
 161+ 13DB 32 2E 30 30
 161+ 13DF 20 6A 75 6C
 161+ 13E3 79 20 32 30
 161+ 13E7 32 32 20 20
 161+ 13EB 1B 5B 34 32
 161+ 13EF 6D 7C 0D 0A
 162+ 13F3 1B 5B 34 32  	db 27,'[42m','|',27,'[40m','                                 ',27,'[42m','|',13,10
 162+ 13F7 6D 7C 1B 5B
 162+ 13FB 34 30 6D 20
 162+ 13FF 20 20 20 20
 162+ 1403 20 20 20 20
 162+ 1407 20 20 20 20
 162+ 140B 20 20 20 20
 162+ 140F 20 20 20 20
 162+ 1413 20 20 20 20
 162+ 1417 20 20 20 20
 162+ 141B 20 20 20 20
 162+ 141F 1B 5B 34 32
 162+ 1423 6D 7C 0D 0A
 163+ 1427 1B 5B 34 32  	db 27,'[42m','+---------------------------------+',27,'[40m',13,10,13,10
 163+ 142B 6D 2B 2D 2D
 163+ 142F 2D 2D 2D 2D
 163+ 1433 2D 2D 2D 2D
 163+ 1437 2D 2D 2D 2D
 163+ 143B 2D 2D 2D 2D
 163+ 143F 2D 2D 2D 2D
 163+ 1443 2D 2D 2D 2D
 163+ 1447 2D 2D 2D 2D
 163+ 144B 2D 2D 2D 2B
 163+ 144F 1B 5B 34 30
 163+ 1453 6D 0D 0A 0D
 163+ 1457 0A
 164+ 1458 63 20 3D 20  	db 'c = CP/M v2.2', 13, 10
 164+ 145C 43 50 2F 4D
 164+ 1460 20 76 32 2E
 164+ 1464 32 0D 0A
 165+ 1467              	;db 't = Tiny Basic',13,10
 166+ 1467              	;db 'g = Game-of-Life',13,10
 167+ 1467 6D 20 3D 20  	db 'm = Memory Map', 13, 10
 167+ 146B 4D 65 6D 6F
 167+ 146F 72 79 20 4D
 167+ 1473 61 70 0D 0A
 168+ 1477              	;db '0 = Show Page 0 of Memory', 13, 10
 169+ 1477              	;db 'h = Move to Higher Page', 13, 10
 170+ 1477              	;db 'l = Move to Lower Page', 13, 10
 171+ 1477 75 20 3D 20  	db 'u = User LED toggle', 13, 10
 171+ 147B 55 73 65 72
 171+ 147F 20 4C 45 44
 171+ 1483 20 74 6F 67
 171+ 1487 67 6C 65 0D
 171+ 148B 0A
 172+ 148C 33 20 3D 20  	db '3 = ROM ON', 13, 10
 172+ 1490 52 4F 4D 20
 172+ 1494 4F 4E 0D 0A
 173+ 1498 34 20 3D 20  	db '4 = ROM OFF', 13, 10
 173+ 149C 52 4F 4D 20
 173+ 14A0 4F 46 46 0D
 173+ 14A4 0A
 174+ 14A5              	;db '5 = Copy ram', 13, 10
 175+ 14A5 64 20 3D 20  	db 'd = Disk LED toggle', 13, 10
 175+ 14A9 44 69 73 6B
 175+ 14AD 20 4C 45 44
 175+ 14B1 20 74 6F 67
 175+ 14B5 67 6C 65 0D
 175+ 14B9 0A
 176+ 14BA              	;db '# = Execute HALT instruction',13,10
 177+ 14BA              	;db 'b = Run burn-in test',13,10
 178+ 14BA 2F 20 3D 20  	db '/ = Show this Menu',13,10
 178+ 14BE 53 68 6F 77
 178+ 14C2 20 74 68 69
 178+ 14C6 73 20 4D 65
 178+ 14CA 6E 75 0D 0A
 179+ 14CE              	;db 'j = Poor-Man''s Jupiter Ace',13,10
 180+ 14CE 0D 0A 00     	db 13,10,0
 181+ 14D1 C9           	ret
 182+ 14D2
 183+ 14D2              monitor_init:
 184+ 14D2                  ; Four flashes on the USER (blue) LED and disk (yellow) LED
 185+ 14D2 06 04            ld b, 4
 186+ 14D4              monitor_init1:
 187+ 14D4 C5               push bc
 188+ 14D5 CD F1 07     	call user_off
 189+ 14D8 CD DD 07     	call disk_on
 190+ 14DB CD C1 07     	call medium_pause
 191+ 14DE CD E4 07     	call user_on
 192+ 14E1 CD D6 07     	call disk_off
 193+ 14E4 CD C1 07     	call medium_pause
 194+ 14E7 C1               pop bc
 195+ 14E8 10 EA            djnz monitor_init1
 196+ 14EA CD F1 07     	call user_off
 197+ 14ED
 198+ 14ED CD F1 14         call ram_fill
 199+ 14F0 C9               ret
 200+ 14F1
 201+ 14F1              ram_fill:
 202+ 14F1                  ; Copy the first 16k of ROM down to ram
 203+ 14F1 21 00 00     	ld hl,0
 204+ 14F4 11 00 00     	ld de,0
 205+ 14F7 01 00 40     	ld bc, 1024*16
 206+ 14FA ED B0        	ldir
 207+ 14FC C9               ret
 208+ 14FD
 209+ 14FD              copy_ram:
 210+ 14FD                  ; Copy the first 16k of ROM down to ram
 211+ 14FD 21 00 00     	ld hl,0
 212+ 1500 11 00 80     	ld de,	0x8000
 213+ 1503 01 00 40     	ld bc,	1024*16
 214+ 1506 ED B0        	ldir
 215+ 1508 C9               ret
 216+ 1509
 217+ 1509              ;--------------------------------------------------------------------------------------------------
 218+ 1509
 219+ 1509              	; If this memory crosses a 1K memory boundary there is the danger
 220+ 1509              	; that the memory testing will corrupt the code that is running.
 221+ 1509              	; If memory map crashes, this is why.
 222+ 1509              	; TODO: Relocate this code to a safe location, such as 1024.
 223+ 1509
 224+ 1509 44 41 4E 47  	db 'DANGER AREA STARTS '
 224+ 150D 45 52 20 41
 224+ 1511 52 45 41 20
 224+ 1515 53 54 41 52
 224+ 1519 54 53 20
 225+ 151C
 226+ 151C              show_memory_map:
 227+ 151C              	; Look at the first byte of each 1K block.
 228+ 151C              	; If it is ROM show one char, if RAM show another.
 229+ 151C CD C0 1C     	call clear_screen
 230+ 151F CD 91 07     	call newline
 231+ 1522 11 00 00     	ld de,0
 232+ 1525 06 40        	ld b,64
 233+ 1527
 234+ 1527              map_loop:
 235+ 1527 C5           	push bc
 236+ 1528
 237+ 1528 1A           	ld a,(de)			; get initial value
 238+ 1529 47           	ld b,a
 239+ 152A
 240+ 152A 3E 00        	ld a,0
 241+ 152C 12           	ld (de),a			; see if a 0 stores
 242+ 152D 1A           	ld a,(de)
 243+ 152E FE 00        	cp 0
 244+ 1530 20 10        	jr nz,rom_location
 245+ 1532
 246+ 1532 3E FF        	ld a,255
 247+ 1534 12           	ld (de),a			; see if a 255 stores
 248+ 1535 1A           	ld a,(de)
 249+ 1536 FE FF        	cp 255
 250+ 1538 20 08        	jr nz,rom_location
 251+ 153A
 252+ 153A              ram_location:
 253+ 153A CD 0C 08     	call message
 254+ 153D 20 00        	db ' ',0
 255+ 153F C3 50 15     	jp shown_location
 256+ 1542              rom_location:
 257+ 1542 CD 0C 08     	call message
 258+ 1545 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',0
 258+ 1549 6D 52 1B 5B
 258+ 154D 30 6D 00
 259+ 1550              shown_location:
 260+ 1550
 261+ 1550 78           	ld a,b				; restore initial value
 262+ 1551 12           	ld (de),a
 263+ 1552
 264+ 1552 C1           	pop bc
 265+ 1553 21 00 04     	ld hl, 1024
 266+ 1556 19           	add hl,de
 267+ 1557 EB           	ex de,hl
 268+ 1558 10 CD        	djnz map_loop
 269+ 155A
 270+ 155A CD 91 07     	call newline
 271+ 155D              	; Now show a row all of ram
 272+ 155D 06 40        	ld b, 64
 273+ 155F              ram_loop:
 274+ 155F C5           	push bc
 275+ 1560 CD 0C 08     	call message
 276+ 1563 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',0
 276+ 1567 6D 72 1B 5B
 276+ 156B 30 6D 00
 277+ 156E C1           	pop bc
 278+ 156F 10 EE        	djnz ram_loop
 279+ 1571
 280+ 1571 CD 91 07     	call newline
 281+ 1574 CD 0C 08     	call message
 282+ 1577 5A 38 30 20  	db 'Z80 Sandbox structure by pdsilva',13,10
 282+ 157B 53 61 6E 64
 282+ 157F 62 6F 78 20
 282+ 1583 73 74 72 75
 282+ 1587 63 74 75 72
 282+ 158B 65 20 62 79
 282+ 158F 20 70 64 73
 282+ 1593 69 6C 76 61
 282+ 1597 0D 0A
 283+ 1599 7C 20 20 20  	db '|       |       |       |       |       |       |       |      |',13,10
 283+ 159D 20 20 20 20
 283+ 15A1 7C 20 20 20
 283+ 15A5 20 20 20 20
 283+ 15A9 7C 20 20 20
 283+ 15AD 20 20 20 20
 283+ 15B1 7C 20 20 20
 283+ 15B5 20 20 20 20
 283+ 15B9 7C 20 20 20
 283+ 15BD 20 20 20 20
 283+ 15C1 7C 20 20 20
 283+ 15C5 20 20 20 20
 283+ 15C9 7C 20 20 20
 283+ 15CD 20 20 20 20
 283+ 15D1 7C 20 20 20
 283+ 15D5 20 20 20 7C
 283+ 15D9 0D 0A
 284+ 15DB 30 30 30 30  	db '0000    2000    4000    6000    8000    A000    C000    E000   FFFF',13,10
 284+ 15DF 20 20 20 20
 284+ 15E3 32 30 30 30
 284+ 15E7 20 20 20 20
 284+ 15EB 34 30 30 30
 284+ 15EF 20 20 20 20
 284+ 15F3 36 30 30 30
 284+ 15F7 20 20 20 20
 284+ 15FB 38 30 30 30
 284+ 15FF 20 20 20 20
 284+ 1603 41 30 30 30
 284+ 1607 20 20 20 20
 284+ 160B 43 30 30 30
 284+ 160F 20 20 20 20
 284+ 1613 45 30 30 30
 284+ 1617 20 20 20 46
 284+ 161B 46 46 46 0D
 284+ 161F 0A
 285+ 1620 30 4B 20 20  	db '0K      8K      16K     24K     32K     40K     48K     56K    64K',13,10,13,10
 285+ 1624 20 20 20 20
 285+ 1628 38 4B 20 20
 285+ 162C 20 20 20 20
 285+ 1630 31 36 4B 20
 285+ 1634 20 20 20 20
 285+ 1638 32 34 4B 20
 285+ 163C 20 20 20 20
 285+ 1640 33 32 4B 20
 285+ 1644 20 20 20 20
 285+ 1648 34 30 4B 20
 285+ 164C 20 20 20 20
 285+ 1650 34 38 4B 20
 285+ 1654 20 20 20 20
 285+ 1658 35 36 4B 20
 285+ 165C 20 20 20 36
 285+ 1660 34 4B 0D 0A
 285+ 1664 0D 0A
 286+ 1666 1B 5B 34 31  	db 27,'[41m','R',27,'[0m',' = ROM    '
 286+ 166A 6D 52 1B 5B
 286+ 166E 30 6D 20 3D
 286+ 1672 20 52 4F 4D
 286+ 1676 20 20 20 20
 287+ 167A 1B 5B 34 32  	db 27,'[42m','r',27,'[0m',' = RAM',13,10
 287+ 167E 6D 72 1B 5B
 287+ 1682 30 6D 20 3D
 287+ 1686 20 52 41 4D
 287+ 168A 0D 0A
 288+ 168C 0D 0A            db 13,10
 289+ 168E 31 36 43 35  	db '16C550C UART Ports     CH376S Module Ports',13,10
 289+ 1692 35 30 43 20
 289+ 1696 55 41 52 54
 289+ 169A 20 50 6F 72
 289+ 169E 74 73 20 20
 289+ 16A2 20 20 20 43
 289+ 16A6 48 33 37 36
 289+ 16AA 53 20 4D 6F
 289+ 16AE 64 75 6C 65
 289+ 16B2 20 50 6F 72
 289+ 16B6 74 73 0D 0A
 290+ 16BA 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 290+ 16BE 2D 2D 2D 2D
 290+ 16C2 2D 2D 2D 2D
 290+ 16C6 2D 2D 2D 2D
 290+ 16CA 2D 2D 2D 20
 290+ 16CE 20 20 20 2D
 290+ 16D2 2D 2D 2D 2D
 290+ 16D6 2D 2D 2D 2D
 290+ 16DA 2D 2D 2D 2D
 290+ 16DE 2D 2D 2D 2D
 290+ 16E2 2D 2D 0D 0A
 291+ 16E6 54 58 20 2F  	db 'TX / RX          B8    Data Port        A0',13,10
 291+ 16EA 20 52 58 20
 291+ 16EE 20 20 20 20
 291+ 16F2 20 20 20 20
 291+ 16F6 20 42 38 20
 291+ 16FA 20 20 20 44
 291+ 16FE 61 74 61 20
 291+ 1702 50 6F 72 74
 291+ 1706 20 20 20 20
 291+ 170A 20 20 20 20
 291+ 170E 41 30 0D 0A
 292+ 1712 49 6E 74 65  	db 'Interrupt Enable B9    Command Port     A1',13,10
 292+ 1716 72 72 75 70
 292+ 171A 74 20 45 6E
 292+ 171E 61 62 6C 65
 292+ 1722 20 42 39 20
 292+ 1726 20 20 20 43
 292+ 172A 6F 6D 6D 61
 292+ 172E 6E 64 20 50
 292+ 1732 6F 72 74 20
 292+ 1736 20 20 20 20
 292+ 173A 41 31 0D 0A
 293+ 173E 49 6E 74 65  	db 'Interrup Status  BA    ',13,10
 293+ 1742 72 72 75 70
 293+ 1746 20 53 74 61
 293+ 174A 74 75 73 20
 293+ 174E 20 42 41 20
 293+ 1752 20 20 20 0D
 293+ 1756 0A
 294+ 1757 4C 69 6E 65  	db 'Line Control     BB    ',13,10
 294+ 175B 20 43 6F 6E
 294+ 175F 74 72 6F 6C
 294+ 1763 20 20 20 20
 294+ 1767 20 42 42 20
 294+ 176B 20 20 20 0D
 294+ 176F 0A
 295+ 1770 4D 6F 64 65  	db 'Modem Control    BC <---- 76543210',13,10
 295+ 1774 6D 20 43 6F
 295+ 1778 6E 74 72 6F
 295+ 177C 6C 20 20 20
 295+ 1780 20 42 43 20
 295+ 1784 3C 2D 2D 2D
 295+ 1788 2D 20 37 36
 295+ 178C 35 34 33 32
 295+ 1790 31 30 0D 0A
 296+ 1794 4C 69 6E 65  	db 'Line Status      BD      Bit 0 = User LED',13,10
 296+ 1798 20 53 74 61
 296+ 179C 74 75 73 20
 296+ 17A0 20 20 20 20
 296+ 17A4 20 42 44 20
 296+ 17A8 20 20 20 20
 296+ 17AC 20 42 69 74
 296+ 17B0 20 30 20 3D
 296+ 17B4 20 55 73 65
 296+ 17B8 72 20 4C 45
 296+ 17BC 44 0D 0A
 297+ 17BF 4D 6F 64 65  	db 'Modem Status     BE      Bit 2 = Disk LED',13,10
 297+ 17C3 6D 20 53 74
 297+ 17C7 61 74 75 73
 297+ 17CB 20 20 20 20
 297+ 17CF 20 42 45 20
 297+ 17D3 20 20 20 20
 297+ 17D7 20 42 69 74
 297+ 17DB 20 32 20 3D
 297+ 17DF 20 44 69 73
 297+ 17E3 6B 20 4C 45
 297+ 17E7 44 0D 0A
 298+ 17EA 53 63 72 61  	db 'Scratch          BF      Bit 3 = ROM Enable',13,10
 298+ 17EE 74 63 68 20
 298+ 17F2 20 20 20 20
 298+ 17F6 20 20 20 20
 298+ 17FA 20 42 46 20
 298+ 17FE 20 20 20 20
 298+ 1802 20 42 69 74
 298+ 1806 20 33 20 3D
 298+ 180A 20 52 4F 4D
 298+ 180E 20 45 6E 61
 298+ 1812 62 6C 65 0D
 298+ 1816 0A
 299+ 1817 0D 0A        	db 13,10
 300+ 1819 49 32 43 20  	db 'I2C - Z80              PPI 8255 	',13,10
 300+ 181D 2D 20 5A 38
 300+ 1821 30 20 20 20
 300+ 1825 20 20 20 20
 300+ 1829 20 20 20 20
 300+ 182D 20 20 20 50
 300+ 1831 50 49 20 38
 300+ 1835 32 35 35 20
 300+ 1839 09 0D 0A
 301+ 183C 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 301+ 1840 2D 2D 2D 2D
 301+ 1844 2D 2D 2D 2D
 301+ 1848 2D 2D 2D 2D
 301+ 184C 2D 2D 2D 20
 301+ 1850 20 20 20 2D
 301+ 1854 2D 2D 2D 2D
 301+ 1858 2D 2D 2D 2D
 301+ 185C 2D 2D 2D 2D
 301+ 1860 2D 2D 2D 2D
 301+ 1864 2D 2D 0D 0A
 302+ 1868 53 43 4C 20  	db 'SCL              80    Port A           A8',13,10
 302+ 186C 20 20 20 20
 302+ 1870 20 20 20 20
 302+ 1874 20 20 20 20
 302+ 1878 20 38 30 20
 302+ 187C 20 20 20 50
 302+ 1880 6F 72 74 20
 302+ 1884 41 20 20 20
 302+ 1888 20 20 20 20
 302+ 188C 20 20 20 20
 302+ 1890 41 38 0D 0A
 303+ 1894 53 44 41 5F  	db 'SDA_WR           88    Port B           A9',13,10
 303+ 1898 57 52 20 20
 303+ 189C 20 20 20 20
 303+ 18A0 20 20 20 20
 303+ 18A4 20 38 38 20
 303+ 18A8 20 20 20 50
 303+ 18AC 6F 72 74 20
 303+ 18B0 42 20 20 20
 303+ 18B4 20 20 20 20
 303+ 18B8 20 20 20 20
 303+ 18BC 41 39 0D 0A
 304+ 18C0 53 44 41 5F  	db 'SDA_RD           B0    Port C           AA',13,10
 304+ 18C4 52 44 20 20
 304+ 18C8 20 20 20 20
 304+ 18CC 20 20 20 20
 304+ 18D0 20 42 30 20
 304+ 18D4 20 20 20 50
 304+ 18D8 6F 72 74 20
 304+ 18DC 43 20 20 20
 304+ 18E0 20 20 20 20
 304+ 18E4 20 20 20 20
 304+ 18E8 41 41 0D 0A
 305+ 18EC 20 20 20 20  	db '                       Ctrl             AB',13,10
 305+ 18F0 20 20 20 20
 305+ 18F4 20 20 20 20
 305+ 18F8 20 20 20 20
 305+ 18FC 20 20 20 20
 305+ 1900 20 20 20 43
 305+ 1904 74 72 6C 20
 305+ 1908 20 20 20 20
 305+ 190C 20 20 20 20
 305+ 1910 20 20 20 20
 305+ 1914 41 42 0D 0A
 306+ 1918 50 43 46 38  	db 'PCF8574 - Z80              	',13,10
 306+ 191C 35 37 34 20
 306+ 1920 2D 20 5A 38
 306+ 1924 30 20 20 20
 306+ 1928 20 20 20 20
 306+ 192C 20 20 20 20
 306+ 1930 20 20 20 09
 306+ 1934 0D 0A
 307+ 1936 2D 2D 2D 2D  	db '-------------------    -------------------',13,10
 307+ 193A 2D 2D 2D 2D
 307+ 193E 2D 2D 2D 2D
 307+ 1942 2D 2D 2D 2D
 307+ 1946 2D 2D 2D 20
 307+ 194A 20 20 20 2D
 307+ 194E 2D 2D 2D 2D
 307+ 1952 2D 2D 2D 2D
 307+ 1956 2D 2D 2D 2D
 307+ 195A 2D 2D 2D 2D
 307+ 195E 2D 2D 0D 0A
 308+ 1962 50 6F 72 74      DB 'Port             27',13,10
 308+ 1966 20 20 20 20
 308+ 196A 20 20 20 20
 308+ 196E 20 20 20 20
 308+ 1972 20 32 37 0D
 308+ 1976 0A
 309+ 1977 54 68 65 20  	db 'The EEPROM is an ATMEL AT29C512 ID 1F5D',13,10
 309+ 197B 45 45 50 52
 309+ 197F 4F 4D 20 69
 309+ 1983 73 20 61 6E
 309+ 1987 20 41 54 4D
 309+ 198B 45 4C 20 41
 309+ 198F 54 32 39 43
 309+ 1993 35 31 32 20
 309+ 1997 49 44 20 31
 309+ 199B 46 35 44 0D
 309+ 199F 0A
 310+ 19A0 0D 0A 00     	db 13,10,0
 311+ 19A3 C9           	ret
 312+ 19A4
 313+ 19A4 44 41 4E 47  	db 'DANGER ENDS '
 313+ 19A8 45 52 20 45
 313+ 19AC 4E 44 53 20
 314+ 19B0
 315+ 19B0              ; -------------------------------------------------------------------------------------------------
 316+ 19B0              goto_page_0:
 317+ 19B0
 318+ 19B0 3E 00        	ld a, 0x0
 319+ 19B2 32 64 EA     	ld (current_page), a
 320+ 19B5 CD 91 07     	call newline
 321+ 19B8 CD CC 1C     	call show_page
 322+ 19BB C9           	ret
 323+ 19BC
 324+ 19BC              ; -------------------------------------------------------------------------------------------------
 325+ 19BC
 326+ 19BC              ; This is the BURN-IN test.
 327+ 19BC              ; I use it on new Z80 Playground boards that I have assemmbled, to check them.
 328+ 19BC              ; It runs for about an hour, reads and writes files to the USB Drive,
 329+ 19BC              ; flashes the LEDs, prints things to the screen etc.
 330+ 19BC              ; The idea is that if it is still running after an hour, the board is good.
 331+ 19BC              burn_x equ 39000
 332+ 19BC              burn_y equ 39001
 333+ 19BC              burn_in_dump_area equ 39002
 334+ 19BC
 335+ 19BC              burn_in:
 336+ 19BC CD 05 08     	call rom_off					; Needs to be off for ram-test to work
 337+ 19BF CD EB 07     	call user_toggle
 338+ 19C2 CD C0 1C     	call clear_screen
 339+ 19C5 CD 0C 08     	call message
 340+ 19C8 53 74 61 72  	db 'Starting BURN-IN test. This takes about 30 minutes.',13,10,0
 340+ 19CC 74 69 6E 67
 340+ 19D0 20 42 55 52
 340+ 19D4 4E 2D 49 4E
 340+ 19D8 20 74 65 73
 340+ 19DC 74 2E 20 54
 340+ 19E0 68 69 73 20
 340+ 19E4 74 61 6B 65
 340+ 19E8 73 20 61 62
 340+ 19EC 6F 75 74 20
 340+ 19F0 33 30 20 6D
 340+ 19F4 69 6E 75 74
 340+ 19F8 65 73 2E 0D
 340+ 19FC 0A 00
 341+ 19FE
 342+ 19FE              	; Draw empty box
 343+ 19FE
 344+ 19FE 3E 01        	ld a, 1
 345+ 1A00 32 59 98     	ld (burn_y), a
 346+ 1A03              draw_loop_y:
 347+ 1A03 CD 9C 07     	call space
 348+ 1A06 06 23        	ld b, 35
 349+ 1A08              draw_loop_x:
 350+ 1A08 3E B2        	ld a, 178
 351+ 1A0A CD 64 07     	call print_a
 352+ 1A0D 10 F9        	djnz draw_loop_x
 353+ 1A0F
 354+ 1A0F CD 91 07     	call newline
 355+ 1A12
 356+ 1A12 3A 59 98     	ld a, (burn_y)
 357+ 1A15 3C           	inc a
 358+ 1A16 32 59 98     	ld (burn_y), a
 359+ 1A19 FE 14        	cp 20
 360+ 1A1B 38 E6        	jr c, draw_loop_y
 361+ 1A1D
 362+ 1A1D              	; Now main burn in loop
 363+ 1A1D
 364+ 1A1D 3E 00        	ld a, 0
 365+ 1A1F 32 59 98     	ld (burn_y), a
 366+ 1A22              burn_in_loop_y:
 367+ 1A22 3E 00        	ld a, 0
 368+ 1A24 32 58 98     	ld (burn_x), a
 369+ 1A27              burn_in_loop_x:
 370+ 1A27 CD 88 1A     	call full_ram_test
 371+ 1A2A C2 90 1B     	jp nz, burn_in_ram_error
 372+ 1A2D CD A0 1A     	call one_minute_burn_in
 373+ 1A30 3A 58 98     	ld a, (burn_x)
 374+ 1A33 3C           	inc a
 375+ 1A34 32 58 98     	ld (burn_x), a
 376+ 1A37 FE 20        	cp 32
 377+ 1A39 20 EC        	jr nz, burn_in_loop_x
 378+ 1A3B 3A 59 98     	ld a, (burn_y)
 379+ 1A3E 3C           	inc a
 380+ 1A3F 32 59 98     	ld (burn_y), a
 381+ 1A42 FE 10        	cp 16
 382+ 1A44 20 DC        	jr nz, burn_in_loop_y
 383+ 1A46
 384+ 1A46 CD 91 07     	call newline
 385+ 1A49 CD 0C 08     	call message
 386+ 1A4C 0D 0A 59 41  	db 13,10,'YAY! All tests pass! Press a key to continue...',13,10,0
 386+ 1A50 59 21 20 41
 386+ 1A54 6C 6C 20 74
 386+ 1A58 65 73 74 73
 386+ 1A5C 20 70 61 73
 386+ 1A60 73 21 20 50
 386+ 1A64 72 65 73 73
 386+ 1A68 20 61 20 6B
 386+ 1A6C 65 79 20 74
 386+ 1A70 6F 20 63 6F
 386+ 1A74 6E 74 69 6E
 386+ 1A78 75 65 2E 2E
 386+ 1A7C 2E 0D 0A 00
 387+ 1A80              burn_in_wait:
 388+ 1A80 CD A2 07     	call char_in			; get a char from keyboard
 389+ 1A83 FE 00        	cp 0					; If it's null, ignore it
 390+ 1A85 28 F9        	jr z,burn_in_wait
 391+ 1A87 C9           	ret
 392+ 1A88
 393+ 1A88              full_ram_test:
 394+ 1A88              	; Tests all of ram.
 395+ 1A88              	; Returns Z set if success.
 396+ 1A88 21 FF FF     	ld hl, $FFFF
 397+ 1A8B              full_ram_test1:
 398+ 1A8B 46           	ld b, (hl)
 399+ 1A8C
 400+ 1A8C 36 55        	ld (hl), %01010101
 401+ 1A8E 7E           	ld a, (hl)
 402+ 1A8F FE 55        	cp %01010101
 403+ 1A91 C0           	ret nz
 404+ 1A92
 405+ 1A92 36 AA        	ld (hl), %10101010
 406+ 1A94 7E           	ld a, (hl)
 407+ 1A95 FE AA        	cp %10101010
 408+ 1A97 C0           	ret nz
 409+ 1A98
 410+ 1A98 70           	ld (hl), b
 411+ 1A99 2B           	dec hl
 412+ 1A9A 7C           	ld a, h
 413+ 1A9B B5           	or l
 414+ 1A9C 20 ED        	jr nz, full_ram_test1
 415+ 1A9E BF               cp a                                ; set zero flag for success
 416+ 1A9F C9           	ret
 417+ 1AA0
 418+ 1AA0              one_minute_burn_in:
 419+ 1AA0              	; set cursor position
 420+ 1AA0 3E 1B            ld a, ESC
 421+ 1AA2 CD 64 07         call print_a
 422+ 1AA5 3E 5B            ld a, '['
 423+ 1AA7 CD 64 07         call print_a
 424+ 1AAA 3A 59 98         ld a, (burn_y)
 425+ 1AAD C6 03        	add a, 3
 426+ 1AAF CD 97 1C         call print_a_as_decimal
 427+ 1AB2 3E 3B            ld a, ';'
 428+ 1AB4 CD 64 07         call print_a
 429+ 1AB7 3A 58 98         ld a, (burn_x)
 430+ 1ABA C6 03        	add a, 3
 431+ 1ABC CD 97 1C         call print_a_as_decimal
 432+ 1ABF 3E 48            ld a, 'H'
 433+ 1AC1 CD 64 07         call print_a
 434+ 1AC4
 435+ 1AC4              	; set foreground colour
 436+ 1AC4 3E 1B            ld a, ESC
 437+ 1AC6 CD 64 07         call print_a
 438+ 1AC9 3E 5B            ld a, '['
 439+ 1ACB CD 64 07         call print_a
 440+ 1ACE 3E 33            ld a, '3'
 441+ 1AD0 CD 64 07         call print_a
 442+ 1AD3 3A 58 98         ld a, (burn_x)
 443+ 1AD6 CB 3F        	srl a
 444+ 1AD8 CB 3F        	srl a
 445+ 1ADA C6 30        	add a, '0'
 446+ 1ADC CD 64 07         call print_a
 447+ 1ADF 3E 6D            ld a, 'm'
 448+ 1AE1 CD 64 07         call print_a
 449+ 1AE4
 450+ 1AE4              	; set background colour
 451+ 1AE4 3E 1B            ld a, ESC
 452+ 1AE6 CD 64 07         call print_a
 453+ 1AE9 3E 5B            ld a, '['
 454+ 1AEB CD 64 07         call print_a
 455+ 1AEE 3E 34            ld a, '4'
 456+ 1AF0 CD 64 07         call print_a
 457+ 1AF3 3A 59 98         ld a, (burn_y)
 458+ 1AF6 CB 3F        	srl a
 459+ 1AF8 CB 3F        	srl a
 460+ 1AFA C6 30        	add a, '0'
 461+ 1AFC CD 64 07         call print_a
 462+ 1AFF 3E 6D            ld a, 'm'
 463+ 1B01 CD 64 07         call print_a
 464+ 1B04
 465+ 1B04 3E DD        	ld a, 221
 466+ 1B06 CD 64 07     	call print_a
 467+ 1B09
 468+ 1B09              	; Normal colour again
 469+ 1B09 3E 1B            ld a, ESC
 470+ 1B0B CD 64 07         call print_a
 471+ 1B0E 3E 5B            ld a, '['
 472+ 1B10 CD 64 07         call print_a
 473+ 1B13 3E 30            ld a, '0'
 474+ 1B15 CD 64 07         call print_a
 475+ 1B18 3E 6D            ld a, 'm'
 476+ 1B1A CD 64 07         call print_a
 477+ 1B1D
 478+ 1B1D CD 26 1C     	call burn_in_write_file
 479+ 1B20
 480+ 1B20              burn_in_inner_loop:
 481+ 1B20 CD EB 07     	call user_toggle
 482+ 1B23 CD D0 07     	call disk_toggle
 483+ 1B26
 484+ 1B26 CD 2D 1B     	call burn_in_read_file
 485+ 1B29
 486+ 1B29 CD F5 1B     	call burn_in_erase_file
 487+ 1B2C C9           	ret
 488+ 1B2D
 489+ 1B2D              burn_in_read_file:
 490+ 1B2D              	; Read the file and check the content.
 491+ 1B2D              	; If not good, halt the processor.
 492+ 1B2D 21 27 0F     	ld hl, ROOT_NAME
 493+ 1B30 CD 25 0E     	call open_file
 494+ 1B33 21 B5 1C     	ld hl, BURN_IN_NAME
 495+ 1B36 CD 25 0E     	call open_file
 496+ 1B39
 497+ 1B39 3E 3A        	ld a, BYTE_READ
 498+ 1B3B CD D5 0E     	call send_command_byte
 499+ 1B3E 3E FF        	ld a, 255                           ; Request all of the file
 500+ 1B40 CD B9 0E     	call send_data_byte
 501+ 1B43 3E FF        	ld a, 255                           ; Yes, all!
 502+ 1B45 CD B9 0E     	call send_data_byte
 503+ 1B48
 504+ 1B48 3E 22        	ld a, GET_STATUS
 505+ 1B4A CD D5 0E     	call send_command_byte
 506+ 1B4D CD DE 0E     	call read_data_byte
 507+ 1B50 21 5A 98     	ld hl, burn_in_dump_area
 508+ 1B53              burn_in_load_loop1:
 509+ 1B53 FE 1D        	cp USB_INT_DISK_READ
 510+ 1B55 20 25        	jr nz, burn_in_load_finished
 511+ 1B57
 512+ 1B57 E5           	push hl
 513+ 1B58 CD DD 07     	call disk_on
 514+ 1B5B 3E 27        	ld a, RD_USB_DATA0
 515+ 1B5D CD D5 0E     	call send_command_byte
 516+ 1B60 CD DE 0E     	call read_data_byte
 517+ 1B63 E1           	pop hl
 518+ 1B64 CD E7 0E     	call read_data_bytes_into_hl
 519+ 1B67 E5           	push hl
 520+ 1B68 CD D6 07     	call disk_off
 521+ 1B6B 3E 3B        	ld a, BYTE_RD_GO
 522+ 1B6D CD D5 0E     	call send_command_byte
 523+ 1B70 3E 22        	ld a, GET_STATUS
 524+ 1B72 CD D5 0E     	call send_command_byte
 525+ 1B75 CD DE 0E     	call read_data_byte
 526+ 1B78 E1           	pop hl
 527+ 1B79 C3 53 1B     	jp burn_in_load_loop1
 528+ 1B7C              burn_in_load_finished:
 529+ 1B7C CD 38 0E     	call close_file
 530+ 1B7F
 531+ 1B7F              	; Now compare file content with what we wrote there originally
 532+ 1B7F 11 00 90     	ld de, config_file_loc
 533+ 1B82 21 5A 98     	ld hl, burn_in_dump_area
 534+ 1B85 06 0A        	ld b, 10
 535+ 1B87              burn_in_compare_loop:
 536+ 1B87 1A           	ld a, (de)
 537+ 1B88 BE           	cp (hl)
 538+ 1B89 20 20        	jr nz, burn_in_compare_failed
 539+ 1B8B 13           	inc de
 540+ 1B8C 23           	inc hl
 541+ 1B8D 10 F8        	djnz burn_in_compare_loop
 542+ 1B8F C9           	ret
 543+ 1B90
 544+ 1B90              burn_in_ram_error:
 545+ 1B90 CD 0C 08     	call message
 546+ 1B93 52 41 4D 20  	db 'RAM error at ',0
 546+ 1B97 65 72 72 6F
 546+ 1B9B 72 20 61 74
 546+ 1B9F 20 00
 547+ 1BA1 CD 21 08     	call show_hl_as_hex
 548+ 1BA4 CD 0C 08     	call message
 549+ 1BA7 0D 0A 00     	db 13,10,0
 550+ 1BAA 76           	halt
 551+ 1BAB
 552+ 1BAB              burn_in_compare_failed:
 553+ 1BAB CD 0C 08     	call message
 554+ 1BAE 46 69 6C 65  	db 'Files were different!',13,10,0
 554+ 1BB2 73 20 77 65
 554+ 1BB6 72 65 20 64
 554+ 1BBA 69 66 66 65
 554+ 1BBE 72 65 6E 74
 554+ 1BC2 21 0D 0A 00
 555+ 1BC6 CD 0C 08     	call message
 556+ 1BC9 45 78 70 65  	db 'Expected: ',0
 556+ 1BCD 63 74 65 64
 556+ 1BD1 3A 20 00
 557+ 1BD4 21 00 90     	ld hl, config_file_loc
 558+ 1BD7 CD 4C 1D     	call show_string_at_hl
 559+ 1BDA CD 91 07     	call newline
 560+ 1BDD
 561+ 1BDD CD 0C 08     	call message
 562+ 1BE0 41 63 74 75  	db 'Actual  : ',0
 562+ 1BE4 61 6C 20 20
 562+ 1BE8 3A 20 00
 563+ 1BEB 21 5A 98     	ld hl, burn_in_dump_area
 564+ 1BEE CD 4C 1D     	call show_string_at_hl
 565+ 1BF1 CD 91 07     	call newline
 566+ 1BF4
 567+ 1BF4 76           	halt
 568+ 1BF5
 569+ 1BF5              burn_in_erase_file:
 570+ 1BF5              	; Try to open the test file
 571+ 1BF5 CD 38 0E     	call close_file
 572+ 1BF8 21 27 0F     	ld hl, ROOT_NAME
 573+ 1BFB CD 25 0E     	call open_file
 574+ 1BFE 21 B5 1C     	ld hl, BURN_IN_NAME
 575+ 1C01 CD 25 0E     	call open_file
 576+ 1C04 20 1C        	jr nz, burn_in_file_not_found
 577+ 1C06 CD 38 0E     	call close_file
 578+ 1C09
 579+ 1C09              	; Erase it if it exists
 580+ 1C09 21 27 0F     	ld hl, ROOT_NAME
 581+ 1C0C CD 25 0E     	call open_file
 582+ 1C0F 3E 2F        	ld a, SET_FILE_NAME
 583+ 1C11 CD D5 0E     	call send_command_byte
 584+ 1C14 21 B5 1C     	ld hl, BURN_IN_NAME
 585+ 1C17 CD BF 0E     	call send_data_string
 586+ 1C1A 3E 35        	ld a, FILE_ERASE
 587+ 1C1C CD D5 0E     	call send_command_byte
 588+ 1C1F CD 1A 0F     	call read_status_byte
 589+ 1C22              burn_in_file_not_found:
 590+ 1C22 CD 38 0E     	call close_file
 591+ 1C25 C9           	ret
 592+ 1C26
 593+ 1C26              burn_in_write_file:
 594+ 1C26 CD F5 1B     	call burn_in_erase_file
 595+ 1C29
 596+ 1C29              	; Create it and put a value in it
 597+ 1C29 21 27 0F     	ld hl, ROOT_NAME
 598+ 1C2C CD 25 0E     	call open_file
 599+ 1C2F 11 B5 1C     	ld de, BURN_IN_NAME
 600+ 1C32 CD 10 0E     	call create_file
 601+ 1C35 28 23        	jr z, burnin_create_ok
 602+ 1C37 CD 0C 08     	call message
 603+ 1C3A 45 52 52 4F  	db 'ERROR creating burn-in file.',13,10,0
 603+ 1C3E 52 20 63 72
 603+ 1C42 65 61 74 69
 603+ 1C46 6E 67 20 62
 603+ 1C4A 75 72 6E 2D
 603+ 1C4E 69 6E 20 66
 603+ 1C52 69 6C 65 2E
 603+ 1C56 0D 0A 00
 604+ 1C59 76           	halt
 605+ 1C5A
 606+ 1C5A              burnin_create_ok:
 607+ 1C5A 3E 3C        	ld a, BYTE_WRITE
 608+ 1C5C CD D5 0E     	call send_command_byte
 609+ 1C5F
 610+ 1C5F              	; Send number of bytes we are about to write, as 16 bit number, low first
 611+ 1C5F CD 6A 29     	call get_program_size
 612+ 1C62 3E 0A        	ld a, 10
 613+ 1C64 CD B9 0E     	call send_data_byte
 614+ 1C67 3E 00        	ld a, 0
 615+ 1C69 CD B9 0E     	call send_data_byte
 616+ 1C6C
 617+ 1C6C 21 00 90     	ld hl, config_file_loc
 618+ 1C6F 36 48        	ld (hl), 'H'
 619+ 1C71 23           	inc hl
 620+ 1C72 36 65        	ld (hl), 'e'
 621+ 1C74 23           	inc hl
 622+ 1C75 36 6C        	ld (hl), 'l'
 623+ 1C77 23           	inc hl
 624+ 1C78 36 6C        	ld (hl), 'l'
 625+ 1C7A 23           	inc hl
 626+ 1C7B 36 6F        	ld (hl), 'o'
 627+ 1C7D 23           	inc hl
 628+ 1C7E 3A 58 98     	ld a, (burn_x)
 629+ 1C81 C6 21        	add a, 33
 630+ 1C83 77           	ld (hl), a
 631+ 1C84 23           	inc hl
 632+ 1C85 77           	ld (hl), a
 633+ 1C86 23           	inc hl
 634+ 1C87 77           	ld (hl), a
 635+ 1C88 23           	inc hl
 636+ 1C89 77           	ld (hl), a
 637+ 1C8A 23           	inc hl
 638+ 1C8B 36 00        	ld (hl), 0
 639+ 1C8D
 640+ 1C8D 21 00 90     	ld hl, config_file_loc			; Write the bytes that are in this temp area
 641+ 1C90 CD B9 0A     	call write_loop
 642+ 1C93 CD 38 0E     	call close_file
 643+ 1C96 C9           	ret
 644+ 1C97
 645+ 1C97              print_a_as_decimal:
 646+ 1C97 06 00        	ld b, 0
 647+ 1C99              print_a_as_decimal1:
 648+ 1C99 FE 0A        	cp 10
 649+ 1C9B 38 06        	jr c, print_a_as_decimal_units
 650+ 1C9D 04           	inc b
 651+ 1C9E 0E 0A        	ld c, 10
 652+ 1CA0 91           	sub c
 653+ 1CA1 18 F6        	jr print_a_as_decimal1
 654+ 1CA3
 655+ 1CA3              print_a_as_decimal_units:
 656+ 1CA3 F5           	push af
 657+ 1CA4 78           	ld a, b
 658+ 1CA5 FE 00        	cp 0
 659+ 1CA7 28 05        	jr z, print_a_as_decimal_units1
 660+ 1CA9 C6 30        	add a, '0'
 661+ 1CAB CD 64 07     	call print_a
 662+ 1CAE              print_a_as_decimal_units1:
 663+ 1CAE F1           	pop af
 664+ 1CAF C6 30        	add a, '0'
 665+ 1CB1 CD 64 07     	call print_a
 666+ 1CB4 C9           	ret
 667+ 1CB5
 668+ 1CB5              BURN_IN_NAME:
 669+ 1CB5 42 55 52 4E  	db 'BURNIN.TXT',0
 669+ 1CB9 49 4E 2E 54
 669+ 1CBD 58 54 00
 670+ 1CC0
 671+ 1CC0              	include "printing.asm"
# file opened: printing.asm
   1++1CC0              ; printing.asm
   2++1CC0
   3++1CC0              ; -------------------------------------------------------------------------------------------------
   4++1CC0
   5++1CC0              clear_screen:
   6++1CC0 CD 0C 08     	call message
   7++1CC3 1B 5B 32 4A  	db 27,'[2J',27,'[H',0
   7++1CC7 1B 5B 48 00
   8++1CCB C9           	ret
   9++1CCC
  10++1CCC              show_page:
  11++1CCC CD C0 1C     	call clear_screen
  12++1CCF
  13++1CCF 3A 64 EA     	ld a,(current_page)
  14++1CD2 57           	ld d,a
  15++1CD3 1E 00        	ld e,0					; de holds address of start of page to show
  16++1CD5
  17++1CD5 0E 10        	ld c,16					; rows to show
  18++1CD7              row_loop:
  19++1CD7 D5           	push de
  20++1CD8 CD 43 1D     	call show_de_as_hex		; show the address
  21++1CDB CD 9C 07     	call space
  22++1CDE D1           	pop de
  23++1CDF
  24++1CDF D5           	push de
  25++1CE0 06 10        	ld b,16					; bytes per row
  26++1CE2              col_loop:
  27++1CE2 1A           	ld a,(de)				; get the byte
  28++1CE3 CD 2A 08     	call show_a_as_hex
  29++1CE6 3E 20        	ld a,' '
  30++1CE8 CD 64 07     	call print_a			; leave a space
  31++1CEB 13           	inc de					; continue to next byte
  32++1CEC 10 F4        	djnz col_loop			; continue to next column
  33++1CEE
  34++1CEE D1           	pop de					; now go over the line again in ASCII
  35++1CEF 06 10        	ld b,16					; bytes per row
  36++1CF1              ascii_loop:
  37++1CF1 1A           	ld a,(de)				; get the byte
  38++1CF2 CD 19 1D     	call show_a_as_char
  39++1CF5 13           	inc de					; continue to next char
  40++1CF6 10 F9        	djnz ascii_loop			; continue to next column
  41++1CF8
  42++1CF8 CD 91 07     	call newline
  43++1CFB 0D           	dec c
  44++1CFC 79           	ld a,c
  45++1CFD FE 00        	cp 0
  46++1CFF 20 D6        	jr nz,row_loop			; continue to next row
  47++1D01 CD 91 07     	call newline
  48++1D04 C9           	ret
  49++1D05
  50++1D05              show_a_safe:
  51++1D05 FE 20        	cp 32
  52++1D07 38 08        	jr c,show_blank			; jr c = jump if less than ( < )
  53++1D09 FE 7F        	cp 127
  54++1D0B 30 04        	jr nc,show_blank		; jr nc = jump if equal to or greater than ( >= )
  55++1D0D CD 64 07     	call print_a
  56++1D10 C9           	ret
  57++1D11              show_blank:
  58++1D11 F5           	push af
  59++1D12 3E 2D        	ld a, '-'
  60++1D14 CD 19 1D     	call show_a_as_char
  61++1D17 F1           	pop af
  62++1D18 C9           	ret
  63++1D19
  64++1D19              show_a_as_char:
  65++1D19              	;cp 10
  66++1D19              	;jr z, show_as_char1
  67++1D19              	;cp 13
  68++1D19              	;jr z, show_as_char1
  69++1D19 FE 20        	cp 32
  70++1D1B 38 08        	jr c,show_ctrl		; jr c = jump if less than ( < )
  71++1D1D FE 7F        	cp 127
  72++1D1F 30 1C        	jr nc,show_unknown		; jr nc = jump if equal to or greater than ( >= )
  73++1D21              show_as_char1:
  74++1D21 CD 64 07     	call print_a
  75++1D24 C9           	ret
  76++1D25              show_ctrl:
  77++1D25 F5           	push af
  78++1D26 CD 0C 08     	call message
  79++1D29 1B 5B 37 6D  	db 27,'[7m',0
  79++1D2D 00
  80++1D2E F1           	pop af
  81++1D2F C6 40        	add a, 64
  82++1D31 CD 64 07     	call print_a
  83++1D34 CD 0C 08     	call message
  84++1D37 1B 5B 30 6D  	db 27,'[0m',0
  84++1D3B 00
  85++1D3C C9           	ret
  86++1D3D              show_unknown:
  87++1D3D 3E 3F        	ld a,'?'
  88++1D3F CD 64 07     	call print_a
  89++1D42 C9           	ret
  90++1D43
  91++1D43              ; SHOW_DE_AS_HEX
  92++1D43              ; Pass in a number in DE.
  93++1D43              ; It will be displayed in this format: FFFF
  94++1D43              show_de_as_hex:
  95++1D43 7A           	ld a,d
  96++1D44 CD 2A 08     	call show_a_as_hex
  97++1D47 7B           	ld a,e
  98++1D48 CD 2A 08     	call show_a_as_hex
  99++1D4B C9           	ret
 100++1D4C
 101++1D4C              ; SHOW_STRING_AT_HL
 102++1D4C              ; Pass in hl containing a pointer to a zero terminated string.
 103++1D4C              ; It will be printed.
 104++1D4C              show_string_at_hl:
 105++1D4C E5           	push hl
 106++1D4D              show_string_at_hl_loop:
 107++1D4D 7E           	ld a, (hl)
 108++1D4E FE 00        	cp 0
 109++1D50 28 06        	jr z,show_string_at_hl_complete
 110++1D52 23           	inc hl
 111++1D53 CD 64 07     	call print_a			; print it
 112++1D56 18 F5        	jr show_string_at_hl_loop
 113++1D58              show_string_at_hl_complete:
 114++1D58 E1           	pop hl
 115++1D59 C9           	ret
 116++1D5A
# file closed: printing.asm
 672+ 1D5A              	include "test_uart.asm"
# file opened: test_uart.asm
   1++1D5A              ; test_uart.asm
   2++1D5A
   3++1D5A              test_uart:
   4++1D5A CD 0C 08         call message
   5++1D5D 54 79 70 65      db 'Type some characters to test sending keys from the Z80 Playground over Serial,',13,10
   5++1D61 20 73 6F 6D
   5++1D65 65 20 63 68
   5++1D69 61 72 61 63
   5++1D6D 74 65 72 73
   5++1D71 20 74 6F 20
   5++1D75 74 65 73 74
   5++1D79 20 73 65 6E
   5++1D7D 64 69 6E 67
   5++1D81 20 6B 65 79
   5++1D85 73 20 66 72
   5++1D89 6F 6D 20 74
   5++1D8D 68 65 20 5A
   5++1D91 38 30 20 50
   5++1D95 6C 61 79 67
   5++1D99 72 6F 75 6E
   5++1D9D 64 20 6F 76
   5++1DA1 65 72 20 53
   5++1DA5 65 72 69 61
   5++1DA9 6C 2C 0D 0A
   6++1DAD 6F 72 20 73      db 'or send some characters from the other end of the Serial connection to test',13,10
   6++1DB1 65 6E 64 20
   6++1DB5 73 6F 6D 65
   6++1DB9 20 63 68 61
   6++1DBD 72 61 63 74
   6++1DC1 65 72 73 20
   6++1DC5 66 72 6F 6D
   6++1DC9 20 74 68 65
   6++1DCD 20 6F 74 68
   6++1DD1 65 72 20 65
   6++1DD5 6E 64 20 6F
   6++1DD9 66 20 74 68
   6++1DDD 65 20 53 65
   6++1DE1 72 69 61 6C
   6++1DE5 20 63 6F 6E
   6++1DE9 6E 65 63 74
   6++1DED 69 6F 6E 20
   6++1DF1 74 6F 20 74
   6++1DF5 65 73 74 0D
   6++1DF9 0A
   7++1DFA 68 6F 77 20      db 'how many are received. Whatever you send will be echoed after a carriage-return.',13,10
   7++1DFE 6D 61 6E 79
   7++1E02 20 61 72 65
   7++1E06 20 72 65 63
   7++1E0A 65 69 76 65
   7++1E0E 64 2E 20 57
   7++1E12 68 61 74 65
   7++1E16 76 65 72 20
   7++1E1A 79 6F 75 20
   7++1E1E 73 65 6E 64
   7++1E22 20 77 69 6C
   7++1E26 6C 20 62 65
   7++1E2A 20 65 63 68
   7++1E2E 6F 65 64 20
   7++1E32 61 66 74 65
   7++1E36 72 20 61 20
   7++1E3A 63 61 72 72
   7++1E3E 69 61 67 65
   7++1E42 2D 72 65 74
   7++1E46 75 72 6E 2E
   7++1E4A 0D 0A
   8++1E4C 4A 75 73 74      db 'Just type "quit" to go back to the main monitor menu.',13,10
   8++1E50 20 74 79 70
   8++1E54 65 20 22 71
   8++1E58 75 69 74 22
   8++1E5C 20 74 6F 20
   8++1E60 67 6F 20 62
   8++1E64 61 63 6B 20
   8++1E68 74 6F 20 74
   8++1E6C 68 65 20 6D
   8++1E70 61 69 6E 20
   8++1E74 6D 6F 6E 69
   8++1E78 74 6F 72 20
   8++1E7C 6D 65 6E 75
   8++1E80 2E 0D 0A
   9++1E83 4F 72 20 74      db 'Or type "Z" to print a special message.',13,10,0
   9++1E87 79 70 65 20
   9++1E8B 22 5A 22 20
   9++1E8F 74 6F 20 70
   9++1E93 72 69 6E 74
   9++1E97 20 61 20 73
   9++1E9B 70 65 63 69
   9++1E9F 61 6C 20 6D
   9++1EA3 65 73 73 61
   9++1EA7 67 65 2E 0D
   9++1EAB 0A 00
  10++1EAD
  11++1EAD              test_uart0:
  12++1EAD 11 66 EA         ld de, test_buffer
  13++1EB0 3E 00            ld a, 0
  14++1EB2 12               ld (de), a              ; Always make sure the buffer ends in null
  15++1EB3 06 FF            ld b, 255               ; max buffer length
  16++1EB5
  17++1EB5              test_uart1:
  18++1EB5 CD A2 07         call char_in
  19++1EB8 FE 00            cp 0
  20++1EBA 28 F9            jr z, test_uart1
  21++1EBC FE 0D            cp 13
  22++1EBE 28 14            jr z, test_uart2
  23++1EC0 CD 64 07         call print_a
  24++1EC3 FE 61            cp 'a'
  25++1EC5 38 06            jr c, test_uart_ok
  26++1EC7 FE 7B            cp 'z'+1
  27++1EC9 30 02            jr nc, test_uart_ok
  28++1ECB D6 20            sub 32
  29++1ECD              test_uart_ok:
  30++1ECD 12               ld (de), a
  31++1ECE 13               inc de
  32++1ECF 3E 00            ld a, 0
  33++1ED1 12               ld (de), a              ; Always make sure the buffer ends in null
  34++1ED2 10 E1            djnz test_uart1         ; Keep going until we run out of buffer
  35++1ED4
  36++1ED4              test_uart2:
  37++1ED4 CD 0C 08         call message
  38++1ED7 0D 0A 00         db 13,10,0
  39++1EDA
  40++1EDA CD 05 26         call did_they_type_quit
  41++1EDD C8               ret z
  42++1EDE
  43++1EDE CD 1B 26         call did_they_type_Z
  44++1EE1 28 0E            jr z, show_z80_message
  45++1EE3
  46++1EE3 21 66 EA         ld hl, test_buffer
  47++1EE6 CD 4C 1D         call show_string_at_hl
  48++1EE9
  49++1EE9 CD 0C 08         call message
  50++1EEC 0D 0A 00         db 13,10,0
  51++1EEF
  52++1EEF 18 BC            jr test_uart0
  53++1EF1
  54++1EF1              show_z80_message:
  55++1EF1 CD 0C 08         call message
  56++1EF4
  57++1EF4 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  57++1EF8 2D 2D 2D 2D
  57++1EFC 2D 2D 2D 2D
  57++1F00 2D 2D 2D 2D
  57++1F04 2D 2D 2D 2D
  57++1F08 2D 2D 2D 2D
  57++1F0C 2D 2D 2D 2D
  57++1F10 2D 2D 2D 2D
  57++1F14 2D 2D 2D 2D
  57++1F18 2D 2D 2D 2D
  57++1F1C 2D 2D 2D 2D
  57++1F20 2D 2D 2D 2D
  57++1F24 2D 2D 2D 2D
  57++1F28 2D 2D 2D 2D
  57++1F2C 2D 2D 2D 2D
  57++1F30 2D 2D 2D 2D
  57++1F34 2D 2D 2D 2D
  57++1F38 2D 2D 2D 2D
  57++1F3C 2D 2D 2D 2D
  57++1F40 2D 2D 2D 2D
  57++1F44 2B 0D 0A
  58++1F47 7C 20 20 20      db '|   _________   ___    _____  _                                             _   |',13,10
  58++1F4B 5F 5F 5F 5F
  58++1F4F 5F 5F 5F 5F
  58++1F53 5F 20 20 20
  58++1F57 5F 5F 5F 20
  58++1F5B 20 20 20 5F
  58++1F5F 5F 5F 5F 5F
  58++1F63 20 20 5F 20
  58++1F67 20 20 20 20
  58++1F6B 20 20 20 20
  58++1F6F 20 20 20 20
  58++1F73 20 20 20 20
  58++1F77 20 20 20 20
  58++1F7B 20 20 20 20
  58++1F7F 20 20 20 20
  58++1F83 20 20 20 20
  58++1F87 20 20 20 20
  58++1F8B 20 20 20 20
  58++1F8F 20 20 20 20
  58++1F93 5F 20 20 20
  58++1F97 7C 0D 0A
  59++1F9A 7C 20 20 7C      db '|  |___  / _ \ / _ \  |  __ \| |                                           | |  |',13,10
  59++1F9E 5F 5F 5F 20
  59++1FA2 20 2F 20 5F
  59++1FA6 20 5C 20 2F
  59++1FAA 20 5F 20 5C
  59++1FAE 20 20 7C 20
  59++1FB2 20 5F 5F 20
  59++1FB6 5C 7C 20 7C
  59++1FBA 20 20 20 20
  59++1FBE 20 20 20 20
  59++1FC2 20 20 20 20
  59++1FC6 20 20 20 20
  59++1FCA 20 20 20 20
  59++1FCE 20 20 20 20
  59++1FD2 20 20 20 20
  59++1FD6 20 20 20 20
  59++1FDA 20 20 20 20
  59++1FDE 20 20 20 20
  59++1FE2 20 20 20 7C
  59++1FE6 20 7C 20 20
  59++1FEA 7C 0D 0A
  60++1FED 7C 20 20 20      db '|     / / (_) | | | | | |__) | | __ _ _   _  __ _ _ __ ___  _   _ _ __   __| |  |',13,10
  60++1FF1 20 20 2F 20
  60++1FF5 2F 20 28 5F
  60++1FF9 29 20 7C 20
  60++1FFD 7C 20 7C 20
  60++2001 7C 20 7C 20
  60++2005 7C 5F 5F 29
  60++2009 20 7C 20 7C
  60++200D 20 5F 5F 20
  60++2011 5F 20 5F 20
  60++2015 20 20 5F 20
  60++2019 20 5F 5F 20
  60++201D 5F 20 5F 20
  60++2021 5F 5F 20 5F
  60++2025 5F 5F 20 20
  60++2029 5F 20 20 20
  60++202D 5F 20 5F 20
  60++2031 5F 5F 20 20
  60++2035 20 5F 5F 7C
  60++2039 20 7C 20 20
  60++203D 7C 0D 0A
  61++2040 7C 20 20 20      db '|    / / > _ <| | | | |  ___/| |/ _` | | | |/ _` | ''__/ _ \| | | | ''_ \ / _` |  |',13,10
  61++2044 20 2F 20 2F
  61++2048 20 3E 20 5F
  61++204C 20 3C 7C 20
  61++2050 7C 20 7C 20
  61++2054 7C 20 7C 20
  61++2058 20 5F 5F 5F
  61++205C 2F 7C 20 7C
  61++2060 2F 20 5F 60
  61++2064 20 7C 20 7C
  61++2068 20 7C 20 7C
  61++206C 2F 20 5F 60
  61++2070 20 7C 20 27
  61++2074 5F 5F 2F 20
  61++2078 5F 20 5C 7C
  61++207C 20 7C 20 7C
  61++2080 20 7C 20 27
  61++2084 5F 20 5C 20
  61++2088 2F 20 5F 60
  61++208C 20 7C 20 20
  61++2090 7C 0D 0A
  62++2093 7C 20 20 20      db '|   / /_| (_) | |_| | | |    | | (_| | |_| | (_| | | | (_) | |_| | | | | (_| |  |',13,10
  62++2097 2F 20 2F 5F
  62++209B 7C 20 28 5F
  62++209F 29 20 7C 20
  62++20A3 7C 5F 7C 20
  62++20A7 7C 20 7C 20
  62++20AB 7C 20 20 20
  62++20AF 20 7C 20 7C
  62++20B3 20 28 5F 7C
  62++20B7 20 7C 20 7C
  62++20BB 5F 7C 20 7C
  62++20BF 20 28 5F 7C
  62++20C3 20 7C 20 7C
  62++20C7 20 7C 20 28
  62++20CB 5F 29 20 7C
  62++20CF 20 7C 5F 7C
  62++20D3 20 7C 20 7C
  62++20D7 20 7C 20 7C
  62++20DB 20 28 5F 7C
  62++20DF 20 7C 20 20
  62++20E3 7C 0D 0A
  63++20E6 7C 20 20 2F      db '|  /_____\___/ \___/  |_|    |_|\__,_|\__, |\__, |_|  \___/ \__,_|_| |_|\__,_|  |',13,10
  63++20EA 5F 5F 5F 5F
  63++20EE 5F 5C 5F 5F
  63++20F2 5F 2F 20 5C
  63++20F6 5F 5F 5F 2F
  63++20FA 20 20 7C 5F
  63++20FE 7C 20 20 20
  63++2102 20 7C 5F 7C
  63++2106 5C 5F 5F 2C
  63++210A 5F 7C 5C 5F
  63++210E 5F 2C 20 7C
  63++2112 5C 5F 5F 2C
  63++2116 20 7C 5F 7C
  63++211A 20 20 5C 5F
  63++211E 5F 5F 2F 20
  63++2122 5C 5F 5F 2C
  63++2126 5F 7C 5F 7C
  63++212A 20 7C 5F 7C
  63++212E 5C 5F 5F 2C
  63++2132 5F 7C 20 20
  63++2136 7C 0D 0A
  64++2139 7C 20 20 20      db '|                                      __/ | __/ |                              |',13,10
  64++213D 20 20 20 20
  64++2141 20 20 20 20
  64++2145 20 20 20 20
  64++2149 20 20 20 20
  64++214D 20 20 20 20
  64++2151 20 20 20 20
  64++2155 20 20 20 20
  64++2159 20 20 20 20
  64++215D 20 20 20 5F
  64++2161 5F 2F 20 7C
  64++2165 20 5F 5F 2F
  64++2169 20 7C 20 20
  64++216D 20 20 20 20
  64++2171 20 20 20 20
  64++2175 20 20 20 20
  64++2179 20 20 20 20
  64++217D 20 20 20 20
  64++2181 20 20 20 20
  64++2185 20 20 20 20
  64++2189 7C 0D 0A
  65++218C 7C 20 20 20      db '|                                     |___/ |___/                               |',13,10
  65++2190 20 20 20 20
  65++2194 20 20 20 20
  65++2198 20 20 20 20
  65++219C 20 20 20 20
  65++21A0 20 20 20 20
  65++21A4 20 20 20 20
  65++21A8 20 20 20 20
  65++21AC 20 20 20 20
  65++21B0 20 20 7C 5F
  65++21B4 5F 5F 2F 20
  65++21B8 7C 5F 5F 5F
  65++21BC 2F 20 20 20
  65++21C0 20 20 20 20
  65++21C4 20 20 20 20
  65++21C8 20 20 20 20
  65++21CC 20 20 20 20
  65++21D0 20 20 20 20
  65++21D4 20 20 20 20
  65++21D8 20 20 20 20
  65++21DC 7C 0D 0A
  66++21DF 7C 20 20 20      db '|                                                                               |',13,10
  66++21E3 20 20 20 20
  66++21E7 20 20 20 20
  66++21EB 20 20 20 20
  66++21EF 20 20 20 20
  66++21F3 20 20 20 20
  66++21F7 20 20 20 20
  66++21FB 20 20 20 20
  66++21FF 20 20 20 20
  66++2203 20 20 20 20
  66++2207 20 20 20 20
  66++220B 20 20 20 20
  66++220F 20 20 20 20
  66++2213 20 20 20 20
  66++2217 20 20 20 20
  66++221B 20 20 20 20
  66++221F 20 20 20 20
  66++2223 20 20 20 20
  66++2227 20 20 20 20
  66++222B 20 20 20 20
  66++222F 7C 0D 0A
  67++2232 7C 20 20 20      db '|        _    _         _____ _______   _            _   _                      |',13,10
  67++2236 20 20 20 20
  67++223A 20 5F 20 20
  67++223E 20 20 5F 20
  67++2242 20 20 20 20
  67++2246 20 20 20 20
  67++224A 5F 5F 5F 5F
  67++224E 5F 20 5F 5F
  67++2252 5F 5F 5F 5F
  67++2256 5F 20 20 20
  67++225A 5F 20 20 20
  67++225E 20 20 20 20
  67++2262 20 20 20 20
  67++2266 20 5F 20 20
  67++226A 20 5F 20 20
  67++226E 20 20 20 20
  67++2272 20 20 20 20
  67++2276 20 20 20 20
  67++227A 20 20 20 20
  67++227E 20 20 20 20
  67++2282 7C 0D 0A
  68++2285 7C 20 20 20      db '|       | |  | |  /\   |  __ \__   __| | |          | | (_)                     |',13,10
  68++2289 20 20 20 20
  68++228D 7C 20 7C 20
  68++2291 20 7C 20 7C
  68++2295 20 20 2F 5C
  68++2299 20 20 20 7C
  68++229D 20 20 5F 5F
  68++22A1 20 5C 5F 5F
  68++22A5 20 20 20 5F
  68++22A9 5F 7C 20 7C
  68++22AD 20 7C 20 20
  68++22B1 20 20 20 20
  68++22B5 20 20 20 20
  68++22B9 7C 20 7C 20
  68++22BD 28 5F 29 20
  68++22C1 20 20 20 20
  68++22C5 20 20 20 20
  68++22C9 20 20 20 20
  68++22CD 20 20 20 20
  68++22D1 20 20 20 20
  68++22D5 7C 0D 0A
  69++22D8 7C 20 20 20      db '|       | |  | | /  \  | |__) | | |    | |_ ___  ___| |_ _ _ __   __ _          |',13,10
  69++22DC 20 20 20 20
  69++22E0 7C 20 7C 20
  69++22E4 20 7C 20 7C
  69++22E8 20 2F 20 20
  69++22EC 5C 20 20 7C
  69++22F0 20 7C 5F 5F
  69++22F4 29 20 7C 20
  69++22F8 7C 20 7C 20
  69++22FC 20 20 20 7C
  69++2300 20 7C 5F 20
  69++2304 5F 5F 5F 20
  69++2308 20 5F 5F 5F
  69++230C 7C 20 7C 5F
  69++2310 20 5F 20 5F
  69++2314 20 5F 5F 20
  69++2318 20 20 5F 5F
  69++231C 20 5F 20 20
  69++2320 20 20 20 20
  69++2324 20 20 20 20
  69++2328 7C 0D 0A
  70++232B 7C 20 20 20      db '|       | |  | |/ /\ \ |  _  /  | |    | __/ _ \/ __| __| | ''_ \ / _` |         |',13,10
  70++232F 20 20 20 20
  70++2333 7C 20 7C 20
  70++2337 20 7C 20 7C
  70++233B 2F 20 2F 5C
  70++233F 20 5C 20 7C
  70++2343 20 20 5F 20
  70++2347 20 2F 20 20
  70++234B 7C 20 7C 20
  70++234F 20 20 20 7C
  70++2353 20 5F 5F 2F
  70++2357 20 5F 20 5C
  70++235B 2F 20 5F 5F
  70++235F 7C 20 5F 5F
  70++2363 7C 20 7C 20
  70++2367 27 5F 20 5C
  70++236B 20 2F 20 5F
  70++236F 60 20 7C 20
  70++2373 20 20 20 20
  70++2377 20 20 20 20
  70++237B 7C 0D 0A
  71++237E 7C 20 20 20      db '|       | |__| / ____ \| | \ \  | |    | ||  __/\__ \ |_| | | | | (_| |         |',13,10
  71++2382 20 20 20 20
  71++2386 7C 20 7C 5F
  71++238A 5F 7C 20 2F
  71++238E 20 5F 5F 5F
  71++2392 5F 20 5C 7C
  71++2396 20 7C 20 5C
  71++239A 20 5C 20 20
  71++239E 7C 20 7C 20
  71++23A2 20 20 20 7C
  71++23A6 20 7C 7C 20
  71++23AA 20 5F 5F 2F
  71++23AE 5C 5F 5F 20
  71++23B2 5C 20 7C 5F
  71++23B6 7C 20 7C 20
  71++23BA 7C 20 7C 20
  71++23BE 7C 20 28 5F
  71++23C2 7C 20 7C 20
  71++23C6 20 20 20 20
  71++23CA 20 20 20 20
  71++23CE 7C 0D 0A
  72++23D1 7C 20 20 20      db '|        \____/_/    \_\_|  \_\ |_|     \__\___||___/\__|_|_| |_|\__, |         |',13,10
  72++23D5 20 20 20 20
  72++23D9 20 5C 5F 5F
  72++23DD 5F 5F 2F 5F
  72++23E1 2F 20 20 20
  72++23E5 20 5C 5F 5C
  72++23E9 5F 7C 20 20
  72++23ED 5C 5F 5C 20
  72++23F1 7C 5F 7C 20
  72++23F5 20 20 20 20
  72++23F9 5C 5F 5F 5C
  72++23FD 5F 5F 5F 7C
  72++2401 7C 5F 5F 5F
  72++2405 2F 5C 5F 5F
  72++2409 7C 5F 7C 5F
  72++240D 7C 20 7C 5F
  72++2411 7C 5C 5F 5F
  72++2415 2C 20 7C 20
  72++2419 20 20 20 20
  72++241D 20 20 20 20
  72++2421 7C 0D 0A
  73++2424 7C 20 20 20      db '|                                                                 __/ |         |',13,10
  73++2428 20 20 20 20
  73++242C 20 20 20 20
  73++2430 20 20 20 20
  73++2434 20 20 20 20
  73++2438 20 20 20 20
  73++243C 20 20 20 20
  73++2440 20 20 20 20
  73++2444 20 20 20 20
  73++2448 20 20 20 20
  73++244C 20 20 20 20
  73++2450 20 20 20 20
  73++2454 20 20 20 20
  73++2458 20 20 20 20
  73++245C 20 20 20 20
  73++2460 20 20 20 20
  73++2464 20 20 5F 5F
  73++2468 2F 20 7C 20
  73++246C 20 20 20 20
  73++2470 20 20 20 20
  73++2474 7C 0D 0A
  74++2477 7C 20 20 20      db '|                                                                |___/          |',13,10
  74++247B 20 20 20 20
  74++247F 20 20 20 20
  74++2483 20 20 20 20
  74++2487 20 20 20 20
  74++248B 20 20 20 20
  74++248F 20 20 20 20
  74++2493 20 20 20 20
  74++2497 20 20 20 20
  74++249B 20 20 20 20
  74++249F 20 20 20 20
  74++24A3 20 20 20 20
  74++24A7 20 20 20 20
  74++24AB 20 20 20 20
  74++24AF 20 20 20 20
  74++24B3 20 20 20 20
  74++24B7 20 7C 5F 5F
  74++24BB 5F 2F 20 20
  74++24BF 20 20 20 20
  74++24C3 20 20 20 20
  74++24C7 7C 0D 0A
  75++24CA 7C 20 20 20      db '|                                                                               |',13,10
  75++24CE 20 20 20 20
  75++24D2 20 20 20 20
  75++24D6 20 20 20 20
  75++24DA 20 20 20 20
  75++24DE 20 20 20 20
  75++24E2 20 20 20 20
  75++24E6 20 20 20 20
  75++24EA 20 20 20 20
  75++24EE 20 20 20 20
  75++24F2 20 20 20 20
  75++24F6 20 20 20 20
  75++24FA 20 20 20 20
  75++24FE 20 20 20 20
  75++2502 20 20 20 20
  75++2506 20 20 20 20
  75++250A 20 20 20 20
  75++250E 20 20 20 20
  75++2512 20 20 20 20
  75++2516 20 20 20 20
  75++251A 7C 0D 0A
  76++251D 2B 2D 2D 2D      db '+-------------------------------------------------------------------------------+',13,10
  76++2521 2D 2D 2D 2D
  76++2525 2D 2D 2D 2D
  76++2529 2D 2D 2D 2D
  76++252D 2D 2D 2D 2D
  76++2531 2D 2D 2D 2D
  76++2535 2D 2D 2D 2D
  76++2539 2D 2D 2D 2D
  76++253D 2D 2D 2D 2D
  76++2541 2D 2D 2D 2D
  76++2545 2D 2D 2D 2D
  76++2549 2D 2D 2D 2D
  76++254D 2D 2D 2D 2D
  76++2551 2D 2D 2D 2D
  76++2555 2D 2D 2D 2D
  76++2559 2D 2D 2D 2D
  76++255D 2D 2D 2D 2D
  76++2561 2D 2D 2D 2D
  76++2565 2D 2D 2D 2D
  76++2569 2D 2D 2D 2D
  76++256D 2B 0D 0A
  77++2570 0D 0A 0D 0A      db 13,10,13,10
  78++2574 54 68 69 73      db 'This is a long text to test whether we can send a large amount of text to the',13,10
  78++2578 20 69 73 20
  78++257C 61 20 6C 6F
  78++2580 6E 67 20 74
  78++2584 65 78 74 20
  78++2588 74 6F 20 74
  78++258C 65 73 74 20
  78++2590 77 68 65 74
  78++2594 68 65 72 20
  78++2598 77 65 20 63
  78++259C 61 6E 20 73
  78++25A0 65 6E 64 20
  78++25A4 61 20 6C 61
  78++25A8 72 67 65 20
  78++25AC 61 6D 6F 75
  78++25B0 6E 74 20 6F
  78++25B4 66 20 74 65
  78++25B8 78 74 20 74
  78++25BC 6F 20 74 68
  78++25C0 65 0D 0A
  79++25C3 53 65 72 69      db 'Serial port and still receive it correctly at the other end.',13,10
  79++25C7 61 6C 20 70
  79++25CB 6F 72 74 20
  79++25CF 61 6E 64 20
  79++25D3 73 74 69 6C
  79++25D7 6C 20 72 65
  79++25DB 63 65 69 76
  79++25DF 65 20 69 74
  79++25E3 20 63 6F 72
  79++25E7 72 65 63 74
  79++25EB 6C 79 20 61
  79++25EF 74 20 74 68
  79++25F3 65 20 6F 74
  79++25F7 68 65 72 20
  79++25FB 65 6E 64 2E
  79++25FF 0D 0A
  80++2601 00               db 0
  81++2602 C3 AD 1E         jp test_uart0
  82++2605
  83++2605              did_they_type_quit:
  84++2605 21 66 EA         ld hl, test_buffer
  85++2608
  86++2608 7E               ld a, (hl)
  87++2609 FE 51            cp 'Q'
  88++260B C0               ret nz
  89++260C 23               inc hl
  90++260D
  91++260D 7E               ld a, (hl)
  92++260E FE 55            cp 'U'
  93++2610 C0               ret nz
  94++2611 23               inc hl
  95++2612
  96++2612 7E               ld a, (hl)
  97++2613 FE 49            cp 'I'
  98++2615 C0               ret nz
  99++2616 23               inc hl
 100++2617
 101++2617 7E               ld a, (hl)
 102++2618 FE 54            cp 'T'
 103++261A C9               ret
 104++261B
 105++261B              did_they_type_Z:
 106++261B 21 66 EA         ld hl, test_buffer
 107++261E 7E               ld a, (hl)
 108++261F FE 5A            cp 'Z'
 109++2621 C0               ret nz
 110++2622 23               inc hl
 111++2623
 112++2623 7E               ld a, (hl)
 113++2624 FE 00            cp 0
 114++2626 C9               ret
 115++2627
 116++2627              did_they_type_J:
 117++2627 21 66 EA         ld hl, test_buffer
 118++262A 7E               ld a, (hl)
 119++262B FE 4A            cp 'J'
 120++262D C0               ret nz
 121++262E 23               inc hl
 122++262F
 123++262F 7E               ld a, (hl)
 124++2630 FE 00            cp 0
 125++2632 C9               ret
 126++2633
# file closed: test_uart.asm
 673+ 2633
 674+ 2633              load_jupiter_ace:
 675+ 2633                  ; Load CORE.BIN into its proper location
 676+ 2633 21 DF 06         ld hl, NAME_OF_CORE
 677+ 2636 CD AD 0E         call copy_filename_to_buffer
 678+ 2639 11 00 F6         ld de, $F600 							; TODO: This can't be hardcoded, can it???
 679+ 263C CD C0 09         call load_bin_file
 680+ 263F 28 1E        	jr z, loaded_core_file
 681+ 2641 CD 0C 08     	call message
 682+ 2644 46 61 69 6C  	db 'Failed to load CORE.BIN',13,10,0
 682+ 2648 65 64 20 74
 682+ 264C 6F 20 6C 6F
 682+ 2650 61 64 20 43
 682+ 2654 4F 52 45 2E
 682+ 2658 42 49 4E 0D
 682+ 265C 0A 00
 683+ 265E 76           	halt
 684+ 265F
 685+ 265F              loaded_core_file:
 686+ 265F CD 0C 08         call message
 687+ 2662 43 4F 52 45      db 'CORE loaded!',13,10,0
 687+ 2666 20 6C 6F 61
 687+ 266A 64 65 64 21
 687+ 266E 0D 0A 00
 688+ 2671
 689+ 2671              	; Get the file Jupiter.bin into memory at location 0.
 690+ 2671 21 E9 26         ld hl, JUPITER_ACE_NAME
 691+ 2674 CD AD 0E         call copy_filename_to_buffer
 692+ 2677 11 00 00         ld de, 0								; Load it into location $0000
 693+ 267A CD C0 09         call load_bin_file                      ; hl comes back with end location of file. Z set if success.
 694+ 267D 28 27        	jr z, load_jupiter_ace1
 695+ 267F CD 0C 08     	call message
 696+ 2682 46 61 69 6C  	db 'Failed to load jupiter ace file.',13,10,0
 696+ 2686 65 64 20 74
 696+ 268A 6F 20 6C 6F
 696+ 268E 61 64 20 6A
 696+ 2692 75 70 69 74
 696+ 2696 65 72 20 61
 696+ 269A 63 65 20 66
 696+ 269E 69 6C 65 2E
 696+ 26A2 0D 0A 00
 697+ 26A5 76           	halt
 698+ 26A6              load_jupiter_ace1:
 699+ 26A6 CD 0C 08     	call message
 700+ 26A9 4C 6F 61 64  	db 'Loaded jupiter ace file!',13,10,0
 700+ 26AD 65 64 20 6A
 700+ 26B1 75 70 69 74
 700+ 26B5 65 72 20 61
 700+ 26B9 63 65 20 66
 700+ 26BD 69 6C 65 21
 700+ 26C1 0D 0A 00
 701+ 26C4              	; Just a quick test:
 702+ 26C4 CD 39 F6     	call $F600+57
 703+ 26C7 53 74 61 72  	db 'Starting Juniper Deuce...',13,10,0
 703+ 26CB 74 69 6E 67
 703+ 26CF 20 4A 75 6E
 703+ 26D3 69 70 65 72
 703+ 26D7 20 44 65 75
 703+ 26DB 63 65 2E 2E
 703+ 26DF 2E 0D 0A 00
 704+ 26E3
 705+ 26E3              	; Clear the screen
 706+ 26E3              	; ld hl, $2400
 707+ 26E3              	; ld (hl), '#'
 708+ 26E3              	; ld de, $2401
 709+ 26E3              	; ld bc, 767
 710+ 26E3              	; ldir
 711+ 26E3
 712+ 26E3              	; Now run it.
 713+ 26E3              	; Now we need the ROM turned off:
 714+ 26E3 CD 05 08     	call rom_off
 715+ 26E6 C3 00 00     	jp 0
 716+ 26E9
 717+ 26E9              JUPITER_ACE_NAME:
 718+ 26E9 4A 55 50 49      db 'JUPITER.BIN',0
 718+ 26ED 54 45 52 2E
 718+ 26F1 42 49 4E 00
 719+ 26F5
 720+ 26F5              the_end:
 721+ 26F5 41 20 6D 65  	db 'A message at the end ****************',0
 721+ 26F9 73 73 61 67
 721+ 26FD 65 20 61 74
 721+ 2701 20 74 68 65
 721+ 2705 20 65 6E 64
 721+ 2709 20 2A 2A 2A
 721+ 270D 2A 2A 2A 2A
 721+ 2711 2A 2A 2A 2A
 721+ 2715 2A 2A 2A 2A
 721+ 2719 2A 00
 722+ 271B
 723+ 271B              ; ---------------------------------------------------------
 724+ 271B              ; These are variables so need to be in RAM.
 725+ 271B              ; Unfortunately I am dumb and initially put them in ROM.
 726+ 271B              ; I have learned my lesson!
 727+ 271B
 728+ 271B              ;store_hl		equ	60000					; Temporary store for hl
 729+ 271B              ;store_de 		equ 60002					; Temporary store for de
 730+ 271B              current_page 	equ 60004					; Currently displayed monitor page
 731+ 271B
 732+ 271B              test_buffer 	equ 60006					; 32 x 24 char buffer (768 bytes)
 733+ 271B
# file closed: monitor.asm
 939  271B
 940  271B                  include "tiny-basic.asm"
# file opened: tiny-basic.asm
   1+ 271B              ; *************************************************************
   2+ 271B              ;
   3+ 271B              ;                 TINY BASIC FOR INTEL 8080
   4+ 271B              ;                       VERSION 2.1
   5+ 271B              ;                     BY LI-CHEN WANG
   6+ 271B              ;                 MODIFIED AND TRANSLATED
   7+ 271B              ;                   TO INTEL MNEMONICS
   8+ 271B              ;                    BY ROGER RAUSKOLB
   9+ 271B              ;                     10 OCTOBER,1976
  10+ 271B              ;                        @COPYLEFT
  11+ 271B              ;                   ALL WRONGS RESERVED
  12+ 271B              ;
  13+ 271B              ; *************************************************************
  14+ 271B
  15+ 271B              ; Converted to Z80 mneumonics
  16+ 271B              ; and styled for PASMO assembler
  17+ 271B              ; ready to run on my "Z80 Playground" SBC
  18+ 271B              ; by John Squires, October 2020
  19+ 271B
  20+ 271B              ; TODO:
  21+ 271B              ; * Tell the user that ctrl-c is break, etc.
  22+ 271B              ; * Make a nicer intro screen.
  23+ 271B
  24+ 271B              ; *** ZERO PAGE SUBROUTINES ***
  25+ 271B              ; The original code used the zero page calls, "rst 08h"
  26+ 271B              ; thru "rst 38h" for some functions, in order to keep the
  27+ 271B              ; code size even smaller. However, the use of the "RST" commands
  28+ 271B              ; means that this program always has to run from location 0
  29+ 271B              ; and can never be assembled to a different location.
  30+ 271B              ; I decided to remove all the RST stuff, so that this code
  31+ 271B              ; could eventually be run under CP/M or loaded at a different
  32+ 271B              ; location in memory.
  33+ 271B
  34+ 271B              ; How to assemble:
  35+ 271B              ; Use PASMO
  36+ 271B              ; This version is intended for inclusion in the Z80 Playground EEPROM as a demo
  37+ 271B              ; of what wonders can be performed!
  38+ 271B              ; So it will begin at whatever address the EEPROM boot loader sets it to.
  39+ 271B              ; It will be living in the bottom 32K of EEROM, and have
  40+ 271B              ; access to the top 32K of RAM.
  41+ 271B
  42+ 271B              CR      equ  0DH
  43+ 271B              LF      equ  0AH
  44+ 271B
  45+ 271B              ; Define a macro called DWA to store addresses in a special format.
  46+ 271B              ; Hi-byte is stored first (big-endian) with bit 7 set.
  47+ 271B              ; Lo-byte is stored second, with no special modification.
  48+ 271B              DWA     MACRO     v
  49+ 271B ~                    DB v>>8+128
  50+ 271B ~                    DB v&0FFH
  51+ 271B                      ENDM
  52+ 271B
  53+ 271B              TBSTART:
  54+ 271B 31 00 FF             LD  SP,TBSTACK                     ; *** COLD START ***
  55+ 271E 3E FF                LD   A,0FFH
  56+ 2720 C3 D7 2F             JP  INIT
  57+ 2723
  58+ 2723 E3           TSTC:   EX (SP),HL                       ; *** TSTC (was "rst 08h") ***
  59+ 2724 CD 6B 27             CALL IGNBLK                      ; IGNORE BLANKS AND
  60+ 2727 BE                   CP  (HL)                         ; TEST CHARACTER
  61+ 2728 23           TC1:    INC  HL                          ; COMPARE THE BYTE THAT
  62+ 2729 CA 33 27             JP Z,TC2                         ; FOLLOWS THE CALL to this function
  63+ 272C C5                   PUSH BC                          ; WITH THE TEXT (DE->)
  64+ 272D 4E                   LD   C,(HL)                      ; IF NOT =, ADD THE 2ND
  65+ 272E 06 00                LD   B,0                         ; BYTE THAT FOLLOWS THE
  66+ 2730 09                   ADD HL,BC                        ; RST TO THE OLD PC
  67+ 2731 C1                   POP  BC                          ; I.E., DO A RELATIVE
  68+ 2732 1B                   DEC  DE                          ; JUMP IF NOT =
  69+ 2733 13           TC2:    INC  DE                          ; IF =, SKIP THOSE BYTES
  70+ 2734 23                   INC  HL                          ; AND CONTINUE
  71+ 2735 E3                   EX (SP),HL
  72+ 2736 C9                   RET
  73+ 2737
  74+ 2737 3E 0D        CRLF:   LD   A,CR                        ; *** CRLF ***
  75+ 2739
  76+ 2739 F5           OUTC:   PUSH AF                          ; *** OUTC (was "rst 10h") ***
  77+ 273A 3A 00 80             LD  A,(OCSW)                     ; PRINT CHARACTER ONLY
  78+ 273D B7                   OR  A                            ; IF OCSW SWITCH IS ON
  79+ 273E C2 43 27     OC2:    JP NZ,OC3                        ; IT IS ON
  80+ 2741 F1                   POP  AF                          ; IT IS OFF
  81+ 2742 C9                   RET                              ; RESTORE AF AND RETURN
  82+ 2743              OC3:
  83+ 2743 DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  84+ 2745 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  85+ 2747 CA 43 27             jp z,OC3                         ; zero = not ready for next char yet.
  86+ 274A F1                   POP  AF                          ; UART IS READY, GET OLD "A" BACK
  87+ 274B D3 B8                OUT  (uart_tx_rx),A              ; AND SEND IT OUT
  88+ 274D FE 0D                CP  CR                           ; WAS IT CR?
  89+ 274F C0                   RET NZ                           ; NO, FINISHED
  90+ 2750              OC4:
  91+ 2750 DB BD                in a,(uart_LSR)                  ; check UART is ready to send.
  92+ 2752 CB 6F                bit 5,a                          ; zero flag set to true if bit 5 is 0
  93+ 2754 CA 50 27             jp z,OC4                         ; zero = not ready for next char yet.
  94+ 2757 3E 0A                LD   A,LF                        ; YES, WE SEND LF TOO
  95+ 2759 D3 B8                out (uart_tx_rx),a
  96+ 275B 3E 0D                LD   A,CR                        ; GET CR BACK IN A
  97+ 275D C9                   RET
  98+ 275E
  99+ 275E CD B5 2C     EXPR:   CALL EXPR2                       ; *** EXPR (was "rst 18h") ***
 100+ 2761 E5                   PUSH HL                          ; EVALUATE AN EXPRESSION
 101+ 2762 C3 71 2C             JP  EXPR1                        ; REST OF IT AT EXPR1
 102+ 2765
 103+ 2765 7C           COMP:   LD   A,H                         ; *** COMP (was "rst 20h") ***
 104+ 2766 BA                   CP  D                            ; COMPARE HL WITH DE
 105+ 2767 C0                   RET NZ                           ; RETURN CORRECT C AND
 106+ 2768 7D                   LD   A,L                         ; Z FLAGS
 107+ 2769 BB                   CP  E                            ; BUT OLD A IS LOST
 108+ 276A C9                   RET
 109+ 276B
 110+ 276B              IGNBLK:
 111+ 276B 1A                   LD A,(DE)                        ; *** IGNBLK (was "rst 28h") ***
 112+ 276C FE 20                CP  20H                          ; IGNORE BLANKS
 113+ 276E C0                   RET NZ                           ; IN TEXT (WHERE DE->)
 114+ 276F 13                   INC  DE                          ; AND RETURN THE FIRST
 115+ 2770 C3 6B 27             JP  IGNBLK                      ; NON-BLANK CHAR. IN A
 116+ 2773
 117+ 2773              FINISH:
 118+ 2773 F1                   POP  AF                          ; *** FINISH (was "rst 30h") ***
 119+ 2774 CD 1D 2E             CALL FIN                         ; CHECK END OF COMMAND
 120+ 2777 C3 36 2E             JP  QWHAT                        ; PRINT "WHAT?" IF WRONG
 121+ 277A
 122+ 277A              TSTV:
 123+ 277A CD 6B 27             CALL IGNBLK                      ; *** TSTV (was "rst 38h") ***
 124+ 277D D6 40                SUB  '@'                         ; TEST VARIABLES.
 125+ 277F D8                   RET C                            ; < @ means NOT A VARIABLE
 126+ 2780 C2 9E 27             JP NZ,TV1                        ; NOT "@" ARRAY
 127+ 2783 13                   INC  DE                          ; IT IS THE "@" ARRAY
 128+ 2784 CD 6C 2D             CALL PARN                        ; @ SHOULD BE FOLLOWED
 129+ 2787 29                   ADD HL,HL                        ; BY (EXPR) AS ITS INDEX
 130+ 2788 DA E2 27             JP C,QHOW                        ; IS INDEX TOO BIG?
 131+ 278B D5                   PUSH DE                          ; WILL IT OVERWRITE
 132+ 278C EB                   EX DE,HL                         ; TEXT?
 133+ 278D CD BB 2D             CALL SIZE                        ; FIND SIZE OF FREE
 134+ 2790 CD 65 27             CALL COMP                          ; AND CHECK THAT
 135+ 2793 DA 66 2E             JP C,ASORRY                      ; IF SO, SAY "SORRY"
 136+ 2796 21 89 FD             LD  HL,VARBGN                    ; IF NOT GET ADDRESS
 137+ 2799 CD DE 2D             CALL SUBDE                       ; OF @(EXPR) AND PUT IT
 138+ 279C D1                   POP  DE                          ; IN HL
 139+ 279D C9                   RET                              ; C FLAG IS CLEARED
 140+ 279E              TV1:
 141+ 279E                      ; by this point A holds the index
 142+ 279E                      ; of the variable
 143+ 279E                      ; 0 = the array "@"
 144+ 279E                      ; 1  - 26 = A - Z
 145+ 279E                      ; 33 - 58 = a - z
 146+ 279E                      ; lowercase needs adjusting to be uppercase
 147+ 279E FE 21                cp 33
 148+ 27A0 38 06                jr c,upper_var
 149+ 27A2 FE 3B                cp 59
 150+ 27A4 30 02                jr nc,upper_var
 151+ 27A6 D6 20                sub 32                           ; lowercase it
 152+ 27A8              upper_var:
 153+ 27A8 FE 1B                CP  1BH                          ; NOT @, IS IT A TO Z?
 154+ 27AA 3F                   CCF                              ; IF NOT RETURN C FLAG
 155+ 27AB D8                   RET C
 156+ 27AC 13                   INC  DE                          ; IF A THROUGH Z
 157+ 27AD 21 89 FD             LD  HL,VARBGN                    ; COMPUTE ADDRESS OF
 158+ 27B0 07                   RLCA                             ; THAT VARIABLE
 159+ 27B1 85                   ADD  A,L                         ; AND RETURN IT IN HL
 160+ 27B2 6F                   LD   L,A                         ; WITH C FLAG CLEARED
 161+ 27B3 3E 00                LD   A,0
 162+ 27B5 8C                   ADC  A,H
 163+ 27B6 67                   LD   H,A
 164+ 27B7 C9                   RET
 165+ 27B8
 166+ 27B8 21 00 00     TSTNUM: LD  HL,0                         ; *** TSTNUM ***
 167+ 27BB 44                   LD   B,H                         ; TEST IF THE TEXT IS
 168+ 27BC CD 6B 27             CALL IGNBLK                          ; A NUMBER
 169+ 27BF FE 30        TN1:    CP  30H                          ; IF NOT, RETURN 0 IN
 170+ 27C1 D8                   RET C                            ; B AND HL
 171+ 27C2 FE 3A                CP  3AH                          ; IF NUMBERS, CONVERT
 172+ 27C4 D0                   RET NC                           ; TO BINARY IN HL AND
 173+ 27C5 3E F0                LD   A,0F0H                      ; SET B TO # OF DIGITS
 174+ 27C7 A4                   AND  H                           ; IF H>255, THERE IS NO
 175+ 27C8 C2 E2 27             JP NZ,QHOW                       ; ROOM FOR NEXT DIGIT
 176+ 27CB 04                   INC  B                           ; B COUNTS # OF DIGITS
 177+ 27CC C5                   PUSH BC
 178+ 27CD 44                   LD   B,H                         ; HL=10*HL+(NEW DIGIT)
 179+ 27CE 4D                   LD   C,L
 180+ 27CF 29                   ADD HL,HL                        ; WHERE 10* IS DONE BY
 181+ 27D0 29                   ADD HL,HL                        ; SHIFT AND ADD
 182+ 27D1 09                   ADD HL,BC
 183+ 27D2 29                   ADD HL,HL
 184+ 27D3 1A                   LD A,(DE)                        ; AND (DIGIT) IS FROM
 185+ 27D4 13                   INC  DE                          ; STRIPPING THE ASCII
 186+ 27D5 E6 0F                AND  0FH                         ; CODE
 187+ 27D7 85                   ADD  A,L
 188+ 27D8 6F                   LD   L,A
 189+ 27D9 3E 00                LD   A,0
 190+ 27DB 8C                   ADC  A,H
 191+ 27DC 67                   LD   H,A
 192+ 27DD C1                   POP  BC
 193+ 27DE 1A                   LD A,(DE)                        ; DO THIS DIGIT AFTER
 194+ 27DF F2 BF 27             JP P,TN1                         ; DIGIT. S SAYS OVERFLOW
 195+ 27E2 D5           QHOW:   PUSH DE                          ; *** ERROR "HOW?" ***
 196+ 27E3 11 E9 27     AHOW:   LD  DE,HOW
 197+ 27E6 C3 3A 2E             JP  ERROR
 198+ 27E9 48 4F 57 3F  HOW:    DB   'HOW?'
 199+ 27ED 0D                   DB   CR
 200+ 27EE 4F 4B        OK:     DB   'OK'
 201+ 27F0 0D                   DB   CR
 202+ 27F1 57 48 41 54  WHAT:   DB   'WHAT?'
 202+ 27F5 3F
 203+ 27F6 0D                   DB   CR
 204+ 27F7 53 4F 52 52  SORRY:  DB   'SORRY'
 204+ 27FB 59
 205+ 27FC 0D                   DB   CR
 206+ 27FD
 207+ 27FD                      ; *************************************************************
 208+ 27FD
 209+ 27FD                      ; *** MAIN ***
 210+ 27FD
 211+ 27FD                      ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 212+ 27FD                      ; AND STORES IT IN THE MEMORY.
 213+ 27FD
 214+ 27FD                      ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 215+ 27FD                      ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 216+ 27FD                      ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 217+ 27FD                      ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 218+ 27FD                      ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 219+ 27FD                      ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 220+ 27FD                      ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 221+ 27FD                      ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 222+ 27FD                      ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 223+ 27FD
 224+ 27FD                      ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 225+ 27FD                      ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 226+ 27FD                      ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 227+ 27FD                      ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 228+ 27FD
 229+ 27FD                      ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 230+ 27FD                      ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 231+ 27FD                      ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 232+ 27FD                      ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 233+ 27FD
 234+ 27FD                      ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 235+ 27FD                      ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 236+ 27FD                      ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 237+ 27FD                      ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 238+ 27FD
 239+ 27FD 31 00 FF     RSTART: LD  SP,TBSTACK
 240+ 2800 CD 37 27     ST1:    CALL CRLF                        ; AND JUMP TO HERE
 241+ 2803 11 EE 27             LD  DE,OK                        ; DE->STRING
 242+ 2806 97                   SUB  A                           ; A=0
 243+ 2807 CD E4 2E             CALL PRTSTG                      ; PRINT STRING UNTIL CR
 244+ 280A 21 11 28             LD  HL,ST2+1                     ; LITERAL 0
 245+ 280D 22 01 80             LD (CURRNT),HL                   ; CURRENT->LINE # = 0
 246+ 2810 21 00 00     ST2:    LD  HL,0
 247+ 2813 22 09 80             LD (LOPVAR),HL
 248+ 2816 22 03 80             LD (STKGOS),HL
 249+ 2819 3E 3E        ST3:    LD   A,3EH                       ; PROMPT '>' AND
 250+ 281B CD 6C 2E             CALL GETLN                       ; READ A LINE
 251+ 281E D5                   PUSH DE                          ; DE->END OF LINE
 252+ 281F 11 C0 FD             LD  DE,BUFFER                    ; DE->BEGINNING OF LINE
 253+ 2822 CD B8 27             CALL TSTNUM                      ; TEST IF IT IS A NUMBER
 254+ 2825 CD 6B 27             CALL IGNBLK
 255+ 2828 7C                   LD   A,H                         ; HL=VALUE OF THE # OR
 256+ 2829 B5                   OR  L                            ; 0 IF NO # WAS FOUND
 257+ 282A C1                   POP  BC                          ; BC->END OF LINE
 258+ 282B CA 3D 32             JP Z,DIRECT
 259+ 282E 1B                   DEC  DE                          ; BACKUP DE AND SAVE
 260+ 282F 7C                   LD   A,H                         ; VALUE OF LINE # THERE
 261+ 2830 12                   LD (DE),A
 262+ 2831 1B                   DEC  DE
 263+ 2832 7D                   LD   A,L
 264+ 2833 12                   LD (DE),A
 265+ 2834 C5                   PUSH BC                          ; BC,DE->BEGIN, END
 266+ 2835 D5                   PUSH DE
 267+ 2836 79                   LD   A,C
 268+ 2837 93                   SUB  E
 269+ 2838 F5                   PUSH AF                          ; A=# OF BYTES IN LINE
 270+ 2839 CD BA 2E             CALL FNDLN                       ; FIND THIS LINE IN SAVE
 271+ 283C D5                   PUSH DE                          ; AREA, DE->SAVE AREA
 272+ 283D C2 50 28             JP NZ,ST4                        ; NZ:NOT FOUND, INSERT
 273+ 2840 D5                   PUSH DE                          ; Z:FOUND, DELETE IT
 274+ 2841 CD D8 2E             CALL FNDNXT                      ; FIND NEXT LINE
 275+ 2844                                                       ; DE->NEXT LINE
 276+ 2844 C1                   POP  BC                          ; BC->LINE TO BE DELETED
 277+ 2845 2A 15 80             LD HL,(TXTUNF)                   ; HL->UNFILLED SAVE AREA
 278+ 2848 CD 78 2F             CALL MVUP                        ; MOVE UP TO DELETE
 279+ 284B 60                   LD   H,B                         ; TXTUNF->UNFILLED AREA
 280+ 284C 69                   LD   L,C
 281+ 284D 22 15 80             LD (TXTUNF),HL                   ; UPDATE
 282+ 2850 C1           ST4:    POP  BC                          ; GET READY TO INSERT
 283+ 2851 2A 15 80             LD HL,(TXTUNF)                   ; BUT FIRST CHECK IF
 284+ 2854 F1                   POP  AF                          ; THE LENGTH OF NEW LINE
 285+ 2855 E5                   PUSH HL                          ; IS 3 (LINE # AND CR)
 286+ 2856 FE 03                CP  3                            ; THEN DO NOT INSERT
 287+ 2858 CA FD 27             JP Z,RSTART                      ; MUST CLEAR THE STACK
 288+ 285B 85                   ADD  A,L                         ; COMPUTE NEW TXTUNF
 289+ 285C 6F                   LD   L,A
 290+ 285D 3E 00                LD   A,0
 291+ 285F 8C                   ADC  A,H
 292+ 2860 67                   LD   H,A                         ; HL->NEW UNFILLED AREA
 293+ 2861 11 87 FD             LD  DE,TXTEND                    ; CHECK TO SEE IF THERE
 294+ 2864 CD 65 27             CALL COMP                          ; IS ENOUGH SPACE
 295+ 2867 D2 65 2E             JP NC,QSORRY                     ; SORRY, NO ROOM FOR IT
 296+ 286A 22 15 80             LD (TXTUNF),HL                   ; OK, UPDATE TXTUNF
 297+ 286D D1                   POP  DE                          ; DE->OLD UNFILLED AREA
 298+ 286E CD 83 2F             CALL MVDOWN
 299+ 2871 D1                   POP  DE                          ; DE->BEGIN, HL->END
 300+ 2872 E1                   POP  HL
 301+ 2873 CD 78 2F             CALL MVUP                        ; MOVE NEW LINE TO SAVE
 302+ 2876 C3 19 28             JP  ST3                          ; AREA
 303+ 2879
 304+ 2879                                                       ; *************************************************************
 305+ 2879
 306+ 2879                                                       ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 307+ 2879                                                       ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 308+ 2879                                                       ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 309+ 2879                                                       ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 310+ 2879                                                       ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 311+ 2879
 312+ 2879                                                       ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
 313+ 2879                                                       ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 314+ 2879                                                       ; GO BACK TO 'RSTART'.
 315+ 2879                                                       ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 316+ 2879                                                       ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 317+ 2879                                                       ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
 318+ 2879                                                       ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 319+ 2879                                                       ; *************************************************************
 320+ 2879
 321+ 2879                                                       ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 322+ 2879
 323+ 2879                                                       ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 324+ 2879
 325+ 2879                                                       ; 'STOP(CR)' GOES BACK TO 'RSTART'
 326+ 2879
 327+ 2879                                                       ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 328+ 2879                                                       ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 329+ 2879                                                       ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 330+ 2879
 331+ 2879                                                       ; THERE ARE 3 MORE ENTRIES IN 'RUN':
 332+ 2879                                                       ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 333+ 2879                                                       ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 334+ 2879                                                       ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 335+ 2879
 336+ 2879                                                       ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 337+ 2879                                                       ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 338+ 2879
 339+ 2879 CD 30 2E     NEW:    CALL ENDCHK                      ; *** NEW(CR) ***
 340+ 287C 21 19 80             LD  HL,TXTBGN
 341+ 287F 22 15 80             LD (TXTUNF),HL
 342+ 2882
 343+ 2882 CD 30 2E     STOP:   CALL ENDCHK                      ; *** STOP(CR) ***
 344+ 2885 C3 FD 27             JP  RSTART
 345+ 2888
 346+ 2888              TBDIR:                                    ; *** DIR(CR) ***
 347+ 2888                                                      ; This does a directory listing.
 348+ 2888 CD 30 2E             call ENDCHK
 349+ 288B
 350+ 288B                      ; Clear files counter
 351+ 288B 3E 00                ld a, 0
 352+ 288D 32 88 FD             ld (tb_dir_count), a
 353+ 2890
 354+ 2890                      ; Open /TBASIC folder
 355+ 2890 21 30 0F             ld hl, TINY_BASIC_FOLDER_NAME
 356+ 2893 CD 25 0E             call open_file
 357+ 2896
 358+ 2896                      ; Then open *
 359+ 2896 21 29 0F             ld hl, STAR_DOT_STAR
 360+ 2899 CD 25 0E             call open_file
 361+ 289C
 362+ 289C                      ; Loop through, printing the file names, one per line
 363+ 289C              tb_dir_loop:
 364+ 289C FE 1D                cp USB_INT_DISK_READ
 365+ 289E 28 20                jr z, tbasic_dir_loop_good
 366+ 28A0
 367+ 28A0 3A 88 FD             ld a, (tb_dir_count)
 368+ 28A3 FE 00                cp 0
 369+ 28A5 C2 FD 27             jp nz, RSTART
 370+ 28A8
 371+ 28A8 CD 0C 08             call message
 372+ 28AB 4E 6F 20 66          db 'No files found.',13,10,0
 372+ 28AF 69 6C 65 73
 372+ 28B3 20 66 6F 75
 372+ 28B7 6E 64 2E 0D
 372+ 28BB 0A 00
 373+ 28BD
 374+ 28BD C3 FD 27             jp RSTART
 375+ 28C0
 376+ 28C0              tbasic_dir_loop_good:
 377+ 28C0 3E 27                ld a, RD_USB_DATA0
 378+ 28C2 CD D5 0E             call send_command_byte
 379+ 28C5 CD DE 0E             call read_data_byte                 ; Find out how many bytes there are to read
 380+ 28C8
 381+ 28C8 CD E4 0E             call read_data_bytes_into_buffer    ; read them into disk_buffer
 382+ 28CB FE 20                cp 32                               ; Did we read at least 32 bytes?
 383+ 28CD 30 0B                jr nc, tb_dir_good_length
 384+ 28CF              tb_dir_next:
 385+ 28CF 3E 33                ld a, FILE_ENUM_GO                  ; Go to next entry in the directory
 386+ 28D1 CD D5 0E             call send_command_byte
 387+ 28D4 CD 1A 0F             call read_status_byte
 388+ 28D7 C3 9C 28             jp tb_dir_loop
 389+ 28DA
 390+ 28DA              tb_dir_good_length:
 391+ 28DA 3A D0 FF             ld a, (disk_buffer+11)
 392+ 28DD E6 16                and $16                             ; Check for hidden or system files, or directories
 393+ 28DF C2 CF 28             jp nz, tb_dir_next                  ; and skip accordingly.
 394+ 28E2
 395+ 28E2              tb_it_is_not_system:
 396+ 28E2 21 88 FD             ld hl, tb_dir_count
 397+ 28E5 34                   inc (hl)
 398+ 28E6
 399+ 28E6                      ; Show filename from diskbuffer
 400+ 28E6 06 08                ld b, 8
 401+ 28E8 21 C5 FF             ld hl, disk_buffer
 402+ 28EB              tb_dir_show_name_loop:
 403+ 28EB 7E                   ld a, (hl)
 404+ 28EC CD 64 07             call print_a
 405+ 28EF 23                   inc hl
 406+ 28F0 10 F9                djnz tb_dir_show_name_loop
 407+ 28F2
 408+ 28F2 3E 2E                ld a, '.'
 409+ 28F4 CD 64 07             call print_a
 410+ 28F7
 411+ 28F7 06 03                ld b, 3
 412+ 28F9              tb_dir_show_extension_loop:
 413+ 28F9 7E                   ld a, (hl)
 414+ 28FA CD 64 07             call print_a
 415+ 28FD 23                   inc hl
 416+ 28FE 10 F9                djnz tb_dir_show_extension_loop
 417+ 2900
 418+ 2900 CD 91 07             call newline
 419+ 2903
 420+ 2903 C3 CF 28             jp tb_dir_next
 421+ 2906
 422+ 2906              SAVE:                                   ; *** SAVE "filename" ***
 423+ 2906                                                      ; This Saves the current program to USB Drive with the given name.
 424+ 2906 D5                   push de
 425+ 2907 CD 6A 29             call get_program_size
 426+ 290A D1                   pop de
 427+ 290B 7C                   ld a, h
 428+ 290C B5                   or l
 429+ 290D FE 00                cp 0
 430+ 290F 20 20                jr nz, save_continue
 431+ 2911 CD 0C 08             call message
 432+ 2914 4E 6F 20 70          db 'No program yet to save!',13,10,0
 432+ 2918 72 6F 67 72
 432+ 291C 61 6D 20 79
 432+ 2920 65 74 20 74
 432+ 2924 6F 20 73 61
 432+ 2928 76 65 21 0D
 432+ 292C 0A 00
 433+ 292E C3 FD 27             jp RSTART
 434+ 2931              save_continue:
 435+ 2931 CD 76 32             call READ_QUOTED_FILENAME
 436+ 2934 CD 2A 2A             call does_file_exist
 437+ 2937 CC 16 2A             call z, tb_erase_file
 438+ 293A
 439+ 293A CD 38 0E             call close_file
 440+ 293D
 441+ 293D                      ;call message
 442+ 293D                      ;db 'Creating file...',13,10,0
 443+ 293D
 444+ 293D 21 30 0F             ld hl, TINY_BASIC_FOLDER_NAME
 445+ 2940 CD 25 0E             call open_file
 446+ 2943 11 EB FF             ld de, filename_buffer
 447+ 2946 CD 10 0E             call create_file
 448+ 2949 28 29                jr z, tb_save_continue
 449+ 294B CD 0C 08             call message
 450+ 294E 43 6F 75 6C          db 'Could not create file.',13,10,0
 450+ 2952 64 20 6E 6F
 450+ 2956 74 20 63 72
 450+ 295A 65 61 74 65
 450+ 295E 20 66 69 6C
 450+ 2962 65 2E 0D 0A
 450+ 2966 00
 451+ 2967 C3 FD 27             jp RSTART
 452+ 296A
 453+ 296A              get_program_size:
 454+ 296A                      ; Gets the total size of the program, in bytes, into hl
 455+ 296A 11 19 80             ld de,TXTBGN
 456+ 296D 2A 15 80             ld hl, (TXTUNF)
 457+ 2970 B7                   or a
 458+ 2971 ED 52                sbc hl, de
 459+ 2973 C9                   ret
 460+ 2974
 461+ 2974              tb_save_continue:
 462+ 2974 3E 3C                ld a, BYTE_WRITE
 463+ 2976 CD D5 0E             call send_command_byte
 464+ 2979
 465+ 2979                      ; Send number of bytes we are about to write, as 16 bit number, low first
 466+ 2979 CD 6A 29             call get_program_size
 467+ 297C 7D                   ld a, l
 468+ 297D CD B9 0E             call send_data_byte
 469+ 2980 7C                   ld a, h
 470+ 2981 CD B9 0E             call send_data_byte
 471+ 2984
 472+ 2984 21 19 80             ld hl, TXTBGN
 473+ 2987 CD B9 0A             call write_loop
 474+ 298A
 475+ 298A CD 38 0E             call close_file
 476+ 298D
 477+ 298D C3 FD 27             jp RSTART
 478+ 2990
 479+ 2990              LOAD:                                   ; *** LOAD "filename" ***
 480+ 2990                                                      ; This Loads a program from USB Drive
 481+ 2990 CD 76 32             call READ_QUOTED_FILENAME
 482+ 2993 CD 2A 2A             call does_file_exist
 483+ 2996 28 18                jr z, load_can_do
 484+ 2998              tb_file_not_found
 485+ 2998 CD 0C 08             call message
 486+ 299B 46 69 6C 65          db 'File not found.',13,10,0
 486+ 299F 20 6E 6F 74
 486+ 29A3 20 66 6F 75
 486+ 29A7 6E 64 2E 0D
 486+ 29AB 0A 00
 487+ 29AD C3 FD 27             jp RSTART
 488+ 29B0
 489+ 29B0              load_can_do:
 490+ 29B0 21 30 0F             ld hl, TINY_BASIC_FOLDER_NAME
 491+ 29B3 CD 25 0E             call open_file
 492+ 29B6 21 EB FF             ld hl, filename_buffer
 493+ 29B9 CD 25 0E             call open_file
 494+ 29BC
 495+ 29BC 3E 3A                ld a, BYTE_READ
 496+ 29BE CD D5 0E             call send_command_byte
 497+ 29C1 3E FF                ld a, 255                           ; Request all of the file
 498+ 29C3 CD B9 0E             call send_data_byte
 499+ 29C6 3E FF                ld a, 255                           ; Yes, all!
 500+ 29C8 CD B9 0E             call send_data_byte
 501+ 29CB
 502+ 29CB 3E 22                ld a, GET_STATUS
 503+ 29CD CD D5 0E             call send_command_byte
 504+ 29D0 CD DE 0E             call read_data_byte
 505+ 29D3 21 19 80             ld hl, TXTBGN                       ; Get back the target address
 506+ 29D6              tb_load_loop1:
 507+ 29D6 FE 1D                cp USB_INT_DISK_READ
 508+ 29D8 20 25                jr nz, tb_load_finished
 509+ 29DA
 510+ 29DA E5                   push hl
 511+ 29DB CD DD 07             call disk_on
 512+ 29DE 3E 27                ld a, RD_USB_DATA0
 513+ 29E0 CD D5 0E             call send_command_byte
 514+ 29E3 CD DE 0E             call read_data_byte
 515+ 29E6 E1                   pop hl
 516+ 29E7 CD E7 0E             call read_data_bytes_into_hl
 517+ 29EA E5                   push hl
 518+ 29EB CD D6 07             call disk_off
 519+ 29EE 3E 3B                ld a, BYTE_RD_GO
 520+ 29F0 CD D5 0E             call send_command_byte
 521+ 29F3 3E 22                ld a, GET_STATUS
 522+ 29F5 CD D5 0E             call send_command_byte
 523+ 29F8 CD DE 0E             call read_data_byte
 524+ 29FB E1                   pop hl
 525+ 29FC C3 D6 29             jp tb_load_loop1
 526+ 29FF              tb_load_finished:
 527+ 29FF 22 15 80             ld (TXTUNF), hl
 528+ 2A02 CD 38 0E             call close_file
 529+ 2A05 C3 FD 27             jp RSTART
 530+ 2A08
 531+ 2A08              ERASE:                                   ; *** ERASE "filename" ***
 532+ 2A08                                                      ; This erases a file
 533+ 2A08 CD 76 32             call READ_QUOTED_FILENAME
 534+ 2A0B CD 2A 2A             call does_file_exist
 535+ 2A0E 20 88                jr nz, tb_file_not_found
 536+ 2A10 CD 16 2A             call tb_erase_file
 537+ 2A13 C3 FD 27             jp RSTART
 538+ 2A16
 539+ 2A16              tb_erase_file:
 540+ 2A16                      ;call message
 541+ 2A16                      ;db 'Erasing file...',13,10,0
 542+ 2A16 3E 2F                ld a, SET_FILE_NAME
 543+ 2A18 CD D5 0E             call send_command_byte
 544+ 2A1B 21 EB FF             ld hl, filename_buffer
 545+ 2A1E CD BF 0E             call send_data_string
 546+ 2A21 3E 35                ld a, FILE_ERASE
 547+ 2A23 CD D5 0E             call send_command_byte
 548+ 2A26 CD 1A 0F             call read_status_byte
 549+ 2A29 C9                   ret
 550+ 2A2A
 551+ 2A2A              does_file_exist:
 552+ 2A2A                      ; Looks on disk for a file. Returns Z if file exists.
 553+ 2A2A 21 30 0F             ld hl, TINY_BASIC_FOLDER_NAME
 554+ 2A2D CD 25 0E             call open_file
 555+ 2A30 21 EB FF             ld hl, filename_buffer
 556+ 2A33 C3 25 0E             jp open_file
 557+ 2A36
 558+ 2A36 CD 30 2E     RUN:    CALL ENDCHK                      ; *** RUN(CR) ***
 559+ 2A39 11 19 80             LD  DE,TXTBGN                    ; FIRST SAVED LINE
 560+ 2A3C
 561+ 2A3C 21 00 00     RUNNXL: LD  HL,0                         ; *** RUNNXL ***
 562+ 2A3F CD C2 2E             CALL FNDLP                       ; FIND WHATEVER LINE #
 563+ 2A42 DA FD 27             JP C,RSTART                      ; C:PASSED TXTUNF, QUIT
 564+ 2A45
 565+ 2A45 EB           RUNTSL: EX DE,HL                         ; *** RUNTSL ***
 566+ 2A46 22 01 80             LD (CURRNT),HL                   ; SET 'CURRENT'->LINE #
 567+ 2A49 EB                   EX DE,HL
 568+ 2A4A 13                   INC  DE                          ; BUMP PASS LINE #
 569+ 2A4B 13                   INC  DE
 570+ 2A4C
 571+ 2A4C CD 74 31     RUNSML: CALL CHKIO                       ; *** RUNSML ***
 572+ 2A4F 21 BC 31             LD  HL,TAB2-1                    ; FIND COMMAND IN TAB2
 573+ 2A52 C3 40 32             JP  EXEC                         ; AND EXECUTE IT
 574+ 2A55
 575+ 2A55 CD 5E 27     GOTO:   CALL EXPR                          ; *** GOTO EXPR ***
 576+ 2A58 D5                   PUSH DE                          ; SAVE FOR ERROR ROUTINE
 577+ 2A59 CD 30 2E             CALL ENDCHK                      ; MUST FIND A CR
 578+ 2A5C CD BA 2E             CALL FNDLN                       ; FIND THE TARGET LINE
 579+ 2A5F C2 E3 27             JP NZ,AHOW                       ; NO SUCH LINE #
 580+ 2A62 F1                   POP  AF                          ; CLEAR THE PUSH DE
 581+ 2A63 C3 45 2A             JP  RUNTSL                       ; GO DO IT
 582+ 2A66
 583+ 2A66                                                       ; *************************************************************
 584+ 2A66
 585+ 2A66                                                       ; *** LIST *** & PRINT ***
 586+ 2A66
 587+ 2A66                                                       ; LIST HAS TWO FORMS:
 588+ 2A66                                                       ; 'LIST(CR)' LISTS ALL SAVED LINES
 589+ 2A66                                                       ; 'LIST #(CR)' START LIST AT THIS LINE #
 590+ 2A66                                                       ; YOU CAN STOP THE LISTING BY CONTROL C KEY
 591+ 2A66
 592+ 2A66                                                       ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 593+ 2A66                                                       ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 594+ 2A66                                                       ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 595+ 2A66
 596+ 2A66                                                       ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 597+ 2A66                                                       ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 598+ 2A66                                                       ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 599+ 2A66                                                       ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 600+ 2A66                                                       ; SPECIFIED, 6 POSITIONS WILL BE USED.
 601+ 2A66
 602+ 2A66                                                       ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 603+ 2A66                                                       ; DOUBLE QUOTES.
 604+ 2A66
 605+ 2A66                                                       ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
 606+ 2A66
 607+ 2A66                                                       ; A $ means print an ascii character, so 'PRINT $72,$107' will print "Hi"
 608+ 2A66
 609+ 2A66                                                       ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 610+ 2A66                                                       ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 611+ 2A66                                                       ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 612+ 2A66
 613+ 2A66 CD B8 27     LIST:   CALL TSTNUM                      ; TEST IF THERE IS A #
 614+ 2A69 CD 30 2E             CALL ENDCHK                      ; IF NO # WE GET A 0
 615+ 2A6C CD BA 2E             CALL FNDLN                       ; FIND THIS OR NEXT LINE
 616+ 2A6F DA FD 27     LS1:    JP C,RSTART                      ; C:PASSED TXTUNF
 617+ 2A72 CD 63 2F             CALL PRTLN                       ; PRINT THE LINE
 618+ 2A75 CD 74 31             CALL CHKIO                       ; STOP IF HIT CONTROL-C
 619+ 2A78 CD C2 2E             CALL FNDLP                       ; FIND NEXT LINE
 620+ 2A7B C3 6F 2A             JP  LS1                          ; AND LOOP BACK
 621+ 2A7E
 622+ 2A7E 0E 06        PRINT:  LD   C,6                         ; C = # OF SPACES
 623+ 2A80 CD 23 27             CALL TSTC                          ; Test for ";"
 624+ 2A83 3B                   DB   3BH
 625+ 2A84 06                   DB   PR2-$-1
 626+ 2A85 CD 37 27             CALL CRLF                        ; GIVE CR-LF AND
 627+ 2A88 C3 4C 2A             JP  RUNSML                       ; CONTINUE SAME LINE
 628+ 2A8B CD 23 27     PR2:    CALL TSTC                          ; Test for (CR)
 629+ 2A8E 0D                   DB   CR
 630+ 2A8F 06                   DB   PR0-$-1
 631+ 2A90 CD 37 27             CALL CRLF                        ; ALSO GIVE CR-LF AND
 632+ 2A93 C3 3C 2A             JP  RUNNXL                       ; GO TO NEXT LINE
 633+ 2A96 CD 23 27     PR0:    CALL TSTC                          ; ELSE IS IT FORMAT? e.g. #4 = format 4 digits long
 634+ 2A99 23                   DB   '#'
 635+ 2A9A 07                   DB   PR1-$-1
 636+ 2A9B CD 5E 27             CALL EXPR                          ; YES, EVALUATE EXPR.
 637+ 2A9E 4D                   LD   C,L                         ; AND SAVE IT IN C
 638+ 2A9F C3 C5 2A             JP  PR3                          ; LOOK FOR MORE TO PRINT
 639+ 2AA2 CD 23 27     PR1:    CALL TSTC                         ; Is it a "$"? e.g. $65 will print 'A'
 640+ 2AA5 24                   DB   '$'
 641+ 2AA6 18                   DB   PRNOTDOLLAR-$-1
 642+ 2AA7 CD 5E 27             CALL EXPR                         ; Evaluate the expression, which will result in an 16 bit number in hl
 643+ 2AAA 7C                   ld a, h                         ; If hl > 255 show error
 644+ 2AAB B7                   or a
 645+ 2AAC 20 09                jr nz, PR_ERROR
 646+ 2AAE 7D                   ld a, l                         ; Get just bottom 8 bits
 647+ 2AAF FE 20                cp 32
 648+ 2AB1 38 04                jr c, PR_ERROR
 649+ 2AB3 FE 7F                cp 127
 650+ 2AB5 38 02                jr c, PR_ASCII
 651+ 2AB7              PR_ERROR:
 652+ 2AB7 3E 2A                ld a, '*'
 653+ 2AB9              PR_ASCII:
 654+ 2AB9 CD 39 27             CALL OUTC
 655+ 2ABC C3 C5 2A             jp PR3                          ; Look for more to print
 656+ 2ABF
 657+ 2ABF              PRNOTDOLLAR:
 658+ 2ABF CD F2 2E             CALL QTSTG                       ; OR IS IT A STRING?
 659+ 2AC2 C3 D6 2A             JP  PR8                          ; IF NOT, MUST BE EXPR.
 660+ 2AC5 CD 23 27     PR3:    CALL TSTC                          ; IF ",", GO FIND NEXT
 661+ 2AC8 2C                   DB   ','
 662+ 2AC9 06                   DB   PR6-$-1
 663+ 2ACA CD 1D 2E             CALL FIN                         ; IN THE LIST.
 664+ 2ACD C3 96 2A             JP  PR0                          ; LIST CONTINUES
 665+ 2AD0 CD 37 27     PR6:    CALL CRLF                        ; LIST ENDS
 666+ 2AD3 CD 73 27             CALL FINISH
 667+ 2AD6 CD 5E 27     PR8:    CALL EXPR                          ; EVALUATE THE EXPR
 668+ 2AD9 C5                   PUSH BC
 669+ 2ADA CD 1F 2F             CALL PRTNUM                      ; PRINT THE VALUE
 670+ 2ADD C1                   POP  BC
 671+ 2ADE C3 C5 2A             JP  PR3                          ; MORE TO PRINT?
 672+ 2AE1
 673+ 2AE1                                                       ; *************************************************************
 674+ 2AE1
 675+ 2AE1                                                       ; *** GOSUB *** & RETURN ***
 676+ 2AE1
 677+ 2AE1                                                       ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 678+ 2AE1                                                       ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 679+ 2AE1                                                       ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 680+ 2AE1                                                       ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 681+ 2AE1                                                       ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 682+ 2AE1                                                       ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 683+ 2AE1                                                       ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 684+ 2AE1                                                       ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 685+ 2AE1                                                       ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 686+ 2AE1
 687+ 2AE1                                                       ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 688+ 2AE1                                                       ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 689+ 2AE1                                                       ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 690+ 2AE1                                                       ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 691+ 2AE1
 692+ 2AE1 CD AE 2F     GOSUB:  CALL PUSHA                       ; SAVE THE CURRENT "FOR"
 693+ 2AE4 CD 5E 27             CALL EXPR                          ; PARAMETERS
 694+ 2AE7 D5                   PUSH DE                          ; AND TEXT POINTER
 695+ 2AE8 CD BA 2E             CALL FNDLN                       ; FIND THE TARGET LINE
 696+ 2AEB C2 E3 27             JP NZ,AHOW                       ; NOT THERE. SAY "HOW?"
 697+ 2AEE 2A 01 80             LD HL,(CURRNT)                   ; FOUND IT, SAVE OLD
 698+ 2AF1 E5                   PUSH HL                          ; 'CURRNT' OLD 'STKGOS'
 699+ 2AF2 2A 03 80             LD HL,(STKGOS)
 700+ 2AF5 E5                   PUSH HL
 701+ 2AF6 21 00 00             LD  HL,0                         ; AND LOAD NEW ONES
 702+ 2AF9 22 09 80             LD (LOPVAR),HL
 703+ 2AFC 39                   ADD HL,SP
 704+ 2AFD 22 03 80             LD (STKGOS),HL
 705+ 2B00 C3 45 2A             JP  RUNTSL                       ; THEN RUN THAT LINE
 706+ 2B03 CD 30 2E     RETURN: CALL ENDCHK                      ; THERE MUST BE A CR
 707+ 2B06 2A 03 80             LD HL,(STKGOS)                   ; OLD STACK POINTER
 708+ 2B09 7C                   LD   A,H                         ; 0 MEANS NOT EXIST
 709+ 2B0A B5                   OR  L
 710+ 2B0B CA 36 2E             JP Z,QWHAT                       ; SO, WE SAY: "WHAT?"
 711+ 2B0E F9                   LD SP,HL                         ; ELSE, RESTORE IT
 712+ 2B0F E1                   POP  HL
 713+ 2B10 22 03 80             LD (STKGOS),HL                   ; AND THE OLD 'STKGOS'
 714+ 2B13 E1                   POP  HL
 715+ 2B14 22 01 80             LD (CURRNT),HL                   ; AND THE OLD 'CURRNT'
 716+ 2B17 D1                   POP  DE                          ; OLD TEXT POINTER
 717+ 2B18 CD 92 2F             CALL POPA                        ; OLD "FOR" PARAMETERS
 718+ 2B1B CD 73 27             CALL FINISH                          ; AND WE ARE BACK HOME
 719+ 2B1E
 720+ 2B1E                                                       ; *************************************************************
 721+ 2B1E
 722+ 2B1E                                                       ; *** FOR *** & NEXT ***
 723+ 2B1E
 724+ 2B1E                                                       ; 'FOR' HAS TWO FORMS:
 725+ 2B1E                                                       ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 726+ 2B1E                                                       ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 727+ 2B1E                                                       ; EXP3=1.  (I.E., WITH A STEP OF +1.)
 728+ 2B1E                                                       ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 729+ 2B1E                                                       ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 730+ 2B1E                                                       ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 731+ 2B1E                                                       ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 732+ 2B1E                                                       ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 733+ 2B1E                                                       ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 734+ 2B1E                                                       ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 735+ 2B1E                                                       ; BEFORE THE NEW ONE OVERWRITES IT.
 736+ 2B1E                                                       ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 737+ 2B1E                                                       ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 738+ 2B1E                                                       ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 739+ 2B1E                                                       ; (PURGED FROM THE STACK..)
 740+ 2B1E
 741+ 2B1E                                                       ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 742+ 2B1E                                                       ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 743+ 2B1E                                                       ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 744+ 2B1E                                                       ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 745+ 2B1E                                                       ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 746+ 2B1E                                                       ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 747+ 2B1E                                                       ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 748+ 2B1E                                                       ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 749+ 2B1E                                                       ; IS PURGED AND EXECUTION CONTINUES.
 750+ 2B1E
 751+ 2B1E CD AE 2F     FOR:    CALL PUSHA                       ; SAVE THE OLD SAVE AREA
 752+ 2B21 CD 04 2E             CALL SETVAL                      ; SET THE CONTROL VAR.
 753+ 2B24 2B                   DEC  HL                          ; HL IS ITS ADDRESS
 754+ 2B25 22 09 80             LD (LOPVAR),HL                   ; SAVE THAT
 755+ 2B28 21 18 32             LD  HL,TAB5-1                    ; USE 'EXEC' TO LOOK
 756+ 2B2B C3 40 32             JP  EXEC                         ; FOR THE WORD 'TO'
 757+ 2B2E CD 5E 27     FR1:    CALL EXPR                          ; EVALUATE THE LIMIT
 758+ 2B31 22 0D 80             LD (LOPLMT),HL                   ; SAVE THAT
 759+ 2B34 21 1E 32             LD  HL,TAB6-1                    ; USE 'EXEC' TO LOOK
 760+ 2B37 C3 40 32             JP EXEC                          ; FOR THE WORD 'STEP'
 761+ 2B3A CD 5E 27     FR2:    CALL EXPR                          ; FOUND IT, GET STEP
 762+ 2B3D C3 43 2B             JP  FR4
 763+ 2B40 21 01 00     FR3:    LD  HL,1H                        ; NOT FOUND, SET TO 1
 764+ 2B43 22 0B 80     FR4:    LD (LOPINC),HL                   ; SAVE THAT TOO
 765+ 2B46 2A 01 80     FR5:    LD HL,(CURRNT)                   ; SAVE CURRENT LINE #
 766+ 2B49 22 0F 80             LD (LOPLN),HL
 767+ 2B4C EB                   EX DE,HL                         ; AND TEXT POINTER
 768+ 2B4D 22 11 80             LD (LOPPT),HL
 769+ 2B50 01 0A 00             LD  BC,0AH                       ; DIG INTO STACK TO
 770+ 2B53 2A 09 80             LD HL,(LOPVAR)                   ; FIND 'LOPVAR'
 771+ 2B56 EB                   EX DE,HL
 772+ 2B57 60                   LD   H,B
 773+ 2B58 68                   LD   L,B                         ; HL=0 NOW
 774+ 2B59 39                   ADD HL,SP                        ; HERE IS THE STACK
 775+ 2B5A 3E                   DB   3EH
 776+ 2B5B 09           FR7:    ADD HL,BC                        ; EACH LEVEL IS 10 DEEP
 777+ 2B5C 7E                   LD   A,(HL)                      ; GET THAT OLD 'LOPVAR'
 778+ 2B5D 23                   INC  HL
 779+ 2B5E B6                   OR  (HL)
 780+ 2B5F CA 7C 2B             JP Z,FR8                         ; 0 SAYS NO MORE IN IT
 781+ 2B62 7E                   LD   A,(HL)
 782+ 2B63 2B                   DEC  HL
 783+ 2B64 BA                   CP  D                            ; SAME AS THIS ONE?
 784+ 2B65 C2 5B 2B             JP NZ,FR7
 785+ 2B68 7E                   LD   A,(HL)                      ; THE OTHER HALF?
 786+ 2B69 BB                   CP  E
 787+ 2B6A C2 5B 2B             JP NZ,FR7
 788+ 2B6D EB                   EX DE,HL                         ; YES, FOUND ONE
 789+ 2B6E 21 00 00             LD  HL,0H
 790+ 2B71 39                   ADD HL,SP                        ; TRY TO MOVE SP
 791+ 2B72 44                   LD   B,H
 792+ 2B73 4D                   LD   C,L
 793+ 2B74 21 0A 00             LD  HL,0AH
 794+ 2B77 19                   ADD HL,DE
 795+ 2B78 CD 83 2F             CALL MVDOWN                      ; AND PURGE 10 WORDS
 796+ 2B7B F9                   LD SP,HL                         ; IN THE STACK
 797+ 2B7C 2A 11 80     FR8:    LD HL,(LOPPT)                    ; JOB DONE, RESTORE DE
 798+ 2B7F EB                   EX DE,HL
 799+ 2B80 CD 73 27             CALL FINISH                          ; AND CONTINUE
 800+ 2B83
 801+ 2B83 CD 7A 27     NEXT:   CALL TSTV                          ; GET ADDRESS OF VAR.
 802+ 2B86 DA 36 2E             JP C,QWHAT                       ; NO VARIABLE, "WHAT?"
 803+ 2B89 22 05 80             LD (VARNXT),HL                   ; YES, SAVE IT
 804+ 2B8C D5           NX0:    PUSH DE                          ; SAVE TEXT POINTER
 805+ 2B8D EB                   EX DE,HL
 806+ 2B8E 2A 09 80             LD HL,(LOPVAR)                   ; GET VAR. IN 'FOR'
 807+ 2B91 7C                   LD   A,H
 808+ 2B92 B5                   OR  L                            ; 0 SAYS NEVER HAD ONE
 809+ 2B93 CA 37 2E             JP Z,AWHAT                       ; SO WE ASK: "WHAT?"
 810+ 2B96 CD 65 27             CALL COMP                          ; ELSE WE CHECK THEM
 811+ 2B99 CA A6 2B             JP Z,NX3                         ; OK, THEY AGREE
 812+ 2B9C D1                   POP  DE                          ; NO, LET'S SEE
 813+ 2B9D CD 92 2F             CALL POPA                        ; PURGE CURRENT LOOP
 814+ 2BA0 2A 05 80             LD HL,(VARNXT)                   ; AND POP ONE LEVEL
 815+ 2BA3 C3 8C 2B             JP  NX0                          ; GO CHECK AGAIN
 816+ 2BA6 5E           NX3:    LD   E,(HL)                      ; COME HERE WHEN AGREED
 817+ 2BA7 23                   INC  HL
 818+ 2BA8 56                   LD   D,(HL)                      ; DE=VALUE OF VAR.
 819+ 2BA9 2A 0B 80             LD HL,(LOPINC)
 820+ 2BAC E5                   PUSH HL
 821+ 2BAD 7C                   LD   A,H
 822+ 2BAE AA                   XOR  D
 823+ 2BAF 7A                   LD   A,D
 824+ 2BB0 19                   ADD HL,DE                        ; ADD ONE STEP
 825+ 2BB1 FA B8 2B             JP M,NX4
 826+ 2BB4 AC                   XOR  H
 827+ 2BB5 FA DC 2B             JP M,NX5
 828+ 2BB8 EB           NX4:    EX DE,HL
 829+ 2BB9 2A 09 80             LD HL,(LOPVAR)                   ; PUT IT BACK
 830+ 2BBC 73                   LD   (HL),E
 831+ 2BBD 23                   INC  HL
 832+ 2BBE 72                   LD   (HL),D
 833+ 2BBF 2A 0D 80             LD HL,(LOPLMT)                   ; HL->LIMIT
 834+ 2BC2 F1                   POP  AF                          ; OLD HL
 835+ 2BC3 B7                   OR  A
 836+ 2BC4 F2 C8 2B             JP P,NX1                         ; STEP > 0
 837+ 2BC7 EB                   EX DE,HL                         ; STEP < 0
 838+ 2BC8 CD FA 2D     NX1:    CALL CKHLDE                      ; COMPARE WITH LIMIT
 839+ 2BCB D1                   POP  DE                          ; RESTORE TEXT POINTER
 840+ 2BCC DA DE 2B             JP C,NX2                         ; OUTSIDE LIMIT
 841+ 2BCF 2A 0F 80             LD HL,(LOPLN)                    ; WITHIN LIMIT, GO
 842+ 2BD2 22 01 80             LD (CURRNT),HL                   ; BACK TO THE SAVED
 843+ 2BD5 2A 11 80             LD HL,(LOPPT)                    ; 'CURRNT' AND TEXT
 844+ 2BD8 EB                   EX DE,HL                         ; POINTER
 845+ 2BD9 CD 73 27             CALL FINISH
 846+ 2BDC E1           NX5:    POP  HL
 847+ 2BDD D1                   POP  DE
 848+ 2BDE CD 92 2F     NX2:    CALL POPA                        ; PURGE THIS LOOP
 849+ 2BE1 CD 73 27             CALL FINISH
 850+ 2BE4
 851+ 2BE4                      ; *************************************************************
 852+ 2BE4
 853+ 2BE4                      ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 854+ 2BE4
 855+ 2BE4                      ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 856+ 2BE4                      ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 857+ 2BE4
 858+ 2BE4                      ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 859+ 2BE4                      ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 860+ 2BE4                      ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 861+ 2BE4                      ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 862+ 2BE4                      ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 863+ 2BE4                      ; EXECUTION CONTINUES AT THE NEXT LINE.
 864+ 2BE4
 865+ 2BE4                      ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 866+ 2BE4                      ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 867+ 2BE4                      ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 868+ 2BE4                      ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 869+ 2BE4                      ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 870+ 2BE4                      ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 871+ 2BE4                      ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 872+ 2BE4                      ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 873+ 2BE4                      ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 874+ 2BE4                      ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 875+ 2BE4
 876+ 2BE4                      ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 877+ 2BE4                      ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 878+ 2BE4                      ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 879+ 2BE4                      ; THIS IS HANDLED IN 'INPERR'.
 880+ 2BE4
 881+ 2BE4                      ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 882+ 2BE4                      ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 883+ 2BE4                      ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 884+ 2BE4                      ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 885+ 2BE4                      ; THIS IS DONE BY 'DEFLT'.
 886+ 2BE4
 887+ 2BE4 21 00 00     REM:    LD  HL,0H                        ; *** REM ***
 888+ 2BE7 3E                   DB   3EH                         ; THIS IS LIKE 'IF 0'
 889+ 2BE8
 890+ 2BE8 CD 5E 27     IFF:    CALL EXPR                          ; *** IF ***
 891+ 2BEB 7C                   LD   A,H                         ; IS THE EXPR.=0?
 892+ 2BEC B5                   OR  L
 893+ 2BED C2 4C 2A             JP NZ,RUNSML                     ; NO, CONTINUE
 894+ 2BF0 CD DA 2E             CALL FNDSKP                      ; YES, SKIP REST OF LINE
 895+ 2BF3 D2 45 2A             JP NC,RUNTSL                     ; AND RUN THE NEXT LINE
 896+ 2BF6 C3 FD 27             JP  RSTART                       ; IF NO NEXT, RE-START
 897+ 2BF9
 898+ 2BF9 2A 07 80     INPERR: LD HL,(STKINP)                   ; *** INPERR ***
 899+ 2BFC F9                   LD SP,HL                         ; RESTORE OLD SP
 900+ 2BFD E1                   POP  HL                          ; AND OLD 'CURRNT'
 901+ 2BFE 22 01 80             LD (CURRNT),HL
 902+ 2C01 D1                   POP  DE                          ; AND OLD TEXT POINTER
 903+ 2C02 D1                   POP  DE                          ; REDO INPUT
 904+ 2C03
 905+ 2C03              INPUT:                                   ; *** INPUT ***
 906+ 2C03 D5           IP1:    PUSH DE                          ; SAVE IN CASE OF ERROR
 907+ 2C04 CD F2 2E             CALL QTSTG                       ; IS NEXT ITEM A STRING?
 908+ 2C07 C3 13 2C             JP  IP2                          ; NO
 909+ 2C0A CD 7A 27             CALL TSTV                          ; YES, BUT FOLLOWED BY A
 910+ 2C0D DA 51 2C             JP C,IP4                         ; VARIABLE?   NO.
 911+ 2C10 C3 25 2C             JP  IP3                          ; YES.  INPUT VARIABLE
 912+ 2C13 D5           IP2:    PUSH DE                          ; SAVE FOR 'PRTSTG'
 913+ 2C14 CD 7A 27             CALL TSTV                          ; MUST BE VARIABLE NOW
 914+ 2C17 DA 36 2E             JP C,QWHAT                       ; "WHAT?" IT IS NOT?
 915+ 2C1A 1A                   LD A,(DE)                        ; GET READY FOR 'PRTSTR'
 916+ 2C1B 4F                   LD   C,A
 917+ 2C1C 97                   SUB  A
 918+ 2C1D 12                   LD (DE),A
 919+ 2C1E D1                   POP  DE
 920+ 2C1F CD E4 2E             CALL PRTSTG                      ; PRINT STRING AS PROMPT
 921+ 2C22 79                   LD   A,C                         ; RESTORE TEXT
 922+ 2C23 1B                   DEC  DE
 923+ 2C24 12                   LD (DE),A
 924+ 2C25 D5           IP3:    PUSH DE                          ; SAVE TEXT POINTER
 925+ 2C26 EB                   EX DE,HL
 926+ 2C27 2A 01 80             LD HL,(CURRNT)                   ; ALSO SAVE 'CURRNT'
 927+ 2C2A E5                   PUSH HL
 928+ 2C2B 21 03 2C             LD  HL,IP1                       ; A NEGATIVE NUMBER
 929+ 2C2E 22 01 80             LD (CURRNT),HL                   ; AS A FLAG
 930+ 2C31 21 00 00             LD  HL,0H                        ; SAVE SP TOO
 931+ 2C34 39                   ADD HL,SP
 932+ 2C35 22 07 80             LD (STKINP),HL
 933+ 2C38 D5                   PUSH DE                          ; OLD HL
 934+ 2C39 3E 3A                LD   A,3AH                       ; PRINT THIS TOO
 935+ 2C3B CD 6C 2E             CALL GETLN                       ; AND GET A LINE
 936+ 2C3E 11 C0 FD             LD  DE,BUFFER                    ; POINTS TO BUFFER
 937+ 2C41 CD 5E 27             CALL EXPR                          ; EVALUATE INPUT
 938+ 2C44 00                   NOP                              ; CAN BE 'CALL ENDCHK'
 939+ 2C45 00                   NOP
 940+ 2C46 00                   NOP
 941+ 2C47 D1                   POP  DE                          ; OK, GET OLD HL
 942+ 2C48 EB                   EX DE,HL
 943+ 2C49 73                   LD   (HL),E                      ; SAVE VALUE IN VAR.
 944+ 2C4A 23                   INC  HL
 945+ 2C4B 72                   LD   (HL),D
 946+ 2C4C E1                   POP  HL                          ; GET OLD 'CURRNT'
 947+ 2C4D 22 01 80             LD (CURRNT),HL
 948+ 2C50 D1                   POP  DE                          ; AND OLD TEXT POINTER
 949+ 2C51 F1           IP4:    POP  AF                          ; PURGE JUNK IN STACK
 950+ 2C52 CD 23 27             CALL TSTC                          ; IS NEXT CH. ','?
 951+ 2C55 2C                   DB   ','
 952+ 2C56 03                   DB   IP5-$-1
 953+ 2C57 C3 03 2C             JP  IP1                          ; YES, MORE ITEMS.
 954+ 2C5A CD 73 27     IP5:    CALL FINISH
 955+ 2C5D
 956+ 2C5D 1A           DEFLT:  LD A,(DE)                        ; ***  DEFLT ***
 957+ 2C5E FE 0D                CP  CR                           ; EMPTY LINE IS OK
 958+ 2C60 CA 6E 2C             JP Z,LT1                         ; ELSE IT IS 'LET'
 959+ 2C63
 960+ 2C63 CD 04 2E     LET:    CALL SETVAL                      ; *** LET ***
 961+ 2C66 CD 23 27             CALL TSTC                          ; SET VALUE TO VAR.
 962+ 2C69 2C                   DB   ','
 963+ 2C6A 03                   DB   LT1-$-1
 964+ 2C6B C3 63 2C             JP  LET                          ; ITEM BY ITEM
 965+ 2C6E CD 73 27     LT1:    CALL FINISH                          ; UNTIL FINISH
 966+ 2C71
 967+ 2C71                                                       ; *************************************************************
 968+ 2C71
 969+ 2C71                                                       ; *** EXPR ***
 970+ 2C71
 971+ 2C71                                                       ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 972+ 2C71                                                       ; <EXPR>::<EXPR2>
 973+ 2C71                                                       ; <EXPR2><REL.OP.><EXPR2>
 974+ 2C71                                                       ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 975+ 2C71                                                       ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 976+ 2C71                                                       ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 977+ 2C71                                                       ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 978+ 2C71                                                       ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 979+ 2C71                                                       ; <EXPR4>::=<VARIABLE>
 980+ 2C71                                                       ; <FUNCTION>
 981+ 2C71                                                       ; (<EXPR>)
 982+ 2C71                                                       ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 983+ 2C71                                                       ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 984+ 2C71                                                       ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 985+ 2C71
 986+ 2C71 21 26 32     EXPR1:  LD  HL,TAB8-1                    ; LOOKUP REL.OP.
 987+ 2C74 C3 40 32             JP  EXEC                         ; GO DO IT
 988+ 2C77 CD A0 2C     XP11:   CALL XP18                        ; REL.OP.">="
 989+ 2C7A D8                   RET C                            ; NO, RETURN HL=0
 990+ 2C7B 6F                   LD   L,A                         ; YES, RETURN HL=1
 991+ 2C7C C9                   RET
 992+ 2C7D CD A0 2C     XP12:   CALL XP18                        ; REL.OP."#"
 993+ 2C80 C8                   RET Z                            ; FALSE, RETURN HL=0
 994+ 2C81 6F                   LD   L,A                         ; TRUE, RETURN HL=1
 995+ 2C82 C9                   RET
 996+ 2C83 CD A0 2C     XP13:   CALL XP18                        ; REL.OP.">"
 997+ 2C86 C8                   RET Z                            ; FALSE
 998+ 2C87 D8                   RET C                            ; ALSO FALSE, HL=0
 999+ 2C88 6F                   LD   L,A                         ; TRUE, HL=1
1000+ 2C89 C9                   RET
1001+ 2C8A CD A0 2C     XP14:   CALL XP18                        ; REL.OP."<="
1002+ 2C8D 6F                   LD   L,A                         ; SET HL=1
1003+ 2C8E C8                   RET Z                            ; REL. TRUE, RETURN
1004+ 2C8F D8                   RET C
1005+ 2C90 6C                   LD   L,H                         ; ELSE SET HL=0
1006+ 2C91 C9                   RET
1007+ 2C92 CD A0 2C     XP15:   CALL XP18                        ; REL.OP."="
1008+ 2C95 C0                   RET NZ                           ; FALSE, RETURN HL=0
1009+ 2C96 6F                   LD   L,A                         ; ELSE SET HL=1
1010+ 2C97 C9                   RET
1011+ 2C98 CD A0 2C     XP16:   CALL XP18                        ; REL.OP."<"
1012+ 2C9B D0                   RET NC                           ; FALSE, RETURN HL=0
1013+ 2C9C 6F                   LD   L,A                         ; ELSE SET HL=1
1014+ 2C9D C9                   RET
1015+ 2C9E E1           XP17:   POP  HL                          ; NOT .REL.OP
1016+ 2C9F C9                   RET                              ; RETURN HL=<EXPR2>
1017+ 2CA0 79           XP18:   LD   A,C                         ; SUBROUTINE FOR ALL
1018+ 2CA1 E1                   POP  HL                          ; REL.OP.'S
1019+ 2CA2 C1                   POP  BC
1020+ 2CA3 E5                   PUSH HL                          ; REVERSE TOP OF STACK
1021+ 2CA4 C5                   PUSH BC
1022+ 2CA5 4F                   LD   C,A
1023+ 2CA6 CD B5 2C             CALL EXPR2                       ; GET 2ND <EXPR2>
1024+ 2CA9 EB                   EX DE,HL                         ; VALUE IN DE NOW
1025+ 2CAA E3                   EX (SP),HL                       ; 1ST <EXPR2> IN HL
1026+ 2CAB CD FA 2D             CALL CKHLDE                      ; COMPARE 1ST WITH 2ND
1027+ 2CAE D1                   POP  DE                          ; RESTORE TEXT POINTER
1028+ 2CAF 21 00 00             LD  HL,0H                        ; SET HL=0, A=1
1029+ 2CB2 3E 01                LD   A,1
1030+ 2CB4 C9                   RET
1031+ 2CB5
1032+ 2CB5 CD 23 27     EXPR2:  CALL TSTC                          ; NEGATIVE SIGN?
1033+ 2CB8 2D                   DB   '-'
1034+ 2CB9 06                   DB   XP21-$-1
1035+ 2CBA 21 00 00             LD  HL,0H                        ; YES, FAKE '0-'
1036+ 2CBD C3 E7 2C             JP  XP26                         ; TREAT LIKE SUBTRACT
1037+ 2CC0 CD 23 27     XP21:   CALL TSTC                          ; POSITIVE SIGN? IGNORE
1038+ 2CC3 2B                   DB   '+'
1039+ 2CC4 00                   DB   XP22-$-1
1040+ 2CC5 CD F1 2C     XP22:   CALL EXPR3                       ; 1ST <EXPR3>
1041+ 2CC8 CD 23 27     XP23:   CALL TSTC                          ; ADD?
1042+ 2CCB 2B                   DB   '+'
1043+ 2CCC 15                   DB   XP25-$-1
1044+ 2CCD E5                   PUSH HL                          ; YES, SAVE VALUE
1045+ 2CCE CD F1 2C             CALL EXPR3                       ; GET 2ND <EXPR3>
1046+ 2CD1 EB           XP24:   EX DE,HL                         ; 2ND IN DE
1047+ 2CD2 E3                   EX (SP),HL                       ; 1ST IN HL
1048+ 2CD3 7C                   LD   A,H                         ; COMPARE SIGN
1049+ 2CD4 AA                   XOR  D
1050+ 2CD5 7A                   LD   A,D
1051+ 2CD6 19                   ADD HL,DE
1052+ 2CD7 D1                   POP  DE                          ; RESTORE TEXT POINTER
1053+ 2CD8 FA C8 2C             JP M,XP23                        ; 1ST AND 2ND SIGN DIFFER
1054+ 2CDB AC                   XOR  H                           ; 1ST AND 2ND SIGN EQUAL
1055+ 2CDC F2 C8 2C             JP P,XP23                        ; SO IS RESULT
1056+ 2CDF C3 E2 27             JP  QHOW                         ; ELSE WE HAVE OVERFLOW
1057+ 2CE2 CD 23 27     XP25:   CALL TSTC                          ; SUBTRACT?
1058+ 2CE5 2D                   DB   '-'
1059+ 2CE6 92                   DB   XP42-$-1
1060+ 2CE7 E5           XP26:   PUSH HL                          ; YES, SAVE 1ST <EXPR3>
1061+ 2CE8 CD F1 2C             CALL EXPR3                       ; GET 2ND <EXPR3>
1062+ 2CEB CD E8 2D             CALL CHGSGN                      ; NEGATE
1063+ 2CEE C3 D1 2C             JP  XP24                         ; AND ADD THEM
1064+ 2CF1
1065+ 2CF1 CD 55 2D     EXPR3:  CALL EXPR4                       ; GET 1ST <EXPR4>
1066+ 2CF4 CD 23 27     XP31:   CALL TSTC                          ; MULTIPLY?
1067+ 2CF7 2A                   DB   '*'
1068+ 2CF8 2D                   DB   XP34-$-1
1069+ 2CF9 E5                   PUSH HL                          ; YES, SAVE 1ST
1070+ 2CFA CD 55 2D             CALL EXPR4                       ; AND GET 2ND <EXPR4>
1071+ 2CFD 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1072+ 2CFF CD E5 2D             CALL CHKSGN                      ; CHECK SIGN
1073+ 2D02 E3                   EX (SP),HL                       ; 1ST IN HL
1074+ 2D03 CD E5 2D             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1075+ 2D06 EB                   EX DE,HL
1076+ 2D07 E3                   EX (SP),HL
1077+ 2D08 7C                   LD   A,H                         ; IS HL > 255 ?
1078+ 2D09 B7                   OR  A
1079+ 2D0A CA 13 2D             JP Z,XP32                        ; NO
1080+ 2D0D 7A                   LD   A,D                         ; YES, HOW ABOUT DE
1081+ 2D0E B2                   OR  D
1082+ 2D0F EB                   EX DE,HL                         ; PUT SMALLER IN HL
1083+ 2D10 C2 E3 27             JP NZ,AHOW                       ; ALSO >, WILL OVERFLOW
1084+ 2D13 7D           XP32:   LD   A,L                         ; THIS IS DUMB
1085+ 2D14 21 00 00             LD  HL,0H                        ; CLEAR RESULT
1086+ 2D17 B7                   OR  A                            ; ADD AND COUNT
1087+ 2D18 CA 47 2D             JP Z,XP35
1088+ 2D1B 19           XP33:   ADD HL,DE
1089+ 2D1C DA E3 27             JP C,AHOW                        ; OVERFLOW
1090+ 2D1F 3D                   DEC  A
1091+ 2D20 C2 1B 2D             JP NZ,XP33
1092+ 2D23 C3 47 2D             JP  XP35                         ; FINISHED
1093+ 2D26 CD 23 27     XP34:   CALL TSTC                          ; DIVIDE?
1094+ 2D29 2F                   DB   '/'
1095+ 2D2A 4E                   DB   XP42-$-1
1096+ 2D2B E5                   PUSH HL                          ; YES, SAVE 1ST <EXPR4>
1097+ 2D2C CD 55 2D             CALL EXPR4                       ; AND GET THE SECOND ONE
1098+ 2D2F 06 00                LD   B,0H                        ; CLEAR B FOR SIGN
1099+ 2D31 CD E5 2D             CALL CHKSGN                      ; CHECK SIGN OF 2ND
1100+ 2D34 E3                   EX (SP),HL                       ; GET 1ST IN HL
1101+ 2D35 CD E5 2D             CALL CHKSGN                      ; CHECK SIGN OF 1ST
1102+ 2D38 EB                   EX DE,HL
1103+ 2D39 E3                   EX (SP),HL
1104+ 2D3A EB                   EX DE,HL
1105+ 2D3B 7A                   LD   A,D                         ; DIVIDE BY 0?
1106+ 2D3C B3                   OR  E
1107+ 2D3D CA E3 27             JP Z,AHOW                        ; SAY "HOW?"
1108+ 2D40 C5                   PUSH BC                          ; ELSE SAVE SIGN
1109+ 2D41 CD C8 2D             CALL DIVIDE                      ; USE SUBROUTINE
1110+ 2D44 60                   LD   H,B                         ; RESULT IN HL NOW
1111+ 2D45 69                   LD   L,C
1112+ 2D46 C1                   POP  BC                          ; GET SIGN BACK
1113+ 2D47 D1           XP35:   POP  DE                          ; AND TEXT POINTER
1114+ 2D48 7C                   LD   A,H                         ; HL MUST BE +
1115+ 2D49 B7                   OR  A
1116+ 2D4A FA E2 27             JP M,QHOW                        ; ELSE IT IS OVERFLOW
1117+ 2D4D 78                   LD   A,B
1118+ 2D4E B7                   OR  A
1119+ 2D4F FC E8 2D             CALL M,CHGSGN                    ; CHANGE SIGN IF NEEDED
1120+ 2D52 C3 F4 2C             JP  XP31                         ; LOOK FOR MORE TERMS
1121+ 2D55
1122+ 2D55 21 00 32     EXPR4:  LD  HL,TAB4-1                    ; FIND FUNCTION IN TAB4
1123+ 2D58 C3 40 32             JP  EXEC                         ; AND GO DO IT
1124+ 2D5B CD 7A 27     XP40:   CALL TSTV                          ; NO, NOT A FUNCTION
1125+ 2D5E DA 66 2D             JP C,XP41                        ; NOR A VARIABLE
1126+ 2D61 7E                   LD   A,(HL)                      ; VARIABLE
1127+ 2D62 23                   INC  HL
1128+ 2D63 66                   LD   H,(HL)                      ; VALUE IN HL
1129+ 2D64 6F                   LD   L,A
1130+ 2D65 C9                   RET
1131+ 2D66 CD B8 27     XP41:   CALL TSTNUM                      ; OR IS IT A NUMBER
1132+ 2D69 78                   LD   A,B                         ; # OF DIGIT
1133+ 2D6A B7                   OR  A
1134+ 2D6B C0                   RET NZ                           ; OK
1135+ 2D6C CD 23 27     PARN:   CALL TSTC
1136+ 2D6F 28                   DB   '('
1137+ 2D70 09                   DB   XP43-$-1
1138+ 2D71 CD 5E 27             CALL EXPR                          ; "(EXPR)"
1139+ 2D74 CD 23 27             CALL TSTC
1140+ 2D77 29                   DB   ')'
1141+ 2D78 01                   DB   XP43-$-1
1142+ 2D79 C9           XP42:   RET
1143+ 2D7A C3 36 2E     XP43:   JP  QWHAT                        ; ELSE SAY: "WHAT?"
1144+ 2D7D
1145+ 2D7D CD 6C 2D     RND:    CALL PARN                        ; *** RND(EXPR) ***
1146+ 2D80 7C                   LD   A,H                         ; EXPR MUST BE +
1147+ 2D81 B7                   OR  A
1148+ 2D82 FA E2 27             JP M,QHOW
1149+ 2D85 B5                   OR  L                            ; AND NON-ZERO
1150+ 2D86 CA E2 27             JP Z,QHOW
1151+ 2D89 D5                   PUSH DE                          ; SAVE BOTH
1152+ 2D8A E5                   PUSH HL
1153+ 2D8B 2A 13 80             LD HL,(RANPNT)                   ; GET MEMORY AS RANDOM
1154+ 2D8E 11 35 33             LD  DE,LSTROM                    ; NUMBER
1155+ 2D91 CD 65 27             CALL COMP
1156+ 2D94 DA 9A 2D             JP C,RA1                         ; WRAP AROUND IF LAST
1157+ 2D97 21 1B 27             LD  HL,TBSTART
1158+ 2D9A 5E           RA1:    LD   E,(HL)
1159+ 2D9B 23                   INC  HL
1160+ 2D9C 56                   LD   D,(HL)
1161+ 2D9D 22 13 80             LD (RANPNT),HL
1162+ 2DA0 E1                   POP  HL
1163+ 2DA1 EB                   EX DE,HL
1164+ 2DA2 C5                   PUSH BC
1165+ 2DA3 CD C8 2D             CALL DIVIDE                      ; RND(N)=MOD(M,N)+1
1166+ 2DA6 C1                   POP  BC
1167+ 2DA7 D1                   POP  DE
1168+ 2DA8 23                   INC  HL
1169+ 2DA9 C9                   RET
1170+ 2DAA
1171+ 2DAA CD 6C 2D     ABS:    CALL PARN                        ; *** ABS(EXPR) ***
1172+ 2DAD 1B                   DEC  DE
1173+ 2DAE CD E5 2D             CALL CHKSGN                      ; CHECK SIGN
1174+ 2DB1 13                   INC  DE
1175+ 2DB2 C9                   RET
1176+ 2DB3
1177+ 2DB3 CD 6C 2D     PEEK:   CALL PARN                        ; *** PEEK(EXPR) ***
1178+ 2DB6 7E                   ld a, (hl)                      ; We got a location into hl, so read from it
1179+ 2DB7 6F                   ld l,a
1180+ 2DB8 26 00                ld h,0
1181+ 2DBA C9                   RET
1182+ 2DBB
1183+ 2DBB 2A 15 80     SIZE:   LD HL,(TXTUNF)                   ; *** SIZE ***
1184+ 2DBE D5                   PUSH DE                          ; GET THE NUMBER OF FREE
1185+ 2DBF EB                   EX DE,HL                         ; BYTES BETWEEN 'TXTUNF'
1186+ 2DC0 21 89 FD             LD  HL,VARBGN                    ; AND 'VARBGN'
1187+ 2DC3 CD DE 2D             CALL SUBDE
1188+ 2DC6 D1                   POP  DE
1189+ 2DC7 C9                   RET
1190+ 2DC8
1191+ 2DC8                      ; *************************************************************
1192+ 2DC8
1193+ 2DC8                      ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1194+ 2DC8
1195+ 2DC8                      ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1196+ 2DC8
1197+ 2DC8                      ; 'SUBDE' SUBSTRACTS DE FROM HL
1198+ 2DC8
1199+ 2DC8                      ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1200+ 2DC8                      ; SIGN AND FLIP SIGN OF B.
1201+ 2DC8
1202+ 2DC8                      ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1203+ 2DC8
1204+ 2DC8                      ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1205+ 2DC8                      ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1206+ 2DC8                      ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1207+ 2DC8
1208+ 2DC8 E5           DIVIDE: PUSH HL                          ; *** DIVIDE ***
1209+ 2DC9 6C                   ld   l,h                         ; DIVIDE H BY DE
1210+ 2DCA 26 00                LD   H,0
1211+ 2DCC CD D3 2D             CALL DV1
1212+ 2DCF 41                   LD   B,C                         ; SAVE RESULT IN B
1213+ 2DD0 7D                   LD   A,L                         ; (REMINDER+L)/DE
1214+ 2DD1 E1                   POP  HL
1215+ 2DD2 67                   LD   H,A
1216+ 2DD3 0E FF        DV1:    LD   C,0FFH                      ; RESULT IN C
1217+ 2DD5 0C           DV2:    INC  C                           ; DUMB ROUTINE
1218+ 2DD6 CD DE 2D             CALL SUBDE                       ; DIVIDE BY SUBTRACT
1219+ 2DD9 D2 D5 2D             JP NC,DV2                        ; AND COUNT
1220+ 2DDC 19                   ADD HL,DE
1221+ 2DDD C9                   RET
1222+ 2DDE
1223+ 2DDE 7D           SUBDE:  LD   A,L                         ; *** SUBDE ***
1224+ 2DDF 93                   SUB  E                           ; SUBSTRACT DE FROM
1225+ 2DE0 6F                   LD   L,A                         ; HL
1226+ 2DE1 7C                   LD   A,H
1227+ 2DE2 9A                   sbc a,D
1228+ 2DE3 67                   LD   H,A
1229+ 2DE4 C9                   RET
1230+ 2DE5
1231+ 2DE5 7C           CHKSGN: LD   A,H                         ; *** CHKSGN ***
1232+ 2DE6 B7                   OR  A                            ; CHECK SIGN OF HL
1233+ 2DE7 F0                   RET P                            ; IF -, CHANGE SIGN
1234+ 2DE8
1235+ 2DE8 7C           CHGSGN: LD   A,H                         ; *** CHGSGN ***
1236+ 2DE9 F5                   PUSH AF
1237+ 2DEA 2F                   CPL                              ; CHANGE SIGN OF HL
1238+ 2DEB 67                   LD   H,A
1239+ 2DEC 7D                   LD   A,L
1240+ 2DED 2F                   CPL
1241+ 2DEE 6F                   LD   L,A
1242+ 2DEF 23                   INC  HL
1243+ 2DF0 F1                   POP  AF
1244+ 2DF1 AC                   XOR  H
1245+ 2DF2 F2 E2 27             JP P,QHOW
1246+ 2DF5 78                   LD   A,B                         ; AND ALSO FLIP B
1247+ 2DF6 EE 80                XOR  80H
1248+ 2DF8 47                   LD   B,A
1249+ 2DF9 C9                   RET
1250+ 2DFA
1251+ 2DFA 7C           CKHLDE: LD   A,H
1252+ 2DFB AA                   XOR  D                           ; SAME SIGN?
1253+ 2DFC F2 00 2E             JP P,CK1                         ; YES, COMPARE
1254+ 2DFF EB                   EX DE,HL                         ; NO, XCH AND COMP
1255+ 2E00 CD 65 27     CK1:    CALL COMP
1256+ 2E03 C9                   RET;,5                          ; No idea if this was a typo but it said ret,5 which didn't assemble.
1257+ 2E04
1258+ 2E04                      ; *************************************************************
1259+ 2E04
1260+ 2E04                      ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1261+ 2E04
1262+ 2E04                      ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1263+ 2E04                      ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1264+ 2E04                      ; TO THAT VALUE.
1265+ 2E04
1266+ 2E04                      ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1267+ 2E04                      ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1268+ 2E04                      ; NEXT LINE AND CONTINUE FROM THERE.
1269+ 2E04
1270+ 2E04                      ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1271+ 2E04                      ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1272+ 2E04
1273+ 2E04                      ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1274+ 2E04                      ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1275+ 2E04                      ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1276+ 2E04                      ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1277+ 2E04                      ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1278+ 2E04                      ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1279+ 2E04                      ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1280+ 2E04                      ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1281+ 2E04                      ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1282+ 2E04
1283+ 2E04                      ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1284+ 2E04                      ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1285+ 2E04                      ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1286+ 2E04                      ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1287+ 2E04                      ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1288+ 2E04
1289+ 2E04 CD 7A 27     SETVAL: CALL TSTV                          ; *** SETVAL ***
1290+ 2E07 DA 36 2E             JP C,QWHAT                       ; "WHAT?" NO VARIABLE
1291+ 2E0A E5                   PUSH HL                          ; SAVE ADDRESS OF VAR.
1292+ 2E0B CD 23 27             CALL TSTC                          ; PASS "=" SIGN
1293+ 2E0E 3D                   DB   '='
1294+ 2E0F 0A                   DB   SV1-$-1
1295+ 2E10 CD 5E 27             CALL EXPR                          ; EVALUATE EXPR.
1296+ 2E13 44                   LD   B,H                         ; VALUE IS IN BC NOW
1297+ 2E14 4D                   LD   C,L
1298+ 2E15 E1                   POP  HL                          ; GET ADDRESS
1299+ 2E16 71                   LD   (HL),C                      ; SAVE VALUE
1300+ 2E17 23                   INC  HL
1301+ 2E18 70                   LD   (HL),B
1302+ 2E19 C9                   RET
1303+ 2E1A C3 36 2E     SV1:    JP  QWHAT                        ; NO "=" SIGN
1304+ 2E1D
1305+ 2E1D CD 23 27     FIN:    CALL TSTC                          ; *** FIN ***
1306+ 2E20 3B                   DB   3BH
1307+ 2E21 04                   DB   FI1-$-1
1308+ 2E22 F1                   POP  AF                          ; ";", PURGE RET. ADDR.
1309+ 2E23 C3 4C 2A             JP  RUNSML                       ; CONTINUE SAME LINE
1310+ 2E26 CD 23 27     FI1:    CALL TSTC                          ; NOT ";", IS IT CR?
1311+ 2E29 0D                   DB   CR
1312+ 2E2A 04                   DB   FI2-$-1
1313+ 2E2B F1                   POP  AF                          ; YES, PURGE RET. ADDR.
1314+ 2E2C C3 3C 2A             JP  RUNNXL                       ; RUN NEXT LINE
1315+ 2E2F C9           FI2:    RET                              ; ELSE RETURN TO CALLER
1316+ 2E30
1317+ 2E30 CD 6B 27     ENDCHK: CALL IGNBLK                          ; *** ENDCHK ***
1318+ 2E33 FE 0D                CP  CR                           ; END WITH CR?
1319+ 2E35 C8                   RET Z                            ; OK, ELSE SAY: "WHAT?"
1320+ 2E36
1321+ 2E36 D5           QWHAT:  PUSH DE                          ; *** QWHAT ***
1322+ 2E37 11 F1 27     AWHAT:  LD  DE,WHAT                      ; *** AWHAT ***
1323+ 2E3A 97           ERROR:  SUB  A                           ; *** ERROR ***
1324+ 2E3B CD E4 2E             CALL PRTSTG                      ; PRINT 'WHAT?', 'HOW?'
1325+ 2E3E D1                   POP  DE                          ; OR 'SORRY'
1326+ 2E3F 1A                   LD A,(DE)                        ; SAVE THE CHARACTER
1327+ 2E40 F5                   PUSH AF                          ; AT WHERE OLD DE ->
1328+ 2E41 97                   SUB  A                           ; AND PUT A 0 THERE
1329+ 2E42 12                   LD (DE),A
1330+ 2E43 2A 01 80             LD HL,(CURRNT)                   ; GET CURRENT LINE #
1331+ 2E46 E5                   PUSH HL
1332+ 2E47 7E                   LD   A,(HL)                      ; CHECK THE VALUE
1333+ 2E48 23                   INC  HL
1334+ 2E49 B6                   OR  (HL)
1335+ 2E4A D1                   POP  DE
1336+ 2E4B CA FD 27             JP Z,RSTART                      ; IF ZERO, JUST RESTART
1337+ 2E4E 7E                   LD   A,(HL)                      ; IF NEGATIVE,
1338+ 2E4F B7                   OR  A
1339+ 2E50 FA F9 2B             JP M,INPERR                      ; REDO INPUT
1340+ 2E53 CD 63 2F             CALL PRTLN                       ; ELSE PRINT THE LINE
1341+ 2E56 1B                   DEC  DE                          ; UPTO WHERE THE 0 IS
1342+ 2E57 F1                   POP  AF                          ; RESTORE THE CHARACTER
1343+ 2E58 12                   LD (DE),A
1344+ 2E59 3E 3F                LD   A,3FH                       ; PRINT A "?"
1345+ 2E5B CD 39 27             CALL OUTC
1346+ 2E5E 97                   SUB  A                           ; AND THE REST OF THE
1347+ 2E5F CD E4 2E             CALL PRTSTG                      ; LINE
1348+ 2E62 C3 FD 27             JP  RSTART                       ; THEN RESTART
1349+ 2E65
1350+ 2E65 D5           QSORRY: PUSH DE                          ; *** QSORRY ***
1351+ 2E66 11 F7 27     ASORRY: LD  DE,SORRY                     ; *** ASORRY ***
1352+ 2E69 C3 3A 2E             JP  ERROR
1353+ 2E6C
1354+ 2E6C                      ; *************************************************************
1355+ 2E6C
1356+ 2E6C                      ; *** GETLN *** FNDLN (& FRIENDS) ***
1357+ 2E6C
1358+ 2E6C                      ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1359+ 2E6C                      ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1360+ 2E6C                      ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1361+ 2E6C                      ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1362+ 2E6C                      ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1363+ 2E6C                      ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1364+ 2E6C                      ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1365+ 2E6C
1366+ 2E6C                      ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1367+ 2E6C                      ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1368+ 2E6C                      ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1369+ 2E6C                      ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1370+ 2E6C                      ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1371+ 2E6C                      ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1372+ 2E6C                      ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1373+ 2E6C                      ; LINE, FLAGS ARE C & NZ.
1374+ 2E6C                      ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1375+ 2E6C                      ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1376+ 2E6C                      ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1377+ 2E6C                      ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1378+ 2E6C                      ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1379+ 2E6C                      ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1380+ 2E6C
1381+ 2E6C CD 39 27     GETLN:  CALL OUTC                          ; *** GETLN ***
1382+ 2E6F 11 C0 FD             LD  DE,BUFFER                    ; PROMPT AND INIT.
1383+ 2E72 CD 74 31     GL1:    CALL CHKIO                       ; CHECK KEYBOARD
1384+ 2E75 CA 72 2E             JP Z,GL1                         ; NO INPUT, WAIT
1385+ 2E78 FE 08                CP  08H                          ; DELETE LAST CHARACTER?
1386+ 2E7A CA 99 2E             JP Z,GL3                         ; YES
1387+ 2E7D CD 39 27             CALL OUTC                          ; INPUT, ECHO BACK
1388+ 2E80 FE 0A                CP  0AH                          ; IGNORE LF
1389+ 2E82 CA 72 2E             JP Z,GL1
1390+ 2E85 B7                   OR  A                            ; IGNORE NULL
1391+ 2E86 CA 72 2E             JP Z,GL1
1392+ 2E89 FE 7D                CP  7DH                          ; DELETE THE WHOLE LINE?
1393+ 2E8B CA B2 2E             JP Z,GL4                         ; YES
1394+ 2E8E 12                   LD (DE),A                        ; ELSE SAVE INPUT
1395+ 2E8F 13                   INC  DE                          ; AND BUMP POINTER
1396+ 2E90 FE 0D                CP  0DH                          ; WAS IT CR?
1397+ 2E92 C8                   RET Z                            ; YES, END OF LINE
1398+ 2E93 7B                   LD   A,E                         ; ELSE MORE FREE ROOM?
1399+ 2E94 FE 00                CP  BUFEND & 0FFH
1400+ 2E96 C2 72 2E             JP NZ,GL1                        ; YES, GET NEXT INPUT
1401+ 2E99 7B           GL3:    LD   A,E                         ; DELETE LAST CHARACTER
1402+ 2E9A FE C0                CP  BUFFER & 0FFH                ; BUT DO WE HAVE ANY?
1403+ 2E9C CA B2 2E             JP Z,GL4                         ; NO, REDO WHOLE LINE
1404+ 2E9F 1B                   DEC  DE                          ; YES, BACKUP POINTER
1405+ 2EA0 3E 08                LD   A,08H                       ; AND move cursor left, print space, cursor left again (to rub-out)
1406+ 2EA2 CD 39 27             CALL OUTC
1407+ 2EA5 3E 20                ld a, ' '
1408+ 2EA7 CD 39 27             CALL OUTC
1409+ 2EAA 3E 08                ld a, 08h
1410+ 2EAC CD 39 27             CALL OUTC
1411+ 2EAF C3 72 2E             JP  GL1                          ; GO GET NEXT INPUT
1412+ 2EB2 CD 37 27     GL4:    CALL CRLF                        ; REDO ENTIRE LINE
1413+ 2EB5 3E 5E                LD   A,05EH                      ; CR, LF AND UP-ARROW
1414+ 2EB7 C3 6C 2E             JP  GETLN
1415+ 2EBA
1416+ 2EBA 7C           FNDLN:  LD   A,H                         ; *** FNDLN ***
1417+ 2EBB B7                   OR  A                            ; CHECK SIGN OF HL
1418+ 2EBC FA E2 27             JP M,QHOW                        ; IT CANNOT BE -
1419+ 2EBF 11 19 80             LD  DE,TXTBGN                    ; INIT TEXT POINTER
1420+ 2EC2
1421+ 2EC2              FNDLP:                                   ; *** FDLNP ***
1422+ 2EC2 E5           FL1:    PUSH HL                          ; SAVE LINE #
1423+ 2EC3 2A 15 80             LD HL,(TXTUNF)                   ; CHECK IF WE PASSED END
1424+ 2EC6 2B                   DEC  HL
1425+ 2EC7 CD 65 27             CALL COMP
1426+ 2ECA E1                   POP  HL                          ; GET LINE # BACK
1427+ 2ECB D8                   RET C                            ; C,NZ PASSED END
1428+ 2ECC 1A                   LD A,(DE)                        ; WE DID NOT, GET BYTE 1
1429+ 2ECD 95                   SUB  L                           ; IS THIS THE LINE?
1430+ 2ECE 47                   LD   B,A                         ; COMPARE LOW ORDER
1431+ 2ECF 13                   INC  DE
1432+ 2ED0 1A                   LD A,(DE)                        ; GET BYTE 2
1433+ 2ED1 9C                   sbc a,H                          ; COMPARE HIGH ORDER
1434+ 2ED2 DA D9 2E             JP C,FL2                         ; NO, NOT THERE YET
1435+ 2ED5 1B                   DEC  DE                          ; ELSE WE EITHER FOUND
1436+ 2ED6 B0                   OR  B                            ; IT, OR IT IS NOT THERE
1437+ 2ED7 C9                   RET                              ; NC,Z:FOUND, NC,NZ:NO
1438+ 2ED8
1439+ 2ED8              FNDNXT:                                  ; *** FNDNXT ***
1440+ 2ED8 13                   INC  DE                          ; FIND NEXT LINE
1441+ 2ED9 13           FL2:    INC  DE                          ; JUST PASSED BYTE 1 & 2
1442+ 2EDA
1443+ 2EDA 1A           FNDSKP: LD A,(DE)                        ; *** FNDSKP ***
1444+ 2EDB FE 0D                CP  CR                           ; TRY TO FIND CR
1445+ 2EDD C2 D9 2E             JP NZ,FL2                        ; KEEP LOOKING
1446+ 2EE0 13                   INC  DE                          ; FOUND CR, SKIP OVER
1447+ 2EE1 C3 C2 2E             JP  FL1                          ; CHECK IF END OF TEXT
1448+ 2EE4
1449+ 2EE4                                                       ; *************************************************************
1450+ 2EE4
1451+ 2EE4                                                       ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1452+ 2EE4
1453+ 2EE4                                                       ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1454+ 2EE4                                                       ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1455+ 2EE4                                                       ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1456+ 2EE4                                                       ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1457+ 2EE4
1458+ 2EE4                                                       ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1459+ 2EE4                                                       ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACKSLASH,
1460+ 2EE4                                                       ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1461+ 2EE4                                                       ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1462+ 2EE4                                                       ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1463+ 2EE4                                                       ; OVER (USUALLY A JUMP INSTRUCTION.
1464+ 2EE4
1465+ 2EE4                                                       ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1466+ 2EE4                                                       ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1467+ 2EE4                                                       ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1468+ 2EE4                                                       ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1469+ 2EE4                                                       ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1470+ 2EE4
1471+ 2EE4                                                       ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1472+ 2EE4
1473+ 2EE4 47           PRTSTG: LD   B,A                         ; *** PRTSTG ***
1474+ 2EE5 1A           PS1:    LD A,(DE)                        ; GET A CHARACTER
1475+ 2EE6 13                   INC  DE                          ; BUMP POINTER
1476+ 2EE7 B8                   CP  B                            ; SAME AS OLD A?
1477+ 2EE8 C8                   RET Z                            ; YES, RETURN
1478+ 2EE9 CD 39 27             CALL OUTC                          ; ELSE PRINT IT
1479+ 2EEC FE 0D                CP  CR                           ; WAS IT A CR?
1480+ 2EEE C2 E5 2E             JP NZ,PS1                        ; NO, NEXT
1481+ 2EF1 C9                   RET                              ; YES, RETURN
1482+ 2EF2
1483+ 2EF2 CD 23 27     QTSTG:  CALL TSTC                          ; *** QTSTG ***
1484+ 2EF5 22                   DB   34                          ; ascii for quote
1485+ 2EF6 0F                   DB   QT3-$-1
1486+ 2EF7 3E 22                LD   A,22H                       ; IT IS A quote
1487+ 2EF9 CD E4 2E     QT1:    CALL PRTSTG                      ; PRINT UNTIL ANOTHER
1488+ 2EFC FE 0D                CP  CR                           ; WAS LAST ONE A CR?
1489+ 2EFE E1                   POP  HL                          ; RETURN ADDRESS
1490+ 2EFF CA 3C 2A             JP Z,RUNNXL                      ; WAS CR, RUN NEXT LINE
1491+ 2F02 23           QT2:    INC  HL                          ; SKIP 3 BYTES ON RETURN
1492+ 2F03 23                   INC  HL
1493+ 2F04 23                   INC  HL
1494+ 2F05 E9                   JP (HL)                          ; RETURN
1495+ 2F06 CD 23 27     QT3:    CALL TSTC                          ; IS IT A '?
1496+ 2F09 27                   DB   27H
1497+ 2F0A 05                   DB   QT4-$-1
1498+ 2F0B 3E 27                LD   A,27H                       ; YES, DO THE SAME
1499+ 2F0D C3 F9 2E             JP  QT1                          ; AS IN quote
1500+ 2F10 CD 23 27     QT4:    CALL TSTC                          ; IS IT BACKSLASH " \ "?
1501+ 2F13 5C                   DB   5CH
1502+ 2F14 09                   DB   QT5-$-1
1503+ 2F15 3E 0D                LD   A,0DH                       ; YES, CR WITHOUT LF
1504+ 2F17 CD 39 27             CALL OUTC
1505+ 2F1A E1                   POP  HL                          ; RETURN ADDRESS
1506+ 2F1B C3 02 2F             JP  QT2
1507+ 2F1E C9           QT5:    RET                              ; NONE OF ABOVE
1508+ 2F1F
1509+ 2F1F 06 00        PRTNUM: LD   B,0                         ; *** PRTNUM ***
1510+ 2F21 CD E5 2D             CALL CHKSGN                      ; CHECK SIGN
1511+ 2F24 F2 2A 2F             JP P,PN1                         ; NO SIGN
1512+ 2F27 06 2D                LD   B,'-'                       ; B=SIGN
1513+ 2F29 0D                   DEC  C                           ; '-' TAKES SPACE
1514+ 2F2A D5           PN1:    PUSH DE                          ; SAVE
1515+ 2F2B 11 0A 00             LD  DE,0AH                       ; DECIMAL
1516+ 2F2E D5                   PUSH DE                          ; SAVE AS A FLAG
1517+ 2F2F 0D                   DEC  C                           ; C=SPACES
1518+ 2F30 C5                   PUSH BC                          ; SAVE SIGN & SPACE
1519+ 2F31 CD C8 2D     PN2:    CALL DIVIDE                      ; DIVIDE HL BY 10
1520+ 2F34 78                   LD   A,B                         ; RESULT 0?
1521+ 2F35 B1                   OR  C
1522+ 2F36 CA 41 2F             JP Z,PN3                         ; YES, WE GOT ALL
1523+ 2F39 E3                   EX (SP),HL                       ; NO, SAVE REMAINDER
1524+ 2F3A 2D                   DEC  L                           ; AND COUNT SPACE
1525+ 2F3B E5                   PUSH HL                          ; HL IS OLD BC
1526+ 2F3C 60                   LD   H,B                         ; MOVE RESULT TO BC
1527+ 2F3D 69                   LD   L,C
1528+ 2F3E C3 31 2F             JP  PN2                          ; AND DIVIDE BY 10
1529+ 2F41 C1           PN3:    POP  BC                          ; WE GOT ALL DIGITS IN
1530+ 2F42 0D           PN4:    DEC  C                           ; THE STACK
1531+ 2F43 79                   LD   A,C                         ; LOOK AT SPACE COUNT
1532+ 2F44 B7                   OR  A
1533+ 2F45 FA 50 2F             JP M,PN5                         ; NO LEADING BLANKS
1534+ 2F48 3E 20                LD   A,20H                       ; LEADING BLANKS
1535+ 2F4A CD 39 27             CALL OUTC
1536+ 2F4D C3 42 2F             JP  PN4                          ; MORE?
1537+ 2F50 78           PN5:    LD   A,B                         ; PRINT SIGN
1538+ 2F51 B7                   OR  A
1539+ 2F52 C4 10 00             CALL NZ,10H
1540+ 2F55 5D                   LD   E,L                         ; LAST REMAINDER IN E
1541+ 2F56 7B           PN6:    LD   A,E                         ; CHECK DIGIT IN E
1542+ 2F57 FE 0A                CP  0AH                          ; 10 IS FLAG FOR NO MORE
1543+ 2F59 D1                   POP  DE
1544+ 2F5A C8                   RET Z                            ; IF SO, RETURN
1545+ 2F5B C6 30                ADD  A,30H                       ; ELSE CONVERT TO ASCII
1546+ 2F5D CD 39 27             CALL OUTC                          ; AND PRINT THE DIGIT
1547+ 2F60 C3 56 2F             JP  PN6                          ; GO BACK FOR MORE
1548+ 2F63
1549+ 2F63 1A           PRTLN:  LD A,(DE)                        ; *** PRTLN ***
1550+ 2F64 6F                   LD   L,A                         ; LOW ORDER LINE #
1551+ 2F65 13                   INC  DE
1552+ 2F66 1A                   LD A,(DE)                        ; HIGH ORDER
1553+ 2F67 67                   LD   H,A
1554+ 2F68 13                   INC  DE
1555+ 2F69 0E 04                LD   C,4H                        ; PRINT 4 DIGIT LINE #
1556+ 2F6B CD 1F 2F             CALL PRTNUM
1557+ 2F6E 3E 20                LD   A,20H                       ; FOLLOWED BY A BLANK
1558+ 2F70 CD 39 27             CALL OUTC
1559+ 2F73 97                   SUB  A                           ; AND THEN THE NEXT
1560+ 2F74 CD E4 2E             CALL PRTSTG
1561+ 2F77 C9                   RET
1562+ 2F78
1563+ 2F78                      ; *************************************************************
1564+ 2F78
1565+ 2F78                      ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1566+ 2F78
1567+ 2F78                      ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1568+ 2F78                      ; DE = HL
1569+ 2F78
1570+ 2F78                      ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1571+ 2F78                      ; UNTIL DE = BC
1572+ 2F78
1573+ 2F78                      ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1574+ 2F78                      ; STACK
1575+ 2F78
1576+ 2F78                      ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1577+ 2F78                      ; STACK
1578+ 2F78
1579+ 2F78 CD 65 27     MVUP:   CALL COMP                          ; *** MVUP ***
1580+ 2F7B C8                   RET Z                            ; DE = HL, RETURN
1581+ 2F7C 1A                   LD A,(DE)                        ; GET ONE BYTE
1582+ 2F7D 02                   LD (BC),A                        ; MOVE IT
1583+ 2F7E 13                   INC  DE                          ; INCREASE BOTH POINTERS
1584+ 2F7F 03                   INC  BC
1585+ 2F80 C3 78 2F             JP  MVUP                         ; UNTIL DONE
1586+ 2F83
1587+ 2F83 78           MVDOWN: LD   A,B                         ; *** MVDOWN ***
1588+ 2F84 92                   SUB  D                           ; TEST IF DE = BC
1589+ 2F85 C2 8B 2F             JP NZ,MD1                        ; NO, GO MOVE
1590+ 2F88 79                   LD   A,C                         ; MAYBE, OTHER BYTE?
1591+ 2F89 93                   SUB  E
1592+ 2F8A C8                   RET Z                            ; YES, RETURN
1593+ 2F8B 1B           MD1:    DEC  DE                          ; ELSE MOVE A BYTE
1594+ 2F8C 2B                   DEC  HL                          ; BUT FIRST DECREASE
1595+ 2F8D 1A                   LD A,(DE)                        ; BOTH POINTERS AND
1596+ 2F8E 77                   LD   (HL),A                      ; THEN DO IT
1597+ 2F8F C3 83 2F             JP  MVDOWN                       ; LOOP BACK
1598+ 2F92
1599+ 2F92 C1           POPA:   POP  BC                          ; BC = RETURN ADDR.
1600+ 2F93 E1                   POP  HL                          ; RESTORE LOPVAR, BUT
1601+ 2F94 22 09 80             LD (LOPVAR),HL                   ; =0 MEANS NO MORE
1602+ 2F97 7C                   LD   A,H
1603+ 2F98 B5                   OR  L
1604+ 2F99 CA AC 2F             JP Z,PP1                         ; YEP, GO RETURN
1605+ 2F9C E1                   POP  HL                          ; NOP, RESTORE OTHERS
1606+ 2F9D 22 0B 80             LD (LOPINC),HL
1607+ 2FA0 E1                   POP  HL
1608+ 2FA1 22 0D 80             LD (LOPLMT),HL
1609+ 2FA4 E1                   POP  HL
1610+ 2FA5 22 0F 80             LD (LOPLN),HL
1611+ 2FA8 E1                   POP  HL
1612+ 2FA9 22 11 80             LD (LOPPT),HL
1613+ 2FAC C5           PP1:    PUSH BC                          ; BC = RETURN ADDR.
1614+ 2FAD C9                   RET
1615+ 2FAE
1616+ 2FAE 21 01 FE     PUSHA:  LD  HL,STKLMT                    ; *** PUSHA ***
1617+ 2FB1 CD E8 2D             CALL CHGSGN
1618+ 2FB4 C1                   POP  BC                          ; BC=RETURN ADDRESS
1619+ 2FB5 39                   ADD HL,SP                        ; IS STACK NEAR THE TOP?
1620+ 2FB6 D2 65 2E             JP NC,QSORRY                     ; YES, SORRY FOR THAT
1621+ 2FB9 2A 09 80             LD HL,(LOPVAR)                   ; ELSE SAVE LOOP VAR'S
1622+ 2FBC 7C                   LD   A,H                         ; BUT IF LOPVAR IS 0
1623+ 2FBD B5                   OR  L                            ; THAT WILL BE ALL
1624+ 2FBE CA D4 2F             JP Z,PU1
1625+ 2FC1 2A 11 80             LD HL,(LOPPT)                    ; ELSE, MORE TO SAVE
1626+ 2FC4 E5                   PUSH HL
1627+ 2FC5 2A 0F 80             LD HL,(LOPLN)
1628+ 2FC8 E5                   PUSH HL
1629+ 2FC9 2A 0D 80             LD HL,(LOPLMT)
1630+ 2FCC E5                   PUSH HL
1631+ 2FCD 2A 0B 80             LD HL,(LOPINC)
1632+ 2FD0 E5                   PUSH HL
1633+ 2FD1 2A 09 80             LD HL,(LOPVAR)
1634+ 2FD4 E5           PU1:    PUSH HL
1635+ 2FD5 C5                   PUSH BC                          ; BC = RETURN ADDR.
1636+ 2FD6 C9                   RET
1637+ 2FD7
1638+ 2FD7                      ; *************************************************************
1639+ 2FD7
1640+ 2FD7                      ; *** OUTC *** & CHKIO ***
1641+ 2FD7
1642+ 2FD7                      ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1643+ 2FD7                      ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1644+ 2FD7                      ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1645+ 2FD7                      ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1646+ 2FD7                      ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1647+ 2FD7                      ; ARE RESTORED.
1648+ 2FD7
1649+ 2FD7                      ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1650+ 2FD7                      ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1651+ 2FD7                      ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1652+ 2FD7                      ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1653+ 2FD7                      ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1654+ 2FD7                      ; RESTART TBI AND DOES NOT RETURN TO THE CALLER.
1655+ 2FD7
1656+ 2FD7
1657+ 2FD7
1658+ 2FD7
1659+ 2FD7 32 00 80     INIT:   LD  (OCSW),A
1660+ 2FDA
1661+ 2FDA CD 0C 08             call message
1662+ 2FDD 1B 5B 32 4A          DB 27,'[2J',27,'[H'
1662+ 2FE1 1B 5B 48
1663+ 2FE4 C9 CD CD CD          DB 201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,CR,LF
1663+ 2FE8 CD CD CD CD
1663+ 2FEC CD CD CD CD
1663+ 2FF0 CD CD CD CD
1663+ 2FF4 CD CD CD CD
1663+ 2FF8 CD CD CD CD
1663+ 2FFC CD CD CD CD
1663+ 3000 CD CD CD CD
1663+ 3004 CD CD CD CD
1663+ 3008 CD CD CD BB
1663+ 300C 0D 0A
1664+ 300E BA 20 20 54          DB 186,'  TINY BASIC v2.2 for Z80 Playground  ',186,CR,LF
1664+ 3012 49 4E 59 20
1664+ 3016 42 41 53 49
1664+ 301A 43 20 76 32
1664+ 301E 2E 32 20 66
1664+ 3022 6F 72 20 5A
1664+ 3026 38 30 20 50
1664+ 302A 6C 61 79 67
1664+ 302E 72 6F 75 6E
1664+ 3032 64 20 20 BA
1664+ 3036 0D 0A
1665+ 3038 C8 CD CD CD          DB 200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,CR,LF
1665+ 303C CD CD CD CD
1665+ 3040 CD CD CD CD
1665+ 3044 CD CD CD CD
1665+ 3048 CD CD CD CD
1665+ 304C CD CD CD CD
1665+ 3050 CD CD CD CD
1665+ 3054 CD CD CD CD
1665+ 3058 CD CD CD CD
1665+ 305C CD CD CD BC
1665+ 3060 0D 0A
1666+ 3062 0D 0A                DB CR,LF
1667+ 3064 44 69 73 6B          db 'Disk commands are:',CR,LF
1667+ 3068 20 63 6F 6D
1667+ 306C 6D 61 6E 64
1667+ 3070 73 20 61 72
1667+ 3074 65 3A 0D 0A
1668+ 3078 20 20 44 49          db '  DIR',CR,LF
1668+ 307C 52 0D 0A
1669+ 307F 20 20 53 41          db '  SAVE "filename"',CR,LF
1669+ 3083 56 45 20 22
1669+ 3087 66 69 6C 65
1669+ 308B 6E 61 6D 65
1669+ 308F 22 0D 0A
1670+ 3092 20 20 4C 4F          db '  LOAD "filename"',CR,LF
1670+ 3096 41 44 20 22
1670+ 309A 66 69 6C 65
1670+ 309E 6E 61 6D 65
1670+ 30A2 22 0D 0A
1671+ 30A5 20 20 45 52          db '  ERASE "filename"',CR,LF
1671+ 30A9 41 53 45 20
1671+ 30AD 22 66 69 6C
1671+ 30B1 65 6E 61 6D
1671+ 30B5 65 22 0D 0A
1672+ 30B9 4F 74 68 65          db 'Other keywords:',CR,LF
1672+ 30BD 72 20 6B 65
1672+ 30C1 79 77 6F 72
1672+ 30C5 64 73 3A 0D
1672+ 30C9 0A
1673+ 30CA
1674+ 30CA 20 20 52 45          DB   '  REM, '
1674+ 30CE 4D 2C 20
1675+ 30D1 4E 45 57 2C          DB   'NEW, '
1675+ 30D5 20
1676+ 30D6 4C 49 53 54          DB   'LIST, '
1676+ 30DA 2C 20
1677+ 30DC 52 55 4E 2C          DB   'RUN, '
1677+ 30E0 20
1678+ 30E1 4C 45 54 2C          DB   'LET, '
1678+ 30E5 20
1679+ 30E6 49 46 2C 20          DB   'IF, '
1680+ 30EA 47 4F 54 4F          DB   'GOTO, '
1680+ 30EE 2C 20
1681+ 30F0 47 4F 53 55          DB   'GOSUB,',13,10
1681+ 30F4 42 2C 0D 0A
1682+ 30F8 20 20 52 45          DB   '  RETURN, '
1682+ 30FC 54 55 52 4E
1682+ 3100 2C 20
1683+ 3102 46 4F 52 2C          DB   'FOR, '
1683+ 3106 20
1684+ 3107 54 4F 2C 20          DB   'TO, '
1685+ 310B 53 54 45 50          DB   'STEP, '
1685+ 310F 2C 20
1686+ 3111 4E 45 58 54          DB   'NEXT, '
1686+ 3115 2C 20
1687+ 3117 49 4E 50 55          DB   'INPUT, '
1687+ 311B 54 2C 20
1688+ 311E 50 52 49 4E          DB   'PRINT, '
1688+ 3122 54 2C 20
1689+ 3125 53 54 4F 50          DB   'STOP, '
1689+ 3129 2C 20
1690+ 312B 52 4E 44 2C          DB   'RND, '
1690+ 312F 20
1691+ 3130 41 42 53 2C          DB   'ABS, '
1691+ 3134 20
1692+ 3135 53 49 5A 45          DB   'SIZE, '
1692+ 3139 2C 20
1693+ 313B 50 45 45 4B          DB   'PEEK',13,10
1693+ 313F 0D 0A
1694+ 3141 54 68 69 73          db 'This version is case-insensitive!'
1694+ 3145 20 76 65 72
1694+ 3149 73 69 6F 6E
1694+ 314D 20 69 73 20
1694+ 3151 63 61 73 65
1694+ 3155 2D 69 6E 73
1694+ 3159 65 6E 73 69
1694+ 315D 74 69 76 65
1694+ 3161 21
1695+ 3162 0D 0A 00             DB CR,LF,0
1696+ 3165
1697+ 3165 21 1B 27             LD  HL,TBSTART
1698+ 3168 22 13 80             LD (RANPNT),HL
1699+ 316B 21 19 80             LD  HL,TXTBGN
1700+ 316E 22 15 80             LD (TXTUNF),HL
1701+ 3171 C3 FD 27             JP  RSTART
1702+ 3174
1703+ 3174              CHKIO:
1704+ 3174 DB BD                in a,(uart_LSR)                  ; get status from Line Status Register
1705+ 3176 CB 47                bit 0,a                          ; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
1706+ 3178                                                       ; "logic 0 = no data in receive holding register."
1707+ 3178 C8                   ret z                            ; zero = no char received
1708+ 3179 DB B8                in a,(uart_tx_rx)                ; Get the incoming char from the keyboard
1709+ 317B FE 00                cp 0
1710+ 317D C8                   ret z                            ; If no key pressed, return Z
1711+ 317E
1712+ 317E E6 7F                AND  7FH                         ; MASK BIT 7 OFF
1713+ 3180 FE 0F                CP  0FH                          ; IS IT CONTROL-O?
1714+ 3182 C2 8F 31             JP NZ,CI1                        ; NO, MORE CHECKING
1715+ 3185 3A 00 80             LD  A,(OCSW)                     ; CONTROL-O FLIPS OCSW
1716+ 3188 2F                   CPL                              ; ON TO OFF, OFF TO ON
1717+ 3189 32 00 80             LD  (OCSW),A
1718+ 318C C3 74 31             JP  CHKIO                        ; GET ANOTHER INPUT
1719+ 318F FE 03        CI1:    CP  3H                           ; IS IT CONTROL-C?
1720+ 3191 C0                   RET NZ                           ; NO, RETURN "NZ"
1721+ 3192 C3 FD 27             JP  RSTART                       ; YES, RESTART TBI
1722+ 3195
1723+ 3195                      ; *************************************************************
1724+ 3195
1725+ 3195                      ; *** TABLES *** DIRECT *** & EXEC ***
1726+ 3195
1727+ 3195                      ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1728+ 3195                      ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1729+ 3195                      ; OF CODE ACCORDING TO THE TABLE.
1730+ 3195
1731+ 3195                      ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1732+ 3195                      ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1733+ 3195                      ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1734+ 3195                      ; ALL DIRECT AND STATEMENT COMMANDS.
1735+ 3195
1736+ 3195                      ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1737+ 3195                      ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1738+ 3195                      ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1739+ 3195
1740+ 3195                      ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1741+ 3195                      ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1742+ 3195                      ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1743+ 3195                      ; BYTE SET TO 1.
1744+ 3195
1745+ 3195                      ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1746+ 3195                      ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1747+ 3195                      ; MATCH THIS NULL ITEM AS DEFAULT.
1748+ 3195
1749+ 3195              TAB1:                                    ; DIRECT COMMANDS
1750+ 3195 4C 49 53 54          DB   'LIST'
1751+ 3199                      DWA  LIST
1751+ 3199 2A          >        DB LIST>>8+128
1751+ 319A 66          >        DB LIST&0FFH
1752+ 319B 52 55 4E             DB   'RUN'
1753+ 319E                      DWA  RUN
1753+ 319E 2A          >        DB RUN>>8+128
1753+ 319F 36          >        DB RUN&0FFH
1754+ 31A0 4E 45 57             DB   'NEW'
1755+ 31A3                      DWA  NEW
1755+ 31A3 28          >        DB NEW>>8+128
1755+ 31A4 79          >        DB NEW&0FFH
1756+ 31A5 44 49 52             DB   'DIR'
1757+ 31A8                      DWA  TBDIR
1757+ 31A8 28          >        DB TBDIR>>8+128
1757+ 31A9 88          >        DB TBDIR&0FFH
1758+ 31AA 53 41 56 45          DB   'SAVE'
1759+ 31AE                      DWA  SAVE
1759+ 31AE 29          >        DB SAVE>>8+128
1759+ 31AF 06          >        DB SAVE&0FFH
1760+ 31B0 4C 4F 41 44          DB   'LOAD'
1761+ 31B4                      DWA  LOAD
1761+ 31B4 29          >        DB LOAD>>8+128
1761+ 31B5 90          >        DB LOAD&0FFH
1762+ 31B6 45 52 41 53          DB   'ERASE'
1762+ 31BA 45
1763+ 31BB                      DWA  ERASE
1763+ 31BB 2A          >        DB ERASE>>8+128
1763+ 31BC 08          >        DB ERASE&0FFH
1764+ 31BD
1765+ 31BD              TAB2:                                    ; DIRECT/STATEMENT
1766+ 31BD 4E 45 58 54          DB   'NEXT'
1767+ 31C1                      DWA  NEXT
1767+ 31C1 2B          >        DB NEXT>>8+128
1767+ 31C2 83          >        DB NEXT&0FFH
1768+ 31C3 4C 45 54             DB   'LET'
1769+ 31C6                      DWA  LET
1769+ 31C6 2C          >        DB LET>>8+128
1769+ 31C7 63          >        DB LET&0FFH
1770+ 31C8 49 46                DB   'IF'
1771+ 31CA                      DWA  IFF
1771+ 31CA 2B          >        DB IFF>>8+128
1771+ 31CB E8          >        DB IFF&0FFH
1772+ 31CC 47 4F 54 4F          DB   'GOTO'
1773+ 31D0                      DWA  GOTO
1773+ 31D0 2A          >        DB GOTO>>8+128
1773+ 31D1 55          >        DB GOTO&0FFH
1774+ 31D2 47 4F 53 55          DB   'GOSUB'
1774+ 31D6 42
1775+ 31D7                      DWA  GOSUB
1775+ 31D7 2A          >        DB GOSUB>>8+128
1775+ 31D8 E1          >        DB GOSUB&0FFH
1776+ 31D9 52 45 54 55          DB   'RETURN'
1776+ 31DD 52 4E
1777+ 31DF                      DWA  RETURN
1777+ 31DF 2B          >        DB RETURN>>8+128
1777+ 31E0 03          >        DB RETURN&0FFH
1778+ 31E1 52 45 4D             DB   'REM'
1779+ 31E4                      DWA  REM
1779+ 31E4 2B          >        DB REM>>8+128
1779+ 31E5 E4          >        DB REM&0FFH
1780+ 31E6 46 4F 52             DB   'FOR'
1781+ 31E9                      DWA  FOR
1781+ 31E9 2B          >        DB FOR>>8+128
1781+ 31EA 1E          >        DB FOR&0FFH
1782+ 31EB 49 4E 50 55          DB   'INPUT'
1782+ 31EF 54
1783+ 31F0                      DWA  INPUT
1783+ 31F0 2C          >        DB INPUT>>8+128
1783+ 31F1 03          >        DB INPUT&0FFH
1784+ 31F2 50 52 49 4E          DB   'PRINT'
1784+ 31F6 54
1785+ 31F7                      DWA  PRINT
1785+ 31F7 2A          >        DB PRINT>>8+128
1785+ 31F8 7E          >        DB PRINT&0FFH
1786+ 31F9 53 54 4F 50          DB   'STOP'
1787+ 31FD                      DWA  STOP
1787+ 31FD 28          >        DB STOP>>8+128
1787+ 31FE 82          >        DB STOP&0FFH
1788+ 31FF                      DWA  DEFLT
1788+ 31FF 2C          >        DB DEFLT>>8+128
1788+ 3200 5D          >        DB DEFLT&0FFH
1789+ 3201
1790+ 3201              TAB4:                                    ; FUNCTIONS
1791+ 3201 52 4E 44             DB   'RND'
1792+ 3204                      DWA  RND
1792+ 3204 2D          >        DB RND>>8+128
1792+ 3205 7D          >        DB RND&0FFH
1793+ 3206 41 42 53             DB   'ABS'
1794+ 3209                      DWA  ABS
1794+ 3209 2D          >        DB ABS>>8+128
1794+ 320A AA          >        DB ABS&0FFH
1795+ 320B 53 49 5A 45          DB   'SIZE'
1796+ 320F                      DWA  SIZE
1796+ 320F 2D          >        DB SIZE>>8+128
1796+ 3210 BB          >        DB SIZE&0FFH
1797+ 3211 50 45 45 4B          DB   'PEEK'
1798+ 3215                      DWA  PEEK
1798+ 3215 2D          >        DB PEEK>>8+128
1798+ 3216 B3          >        DB PEEK&0FFH
1799+ 3217                      DWA  XP40
1799+ 3217 2D          >        DB XP40>>8+128
1799+ 3218 5B          >        DB XP40&0FFH
1800+ 3219
1801+ 3219              TAB5:                                    ; "TO" IN "FOR"
1802+ 3219 54 4F                DB   'TO'
1803+ 321B                      DWA  FR1
1803+ 321B 2B          >        DB FR1>>8+128
1803+ 321C 2E          >        DB FR1&0FFH
1804+ 321D                      DWA  QWHAT
1804+ 321D 2E          >        DB QWHAT>>8+128
1804+ 321E 36          >        DB QWHAT&0FFH
1805+ 321F
1806+ 321F              TAB6:                                    ; "STEP" IN "FOR"
1807+ 321F 53 54 45 50          DB   'STEP'
1808+ 3223                      DWA  FR2
1808+ 3223 2B          >        DB FR2>>8+128
1808+ 3224 3A          >        DB FR2&0FFH
1809+ 3225                      DWA  FR3
1809+ 3225 2B          >        DB FR3>>8+128
1809+ 3226 40          >        DB FR3&0FFH
1810+ 3227
1811+ 3227              TAB8:                                    ; RELATION OPERATORS
1812+ 3227 3E 3D                DB   '>='
1813+ 3229                      DWA  XP11
1813+ 3229 2C          >        DB XP11>>8+128
1813+ 322A 77          >        DB XP11&0FFH
1814+ 322B 23                   DB   '#'
1815+ 322C                      DWA  XP12
1815+ 322C 2C          >        DB XP12>>8+128
1815+ 322D 7D          >        DB XP12&0FFH
1816+ 322E 3E                   DB   '>'
1817+ 322F                      DWA  XP13
1817+ 322F 2C          >        DB XP13>>8+128
1817+ 3230 83          >        DB XP13&0FFH
1818+ 3231 3D                   DB   '='
1819+ 3232                      DWA  XP15
1819+ 3232 2C          >        DB XP15>>8+128
1819+ 3233 92          >        DB XP15&0FFH
1820+ 3234 3C 3D                DB   '<='
1821+ 3236                      DWA  XP14
1821+ 3236 2C          >        DB XP14>>8+128
1821+ 3237 8A          >        DB XP14&0FFH
1822+ 3238 3C                   DB   '<'
1823+ 3239                      DWA  XP16
1823+ 3239 2C          >        DB XP16>>8+128
1823+ 323A 98          >        DB XP16&0FFH
1824+ 323B                      DWA  XP17
1824+ 323B 2C          >        DB XP17>>8+128
1824+ 323C 9E          >        DB XP17&0FFH
1825+ 323D
1826+ 323D 21 94 31     DIRECT: LD  HL,TAB1-1                    ; *** DIRECT ***
1827+ 3240
1828+ 3240              EXEC:                                    ; *** EXEC ***
1829+ 3240 CD 6B 27     EX0:    CALL IGNBLK                          ; IGNORE LEADING BLANKS
1830+ 3243 D5                   PUSH DE                          ; SAVE POINTER
1831+ 3244 1A           EX1:    LD A,(DE)                        ; IF FOUND '.' IN STRING
1832+ 3245 13                   INC  DE                          ; BEFORE ANY MISMATCH
1833+ 3246 FE 2E                CP  '.'                          ; WE DECLARE A MATCH
1834+ 3248 CA 67 32             JP Z,EX3
1835+ 324B FE 61                cp 'a'                           ; If text is in lowercase,
1836+ 324D 38 02                jr c,not_lowercase               ; uppercase it
1837+ 324F CB AF                res 5,a                          ; by clearing bit 5
1838+ 3251              not_lowercase:
1839+ 3251 23                   INC  HL                          ; HL->TABLE
1840+ 3252 BE                   CP  (HL)                         ; IF MATCH, TEST NEXT
1841+ 3253 CA 44 32             JP Z,EX1
1842+ 3256 3E 7F                LD   A,07FH                      ; ELSE SEE IF BIT 7
1843+ 3258 1B                   DEC  DE                          ; OF TABLE IS SET, WHICH
1844+ 3259 BE                   CP  (HL)                         ; IS THE JUMP ADDR. (HI)
1845+ 325A                                                       ; TODO: Change this to use "BIT" instruction?
1846+ 325A DA 6E 32             JP C,EX5                         ; C:YES, MATCHED
1847+ 325D 23           EX2:    INC  HL                          ; NC:NO, FIND JUMP ADDR.
1848+ 325E BE                   CP  (HL)
1849+ 325F D2 5D 32             JP NC,EX2
1850+ 3262 23                   INC  HL                          ; BUMP TO NEXT TAB. ITEM
1851+ 3263 D1                   POP  DE                          ; RESTORE STRING POINTER
1852+ 3264 C3 40 32             JP  EX0                          ; TEST AGAINST NEXT ITEM
1853+ 3267 3E 7F        EX3:    LD   A,07FH                      ; PARTIAL MATCH, FIND
1854+ 3269 23           EX4:    INC  HL                          ; JUMP ADDR., WHICH IS
1855+ 326A BE                   CP  (HL)                         ; FLAGGED BY BIT 7
1856+ 326B D2 69 32             JP NC,EX4
1857+ 326E 7E           EX5:    LD   A,(HL)                      ; LOAD HL WITH THE JUMP
1858+ 326F 23                   INC  HL                          ; ADDRESS FROM THE TABLE
1859+ 3270 6E                   LD   L,(HL)
1860+ 3271 E6 7F                AND  7FH                         ; MASK OFF BIT 7
1861+ 3273 67                   LD   H,A
1862+ 3274 F1                   POP  AF                          ; CLEAN UP THE GABAGE
1863+ 3275 E9                   JP (HL)                          ; AND WE GO DO IT
1864+ 3276
1865+ 3276              READ_QUOTED_FILENAME:
1866+ 3276 CD 6B 27             call IGNBLK                     ; Skip any spaces after "save".
1867+ 3279 CD 23 27             CALL TSTC                       ; Is this followed by quoted string?
1868+ 327C 22                   DB   '"'                        ; ascii for quote
1869+ 327D 74                   DB   SAVE_NO_QUOTE-$-1
1870+ 327E
1871+ 327E CD 6B 27             call IGNBLK                     ; Skip leading spaces at the start of the name.
1872+ 3281 21 EB FF             ld hl, filename_buffer          ; Clear out the filename and extension with NULLs
1873+ 3284 06 0E                ld b, 14
1874+ 3286              CLEAR_FILENAME_LOOP:
1875+ 3286 36 00                ld (hl), 0
1876+ 3288 23                   inc hl
1877+ 3289 10 FB                djnz CLEAR_FILENAME_LOOP
1878+ 328B
1879+ 328B 21 EB FF             ld hl, filename_buffer          ; We store the filename here.
1880+ 328E 06 08                ld b, 8
1881+ 3290              READ_FILE_NAME:
1882+ 3290 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1883+ 3291 13                   INC  DE
1884+ 3292 FE 2E                CP  '.'                         ; Found dot?
1885+ 3294 28 26                jr z, CONTINUE_TO_EXTENSION
1886+ 3296 FE 22                CP  '"'                         ; Found end quote?
1887+ 3298 28 52                jr z, READ_FILE_NAME_DONE
1888+ 329A FE 0D                cp CR                           ; Or has command ended?
1889+ 329C CA 36 2E             jp z, QWHAT                         ; Well that's an error.
1890+ 329F
1891+ 329F FE 21                cp 33
1892+ 32A1 38 0C                jr c, KILL_CONTROL              ; Don't allow control chars or spaces!!!
1893+ 32A3 FE 60                cp 96
1894+ 32A5 38 0A                jr c, USE_LETTER                ; Do allow numbers and upper case letters
1895+ 32A7 FE 7F                cp 127
1896+ 32A9 30 04                jr nc, KILL_CONTROL             ; Don't allow weird chars
1897+ 32AB E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1898+ 32AD 18 02                jr USE_LETTER
1899+ 32AF
1900+ 32AF              KILL_CONTROL:
1901+ 32AF 3E 5F                ld a, '_'
1902+ 32B1              USE_LETTER:
1903+ 32B1 77                   ld (hl),a                       ; store this letter
1904+ 32B2 23                   inc hl
1905+ 32B3 10 DB                djnz READ_FILE_NAME
1906+ 32B5
1907+ 32B5 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1908+ 32B6 13                   INC  DE
1909+ 32B7 FE 2E                CP  '.'                         ; Found dot?
1910+ 32B9 C2 36 2E             jp nz, QWHAT                    ; Error if not
1911+ 32BC              CONTINUE_TO_EXTENSION:
1912+ 32BC 77                   ld (hl), a
1913+ 32BD 23                   inc hl
1914+ 32BE
1915+ 32BE 06 03                ld b, 3                         ; 3 chars max for extension
1916+ 32C0              READ_EXTENSION:
1917+ 32C0 1A                   LD A,(DE)                        ; GET A CHARACTER from string
1918+ 32C1 13                   INC  DE
1919+ 32C2 FE 2E                CP  '.'                         ; Found dot?
1920+ 32C4 CA 36 2E             jp z, QWHAT
1921+ 32C7 FE 22                CP  '"'                         ; Found end quote?
1922+ 32C9 28 21                jr z, READ_FILE_NAME_DONE
1923+ 32CB FE 0D                cp CR                           ; Or has command ended?
1924+ 32CD CA 36 2E             jp z, QWHAT                         ; Well that's an error.
1925+ 32D0
1926+ 32D0 FE 20                cp 32
1927+ 32D2 38 0C                jr c, KILL_CONTROL_EXT          ; Don't allow control chars
1928+ 32D4 FE 60                cp 96
1929+ 32D6 38 0A                jr c, USE_LETTER_EXT            ; Do allow numbers and upper case letters
1930+ 32D8 FE 7F                cp 127
1931+ 32DA 30 04                jr nc, KILL_CONTROL_EXT         ; Don't allow weird chars
1932+ 32DC E6 DF                and 11011111B                   ; Make lowercase letters uppercase
1933+ 32DE 18 02                jr USE_LETTER_EXT
1934+ 32E0
1935+ 32E0              KILL_CONTROL_EXT:
1936+ 32E0 3E 5F                ld a, '_'
1937+ 32E2              USE_LETTER_EXT:
1938+ 32E2 77                   ld (hl),a                       ; store this letter
1939+ 32E3 23                   inc hl
1940+ 32E4 10 DA                djnz READ_EXTENSION
1941+ 32E6
1942+ 32E6 1A                   ld a, (de)                      ; So now there must be a quote
1943+ 32E7 13                   inc de
1944+ 32E8 FE 22                cp '"'
1945+ 32EA 20 06                jr nz, SAVE_NO_QUOTE
1946+ 32EC
1947+ 32EC              READ_FILE_NAME_DONE:
1948+ 32EC 36 00                ld (hl), 0
1949+ 32EE CD 30 2E             call ENDCHK
1950+ 32F1
1951+ 32F1              ;        call debug
1952+ 32F1              ;        db 'Filename is [',0
1953+ 32F1              ;        ld b, 14
1954+ 32F1              ;        ld hl, filename_buffer
1955+ 32F1              ;x1:
1956+ 32F1              ;        ld a, (hl)
1957+ 32F1              ;        inc hl
1958+ 32F1              ;        call OUTC
1959+ 32F1              ;        djnz x1
1960+ 32F1
1961+ 32F1              ;        ld a, ']'
1962+ 32F1              ;        call OUTC
1963+ 32F1              ;        call newline
1964+ 32F1
1965+ 32F1 C9                   ret
1966+ 32F2
1967+ 32F2              SAVE_NO_QUOTE:
1968+ 32F2 CD 0C 08             call message
1969+ 32F5 50 6C 65 61          db 'Please specify a filename in quotes, such as "FILENAME.TXT"',13,0
1969+ 32F9 73 65 20 73
1969+ 32FD 70 65 63 69
1969+ 3301 66 79 20 61
1969+ 3305 20 66 69 6C
1969+ 3309 65 6E 61 6D
1969+ 330D 65 20 69 6E
1969+ 3311 20 71 75 6F
1969+ 3315 74 65 73 2C
1969+ 3319 20 73 75 63
1969+ 331D 68 20 61 73
1969+ 3321 20 22 46 49
1969+ 3325 4C 45 4E 41
1969+ 3329 4D 45 2E 54
1969+ 332D 58 54 22 0D
1969+ 3331 00
1970+ 3332 C3 FD 27             jp RSTART
1971+ 3335
1972+ 3335              LSTROM	equ	$                             ; ALL ABOVE CAN BE ROM
1973+ 3335
1974+ 3335
1975+ 3335                                                       ; HERE DOWN MUST BE RAM
1976+ 3335              RAMSTART equ 08000H                     ; This assumes we are switched into 32K ROM / 32K RAM mode. TODO: Maybe change this to 16k rom, 48k ram???
1977+ 3335
1978+ 3335              OCSW    equ	RAMSTART                     ; SWITCH FOR OUTPUT		1 byte
1979+ 3335              CURRNT	equ	OCSW+1                        ; POINTS TO CURRENT LINE		2 bytes
1980+ 3335              STKGOS	equ	CURRNT+2                      ; SAVES SP IN 'GOSUB'		2 bytes
1981+ 3335              VARNXT	equ	STKGOS+2                      ; TEMP STORAGE			2 bytes
1982+ 3335              STKINP	equ VARNXT+2                      ; SAVES SP IN 'INPUT'		2 bytes
1983+ 3335              LOPVAR	equ STKINP+2                      ; 'FOR' LOOP SAVE AREA		2 bytes
1984+ 3335              LOPINC	equ LOPVAR+2                      ; INCREMENT			2 bytes
1985+ 3335              LOPLMT	equ LOPINC+2                      ; LIMIT				2 bytes
1986+ 3335              LOPLN	equ LOPLMT+2                       ; LINE NUMBER			2 bytes
1987+ 3335              LOPPT	equ LOPLN+2                        ; TEXT POINTER			2 bytes
1988+ 3335              RANPNT	equ LOPPT+2                       ; RANDOM NUMBER POINTER		2 bytes
1989+ 3335              TXTUNF	equ RANPNT+2                      ; ->UNFILLED TEXT AREA		2 bytes
1990+ 3335
1991+ 3335              store_hl	equ	TXTUNF+2	; Temporary store for hl                2 bytes
1992+ 3335
1993+ 3335              TXTBGN	equ store_hl+2                      ; TEXT SAVE AREA BEGINS		2 bytes - This is where the program starts.
1994+ 3335
1995+ 3335
1996+ 3335              TBSTACK	equ 0FF00h                         ; STACK STARTS HERE		allow 255 byte stack
1997+ 3335              STKLMT	equ	TBSTACK-255                     ; TOP LIMIT FOR STACK		1 byte
1998+ 3335              BUFEND	equ	STKLMT-1                      ; BUFFER ENDS			1 byte
1999+ 3335              BUFFER	equ	BUFEND-64                     ; INPUT BUFFER			64 bytes
2000+ 3335              VARBGN	equ	BUFFER-55                     ; VARIABLE @(0)			55 bytes
2001+ 3335
2002+ 3335              tb_dir_count equ VARBGN-1
2003+ 3335              TXTEND	equ	tb_dir_count-1                      ; TEXT SAVE AREA ENDS		1 byte - This is the top limit for the program
2004+ 3335
2005+ 3335                                                      ; Just for reference for my tired brain:
2006+ 3335                                                      ; if a has 30 in it
2007+ 3335                                                      ; cp 32
2008+ 3335                                                      ; jr c, IF A < 32
2009+ 3335                                                      ; jr nc, IF A >= 32
2010+ 3335                                                      ; jr z, IF A == 32
2011+ 3335
# file closed: tiny-basic.asm
 941  3335                  include "GOFL.asm"
# file opened: GOFL.asm
   1+ 3335              ; Conway's Game Of Life for the Z80 Playground.
   2+ 3335              ; This was written by Albert Pauw in February 2021, originally for CP/M,
   3+ 3335              ; and adapted for the Z80 playground Monitor by john Squires.
   4+ 3335
   5+ 3335              ; After boiling it down A LOT, it turns out that Game-Of-Life is very simple:
   6+ 3335              ; Arrange a large grid of cells, where each can be either alive = 1 or dead = 0.
   7+ 3335              ; Make sure there is an empty row all around the grid with a dead cell in it, like this:
   8+ 3335              ; 0000000000
   9+ 3335              ; 0XXXXXXXX0
  10+ 3335              ; 0XXXXXXXX0
  11+ 3335              ; 0000000000 Where 0 = dead cell, and X = active area which can be 0s or 1s.
  12+ 3335              ;
  13+ 3335              ; Iterate over all the cells in the active area. For each:
  14+ 3335              ; Make a note of whether the cell is alive or dead.
  15+ 3335              ; Start counting neighbours for the cell, starting at 0.
  16+ 3335              ; Add to this value the alive/dead value of all 8 neighbouring cells around it.
  17+ 3335              ; Store the neighbour count in the top 4 bits, and the alive/dead state of the cell
  18+ 3335              ; in bit 0. You will then end up with each cell having a binary value something like these examples:
  19+ 3335              ; 0010 0001 - This is 2 neighbours and the cell is currently alive.
  20+ 3335              ; 0011 0000 - This is a dead cell with 3 neighbours.
  21+ 3335              ; 1000 0001 - This is an alive cell with 8 neighbours.
  22+ 3335              ;
  23+ 3335              ; Now, it turns out that all possible combinations result in the death of a cell, or
  24+ 3335              ; a dead cell staying dead, except these three:
  25+ 3335              ; 0010 0001 - Alive cell with 2 neighbours stays alive.
  26+ 3335              ; 0011 0001 - Alive cell with 3 neighbours stays alive.
  27+ 3335              ; 0011 0000 - Dead cell with 3 neighbours comes to life.
  28+ 3335              ;
  29+ 3335              ; So all we need to do is iterate over the cells again.
  30+ 3335              ; If the cell contains one of these 3 values, set the cell to 1.
  31+ 3335              ; Otherwise set it to 0.
  32+ 3335              ;
  33+ 3335              ; Then show all cells on screen, and start again!
  34+ 3335
  35+ 3335              Width:   EQU 80
  36+ 3335              Height:  EQU 25
  37+ 3335              PatternWidth: equ 80
  38+ 3335              Size:    EQU Width*Height
  39+ 3335              DOT:     EQU '.' ; ASCII 46, so EVEN. This is important later!
  40+ 3335              HASH:    EQU '#' ; ASCII 25, so ODD. This is important later!
  41+ 3335              ESC:     EQU 27
  42+ 3335
  43+ 3335              GOFL_Begin:
  44+ 3335 CD 98 4B             call show_intro_screen
  45+ 3338 CD BC 07             call long_pause
  46+ 333B CD CB 4C             call wait_for_key
  47+ 333E 78                   ld a, b
  48+ 333F FE C8                cp 200
  49+ 3341 D2 59 33             jp nc, copy_pattern3
  50+ 3344 FE 64                cp 100
  51+ 3346 D2 51 33             jp nc, copy_pattern2
  52+ 3349              copy_pattern1:
  53+ 3349 21 28 34             ld hl, initial_pattern1
  54+ 334C CD D7 4C             call copy_initial_pattern
  55+ 334F 18 10                jr GOFL_Begin1
  56+ 3351              copy_pattern2:
  57+ 3351 21 F8 3B             ld hl, initial_pattern2
  58+ 3354 CD D7 4C             call copy_initial_pattern
  59+ 3357 18 08                jr GOFL_Begin1
  60+ 3359              copy_pattern3:
  61+ 3359 21 C8 43             ld hl, initial_pattern3
  62+ 335C CD D7 4C             call copy_initial_pattern
  63+ 335F 18 00                jr GOFL_Begin1
  64+ 3361              GOFL_Begin1:
  65+ 3361 CD 12 34             CALL GOFL_HCursor   ; Hide cursor
  66+ 3364 CD 06 34             CALL GOFL_Cls       ; Clear screen
  67+ 3367
  68+ 3367              main_gofl_loop:
  69+ 3367                      ; First, iterate over the cells, counting the neighbours
  70+ 3367 0E 19                ld c, Height
  71+ 3369 26 81                ld h, BufferPage+1              ; h = y coord, l = x coord
  72+ 336B              iterate_outer:
  73+ 336B 2E 01                ld l, 1                         ; Start at coord 1,1
  74+ 336D 06 50                ld b, Width
  75+ 336F              iterate_loop:
  76+ 336F 7E                   ld a, (hl)                      ; Get original cell content
  77+ 3370 E6 01                and %00000001
  78+ 3372 57                   ld d, a                         ; Store in d
  79+ 3373
  80+ 3373 AF                   xor a                           ; Clear a
  81+ 3374
  82+ 3374 2D                   dec l                           ; West neighbour
  83+ 3375 86                   add a, (hl)
  84+ 3376 25                   dec h                           ; North-West neighbour
  85+ 3377 86                   add a, (hl)
  86+ 3378 2C                   inc l                           ; North neighbour
  87+ 3379 86                   add a, (hl)
  88+ 337A 2C                   inc l                           ; North-East neighbour
  89+ 337B 86                   add a, (hl)
  90+ 337C 24                   inc h                           ; East neighbour
  91+ 337D 86                   add a, (hl)
  92+ 337E 24                   inc h                           ; South-East neighbour
  93+ 337F 86                   add a, (hl)
  94+ 3380 2D                   dec l                           ; South neighbour
  95+ 3381 86                   add a, (hl)
  96+ 3382 2D                   dec l                           ; South-West neighbour
  97+ 3383 86                   add a, (hl)
  98+ 3384 2C                   inc l                           ; Get back to center cell
  99+ 3385 25                   dec h
 100+ 3386
 101+ 3386 CB 27                sla a                           ; rotate left
 102+ 3388 CB 27                sla a                           ; rotate left
 103+ 338A CB 27                sla a                           ; rotate left
 104+ 338C CB 27                sla a                           ; rotate left
 105+ 338E B2                   or d                            ; Put back the original cell content
 106+ 338F 77                   ld (hl), a                      ; Store final result
 107+ 3390
 108+ 3390 2C                   inc l
 109+ 3391 10 DC                djnz iterate_loop
 110+ 3393 24                   inc h
 111+ 3394 2E 01                ld l, 1
 112+ 3396 0D                   dec c
 113+ 3397 20 D2                jr nz, iterate_outer
 114+ 3399
 115+ 3399
 116+ 3399                      ; Now iterate over the cells again, applying the rules
 117+ 3399              apply_rules:
 118+ 3399 0E 19                ld c, Height
 119+ 339B 26 81                ld h, BufferPage+1
 120+ 339D              apply_rules_outer:
 121+ 339D 2E 01                ld l, 1                         ; Start at 1,1
 122+ 339F 06 50                ld b, Width
 123+ 33A1              apply_rules_loop:
 124+ 33A1                      ; 0010 0001 - Alive cell with 2 neighbours stays alive.
 125+ 33A1                      ; 0011 0001 - Alive cell with 3 neighbours stays alive.
 126+ 33A1                      ; 0011 0000 - Dead cell with 3 neighbours comes to life.
 127+ 33A1
 128+ 33A1 7E                   ld a, (hl)                      ; Get the content into a
 129+ 33A2 FE 21                cp %00100001
 130+ 33A4 28 0D                jr z, cell_alive
 131+ 33A6 FE 31                cp %00110001
 132+ 33A8 28 09                jr z, cell_alive
 133+ 33AA FE 30                cp %00110000
 134+ 33AC 28 05                jr z, cell_alive
 135+ 33AE 36 00                ld (hl), 0                      ; Cell dies
 136+ 33B0 C3 B5 33             jp apply_rules_continue
 137+ 33B3              cell_alive:
 138+ 33B3 36 01                ld (hl), 1                      ; Cell lives
 139+ 33B5              apply_rules_continue:
 140+ 33B5 2C                   inc l
 141+ 33B6 10 E9                djnz apply_rules_loop
 142+ 33B8 24                   inc h
 143+ 33B9 2E 01                ld l, 1
 144+ 33BB 0D                   dec c
 145+ 33BC 20 DF                jr nz, apply_rules_outer
 146+ 33BE
 147+ 33BE
 148+ 33BE                      ; Now print the cells to the screen
 149+ 33BE              GOFL_Print:
 150+ 33BE CD FE 33             call GOFL_Home
 151+ 33C1 26 81                ld h, BufferPage+1
 152+ 33C3 2E 01                ld l, 1                         ; Start at 1,1
 153+ 33C5 0E 19                LD c, Height                    ; Set size for loops, height...
 154+ 33C7              Pr0:
 155+ 33C7 06 50                ld b, Width                     ; ...and width
 156+ 33C9              Pr1:
 157+ 33C9 7E                   LD A,(HL)                       ; Get cell value in buffer
 158+ 33CA E6 01                and 1                           ; Is it ODD?
 159+ 33CC CA D4 33             jp z, print_empty_cell          ; If not, it is an empty cell
 160+ 33CF 16 23                ld d, HASH
 161+ 33D1 C3 D6 33             jp print_got_character
 162+ 33D4              print_empty_cell:
 163+ 33D4 16 2E                ld d, DOT
 164+ 33D6              print_got_character:
 165+ 33D6 DB BD                in a,(uart_LSR)                 ; check UART is ready to send.
 166+ 33D8 CB 6F                bit 5,a                         ; zero flag set to true if bit 5 is 0
 167+ 33DA CA D6 33             jp z, print_got_character       ; non-zero = ready for next char.
 168+ 33DD 7A                   ld a, d
 169+ 33DE D3 B8                out (uart_tx_rx), a             ; AND SEND IT OUT
 170+ 33E0
 171+ 33E0 2C                   INC L                           ; Next character in buffer
 172+ 33E1 10 E6                djnz Pr1                        ; Count down and loop
 173+ 33E3
 174+ 33E3 0D                   dec c                           ; decrease row counter
 175+ 33E4 CA EA 33             jp z, skip_newline_on_last_row
 176+ 33E7 CD 91 07             call newline
 177+ 33EA              skip_newline_on_last_row:
 178+ 33EA 2E 01                ld l, 1                         ; Back to start of row
 179+ 33EC 24                   inc h                           ; Move down a row
 180+ 33ED 79                   ld a, c
 181+ 33EE FE 00                cp 0
 182+ 33F0 C2 C7 33             jp nz, Pr0                      ; Loop over rows
 183+ 33F3
 184+ 33F3
 185+ 33F3                      ; Now check for key press to end
 186+ 33F3 CD A2 07             CALL char_in                    ; Check for keypress
 187+ 33F6 A7                   AND A                           ;
 188+ 33F7 CA 67 33             jp Z,main_gofl_loop             ; Loop around again if no key
 189+ 33FA CD 1D 34             call GOFL_SCursor               ; Turn cursor back ok
 190+ 33FD C9                   ret
 191+ 33FE
 192+ 33FE
 193+ 33FE
 194+ 33FE
 195+ 33FE
 196+ 33FE                      ; Helper routines
 197+ 33FE              GOFL_Home:
 198+ 33FE CD 0C 08             call message
 199+ 3401 1B 5B 48 00          DB ESC,'[H',0
 200+ 3405 C9                   ret
 201+ 3406
 202+ 3406              GOFL_Cls:
 203+ 3406 CD 0C 08             call message
 204+ 3409 1B 5B 32 4A          DB ESC,'[2J',ESC,'[H',0
 204+ 340D 1B 5B 48 00
 205+ 3411 C9                   ret
 206+ 3412
 207+ 3412              GOFL_HCursor:
 208+ 3412                      ; ANSI hide cursor
 209+ 3412 CD 0C 08             call message
 210+ 3415 1B 5B 3F 32          DB ESC,'[?25l',0
 210+ 3419 35 6C 00
 211+ 341C C9                   ret
 212+ 341D
 213+ 341D              GOFL_SCursor:
 214+ 341D                      ; ANSI show cursor
 215+ 341D CD 0C 08             call message
 216+ 3420 1B 5B 3F 32          DB ESC,'[?25h',0
 216+ 3424 35 68 00
 217+ 3427 C9                   ret
 218+ 3428
 219+ 3428              initial_pattern1:
 220+ 3428 2E 2E 2E 2E          DB '................................................................................'
 220+ 342C 2E 2E 2E 2E
 220+ 3430 2E 2E 2E 2E
 220+ 3434 2E 2E 2E 2E
 220+ 3438 2E 2E 2E 2E
 220+ 343C 2E 2E 2E 2E
 220+ 3440 2E 2E 2E 2E
 220+ 3444 2E 2E 2E 2E
 220+ 3448 2E 2E 2E 2E
 220+ 344C 2E 2E 2E 2E
 220+ 3450 2E 2E 2E 2E
 220+ 3454 2E 2E 2E 2E
 220+ 3458 2E 2E 2E 2E
 220+ 345C 2E 2E 2E 2E
 220+ 3460 2E 2E 2E 2E
 220+ 3464 2E 2E 2E 2E
 220+ 3468 2E 2E 2E 2E
 220+ 346C 2E 2E 2E 2E
 220+ 3470 2E 2E 2E 2E
 220+ 3474 2E 2E 2E 2E
 221+ 3478 2E 2E 2E 2E          DB '................................................................................'
 221+ 347C 2E 2E 2E 2E
 221+ 3480 2E 2E 2E 2E
 221+ 3484 2E 2E 2E 2E
 221+ 3488 2E 2E 2E 2E
 221+ 348C 2E 2E 2E 2E
 221+ 3490 2E 2E 2E 2E
 221+ 3494 2E 2E 2E 2E
 221+ 3498 2E 2E 2E 2E
 221+ 349C 2E 2E 2E 2E
 221+ 34A0 2E 2E 2E 2E
 221+ 34A4 2E 2E 2E 2E
 221+ 34A8 2E 2E 2E 2E
 221+ 34AC 2E 2E 2E 2E
 221+ 34B0 2E 2E 2E 2E
 221+ 34B4 2E 2E 2E 2E
 221+ 34B8 2E 2E 2E 2E
 221+ 34BC 2E 2E 2E 2E
 221+ 34C0 2E 2E 2E 2E
 221+ 34C4 2E 2E 2E 2E
 222+ 34C8 2E 2E 2E 2E          DB '................................................................................'
 222+ 34CC 2E 2E 2E 2E
 222+ 34D0 2E 2E 2E 2E
 222+ 34D4 2E 2E 2E 2E
 222+ 34D8 2E 2E 2E 2E
 222+ 34DC 2E 2E 2E 2E
 222+ 34E0 2E 2E 2E 2E
 222+ 34E4 2E 2E 2E 2E
 222+ 34E8 2E 2E 2E 2E
 222+ 34EC 2E 2E 2E 2E
 222+ 34F0 2E 2E 2E 2E
 222+ 34F4 2E 2E 2E 2E
 222+ 34F8 2E 2E 2E 2E
 222+ 34FC 2E 2E 2E 2E
 222+ 3500 2E 2E 2E 2E
 222+ 3504 2E 2E 2E 2E
 222+ 3508 2E 2E 2E 2E
 222+ 350C 2E 2E 2E 2E
 222+ 3510 2E 2E 2E 2E
 222+ 3514 2E 2E 2E 2E
 223+ 3518 2E 2E 2E 2E          DB '................................................................................'
 223+ 351C 2E 2E 2E 2E
 223+ 3520 2E 2E 2E 2E
 223+ 3524 2E 2E 2E 2E
 223+ 3528 2E 2E 2E 2E
 223+ 352C 2E 2E 2E 2E
 223+ 3530 2E 2E 2E 2E
 223+ 3534 2E 2E 2E 2E
 223+ 3538 2E 2E 2E 2E
 223+ 353C 2E 2E 2E 2E
 223+ 3540 2E 2E 2E 2E
 223+ 3544 2E 2E 2E 2E
 223+ 3548 2E 2E 2E 2E
 223+ 354C 2E 2E 2E 2E
 223+ 3550 2E 2E 2E 2E
 223+ 3554 2E 2E 2E 2E
 223+ 3558 2E 2E 2E 2E
 223+ 355C 2E 2E 2E 2E
 223+ 3560 2E 2E 2E 2E
 223+ 3564 2E 2E 2E 2E
 224+ 3568 2E 2E 2E 2E          DB '................................................................................'
 224+ 356C 2E 2E 2E 2E
 224+ 3570 2E 2E 2E 2E
 224+ 3574 2E 2E 2E 2E
 224+ 3578 2E 2E 2E 2E
 224+ 357C 2E 2E 2E 2E
 224+ 3580 2E 2E 2E 2E
 224+ 3584 2E 2E 2E 2E
 224+ 3588 2E 2E 2E 2E
 224+ 358C 2E 2E 2E 2E
 224+ 3590 2E 2E 2E 2E
 224+ 3594 2E 2E 2E 2E
 224+ 3598 2E 2E 2E 2E
 224+ 359C 2E 2E 2E 2E
 224+ 35A0 2E 2E 2E 2E
 224+ 35A4 2E 2E 2E 2E
 224+ 35A8 2E 2E 2E 2E
 224+ 35AC 2E 2E 2E 2E
 224+ 35B0 2E 2E 2E 2E
 224+ 35B4 2E 2E 2E 2E
 225+ 35B8 2E 2E 2E 2E          DB '................................................................................'
 225+ 35BC 2E 2E 2E 2E
 225+ 35C0 2E 2E 2E 2E
 225+ 35C4 2E 2E 2E 2E
 225+ 35C8 2E 2E 2E 2E
 225+ 35CC 2E 2E 2E 2E
 225+ 35D0 2E 2E 2E 2E
 225+ 35D4 2E 2E 2E 2E
 225+ 35D8 2E 2E 2E 2E
 225+ 35DC 2E 2E 2E 2E
 225+ 35E0 2E 2E 2E 2E
 225+ 35E4 2E 2E 2E 2E
 225+ 35E8 2E 2E 2E 2E
 225+ 35EC 2E 2E 2E 2E
 225+ 35F0 2E 2E 2E 2E
 225+ 35F4 2E 2E 2E 2E
 225+ 35F8 2E 2E 2E 2E
 225+ 35FC 2E 2E 2E 2E
 225+ 3600 2E 2E 2E 2E
 225+ 3604 2E 2E 2E 2E
 226+ 3608 2E 2E 2E 2E          DB '................................................................................'
 226+ 360C 2E 2E 2E 2E
 226+ 3610 2E 2E 2E 2E
 226+ 3614 2E 2E 2E 2E
 226+ 3618 2E 2E 2E 2E
 226+ 361C 2E 2E 2E 2E
 226+ 3620 2E 2E 2E 2E
 226+ 3624 2E 2E 2E 2E
 226+ 3628 2E 2E 2E 2E
 226+ 362C 2E 2E 2E 2E
 226+ 3630 2E 2E 2E 2E
 226+ 3634 2E 2E 2E 2E
 226+ 3638 2E 2E 2E 2E
 226+ 363C 2E 2E 2E 2E
 226+ 3640 2E 2E 2E 2E
 226+ 3644 2E 2E 2E 2E
 226+ 3648 2E 2E 2E 2E
 226+ 364C 2E 2E 2E 2E
 226+ 3650 2E 2E 2E 2E
 226+ 3654 2E 2E 2E 2E
 227+ 3658 2E 2E 2E 2E          DB '................................................................................'
 227+ 365C 2E 2E 2E 2E
 227+ 3660 2E 2E 2E 2E
 227+ 3664 2E 2E 2E 2E
 227+ 3668 2E 2E 2E 2E
 227+ 366C 2E 2E 2E 2E
 227+ 3670 2E 2E 2E 2E
 227+ 3674 2E 2E 2E 2E
 227+ 3678 2E 2E 2E 2E
 227+ 367C 2E 2E 2E 2E
 227+ 3680 2E 2E 2E 2E
 227+ 3684 2E 2E 2E 2E
 227+ 3688 2E 2E 2E 2E
 227+ 368C 2E 2E 2E 2E
 227+ 3690 2E 2E 2E 2E
 227+ 3694 2E 2E 2E 2E
 227+ 3698 2E 2E 2E 2E
 227+ 369C 2E 2E 2E 2E
 227+ 36A0 2E 2E 2E 2E
 227+ 36A4 2E 2E 2E 2E
 228+ 36A8 2E 2E 2E 2E          DB '................................................................................'
 228+ 36AC 2E 2E 2E 2E
 228+ 36B0 2E 2E 2E 2E
 228+ 36B4 2E 2E 2E 2E
 228+ 36B8 2E 2E 2E 2E
 228+ 36BC 2E 2E 2E 2E
 228+ 36C0 2E 2E 2E 2E
 228+ 36C4 2E 2E 2E 2E
 228+ 36C8 2E 2E 2E 2E
 228+ 36CC 2E 2E 2E 2E
 228+ 36D0 2E 2E 2E 2E
 228+ 36D4 2E 2E 2E 2E
 228+ 36D8 2E 2E 2E 2E
 228+ 36DC 2E 2E 2E 2E
 228+ 36E0 2E 2E 2E 2E
 228+ 36E4 2E 2E 2E 2E
 228+ 36E8 2E 2E 2E 2E
 228+ 36EC 2E 2E 2E 2E
 228+ 36F0 2E 2E 2E 2E
 228+ 36F4 2E 2E 2E 2E
 229+ 36F8 2E 2E 2E 2E          DB '................................................................................'
 229+ 36FC 2E 2E 2E 2E
 229+ 3700 2E 2E 2E 2E
 229+ 3704 2E 2E 2E 2E
 229+ 3708 2E 2E 2E 2E
 229+ 370C 2E 2E 2E 2E
 229+ 3710 2E 2E 2E 2E
 229+ 3714 2E 2E 2E 2E
 229+ 3718 2E 2E 2E 2E
 229+ 371C 2E 2E 2E 2E
 229+ 3720 2E 2E 2E 2E
 229+ 3724 2E 2E 2E 2E
 229+ 3728 2E 2E 2E 2E
 229+ 372C 2E 2E 2E 2E
 229+ 3730 2E 2E 2E 2E
 229+ 3734 2E 2E 2E 2E
 229+ 3738 2E 2E 2E 2E
 229+ 373C 2E 2E 2E 2E
 229+ 3740 2E 2E 2E 2E
 229+ 3744 2E 2E 2E 2E
 230+ 3748 2E 2E 2E 2E          DB '................................................................................'
 230+ 374C 2E 2E 2E 2E
 230+ 3750 2E 2E 2E 2E
 230+ 3754 2E 2E 2E 2E
 230+ 3758 2E 2E 2E 2E
 230+ 375C 2E 2E 2E 2E
 230+ 3760 2E 2E 2E 2E
 230+ 3764 2E 2E 2E 2E
 230+ 3768 2E 2E 2E 2E
 230+ 376C 2E 2E 2E 2E
 230+ 3770 2E 2E 2E 2E
 230+ 3774 2E 2E 2E 2E
 230+ 3778 2E 2E 2E 2E
 230+ 377C 2E 2E 2E 2E
 230+ 3780 2E 2E 2E 2E
 230+ 3784 2E 2E 2E 2E
 230+ 3788 2E 2E 2E 2E
 230+ 378C 2E 2E 2E 2E
 230+ 3790 2E 2E 2E 2E
 230+ 3794 2E 2E 2E 2E
 231+ 3798 2E 2E 2E 2E          DB '................................................................................'
 231+ 379C 2E 2E 2E 2E
 231+ 37A0 2E 2E 2E 2E
 231+ 37A4 2E 2E 2E 2E
 231+ 37A8 2E 2E 2E 2E
 231+ 37AC 2E 2E 2E 2E
 231+ 37B0 2E 2E 2E 2E
 231+ 37B4 2E 2E 2E 2E
 231+ 37B8 2E 2E 2E 2E
 231+ 37BC 2E 2E 2E 2E
 231+ 37C0 2E 2E 2E 2E
 231+ 37C4 2E 2E 2E 2E
 231+ 37C8 2E 2E 2E 2E
 231+ 37CC 2E 2E 2E 2E
 231+ 37D0 2E 2E 2E 2E
 231+ 37D4 2E 2E 2E 2E
 231+ 37D8 2E 2E 2E 2E
 231+ 37DC 2E 2E 2E 2E
 231+ 37E0 2E 2E 2E 2E
 231+ 37E4 2E 2E 2E 2E
 232+ 37E8 2E 2E 2E 2E          DB '................................................................................'
 232+ 37EC 2E 2E 2E 2E
 232+ 37F0 2E 2E 2E 2E
 232+ 37F4 2E 2E 2E 2E
 232+ 37F8 2E 2E 2E 2E
 232+ 37FC 2E 2E 2E 2E
 232+ 3800 2E 2E 2E 2E
 232+ 3804 2E 2E 2E 2E
 232+ 3808 2E 2E 2E 2E
 232+ 380C 2E 2E 2E 2E
 232+ 3810 2E 2E 2E 2E
 232+ 3814 2E 2E 2E 2E
 232+ 3818 2E 2E 2E 2E
 232+ 381C 2E 2E 2E 2E
 232+ 3820 2E 2E 2E 2E
 232+ 3824 2E 2E 2E 2E
 232+ 3828 2E 2E 2E 2E
 232+ 382C 2E 2E 2E 2E
 232+ 3830 2E 2E 2E 2E
 232+ 3834 2E 2E 2E 2E
 233+ 3838 2E 2E 2E 2E          DB '...................................................#............................'
 233+ 383C 2E 2E 2E 2E
 233+ 3840 2E 2E 2E 2E
 233+ 3844 2E 2E 2E 2E
 233+ 3848 2E 2E 2E 2E
 233+ 384C 2E 2E 2E 2E
 233+ 3850 2E 2E 2E 2E
 233+ 3854 2E 2E 2E 2E
 233+ 3858 2E 2E 2E 2E
 233+ 385C 2E 2E 2E 2E
 233+ 3860 2E 2E 2E 2E
 233+ 3864 2E 2E 2E 2E
 233+ 3868 2E 2E 2E 23
 233+ 386C 2E 2E 2E 2E
 233+ 3870 2E 2E 2E 2E
 233+ 3874 2E 2E 2E 2E
 233+ 3878 2E 2E 2E 2E
 233+ 387C 2E 2E 2E 2E
 233+ 3880 2E 2E 2E 2E
 233+ 3884 2E 2E 2E 2E
 234+ 3888 2E 2E 2E 2E          DB '.....................................................#..........................'
 234+ 388C 2E 2E 2E 2E
 234+ 3890 2E 2E 2E 2E
 234+ 3894 2E 2E 2E 2E
 234+ 3898 2E 2E 2E 2E
 234+ 389C 2E 2E 2E 2E
 234+ 38A0 2E 2E 2E 2E
 234+ 38A4 2E 2E 2E 2E
 234+ 38A8 2E 2E 2E 2E
 234+ 38AC 2E 2E 2E 2E
 234+ 38B0 2E 2E 2E 2E
 234+ 38B4 2E 2E 2E 2E
 234+ 38B8 2E 2E 2E 2E
 234+ 38BC 2E 23 2E 2E
 234+ 38C0 2E 2E 2E 2E
 234+ 38C4 2E 2E 2E 2E
 234+ 38C8 2E 2E 2E 2E
 234+ 38CC 2E 2E 2E 2E
 234+ 38D0 2E 2E 2E 2E
 234+ 38D4 2E 2E 2E 2E
 235+ 38D8 2E 2E 2E 2E          DB '..................................................##..###.......................'
 235+ 38DC 2E 2E 2E 2E
 235+ 38E0 2E 2E 2E 2E
 235+ 38E4 2E 2E 2E 2E
 235+ 38E8 2E 2E 2E 2E
 235+ 38EC 2E 2E 2E 2E
 235+ 38F0 2E 2E 2E 2E
 235+ 38F4 2E 2E 2E 2E
 235+ 38F8 2E 2E 2E 2E
 235+ 38FC 2E 2E 2E 2E
 235+ 3900 2E 2E 2E 2E
 235+ 3904 2E 2E 2E 2E
 235+ 3908 2E 2E 23 23
 235+ 390C 2E 2E 23 23
 235+ 3910 23 2E 2E 2E
 235+ 3914 2E 2E 2E 2E
 235+ 3918 2E 2E 2E 2E
 235+ 391C 2E 2E 2E 2E
 235+ 3920 2E 2E 2E 2E
 235+ 3924 2E 2E 2E 2E
 236+ 3928 2E 2E 2E 2E          DB '................................................................................'
 236+ 392C 2E 2E 2E 2E
 236+ 3930 2E 2E 2E 2E
 236+ 3934 2E 2E 2E 2E
 236+ 3938 2E 2E 2E 2E
 236+ 393C 2E 2E 2E 2E
 236+ 3940 2E 2E 2E 2E
 236+ 3944 2E 2E 2E 2E
 236+ 3948 2E 2E 2E 2E
 236+ 394C 2E 2E 2E 2E
 236+ 3950 2E 2E 2E 2E
 236+ 3954 2E 2E 2E 2E
 236+ 3958 2E 2E 2E 2E
 236+ 395C 2E 2E 2E 2E
 236+ 3960 2E 2E 2E 2E
 236+ 3964 2E 2E 2E 2E
 236+ 3968 2E 2E 2E 2E
 236+ 396C 2E 2E 2E 2E
 236+ 3970 2E 2E 2E 2E
 236+ 3974 2E 2E 2E 2E
 237+ 3978 2E 2E 2E 2E          DB '................................................................................'
 237+ 397C 2E 2E 2E 2E
 237+ 3980 2E 2E 2E 2E
 237+ 3984 2E 2E 2E 2E
 237+ 3988 2E 2E 2E 2E
 237+ 398C 2E 2E 2E 2E
 237+ 3990 2E 2E 2E 2E
 237+ 3994 2E 2E 2E 2E
 237+ 3998 2E 2E 2E 2E
 237+ 399C 2E 2E 2E 2E
 237+ 39A0 2E 2E 2E 2E
 237+ 39A4 2E 2E 2E 2E
 237+ 39A8 2E 2E 2E 2E
 237+ 39AC 2E 2E 2E 2E
 237+ 39B0 2E 2E 2E 2E
 237+ 39B4 2E 2E 2E 2E
 237+ 39B8 2E 2E 2E 2E
 237+ 39BC 2E 2E 2E 2E
 237+ 39C0 2E 2E 2E 2E
 237+ 39C4 2E 2E 2E 2E
 238+ 39C8 2E 2E 2E 2E          DB '................................................................................'
 238+ 39CC 2E 2E 2E 2E
 238+ 39D0 2E 2E 2E 2E
 238+ 39D4 2E 2E 2E 2E
 238+ 39D8 2E 2E 2E 2E
 238+ 39DC 2E 2E 2E 2E
 238+ 39E0 2E 2E 2E 2E
 238+ 39E4 2E 2E 2E 2E
 238+ 39E8 2E 2E 2E 2E
 238+ 39EC 2E 2E 2E 2E
 238+ 39F0 2E 2E 2E 2E
 238+ 39F4 2E 2E 2E 2E
 238+ 39F8 2E 2E 2E 2E
 238+ 39FC 2E 2E 2E 2E
 238+ 3A00 2E 2E 2E 2E
 238+ 3A04 2E 2E 2E 2E
 238+ 3A08 2E 2E 2E 2E
 238+ 3A0C 2E 2E 2E 2E
 238+ 3A10 2E 2E 2E 2E
 238+ 3A14 2E 2E 2E 2E
 239+ 3A18 2E 2E 2E 2E          DB '................................................................................'
 239+ 3A1C 2E 2E 2E 2E
 239+ 3A20 2E 2E 2E 2E
 239+ 3A24 2E 2E 2E 2E
 239+ 3A28 2E 2E 2E 2E
 239+ 3A2C 2E 2E 2E 2E
 239+ 3A30 2E 2E 2E 2E
 239+ 3A34 2E 2E 2E 2E
 239+ 3A38 2E 2E 2E 2E
 239+ 3A3C 2E 2E 2E 2E
 239+ 3A40 2E 2E 2E 2E
 239+ 3A44 2E 2E 2E 2E
 239+ 3A48 2E 2E 2E 2E
 239+ 3A4C 2E 2E 2E 2E
 239+ 3A50 2E 2E 2E 2E
 239+ 3A54 2E 2E 2E 2E
 239+ 3A58 2E 2E 2E 2E
 239+ 3A5C 2E 2E 2E 2E
 239+ 3A60 2E 2E 2E 2E
 239+ 3A64 2E 2E 2E 2E
 240+ 3A68 2E 2E 2E 2E          DB '................................................................................'
 240+ 3A6C 2E 2E 2E 2E
 240+ 3A70 2E 2E 2E 2E
 240+ 3A74 2E 2E 2E 2E
 240+ 3A78 2E 2E 2E 2E
 240+ 3A7C 2E 2E 2E 2E
 240+ 3A80 2E 2E 2E 2E
 240+ 3A84 2E 2E 2E 2E
 240+ 3A88 2E 2E 2E 2E
 240+ 3A8C 2E 2E 2E 2E
 240+ 3A90 2E 2E 2E 2E
 240+ 3A94 2E 2E 2E 2E
 240+ 3A98 2E 2E 2E 2E
 240+ 3A9C 2E 2E 2E 2E
 240+ 3AA0 2E 2E 2E 2E
 240+ 3AA4 2E 2E 2E 2E
 240+ 3AA8 2E 2E 2E 2E
 240+ 3AAC 2E 2E 2E 2E
 240+ 3AB0 2E 2E 2E 2E
 240+ 3AB4 2E 2E 2E 2E
 241+ 3AB8 2E 2E 2E 2E          DB '................................................................................'
 241+ 3ABC 2E 2E 2E 2E
 241+ 3AC0 2E 2E 2E 2E
 241+ 3AC4 2E 2E 2E 2E
 241+ 3AC8 2E 2E 2E 2E
 241+ 3ACC 2E 2E 2E 2E
 241+ 3AD0 2E 2E 2E 2E
 241+ 3AD4 2E 2E 2E 2E
 241+ 3AD8 2E 2E 2E 2E
 241+ 3ADC 2E 2E 2E 2E
 241+ 3AE0 2E 2E 2E 2E
 241+ 3AE4 2E 2E 2E 2E
 241+ 3AE8 2E 2E 2E 2E
 241+ 3AEC 2E 2E 2E 2E
 241+ 3AF0 2E 2E 2E 2E
 241+ 3AF4 2E 2E 2E 2E
 241+ 3AF8 2E 2E 2E 2E
 241+ 3AFC 2E 2E 2E 2E
 241+ 3B00 2E 2E 2E 2E
 241+ 3B04 2E 2E 2E 2E
 242+ 3B08 2E 2E 2E 2E          DB '................................................................................'
 242+ 3B0C 2E 2E 2E 2E
 242+ 3B10 2E 2E 2E 2E
 242+ 3B14 2E 2E 2E 2E
 242+ 3B18 2E 2E 2E 2E
 242+ 3B1C 2E 2E 2E 2E
 242+ 3B20 2E 2E 2E 2E
 242+ 3B24 2E 2E 2E 2E
 242+ 3B28 2E 2E 2E 2E
 242+ 3B2C 2E 2E 2E 2E
 242+ 3B30 2E 2E 2E 2E
 242+ 3B34 2E 2E 2E 2E
 242+ 3B38 2E 2E 2E 2E
 242+ 3B3C 2E 2E 2E 2E
 242+ 3B40 2E 2E 2E 2E
 242+ 3B44 2E 2E 2E 2E
 242+ 3B48 2E 2E 2E 2E
 242+ 3B4C 2E 2E 2E 2E
 242+ 3B50 2E 2E 2E 2E
 242+ 3B54 2E 2E 2E 2E
 243+ 3B58 2E 2E 2E 2E          DB '................................................................................'
 243+ 3B5C 2E 2E 2E 2E
 243+ 3B60 2E 2E 2E 2E
 243+ 3B64 2E 2E 2E 2E
 243+ 3B68 2E 2E 2E 2E
 243+ 3B6C 2E 2E 2E 2E
 243+ 3B70 2E 2E 2E 2E
 243+ 3B74 2E 2E 2E 2E
 243+ 3B78 2E 2E 2E 2E
 243+ 3B7C 2E 2E 2E 2E
 243+ 3B80 2E 2E 2E 2E
 243+ 3B84 2E 2E 2E 2E
 243+ 3B88 2E 2E 2E 2E
 243+ 3B8C 2E 2E 2E 2E
 243+ 3B90 2E 2E 2E 2E
 243+ 3B94 2E 2E 2E 2E
 243+ 3B98 2E 2E 2E 2E
 243+ 3B9C 2E 2E 2E 2E
 243+ 3BA0 2E 2E 2E 2E
 243+ 3BA4 2E 2E 2E 2E
 244+ 3BA8 2E 2E 2E 2E          DB '................................................................................'
 244+ 3BAC 2E 2E 2E 2E
 244+ 3BB0 2E 2E 2E 2E
 244+ 3BB4 2E 2E 2E 2E
 244+ 3BB8 2E 2E 2E 2E
 244+ 3BBC 2E 2E 2E 2E
 244+ 3BC0 2E 2E 2E 2E
 244+ 3BC4 2E 2E 2E 2E
 244+ 3BC8 2E 2E 2E 2E
 244+ 3BCC 2E 2E 2E 2E
 244+ 3BD0 2E 2E 2E 2E
 244+ 3BD4 2E 2E 2E 2E
 244+ 3BD8 2E 2E 2E 2E
 244+ 3BDC 2E 2E 2E 2E
 244+ 3BE0 2E 2E 2E 2E
 244+ 3BE4 2E 2E 2E 2E
 244+ 3BE8 2E 2E 2E 2E
 244+ 3BEC 2E 2E 2E 2E
 244+ 3BF0 2E 2E 2E 2E
 244+ 3BF4 2E 2E 2E 2E
 245+ 3BF8
 246+ 3BF8              initial_pattern2:
 247+ 3BF8 2E 2E 2E 2E          DB '................................................................................'
 247+ 3BFC 2E 2E 2E 2E
 247+ 3C00 2E 2E 2E 2E
 247+ 3C04 2E 2E 2E 2E
 247+ 3C08 2E 2E 2E 2E
 247+ 3C0C 2E 2E 2E 2E
 247+ 3C10 2E 2E 2E 2E
 247+ 3C14 2E 2E 2E 2E
 247+ 3C18 2E 2E 2E 2E
 247+ 3C1C 2E 2E 2E 2E
 247+ 3C20 2E 2E 2E 2E
 247+ 3C24 2E 2E 2E 2E
 247+ 3C28 2E 2E 2E 2E
 247+ 3C2C 2E 2E 2E 2E
 247+ 3C30 2E 2E 2E 2E
 247+ 3C34 2E 2E 2E 2E
 247+ 3C38 2E 2E 2E 2E
 247+ 3C3C 2E 2E 2E 2E
 247+ 3C40 2E 2E 2E 2E
 247+ 3C44 2E 2E 2E 2E
 248+ 3C48 2E 2E 23 23          DB '..##............................................................................'
 248+ 3C4C 2E 2E 2E 2E
 248+ 3C50 2E 2E 2E 2E
 248+ 3C54 2E 2E 2E 2E
 248+ 3C58 2E 2E 2E 2E
 248+ 3C5C 2E 2E 2E 2E
 248+ 3C60 2E 2E 2E 2E
 248+ 3C64 2E 2E 2E 2E
 248+ 3C68 2E 2E 2E 2E
 248+ 3C6C 2E 2E 2E 2E
 248+ 3C70 2E 2E 2E 2E
 248+ 3C74 2E 2E 2E 2E
 248+ 3C78 2E 2E 2E 2E
 248+ 3C7C 2E 2E 2E 2E
 248+ 3C80 2E 2E 2E 2E
 248+ 3C84 2E 2E 2E 2E
 248+ 3C88 2E 2E 2E 2E
 248+ 3C8C 2E 2E 2E 2E
 248+ 3C90 2E 2E 2E 2E
 248+ 3C94 2E 2E 2E 2E
 249+ 3C98 2E 2E 2E 2E          DB '.........................#......................................................'
 249+ 3C9C 2E 2E 2E 2E
 249+ 3CA0 2E 2E 2E 2E
 249+ 3CA4 2E 2E 2E 2E
 249+ 3CA8 2E 2E 2E 2E
 249+ 3CAC 2E 2E 2E 2E
 249+ 3CB0 2E 23 2E 2E
 249+ 3CB4 2E 2E 2E 2E
 249+ 3CB8 2E 2E 2E 2E
 249+ 3CBC 2E 2E 2E 2E
 249+ 3CC0 2E 2E 2E 2E
 249+ 3CC4 2E 2E 2E 2E
 249+ 3CC8 2E 2E 2E 2E
 249+ 3CCC 2E 2E 2E 2E
 249+ 3CD0 2E 2E 2E 2E
 249+ 3CD4 2E 2E 2E 2E
 249+ 3CD8 2E 2E 2E 2E
 249+ 3CDC 2E 2E 2E 2E
 249+ 3CE0 2E 2E 2E 2E
 249+ 3CE4 2E 2E 2E 2E
 250+ 3CE8 2E 2E 2E 2E          DB '.......................#.#......................................................'
 250+ 3CEC 2E 2E 2E 2E
 250+ 3CF0 2E 2E 2E 2E
 250+ 3CF4 2E 2E 2E 2E
 250+ 3CF8 2E 2E 2E 2E
 250+ 3CFC 2E 2E 2E 23
 250+ 3D00 2E 23 2E 2E
 250+ 3D04 2E 2E 2E 2E
 250+ 3D08 2E 2E 2E 2E
 250+ 3D0C 2E 2E 2E 2E
 250+ 3D10 2E 2E 2E 2E
 250+ 3D14 2E 2E 2E 2E
 250+ 3D18 2E 2E 2E 2E
 250+ 3D1C 2E 2E 2E 2E
 250+ 3D20 2E 2E 2E 2E
 250+ 3D24 2E 2E 2E 2E
 250+ 3D28 2E 2E 2E 2E
 250+ 3D2C 2E 2E 2E 2E
 250+ 3D30 2E 2E 2E 2E
 250+ 3D34 2E 2E 2E 2E
 251+ 3D38 2E 2E 2E 2E          DB '.............##......##............##...........................................'
 251+ 3D3C 2E 2E 2E 2E
 251+ 3D40 2E 2E 2E 2E
 251+ 3D44 2E 23 23 2E
 251+ 3D48 2E 2E 2E 2E
 251+ 3D4C 2E 23 23 2E
 251+ 3D50 2E 2E 2E 2E
 251+ 3D54 2E 2E 2E 2E
 251+ 3D58 2E 2E 2E 23
 251+ 3D5C 23 2E 2E 2E
 251+ 3D60 2E 2E 2E 2E
 251+ 3D64 2E 2E 2E 2E
 251+ 3D68 2E 2E 2E 2E
 251+ 3D6C 2E 2E 2E 2E
 251+ 3D70 2E 2E 2E 2E
 251+ 3D74 2E 2E 2E 2E
 251+ 3D78 2E 2E 2E 2E
 251+ 3D7C 2E 2E 2E 2E
 251+ 3D80 2E 2E 2E 2E
 251+ 3D84 2E 2E 2E 2E
 252+ 3D88 2E 2E 2E 2E          DB '............#...#....##............##...........................................'
 252+ 3D8C 2E 2E 2E 2E
 252+ 3D90 2E 2E 2E 2E
 252+ 3D94 23 2E 2E 2E
 252+ 3D98 23 2E 2E 2E
 252+ 3D9C 2E 23 23 2E
 252+ 3DA0 2E 2E 2E 2E
 252+ 3DA4 2E 2E 2E 2E
 252+ 3DA8 2E 2E 2E 23
 252+ 3DAC 23 2E 2E 2E
 252+ 3DB0 2E 2E 2E 2E
 252+ 3DB4 2E 2E 2E 2E
 252+ 3DB8 2E 2E 2E 2E
 252+ 3DBC 2E 2E 2E 2E
 252+ 3DC0 2E 2E 2E 2E
 252+ 3DC4 2E 2E 2E 2E
 252+ 3DC8 2E 2E 2E 2E
 252+ 3DCC 2E 2E 2E 2E
 252+ 3DD0 2E 2E 2E 2E
 252+ 3DD4 2E 2E 2E 2E
 253+ 3DD8 2E 23 23 2E          DB '.##........#.....#...##.........................................................'
 253+ 3DDC 2E 2E 2E 2E
 253+ 3DE0 2E 2E 2E 23
 253+ 3DE4 2E 2E 2E 2E
 253+ 3DE8 2E 23 2E 2E
 253+ 3DEC 2E 23 23 2E
 253+ 3DF0 2E 2E 2E 2E
 253+ 3DF4 2E 2E 2E 2E
 253+ 3DF8 2E 2E 2E 2E
 253+ 3DFC 2E 2E 2E 2E
 253+ 3E00 2E 2E 2E 2E
 253+ 3E04 2E 2E 2E 2E
 253+ 3E08 2E 2E 2E 2E
 253+ 3E0C 2E 2E 2E 2E
 253+ 3E10 2E 2E 2E 2E
 253+ 3E14 2E 2E 2E 2E
 253+ 3E18 2E 2E 2E 2E
 253+ 3E1C 2E 2E 2E 2E
 253+ 3E20 2E 2E 2E 2E
 253+ 3E24 2E 2E 2E 2E
 254+ 3E28 2E 23 23 2E          DB '.##........#...#.##....#.#......................................................'
 254+ 3E2C 2E 2E 2E 2E
 254+ 3E30 2E 2E 2E 23
 254+ 3E34 2E 2E 2E 23
 254+ 3E38 2E 23 23 2E
 254+ 3E3C 2E 2E 2E 23
 254+ 3E40 2E 23 2E 2E
 254+ 3E44 2E 2E 2E 2E
 254+ 3E48 2E 2E 2E 2E
 254+ 3E4C 2E 2E 2E 2E
 254+ 3E50 2E 2E 2E 2E
 254+ 3E54 2E 2E 2E 2E
 254+ 3E58 2E 2E 2E 2E
 254+ 3E5C 2E 2E 2E 2E
 254+ 3E60 2E 2E 2E 2E
 254+ 3E64 2E 2E 2E 2E
 254+ 3E68 2E 2E 2E 2E
 254+ 3E6C 2E 2E 2E 2E
 254+ 3E70 2E 2E 2E 2E
 254+ 3E74 2E 2E 2E 2E
 255+ 3E78 2E 2E 2E 2E          DB '...........#.....#.......#......................................................'
 255+ 3E7C 2E 2E 2E 2E
 255+ 3E80 2E 2E 2E 23
 255+ 3E84 2E 2E 2E 2E
 255+ 3E88 2E 23 2E 2E
 255+ 3E8C 2E 2E 2E 2E
 255+ 3E90 2E 23 2E 2E
 255+ 3E94 2E 2E 2E 2E
 255+ 3E98 2E 2E 2E 2E
 255+ 3E9C 2E 2E 2E 2E
 255+ 3EA0 2E 2E 2E 2E
 255+ 3EA4 2E 2E 2E 2E
 255+ 3EA8 2E 2E 2E 2E
 255+ 3EAC 2E 2E 2E 2E
 255+ 3EB0 2E 2E 2E 2E
 255+ 3EB4 2E 2E 2E 2E
 255+ 3EB8 2E 2E 2E 2E
 255+ 3EBC 2E 2E 2E 2E
 255+ 3EC0 2E 2E 2E 2E
 255+ 3EC4 2E 2E 2E 2E
 256+ 3EC8 2E 2E 2E 2E          DB '............#...#...............................................................'
 256+ 3ECC 2E 2E 2E 2E
 256+ 3ED0 2E 2E 2E 2E
 256+ 3ED4 23 2E 2E 2E
 256+ 3ED8 23 2E 2E 2E
 256+ 3EDC 2E 2E 2E 2E
 256+ 3EE0 2E 2E 2E 2E
 256+ 3EE4 2E 2E 2E 2E
 256+ 3EE8 2E 2E 2E 2E
 256+ 3EEC 2E 2E 2E 2E
 256+ 3EF0 2E 2E 2E 2E
 256+ 3EF4 2E 2E 2E 2E
 256+ 3EF8 2E 2E 2E 2E
 256+ 3EFC 2E 2E 2E 2E
 256+ 3F00 2E 2E 2E 2E
 256+ 3F04 2E 2E 2E 2E
 256+ 3F08 2E 2E 2E 2E
 256+ 3F0C 2E 2E 2E 2E
 256+ 3F10 2E 2E 2E 2E
 256+ 3F14 2E 2E 2E 2E
 257+ 3F18 2E 2E 2E 2E          DB '.............##.................................................................'
 257+ 3F1C 2E 2E 2E 2E
 257+ 3F20 2E 2E 2E 2E
 257+ 3F24 2E 23 23 2E
 257+ 3F28 2E 2E 2E 2E
 257+ 3F2C 2E 2E 2E 2E
 257+ 3F30 2E 2E 2E 2E
 257+ 3F34 2E 2E 2E 2E
 257+ 3F38 2E 2E 2E 2E
 257+ 3F3C 2E 2E 2E 2E
 257+ 3F40 2E 2E 2E 2E
 257+ 3F44 2E 2E 2E 2E
 257+ 3F48 2E 2E 2E 2E
 257+ 3F4C 2E 2E 2E 2E
 257+ 3F50 2E 2E 2E 2E
 257+ 3F54 2E 2E 2E 2E
 257+ 3F58 2E 2E 2E 2E
 257+ 3F5C 2E 2E 2E 2E
 257+ 3F60 2E 2E 2E 2E
 257+ 3F64 2E 2E 2E 2E
 258+ 3F68 2E 2E 2E 2E          DB '................................................................................'
 258+ 3F6C 2E 2E 2E 2E
 258+ 3F70 2E 2E 2E 2E
 258+ 3F74 2E 2E 2E 2E
 258+ 3F78 2E 2E 2E 2E
 258+ 3F7C 2E 2E 2E 2E
 258+ 3F80 2E 2E 2E 2E
 258+ 3F84 2E 2E 2E 2E
 258+ 3F88 2E 2E 2E 2E
 258+ 3F8C 2E 2E 2E 2E
 258+ 3F90 2E 2E 2E 2E
 258+ 3F94 2E 2E 2E 2E
 258+ 3F98 2E 2E 2E 2E
 258+ 3F9C 2E 2E 2E 2E
 258+ 3FA0 2E 2E 2E 2E
 258+ 3FA4 2E 2E 2E 2E
 258+ 3FA8 2E 2E 2E 2E
 258+ 3FAC 2E 2E 2E 2E
 258+ 3FB0 2E 2E 2E 2E
 258+ 3FB4 2E 2E 2E 2E
 259+ 3FB8 2E 2E 2E 2E          DB '................................................................................'
 259+ 3FBC 2E 2E 2E 2E
 259+ 3FC0 2E 2E 2E 2E
 259+ 3FC4 2E 2E 2E 2E
 259+ 3FC8 2E 2E 2E 2E
 259+ 3FCC 2E 2E 2E 2E
 259+ 3FD0 2E 2E 2E 2E
 259+ 3FD4 2E 2E 2E 2E
 259+ 3FD8 2E 2E 2E 2E
 259+ 3FDC 2E 2E 2E 2E
 259+ 3FE0 2E 2E 2E 2E
 259+ 3FE4 2E 2E 2E 2E
 259+ 3FE8 2E 2E 2E 2E
 259+ 3FEC 2E 2E 2E 2E
 259+ 3FF0 2E 2E 2E 2E
 259+ 3FF4 2E 2E 2E 2E
 259+ 3FF8 2E 2E 2E 2E
 259+ 3FFC 2E 2E 2E 2E
 259+ 4000 2E 2E 2E 2E
 259+ 4004 2E 2E 2E 2E
 260+ 4008 2E 2E 2E 2E          DB '................................................................................'
 260+ 400C 2E 2E 2E 2E
 260+ 4010 2E 2E 2E 2E
 260+ 4014 2E 2E 2E 2E
 260+ 4018 2E 2E 2E 2E
 260+ 401C 2E 2E 2E 2E
 260+ 4020 2E 2E 2E 2E
 260+ 4024 2E 2E 2E 2E
 260+ 4028 2E 2E 2E 2E
 260+ 402C 2E 2E 2E 2E
 260+ 4030 2E 2E 2E 2E
 260+ 4034 2E 2E 2E 2E
 260+ 4038 2E 2E 2E 2E
 260+ 403C 2E 2E 2E 2E
 260+ 4040 2E 2E 2E 2E
 260+ 4044 2E 2E 2E 2E
 260+ 4048 2E 2E 2E 2E
 260+ 404C 2E 2E 2E 2E
 260+ 4050 2E 2E 2E 2E
 260+ 4054 2E 2E 2E 2E
 261+ 4058 2E 2E 2E 2E          DB '................................................................................'
 261+ 405C 2E 2E 2E 2E
 261+ 4060 2E 2E 2E 2E
 261+ 4064 2E 2E 2E 2E
 261+ 4068 2E 2E 2E 2E
 261+ 406C 2E 2E 2E 2E
 261+ 4070 2E 2E 2E 2E
 261+ 4074 2E 2E 2E 2E
 261+ 4078 2E 2E 2E 2E
 261+ 407C 2E 2E 2E 2E
 261+ 4080 2E 2E 2E 2E
 261+ 4084 2E 2E 2E 2E
 261+ 4088 2E 2E 2E 2E
 261+ 408C 2E 2E 2E 2E
 261+ 4090 2E 2E 2E 2E
 261+ 4094 2E 2E 2E 2E
 261+ 4098 2E 2E 2E 2E
 261+ 409C 2E 2E 2E 2E
 261+ 40A0 2E 2E 2E 2E
 261+ 40A4 2E 2E 2E 2E
 262+ 40A8 2E 2E 2E 2E          DB '................................................................................'
 262+ 40AC 2E 2E 2E 2E
 262+ 40B0 2E 2E 2E 2E
 262+ 40B4 2E 2E 2E 2E
 262+ 40B8 2E 2E 2E 2E
 262+ 40BC 2E 2E 2E 2E
 262+ 40C0 2E 2E 2E 2E
 262+ 40C4 2E 2E 2E 2E
 262+ 40C8 2E 2E 2E 2E
 262+ 40CC 2E 2E 2E 2E
 262+ 40D0 2E 2E 2E 2E
 262+ 40D4 2E 2E 2E 2E
 262+ 40D8 2E 2E 2E 2E
 262+ 40DC 2E 2E 2E 2E
 262+ 40E0 2E 2E 2E 2E
 262+ 40E4 2E 2E 2E 2E
 262+ 40E8 2E 2E 2E 2E
 262+ 40EC 2E 2E 2E 2E
 262+ 40F0 2E 2E 2E 2E
 262+ 40F4 2E 2E 2E 2E
 263+ 40F8 2E 2E 2E 2E          DB '................................................................................'
 263+ 40FC 2E 2E 2E 2E
 263+ 4100 2E 2E 2E 2E
 263+ 4104 2E 2E 2E 2E
 263+ 4108 2E 2E 2E 2E
 263+ 410C 2E 2E 2E 2E
 263+ 4110 2E 2E 2E 2E
 263+ 4114 2E 2E 2E 2E
 263+ 4118 2E 2E 2E 2E
 263+ 411C 2E 2E 2E 2E
 263+ 4120 2E 2E 2E 2E
 263+ 4124 2E 2E 2E 2E
 263+ 4128 2E 2E 2E 2E
 263+ 412C 2E 2E 2E 2E
 263+ 4130 2E 2E 2E 2E
 263+ 4134 2E 2E 2E 2E
 263+ 4138 2E 2E 2E 2E
 263+ 413C 2E 2E 2E 2E
 263+ 4140 2E 2E 2E 2E
 263+ 4144 2E 2E 2E 2E
 264+ 4148 2E 2E 2E 2E          DB '................................................................................'
 264+ 414C 2E 2E 2E 2E
 264+ 4150 2E 2E 2E 2E
 264+ 4154 2E 2E 2E 2E
 264+ 4158 2E 2E 2E 2E
 264+ 415C 2E 2E 2E 2E
 264+ 4160 2E 2E 2E 2E
 264+ 4164 2E 2E 2E 2E
 264+ 4168 2E 2E 2E 2E
 264+ 416C 2E 2E 2E 2E
 264+ 4170 2E 2E 2E 2E
 264+ 4174 2E 2E 2E 2E
 264+ 4178 2E 2E 2E 2E
 264+ 417C 2E 2E 2E 2E
 264+ 4180 2E 2E 2E 2E
 264+ 4184 2E 2E 2E 2E
 264+ 4188 2E 2E 2E 2E
 264+ 418C 2E 2E 2E 2E
 264+ 4190 2E 2E 2E 2E
 264+ 4194 2E 2E 2E 2E
 265+ 4198 2E 2E 2E 2E          DB '................................................................................'
 265+ 419C 2E 2E 2E 2E
 265+ 41A0 2E 2E 2E 2E
 265+ 41A4 2E 2E 2E 2E
 265+ 41A8 2E 2E 2E 2E
 265+ 41AC 2E 2E 2E 2E
 265+ 41B0 2E 2E 2E 2E
 265+ 41B4 2E 2E 2E 2E
 265+ 41B8 2E 2E 2E 2E
 265+ 41BC 2E 2E 2E 2E
 265+ 41C0 2E 2E 2E 2E
 265+ 41C4 2E 2E 2E 2E
 265+ 41C8 2E 2E 2E 2E
 265+ 41CC 2E 2E 2E 2E
 265+ 41D0 2E 2E 2E 2E
 265+ 41D4 2E 2E 2E 2E
 265+ 41D8 2E 2E 2E 2E
 265+ 41DC 2E 2E 2E 2E
 265+ 41E0 2E 2E 2E 2E
 265+ 41E4 2E 2E 2E 2E
 266+ 41E8 2E 2E 2E 2E          DB '................................................................................'
 266+ 41EC 2E 2E 2E 2E
 266+ 41F0 2E 2E 2E 2E
 266+ 41F4 2E 2E 2E 2E
 266+ 41F8 2E 2E 2E 2E
 266+ 41FC 2E 2E 2E 2E
 266+ 4200 2E 2E 2E 2E
 266+ 4204 2E 2E 2E 2E
 266+ 4208 2E 2E 2E 2E
 266+ 420C 2E 2E 2E 2E
 266+ 4210 2E 2E 2E 2E
 266+ 4214 2E 2E 2E 2E
 266+ 4218 2E 2E 2E 2E
 266+ 421C 2E 2E 2E 2E
 266+ 4220 2E 2E 2E 2E
 266+ 4224 2E 2E 2E 2E
 266+ 4228 2E 2E 2E 2E
 266+ 422C 2E 2E 2E 2E
 266+ 4230 2E 2E 2E 2E
 266+ 4234 2E 2E 2E 2E
 267+ 4238 2E 2E 2E 2E          DB '................................................................................'
 267+ 423C 2E 2E 2E 2E
 267+ 4240 2E 2E 2E 2E
 267+ 4244 2E 2E 2E 2E
 267+ 4248 2E 2E 2E 2E
 267+ 424C 2E 2E 2E 2E
 267+ 4250 2E 2E 2E 2E
 267+ 4254 2E 2E 2E 2E
 267+ 4258 2E 2E 2E 2E
 267+ 425C 2E 2E 2E 2E
 267+ 4260 2E 2E 2E 2E
 267+ 4264 2E 2E 2E 2E
 267+ 4268 2E 2E 2E 2E
 267+ 426C 2E 2E 2E 2E
 267+ 4270 2E 2E 2E 2E
 267+ 4274 2E 2E 2E 2E
 267+ 4278 2E 2E 2E 2E
 267+ 427C 2E 2E 2E 2E
 267+ 4280 2E 2E 2E 2E
 267+ 4284 2E 2E 2E 2E
 268+ 4288 2E 2E 2E 2E          DB '................................................................................'
 268+ 428C 2E 2E 2E 2E
 268+ 4290 2E 2E 2E 2E
 268+ 4294 2E 2E 2E 2E
 268+ 4298 2E 2E 2E 2E
 268+ 429C 2E 2E 2E 2E
 268+ 42A0 2E 2E 2E 2E
 268+ 42A4 2E 2E 2E 2E
 268+ 42A8 2E 2E 2E 2E
 268+ 42AC 2E 2E 2E 2E
 268+ 42B0 2E 2E 2E 2E
 268+ 42B4 2E 2E 2E 2E
 268+ 42B8 2E 2E 2E 2E
 268+ 42BC 2E 2E 2E 2E
 268+ 42C0 2E 2E 2E 2E
 268+ 42C4 2E 2E 2E 2E
 268+ 42C8 2E 2E 2E 2E
 268+ 42CC 2E 2E 2E 2E
 268+ 42D0 2E 2E 2E 2E
 268+ 42D4 2E 2E 2E 2E
 269+ 42D8 2E 2E 2E 2E          DB '................................................................................'
 269+ 42DC 2E 2E 2E 2E
 269+ 42E0 2E 2E 2E 2E
 269+ 42E4 2E 2E 2E 2E
 269+ 42E8 2E 2E 2E 2E
 269+ 42EC 2E 2E 2E 2E
 269+ 42F0 2E 2E 2E 2E
 269+ 42F4 2E 2E 2E 2E
 269+ 42F8 2E 2E 2E 2E
 269+ 42FC 2E 2E 2E 2E
 269+ 4300 2E 2E 2E 2E
 269+ 4304 2E 2E 2E 2E
 269+ 4308 2E 2E 2E 2E
 269+ 430C 2E 2E 2E 2E
 269+ 4310 2E 2E 2E 2E
 269+ 4314 2E 2E 2E 2E
 269+ 4318 2E 2E 2E 2E
 269+ 431C 2E 2E 2E 2E
 269+ 4320 2E 2E 2E 2E
 269+ 4324 2E 2E 2E 2E
 270+ 4328 2E 2E 2E 2E          DB '................................................................................'
 270+ 432C 2E 2E 2E 2E
 270+ 4330 2E 2E 2E 2E
 270+ 4334 2E 2E 2E 2E
 270+ 4338 2E 2E 2E 2E
 270+ 433C 2E 2E 2E 2E
 270+ 4340 2E 2E 2E 2E
 270+ 4344 2E 2E 2E 2E
 270+ 4348 2E 2E 2E 2E
 270+ 434C 2E 2E 2E 2E
 270+ 4350 2E 2E 2E 2E
 270+ 4354 2E 2E 2E 2E
 270+ 4358 2E 2E 2E 2E
 270+ 435C 2E 2E 2E 2E
 270+ 4360 2E 2E 2E 2E
 270+ 4364 2E 2E 2E 2E
 270+ 4368 2E 2E 2E 2E
 270+ 436C 2E 2E 2E 2E
 270+ 4370 2E 2E 2E 2E
 270+ 4374 2E 2E 2E 2E
 271+ 4378 2E 2E 2E 2E          DB '................................................................................'
 271+ 437C 2E 2E 2E 2E
 271+ 4380 2E 2E 2E 2E
 271+ 4384 2E 2E 2E 2E
 271+ 4388 2E 2E 2E 2E
 271+ 438C 2E 2E 2E 2E
 271+ 4390 2E 2E 2E 2E
 271+ 4394 2E 2E 2E 2E
 271+ 4398 2E 2E 2E 2E
 271+ 439C 2E 2E 2E 2E
 271+ 43A0 2E 2E 2E 2E
 271+ 43A4 2E 2E 2E 2E
 271+ 43A8 2E 2E 2E 2E
 271+ 43AC 2E 2E 2E 2E
 271+ 43B0 2E 2E 2E 2E
 271+ 43B4 2E 2E 2E 2E
 271+ 43B8 2E 2E 2E 2E
 271+ 43BC 2E 2E 2E 2E
 271+ 43C0 2E 2E 2E 2E
 271+ 43C4 2E 2E 2E 2E
 272+ 43C8
 273+ 43C8              initial_pattern3:
 274+ 43C8 2E 2E 2E 2E          DB '................................................................................'
 274+ 43CC 2E 2E 2E 2E
 274+ 43D0 2E 2E 2E 2E
 274+ 43D4 2E 2E 2E 2E
 274+ 43D8 2E 2E 2E 2E
 274+ 43DC 2E 2E 2E 2E
 274+ 43E0 2E 2E 2E 2E
 274+ 43E4 2E 2E 2E 2E
 274+ 43E8 2E 2E 2E 2E
 274+ 43EC 2E 2E 2E 2E
 274+ 43F0 2E 2E 2E 2E
 274+ 43F4 2E 2E 2E 2E
 274+ 43F8 2E 2E 2E 2E
 274+ 43FC 2E 2E 2E 2E
 274+ 4400 2E 2E 2E 2E
 274+ 4404 2E 2E 2E 2E
 274+ 4408 2E 2E 2E 2E
 274+ 440C 2E 2E 2E 2E
 274+ 4410 2E 2E 2E 2E
 274+ 4414 2E 2E 2E 2E
 275+ 4418 2E 2E 2E 2E          DB '................................................................................'
 275+ 441C 2E 2E 2E 2E
 275+ 4420 2E 2E 2E 2E
 275+ 4424 2E 2E 2E 2E
 275+ 4428 2E 2E 2E 2E
 275+ 442C 2E 2E 2E 2E
 275+ 4430 2E 2E 2E 2E
 275+ 4434 2E 2E 2E 2E
 275+ 4438 2E 2E 2E 2E
 275+ 443C 2E 2E 2E 2E
 275+ 4440 2E 2E 2E 2E
 275+ 4444 2E 2E 2E 2E
 275+ 4448 2E 2E 2E 2E
 275+ 444C 2E 2E 2E 2E
 275+ 4450 2E 2E 2E 2E
 275+ 4454 2E 2E 2E 2E
 275+ 4458 2E 2E 2E 2E
 275+ 445C 2E 2E 2E 2E
 275+ 4460 2E 2E 2E 2E
 275+ 4464 2E 2E 2E 2E
 276+ 4468 2E 2E 2E 2E          DB '....................................................................##..........'
 276+ 446C 2E 2E 2E 2E
 276+ 4470 2E 2E 2E 2E
 276+ 4474 2E 2E 2E 2E
 276+ 4478 2E 2E 2E 2E
 276+ 447C 2E 2E 2E 2E
 276+ 4480 2E 2E 2E 2E
 276+ 4484 2E 2E 2E 2E
 276+ 4488 2E 2E 2E 2E
 276+ 448C 2E 2E 2E 2E
 276+ 4490 2E 2E 2E 2E
 276+ 4494 2E 2E 2E 2E
 276+ 4498 2E 2E 2E 2E
 276+ 449C 2E 2E 2E 2E
 276+ 44A0 2E 2E 2E 2E
 276+ 44A4 2E 2E 2E 2E
 276+ 44A8 2E 2E 2E 2E
 276+ 44AC 23 23 2E 2E
 276+ 44B0 2E 2E 2E 2E
 276+ 44B4 2E 2E 2E 2E
 277+ 44B8 2E 2E 2E 2E          DB '....................................................................##..........'
 277+ 44BC 2E 2E 2E 2E
 277+ 44C0 2E 2E 2E 2E
 277+ 44C4 2E 2E 2E 2E
 277+ 44C8 2E 2E 2E 2E
 277+ 44CC 2E 2E 2E 2E
 277+ 44D0 2E 2E 2E 2E
 277+ 44D4 2E 2E 2E 2E
 277+ 44D8 2E 2E 2E 2E
 277+ 44DC 2E 2E 2E 2E
 277+ 44E0 2E 2E 2E 2E
 277+ 44E4 2E 2E 2E 2E
 277+ 44E8 2E 2E 2E 2E
 277+ 44EC 2E 2E 2E 2E
 277+ 44F0 2E 2E 2E 2E
 277+ 44F4 2E 2E 2E 2E
 277+ 44F8 2E 2E 2E 2E
 277+ 44FC 23 23 2E 2E
 277+ 4500 2E 2E 2E 2E
 277+ 4504 2E 2E 2E 2E
 278+ 4508 2E 2E 2E 2E          DB '................................................................................'
 278+ 450C 2E 2E 2E 2E
 278+ 4510 2E 2E 2E 2E
 278+ 4514 2E 2E 2E 2E
 278+ 4518 2E 2E 2E 2E
 278+ 451C 2E 2E 2E 2E
 278+ 4520 2E 2E 2E 2E
 278+ 4524 2E 2E 2E 2E
 278+ 4528 2E 2E 2E 2E
 278+ 452C 2E 2E 2E 2E
 278+ 4530 2E 2E 2E 2E
 278+ 4534 2E 2E 2E 2E
 278+ 4538 2E 2E 2E 2E
 278+ 453C 2E 2E 2E 2E
 278+ 4540 2E 2E 2E 2E
 278+ 4544 2E 2E 2E 2E
 278+ 4548 2E 2E 2E 2E
 278+ 454C 2E 2E 2E 2E
 278+ 4550 2E 2E 2E 2E
 278+ 4554 2E 2E 2E 2E
 279+ 4558 2E 2E 2E 2E          DB '.....................#..#.......................................................'
 279+ 455C 2E 2E 2E 2E
 279+ 4560 2E 2E 2E 2E
 279+ 4564 2E 2E 2E 2E
 279+ 4568 2E 2E 2E 2E
 279+ 456C 2E 23 2E 2E
 279+ 4570 23 2E 2E 2E
 279+ 4574 2E 2E 2E 2E
 279+ 4578 2E 2E 2E 2E
 279+ 457C 2E 2E 2E 2E
 279+ 4580 2E 2E 2E 2E
 279+ 4584 2E 2E 2E 2E
 279+ 4588 2E 2E 2E 2E
 279+ 458C 2E 2E 2E 2E
 279+ 4590 2E 2E 2E 2E
 279+ 4594 2E 2E 2E 2E
 279+ 4598 2E 2E 2E 2E
 279+ 459C 2E 2E 2E 2E
 279+ 45A0 2E 2E 2E 2E
 279+ 45A4 2E 2E 2E 2E
 280+ 45A8 2E 2E 2E 2E          DB '.........................#.......................####...........................'
 280+ 45AC 2E 2E 2E 2E
 280+ 45B0 2E 2E 2E 2E
 280+ 45B4 2E 2E 2E 2E
 280+ 45B8 2E 2E 2E 2E
 280+ 45BC 2E 2E 2E 2E
 280+ 45C0 2E 23 2E 2E
 280+ 45C4 2E 2E 2E 2E
 280+ 45C8 2E 2E 2E 2E
 280+ 45CC 2E 2E 2E 2E
 280+ 45D0 2E 2E 2E 2E
 280+ 45D4 2E 2E 2E 2E
 280+ 45D8 2E 23 23 23
 280+ 45DC 23 2E 2E 2E
 280+ 45E0 2E 2E 2E 2E
 280+ 45E4 2E 2E 2E 2E
 280+ 45E8 2E 2E 2E 2E
 280+ 45EC 2E 2E 2E 2E
 280+ 45F0 2E 2E 2E 2E
 280+ 45F4 2E 2E 2E 2E
 281+ 45F8 2E 2E 2E 2E          DB '.....................#...#......................................................'
 281+ 45FC 2E 2E 2E 2E
 281+ 4600 2E 2E 2E 2E
 281+ 4604 2E 2E 2E 2E
 281+ 4608 2E 2E 2E 2E
 281+ 460C 2E 23 2E 2E
 281+ 4610 2E 23 2E 2E
 281+ 4614 2E 2E 2E 2E
 281+ 4618 2E 2E 2E 2E
 281+ 461C 2E 2E 2E 2E
 281+ 4620 2E 2E 2E 2E
 281+ 4624 2E 2E 2E 2E
 281+ 4628 2E 2E 2E 2E
 281+ 462C 2E 2E 2E 2E
 281+ 4630 2E 2E 2E 2E
 281+ 4634 2E 2E 2E 2E
 281+ 4638 2E 2E 2E 2E
 281+ 463C 2E 2E 2E 2E
 281+ 4640 2E 2E 2E 2E
 281+ 4644 2E 2E 2E 2E
 282+ 4648 2E 2E 2E 2E          DB '......................####.........................####.........................'
 282+ 464C 2E 2E 2E 2E
 282+ 4650 2E 2E 2E 2E
 282+ 4654 2E 2E 2E 2E
 282+ 4658 2E 2E 2E 2E
 282+ 465C 2E 2E 23 23
 282+ 4660 23 23 2E 2E
 282+ 4664 2E 2E 2E 2E
 282+ 4668 2E 2E 2E 2E
 282+ 466C 2E 2E 2E 2E
 282+ 4670 2E 2E 2E 2E
 282+ 4674 2E 2E 2E 2E
 282+ 4678 2E 2E 2E 23
 282+ 467C 23 23 23 2E
 282+ 4680 2E 2E 2E 2E
 282+ 4684 2E 2E 2E 2E
 282+ 4688 2E 2E 2E 2E
 282+ 468C 2E 2E 2E 2E
 282+ 4690 2E 2E 2E 2E
 282+ 4694 2E 2E 2E 2E
 283+ 4698 2E 2E 2E 2E          DB '................................................................................'
 283+ 469C 2E 2E 2E 2E
 283+ 46A0 2E 2E 2E 2E
 283+ 46A4 2E 2E 2E 2E
 283+ 46A8 2E 2E 2E 2E
 283+ 46AC 2E 2E 2E 2E
 283+ 46B0 2E 2E 2E 2E
 283+ 46B4 2E 2E 2E 2E
 283+ 46B8 2E 2E 2E 2E
 283+ 46BC 2E 2E 2E 2E
 283+ 46C0 2E 2E 2E 2E
 283+ 46C4 2E 2E 2E 2E
 283+ 46C8 2E 2E 2E 2E
 283+ 46CC 2E 2E 2E 2E
 283+ 46D0 2E 2E 2E 2E
 283+ 46D4 2E 2E 2E 2E
 283+ 46D8 2E 2E 2E 2E
 283+ 46DC 2E 2E 2E 2E
 283+ 46E0 2E 2E 2E 2E
 283+ 46E4 2E 2E 2E 2E
 284+ 46E8 2E 2E 2E 2E          DB '....#...........................................................................'
 284+ 46EC 23 2E 2E 2E
 284+ 46F0 2E 2E 2E 2E
 284+ 46F4 2E 2E 2E 2E
 284+ 46F8 2E 2E 2E 2E
 284+ 46FC 2E 2E 2E 2E
 284+ 4700 2E 2E 2E 2E
 284+ 4704 2E 2E 2E 2E
 284+ 4708 2E 2E 2E 2E
 284+ 470C 2E 2E 2E 2E
 284+ 4710 2E 2E 2E 2E
 284+ 4714 2E 2E 2E 2E
 284+ 4718 2E 2E 2E 2E
 284+ 471C 2E 2E 2E 2E
 284+ 4720 2E 2E 2E 2E
 284+ 4724 2E 2E 2E 2E
 284+ 4728 2E 2E 2E 2E
 284+ 472C 2E 2E 2E 2E
 284+ 4730 2E 2E 2E 2E
 284+ 4734 2E 2E 2E 2E
 285+ 4738 2E 2E 2E 2E          DB '.....#..........................................................................'
 285+ 473C 2E 23 2E 2E
 285+ 4740 2E 2E 2E 2E
 285+ 4744 2E 2E 2E 2E
 285+ 4748 2E 2E 2E 2E
 285+ 474C 2E 2E 2E 2E
 285+ 4750 2E 2E 2E 2E
 285+ 4754 2E 2E 2E 2E
 285+ 4758 2E 2E 2E 2E
 285+ 475C 2E 2E 2E 2E
 285+ 4760 2E 2E 2E 2E
 285+ 4764 2E 2E 2E 2E
 285+ 4768 2E 2E 2E 2E
 285+ 476C 2E 2E 2E 2E
 285+ 4770 2E 2E 2E 2E
 285+ 4774 2E 2E 2E 2E
 285+ 4778 2E 2E 2E 2E
 285+ 477C 2E 2E 2E 2E
 285+ 4780 2E 2E 2E 2E
 285+ 4784 2E 2E 2E 2E
 286+ 4788 2E 2E 2E 23          DB '...###..........................................................................'
 286+ 478C 23 23 2E 2E
 286+ 4790 2E 2E 2E 2E
 286+ 4794 2E 2E 2E 2E
 286+ 4798 2E 2E 2E 2E
 286+ 479C 2E 2E 2E 2E
 286+ 47A0 2E 2E 2E 2E
 286+ 47A4 2E 2E 2E 2E
 286+ 47A8 2E 2E 2E 2E
 286+ 47AC 2E 2E 2E 2E
 286+ 47B0 2E 2E 2E 2E
 286+ 47B4 2E 2E 2E 2E
 286+ 47B8 2E 2E 2E 2E
 286+ 47BC 2E 2E 2E 2E
 286+ 47C0 2E 2E 2E 2E
 286+ 47C4 2E 2E 2E 2E
 286+ 47C8 2E 2E 2E 2E
 286+ 47CC 2E 2E 2E 2E
 286+ 47D0 2E 2E 2E 2E
 286+ 47D4 2E 2E 2E 2E
 287+ 47D8 2E 2E 2E 2E          DB '...................................................................#..#.........'
 287+ 47DC 2E 2E 2E 2E
 287+ 47E0 2E 2E 2E 2E
 287+ 47E4 2E 2E 2E 2E
 287+ 47E8 2E 2E 2E 2E
 287+ 47EC 2E 2E 2E 2E
 287+ 47F0 2E 2E 2E 2E
 287+ 47F4 2E 2E 2E 2E
 287+ 47F8 2E 2E 2E 2E
 287+ 47FC 2E 2E 2E 2E
 287+ 4800 2E 2E 2E 2E
 287+ 4804 2E 2E 2E 2E
 287+ 4808 2E 2E 2E 2E
 287+ 480C 2E 2E 2E 2E
 287+ 4810 2E 2E 2E 2E
 287+ 4814 2E 2E 2E 2E
 287+ 4818 2E 2E 2E 23
 287+ 481C 2E 2E 23 2E
 287+ 4820 2E 2E 2E 2E
 287+ 4824 2E 2E 2E 2E
 288+ 4828 2E 2E 2E 2E          DB '..................................................................#.............'
 288+ 482C 2E 2E 2E 2E
 288+ 4830 2E 2E 2E 2E
 288+ 4834 2E 2E 2E 2E
 288+ 4838 2E 2E 2E 2E
 288+ 483C 2E 2E 2E 2E
 288+ 4840 2E 2E 2E 2E
 288+ 4844 2E 2E 2E 2E
 288+ 4848 2E 2E 2E 2E
 288+ 484C 2E 2E 2E 2E
 288+ 4850 2E 2E 2E 2E
 288+ 4854 2E 2E 2E 2E
 288+ 4858 2E 2E 2E 2E
 288+ 485C 2E 2E 2E 2E
 288+ 4860 2E 2E 2E 2E
 288+ 4864 2E 2E 2E 2E
 288+ 4868 2E 2E 23 2E
 288+ 486C 2E 2E 2E 2E
 288+ 4870 2E 2E 2E 2E
 288+ 4874 2E 2E 2E 2E
 289+ 4878 2E 2E 2E 2E          DB '..................................................................#...#.........'
 289+ 487C 2E 2E 2E 2E
 289+ 4880 2E 2E 2E 2E
 289+ 4884 2E 2E 2E 2E
 289+ 4888 2E 2E 2E 2E
 289+ 488C 2E 2E 2E 2E
 289+ 4890 2E 2E 2E 2E
 289+ 4894 2E 2E 2E 2E
 289+ 4898 2E 2E 2E 2E
 289+ 489C 2E 2E 2E 2E
 289+ 48A0 2E 2E 2E 2E
 289+ 48A4 2E 2E 2E 2E
 289+ 48A8 2E 2E 2E 2E
 289+ 48AC 2E 2E 2E 2E
 289+ 48B0 2E 2E 2E 2E
 289+ 48B4 2E 2E 2E 2E
 289+ 48B8 2E 2E 23 2E
 289+ 48BC 2E 2E 23 2E
 289+ 48C0 2E 2E 2E 2E
 289+ 48C4 2E 2E 2E 2E
 290+ 48C8 2E 2E 2E 2E          DB '...........................................###....................####..........'
 290+ 48CC 2E 2E 2E 2E
 290+ 48D0 2E 2E 2E 2E
 290+ 48D4 2E 2E 2E 2E
 290+ 48D8 2E 2E 2E 2E
 290+ 48DC 2E 2E 2E 2E
 290+ 48E0 2E 2E 2E 2E
 290+ 48E4 2E 2E 2E 2E
 290+ 48E8 2E 2E 2E 2E
 290+ 48EC 2E 2E 2E 2E
 290+ 48F0 2E 2E 2E 23
 290+ 48F4 23 23 2E 2E
 290+ 48F8 2E 2E 2E 2E
 290+ 48FC 2E 2E 2E 2E
 290+ 4900 2E 2E 2E 2E
 290+ 4904 2E 2E 2E 2E
 290+ 4908 2E 2E 23 23
 290+ 490C 23 23 2E 2E
 290+ 4910 2E 2E 2E 2E
 290+ 4914 2E 2E 2E 2E
 291+ 4918 2E 2E 2E 2E          DB '..........................................###...................................'
 291+ 491C 2E 2E 2E 2E
 291+ 4920 2E 2E 2E 2E
 291+ 4924 2E 2E 2E 2E
 291+ 4928 2E 2E 2E 2E
 291+ 492C 2E 2E 2E 2E
 291+ 4930 2E 2E 2E 2E
 291+ 4934 2E 2E 2E 2E
 291+ 4938 2E 2E 2E 2E
 291+ 493C 2E 2E 2E 2E
 291+ 4940 2E 2E 23 23
 291+ 4944 23 2E 2E 2E
 291+ 4948 2E 2E 2E 2E
 291+ 494C 2E 2E 2E 2E
 291+ 4950 2E 2E 2E 2E
 291+ 4954 2E 2E 2E 2E
 291+ 4958 2E 2E 2E 2E
 291+ 495C 2E 2E 2E 2E
 291+ 4960 2E 2E 2E 2E
 291+ 4964 2E 2E 2E 2E
 292+ 4968 2E 2E 2E 2E          DB '................................................................................'
 292+ 496C 2E 2E 2E 2E
 292+ 4970 2E 2E 2E 2E
 292+ 4974 2E 2E 2E 2E
 292+ 4978 2E 2E 2E 2E
 292+ 497C 2E 2E 2E 2E
 292+ 4980 2E 2E 2E 2E
 292+ 4984 2E 2E 2E 2E
 292+ 4988 2E 2E 2E 2E
 292+ 498C 2E 2E 2E 2E
 292+ 4990 2E 2E 2E 2E
 292+ 4994 2E 2E 2E 2E
 292+ 4998 2E 2E 2E 2E
 292+ 499C 2E 2E 2E 2E
 292+ 49A0 2E 2E 2E 2E
 292+ 49A4 2E 2E 2E 2E
 292+ 49A8 2E 2E 2E 2E
 292+ 49AC 2E 2E 2E 2E
 292+ 49B0 2E 2E 2E 2E
 292+ 49B4 2E 2E 2E 2E
 293+ 49B8 2E 2E 2E 2E          DB '................................................................................'
 293+ 49BC 2E 2E 2E 2E
 293+ 49C0 2E 2E 2E 2E
 293+ 49C4 2E 2E 2E 2E
 293+ 49C8 2E 2E 2E 2E
 293+ 49CC 2E 2E 2E 2E
 293+ 49D0 2E 2E 2E 2E
 293+ 49D4 2E 2E 2E 2E
 293+ 49D8 2E 2E 2E 2E
 293+ 49DC 2E 2E 2E 2E
 293+ 49E0 2E 2E 2E 2E
 293+ 49E4 2E 2E 2E 2E
 293+ 49E8 2E 2E 2E 2E
 293+ 49EC 2E 2E 2E 2E
 293+ 49F0 2E 2E 2E 2E
 293+ 49F4 2E 2E 2E 2E
 293+ 49F8 2E 2E 2E 2E
 293+ 49FC 2E 2E 2E 2E
 293+ 4A00 2E 2E 2E 2E
 293+ 4A04 2E 2E 2E 2E
 294+ 4A08 2E 2E 2E 2E          DB '................................................................................'
 294+ 4A0C 2E 2E 2E 2E
 294+ 4A10 2E 2E 2E 2E
 294+ 4A14 2E 2E 2E 2E
 294+ 4A18 2E 2E 2E 2E
 294+ 4A1C 2E 2E 2E 2E
 294+ 4A20 2E 2E 2E 2E
 294+ 4A24 2E 2E 2E 2E
 294+ 4A28 2E 2E 2E 2E
 294+ 4A2C 2E 2E 2E 2E
 294+ 4A30 2E 2E 2E 2E
 294+ 4A34 2E 2E 2E 2E
 294+ 4A38 2E 2E 2E 2E
 294+ 4A3C 2E 2E 2E 2E
 294+ 4A40 2E 2E 2E 2E
 294+ 4A44 2E 2E 2E 2E
 294+ 4A48 2E 2E 2E 2E
 294+ 4A4C 2E 2E 2E 2E
 294+ 4A50 2E 2E 2E 2E
 294+ 4A54 2E 2E 2E 2E
 295+ 4A58 2E 2E 2E 2E          DB '................................................................................'
 295+ 4A5C 2E 2E 2E 2E
 295+ 4A60 2E 2E 2E 2E
 295+ 4A64 2E 2E 2E 2E
 295+ 4A68 2E 2E 2E 2E
 295+ 4A6C 2E 2E 2E 2E
 295+ 4A70 2E 2E 2E 2E
 295+ 4A74 2E 2E 2E 2E
 295+ 4A78 2E 2E 2E 2E
 295+ 4A7C 2E 2E 2E 2E
 295+ 4A80 2E 2E 2E 2E
 295+ 4A84 2E 2E 2E 2E
 295+ 4A88 2E 2E 2E 2E
 295+ 4A8C 2E 2E 2E 2E
 295+ 4A90 2E 2E 2E 2E
 295+ 4A94 2E 2E 2E 2E
 295+ 4A98 2E 2E 2E 2E
 295+ 4A9C 2E 2E 2E 2E
 295+ 4AA0 2E 2E 2E 2E
 295+ 4AA4 2E 2E 2E 2E
 296+ 4AA8 2E 2E 2E 2E          DB '................................................................................'
 296+ 4AAC 2E 2E 2E 2E
 296+ 4AB0 2E 2E 2E 2E
 296+ 4AB4 2E 2E 2E 2E
 296+ 4AB8 2E 2E 2E 2E
 296+ 4ABC 2E 2E 2E 2E
 296+ 4AC0 2E 2E 2E 2E
 296+ 4AC4 2E 2E 2E 2E
 296+ 4AC8 2E 2E 2E 2E
 296+ 4ACC 2E 2E 2E 2E
 296+ 4AD0 2E 2E 2E 2E
 296+ 4AD4 2E 2E 2E 2E
 296+ 4AD8 2E 2E 2E 2E
 296+ 4ADC 2E 2E 2E 2E
 296+ 4AE0 2E 2E 2E 2E
 296+ 4AE4 2E 2E 2E 2E
 296+ 4AE8 2E 2E 2E 2E
 296+ 4AEC 2E 2E 2E 2E
 296+ 4AF0 2E 2E 2E 2E
 296+ 4AF4 2E 2E 2E 2E
 297+ 4AF8 2E 2E 2E 2E          DB '................##..............................................................'
 297+ 4AFC 2E 2E 2E 2E
 297+ 4B00 2E 2E 2E 2E
 297+ 4B04 2E 2E 2E 2E
 297+ 4B08 23 23 2E 2E
 297+ 4B0C 2E 2E 2E 2E
 297+ 4B10 2E 2E 2E 2E
 297+ 4B14 2E 2E 2E 2E
 297+ 4B18 2E 2E 2E 2E
 297+ 4B1C 2E 2E 2E 2E
 297+ 4B20 2E 2E 2E 2E
 297+ 4B24 2E 2E 2E 2E
 297+ 4B28 2E 2E 2E 2E
 297+ 4B2C 2E 2E 2E 2E
 297+ 4B30 2E 2E 2E 2E
 297+ 4B34 2E 2E 2E 2E
 297+ 4B38 2E 2E 2E 2E
 297+ 4B3C 2E 2E 2E 2E
 297+ 4B40 2E 2E 2E 2E
 297+ 4B44 2E 2E 2E 2E
 298+ 4B48 2E 2E 2E 2E          DB '................##..............................................................'
 298+ 4B4C 2E 2E 2E 2E
 298+ 4B50 2E 2E 2E 2E
 298+ 4B54 2E 2E 2E 2E
 298+ 4B58 23 23 2E 2E
 298+ 4B5C 2E 2E 2E 2E
 298+ 4B60 2E 2E 2E 2E
 298+ 4B64 2E 2E 2E 2E
 298+ 4B68 2E 2E 2E 2E
 298+ 4B6C 2E 2E 2E 2E
 298+ 4B70 2E 2E 2E 2E
 298+ 4B74 2E 2E 2E 2E
 298+ 4B78 2E 2E 2E 2E
 298+ 4B7C 2E 2E 2E 2E
 298+ 4B80 2E 2E 2E 2E
 298+ 4B84 2E 2E 2E 2E
 298+ 4B88 2E 2E 2E 2E
 298+ 4B8C 2E 2E 2E 2E
 298+ 4B90 2E 2E 2E 2E
 298+ 4B94 2E 2E 2E 2E
 299+ 4B98
 300+ 4B98              show_intro_screen:
 301+ 4B98 CD 06 34         call GOFL_Cls
 302+ 4B9B CD 0C 08         call message
 303+ 4B9E 54 68 69 73      db 'This is the "Game Of Life", originally devised by John Conway in the 1970s.',13,10
 303+ 4BA2 20 69 73 20
 303+ 4BA6 74 68 65 20
 303+ 4BAA 22 47 61 6D
 303+ 4BAE 65 20 4F 66
 303+ 4BB2 20 4C 69 66
 303+ 4BB6 65 22 2C 20
 303+ 4BBA 6F 72 69 67
 303+ 4BBE 69 6E 61 6C
 303+ 4BC2 6C 79 20 64
 303+ 4BC6 65 76 69 73
 303+ 4BCA 65 64 20 62
 303+ 4BCE 79 20 4A 6F
 303+ 4BD2 68 6E 20 43
 303+ 4BD6 6F 6E 77 61
 303+ 4BDA 79 20 69 6E
 303+ 4BDE 20 74 68 65
 303+ 4BE2 20 31 39 37
 303+ 4BE6 30 73 2E 0D
 303+ 4BEA 0A
 304+ 4BEB 54 68 69 73      db 'This implementation was written by Albert Pauw on a Z80 Playground using CP/M.',13,10
 304+ 4BEF 20 69 6D 70
 304+ 4BF3 6C 65 6D 65
 304+ 4BF7 6E 74 61 74
 304+ 4BFB 69 6F 6E 20
 304+ 4BFF 77 61 73 20
 304+ 4C03 77 72 69 74
 304+ 4C07 74 65 6E 20
 304+ 4C0B 62 79 20 41
 304+ 4C0F 6C 62 65 72
 304+ 4C13 74 20 50 61
 304+ 4C17 75 77 20 6F
 304+ 4C1B 6E 20 61 20
 304+ 4C1F 5A 38 30 20
 304+ 4C23 50 6C 61 79
 304+ 4C27 67 72 6F 75
 304+ 4C2B 6E 64 20 75
 304+ 4C2F 73 69 6E 67
 304+ 4C33 20 43 50 2F
 304+ 4C37 4D 2E 0D 0A
 305+ 4C3B 49 74 20 68      db 'It has been adapted to run in the Monitor as a demo.',13,10
 305+ 4C3F 61 73 20 62
 305+ 4C43 65 65 6E 20
 305+ 4C47 61 64 61 70
 305+ 4C4B 74 65 64 20
 305+ 4C4F 74 6F 20 72
 305+ 4C53 75 6E 20 69
 305+ 4C57 6E 20 74 68
 305+ 4C5B 65 20 4D 6F
 305+ 4C5F 6E 69 74 6F
 305+ 4C63 72 20 61 73
 305+ 4C67 20 61 20 64
 305+ 4C6B 65 6D 6F 2E
 305+ 4C6F 0D 0A
 306+ 4C71 4D 61 6B 65      db 'Make sure you have a screen of at least 80 x 25 characters.',13,10
 306+ 4C75 20 73 75 72
 306+ 4C79 65 20 79 6F
 306+ 4C7D 75 20 68 61
 306+ 4C81 76 65 20 61
 306+ 4C85 20 73 63 72
 306+ 4C89 65 65 6E 20
 306+ 4C8D 6F 66 20 61
 306+ 4C91 74 20 6C 65
 306+ 4C95 61 73 74 20
 306+ 4C99 38 30 20 78
 306+ 4C9D 20 32 35 20
 306+ 4CA1 63 68 61 72
 306+ 4CA5 61 63 74 65
 306+ 4CA9 72 73 2E 0D
 306+ 4CAD 0A
 307+ 4CAE 50 72 65 73      db 'Press any key to start...',13,10,0
 307+ 4CB2 73 20 61 6E
 307+ 4CB6 79 20 6B 65
 307+ 4CBA 79 20 74 6F
 307+ 4CBE 20 73 74 61
 307+ 4CC2 72 74 2E 2E
 307+ 4CC6 2E 0D 0A 00
 308+ 4CCA C9               ret
 309+ 4CCB
 310+ 4CCB              wait_for_key:
 311+ 4CCB                      ; Waits for a key, and generates a random number in b, which it returns!
 312+ 4CCB 06 00                ld b, 0
 313+ 4CCD              wait_for_key1:
 314+ 4CCD 04                   inc b
 315+ 4CCE CD A2 07             call char_in
 316+ 4CD1 FE 00                cp 0
 317+ 4CD3 CA CD 4C             jp z, wait_for_key1
 318+ 4CD6 C9                   ret
 319+ 4CD7
 320+ 4CD7              copy_initial_pattern:
 321+ 4CD7                  ; Copy the starting pattern into the buffer.
 322+ 4CD7                  ; The pointer to the pattern is passed in HL.
 323+ 4CD7                  ; The pattern is made of "." and "#" but we store it in the buffer as
 324+ 4CD7                  ; 1s and 0s. We do this by ANDing the char with %00000001, which is
 325+ 4CD7                  ; why the '#' char needs to be ODD and the '.' char needs to be EVEN.
 326+ 4CD7
 327+ 4CD7 E5               push hl
 328+ 4CD8                  ; But first, totally zero out the entire buffer
 329+ 4CD8 21 00 80         ld hl, Buffer
 330+ 4CDB 36 00            ld (hl), 0
 331+ 4CDD 11 01 80         ld de, Buffer+1
 332+ 4CE0 06 1C            ld b, Height+3
 333+ 4CE2 0E 00            ld c, 0
 334+ 4CE4 ED B0            ldir
 335+ 4CE6
 336+ 4CE6 E1               pop hl
 337+ 4CE7
 338+ 4CE7                  ; Now copy the pattern to the buffer
 339+ 4CE7 16 81            ld d, BufferPage+1                  ; Initialise at location 1,1
 340+ 4CE9 1E 01            ld e, 1                             ; in the buffer (top left is 0,0)
 341+ 4CEB 0E 19            ld c, Height
 342+ 4CED              copy_initial_pattern_rows:
 343+ 4CED 06 50            ld b, Width
 344+ 4CEF E5               push hl                             ; Store pattern pointer
 345+ 4CF0              copy_initial_pattern_cols:
 346+ 4CF0 7E               ld a, (hl)                          ; Copy from pattern to buffer
 347+ 4CF1 E6 01            and %00000001                       ; Isolate bit 0 only
 348+ 4CF3 12               ld (de), a
 349+ 4CF4 23               inc hl                              ; Move to next location in pattern
 350+ 4CF5 1C               inc e                               ; next column
 351+ 4CF6 10 F8            djnz copy_initial_pattern_cols      ; loop columns
 352+ 4CF8 E1               pop hl                              ; Back to start of current row in pattern
 353+ 4CF9 D5               push de
 354+ 4CFA 11 50 00         ld de, PatternWidth
 355+ 4CFD 19               add hl, de                          ; Move to next row in pattern
 356+ 4CFE D1               pop de
 357+ 4CFF 1E 01            ld e, 1                             ; Back to start of buffer row
 358+ 4D01 14               inc d                               ; But move down a row
 359+ 4D02 0D               dec c                               ; loop rows
 360+ 4D03 20 E8            jr nz, copy_initial_pattern_rows
 361+ 4D05 C9               ret
 362+ 4D06
 363+ 4D06              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 364+ 4D06              ; The buffer needs to be in RAM... ;
 365+ 4D06              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 366+ 4D06              Buffer equ $8000
 367+ 4D06              BufferPage equ $80
 368+ 4D06
 369+ 4D06
 370+ 4D06
 371+ 4D06
 372+ 4D06
 373+ 4D06
 374+ 4D06
# file closed: GOFL.asm
# file closed: cpm.asm
