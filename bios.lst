# file opened: bios.asm
  1   0000              ; BIOS for CP/M v2.2 on Z80 Playground v1.2
  2   0000              ;
  3   0000              ; This occupies less than 0.5K
  4   0000
  5   0000                  include "locations.asm"
# file opened: locations.asm
  1+  0000              ; locations.asm
  2+  0000              ; Stores the ORG values for the CCP, BDOS, BIOS and CORE
  3+  0000
  4+  0000              ;CORE_START  equ $F600    ; $FFFF - 2.5K
  5+  0000              ;BIOS_START  equ $F400    ; $F600 - 0.5K
  6+  0000              ;BDOS_START  equ $EA00    ; $F400 - 2.5K
  7+  0000              ;CCP_START   equ $DE00    ; $EA00 - 3.0K
  8+  0000
  9+  0000              CORE_START  equ $EC00    ; 5119
 10+  0000              BIOS_START  equ $DC00    ; 4096
 11+  0000              BDOS_START  equ $D000    ; 3072
 12+  0000              CCP_START   equ $B000    ; 8192
 13+  0000
 14+  0000              CORE_SIZE   equ 0xFFFF-CORE_START
 15+  0000              BIOS_SIZE   equ CORE_START-BIOS_START
 16+  0000              BDOS_SIZE   equ BIOS_START-BDOS_START
 17+  0000              CCP_SIZE    equ BDOS_START-CCP_START
# file closed: locations.asm
  6   0000                  include "core_jump.asm"
# file opened: core_jump.asm
  1+  0000              ; core_jump.asm
  2+  0000              ;
  3+  0000              ; This is the jump table for the CORE routines.
  4+  0000              ; Instead of including core.asm, you can just include this, assuming that core.bin is already loaded.
  5+  0000              ;
  6+  0000                  include "port_numbers.asm"
# file opened: port_numbers.asm
  1++ 0000              ; port_numbers.asm
  2++ 0000
  3++ 0000              ; Here are the port numbers for various UART registers:
  4++ 0000              uart_tx_rx 		equ   0xB8   ; 	8
  5++ 0000              uart_IER 		equ   0xB9   ; 	9
  6++ 0000              uart_ISR 		equ   0xBA   ;  10  ; Also known as FCR
  7++ 0000              uart_LCR 		equ   0xBB   ;  11
  8++ 0000              uart_MCR 		equ   0xBC   ;  12  ; modem control reg
  9++ 0000              uart_LSR 		equ   0xBD   ;  13
 10++ 0000              uart_MSR 		equ   0xBE   ;  14
 11++ 0000              uart_scratch 	equ   0xBF   ;  15
 12++ 0000
 13++ 0000              PIO_A	equ	0xA8		; CA80 user 8255 base address 	  (port A)
 14++ 0000              PIO_B	equ	0xA9		; CA80 user 8255 base address + 1 (port B)
 15++ 0000              PIO_C	equ	0xAA		; CA80 user 8255 base address + 2 (fport C)
 16++ 0000              PIO_M	equ	0xAB		; CA80 user 8255 control register
 17++ 0000
# file closed: port_numbers.asm
  7+  0000
  8+  0000
  9+  0000              CORE_start_monitor equ CORE_START+0
 10+  0000              CORE_configure_uart  equ CORE_START+3
 11+  0000              CORE_print_a equ CORE_START+6
 12+  0000              CORE_char_in equ CORE_START+9
 13+  0000              CORE_char_available equ CORE_START+12
 14+  0000              CORE_short_pause equ CORE_START+15
 15+  0000              CORE_medium_pause equ CORE_START+18
 16+  0000              CORE_long_pause equ CORE_START+21
 17+  0000              CORE_disk_toggle equ CORE_START+24
 18+  0000              CORE_disk_on equ CORE_START+27
 19+  0000              CORE_disk_off equ CORE_START+30
 20+  0000              CORE_user_toggle equ CORE_START+33
 21+  0000              CORE_user_on equ CORE_START+36
 22+  0000              CORE_user_off equ CORE_START+39
 23+  0000              CORE_rom_toggle equ CORE_START+42
 24+  0000              CORE_rom_on equ CORE_START+45
 25+  0000              CORE_rom_off equ CORE_START+48
 26+  0000              CORE_newline equ CORE_START+51
 27+  0000              CORE_space equ CORE_START+54
 28+  0000              CORE_message equ CORE_START+57
 29+  0000              CORE_show_hl_as_hex equ CORE_START+60
 30+  0000              CORE_show_all equ CORE_START+63
 31+  0000              CORE_dir equ CORE_START+66
 32+  0000              CORE_dir_next equ CORE_START+69
 33+  0000              CORE_load_bin_file equ CORE_START+72
 34+  0000              CORE_dir_info_read equ CORE_START+75
 35+  0000              CORE_dir_info_write equ CORE_START+78
 36+  0000              CORE_write_to_file equ CORE_START+81
 37+  0000              CORE_erase_file equ CORE_START+84
 38+  0000              CORE_check_cpmdisks_structure equ CORE_START+87
 39+  0000              CORE_move_to_file_pointer equ CORE_START+90
 40+  0000              CORE_set_random_pointer_in_fcb equ CORE_START+93
 41+  0000              CORE_copy_filename_to_buffer equ CORE_START+96
 42+  0000              CORE_open_file equ CORE_START+99
 43+  0000              CORE_create_directory equ CORE_START+102
 44+  0000              CORE_close_file equ CORE_START+105
 45+  0000              CORE_read_from_file equ CORE_START+108
 46+  0000              CORE_connect_to_disk equ CORE_START+111
 47+  0000              CORE_mount_disk equ CORE_START+114
 48+  0000              CORE_create_file equ CORE_START+117
 49+  0000              CORE_show_a_as_hex equ CORE_START+120
 50+  0000              CORE_convert_user_number_to_folder_name equ CORE_START+123
 51+  0000              CORE_set_file_size_in_fcb equ CORE_START+126
 52+  0000              CORE_change_to_slot2 equ CORE_START+129
 53+  0000
 54+  0000
 55+  0000              filename_buffer equ 65535-20
 56+  0000              DRIVE_NAME equ filename_buffer-2
 57+  0000              disk_buffer equ DRIVE_NAME-36
 58+  0000
 59+  0000              core_location equ disk_buffer-2         ; Stores the core_start location
 60+  0000              bios_location equ core_location-2       ; Stores the bios_start location
 61+  0000              bdos_location equ bios_location-2       ; Stores the bdos_start location
 62+  0000              ccp_location equ bdos_location-2        ; Stores the ccp_start location
 63+  0000              ccp_name equ ccp_location-13            ; stores the name of the ccp file, e.g. MYCCP.BIN with a zero terminator
 64+  0000
 65+  0000
 66+  0000
 67+  0000
 68+  0000
 69+  0000
# file closed: core_jump.asm
  7   0000
  8   0000                  org BIOS_START
  9   DC00
 10   DC00              bios_entry:
 11   DC00 C3 33 DC        	JP	BOOT	;COLD START
 12   DC03              WBOOTE:
 13   DC03 C3 4F DD         JP	WBOOT	;WARM START
 14   DC06 C3 81 DD         JP	CONST	;CONSOLE STATUS
 15   DC09 C3 8E DD         JP	CONIN	;CONSOLE CHARACTER IN
 16   DC0C C3 98 DD         JP	CONOUT	;CONSOLE CHARACTER OUT
 17   DC0F C3 9D DD         JP	LIST	;LIST CHARACTER OUT
 18   DC12 C3 A0 DD         JP	PUNCH	;PUNCH CHARACTER OUT
 19   DC15 C3 A3 DD         JP	READER	;READER CHARACTER OUT
 20   DC18 C3 A8 DD         JP	HOME	;MOVE HEAD TO HOME POSITION
 21   DC1B C3 AD DD         JP	SELDSK	;SELECT DISK
 22   DC1E C3 B2 DD         JP	SETTRK	;SET TRACK NUMBER
 23   DC21 C3 B7 DD         JP	SETSEC	;SET SECTOR NUMBER
 24   DC24 C3 BC DD         JP	SETDMA	;SET DMA ADDRESS
 25   DC27 C3 C1 DD         JP	READ	;READ DISK
 26   DC2A C3 C6 DD         JP	WRITE	;WRITE DISK
 27   DC2D C3 CB DD         JP	LISTST	;RETURN LIST STATUS
 28   DC30 C3 D0 DD         JP	SECTRAN	;SECTOR TRANSLATE
 29   DC33
 30   DC33              BOOT:
 31   DC33 31 21 DE         ld sp, BIOS_STACK
 32   DC36 CD 39 EC         call CORE_message
 33   DC39 1B 5B 32 4A      db 27,'[2J'                     ; clear screen
 34   DC3D 1B 5B 48         db 27,'[H'                      ; cursor home
 35   DC40 1B 5B 30 6D      db 27,'[0m'                     ; clear attributes
 36   DC44 1B 5B 3F 32      db 27,'[?25h'                   ; Show cursor
 36   DC48 35 68
 37   DC4A 43 50 2F 4D      db 'CP/M v2.2 - 2022',13,10
 37   DC4E 20 76 32 2E
 37   DC52 32 20 2D 20
 37   DC56 32 30 32 32
 37   DC5A 0D 0A
 38   DC5C 48 61 72 64      db 'Hardware version 202206-R1',13,10
 38   DC60 77 61 72 65
 38   DC64 20 76 65 72
 38   DC68 73 69 6F 6E
 38   DC6C 20 32 30 32
 38   DC70 32 30 36 2D
 38   DC74 52 31 0D 0A
 39   DC78 43 6F 70 79      db 'Copyright (C) Digital Research',13,10
 39   DC7C 72 69 67 68
 39   DC80 74 20 28 43
 39   DC84 29 20 44 69
 39   DC88 67 69 74 61
 39   DC8C 6C 20 52 65
 39   DC90 73 65 61 72
 39   DC94 63 68 0D 0A
 40   DC98 49 6D 70 6C      db 'Implemented and tested by pdsilva',13,10
 40   DC9C 65 6D 65 6E
 40   DCA0 74 65 64 20
 40   DCA4 61 6E 64 20
 40   DCA8 74 65 73 74
 40   DCAC 65 64 20 62
 40   DCB0 79 20 70 64
 40   DCB4 73 69 6C 76
 40   DCB8 61 0D 0A
 41   DCBB 36 34 4B 20      db '64K ram memory',13,10
 41   DCBF 72 61 6D 20
 41   DCC3 6D 65 6D 6F
 41   DCC7 72 79 0D 0A
 42   DCCB 53 79 73 74      db 'System with drives A thru P',13,10
 42   DCCF 65 6D 20 77
 42   DCD3 69 74 68 20
 42   DCD7 64 72 69 76
 42   DCDB 65 73 20 41
 42   DCDF 20 74 68 72
 42   DCE3 75 20 50 0D
 42   DCE7 0A
 43   DCE8 0D 0A            db 13,10
 44   DCEA 00               db 0
 45   DCEB
 46   DCEB CD 39 EC         call CORE_message
 47   DCEE 43 4F 52 45      db 'CORE... ',0
 47   DCF2 2E 2E 2E 20
 47   DCF6 00
 48   DCF7 21 00 EC         ld hl, CORE_START
 49   DCFA CD 3C EC         call CORE_show_hl_as_hex
 50   DCFD CD 33 EC         call CORE_newline
 51   DD00
 52   DD00 CD 39 EC         call CORE_message
 53   DD03 42 49 4F 53      db 'BIOS... ',0
 53   DD07 2E 2E 2E 20
 53   DD0B 00
 54   DD0C 21 00 DC         ld hl, BIOS_START
 55   DD0F CD 3C EC         call CORE_show_hl_as_hex
 56   DD12 CD 33 EC         call CORE_newline
 57   DD15
 58   DD15 CD 39 EC         call CORE_message
 59   DD18 42 44 4F 53      db 'BDOS... ',0
 59   DD1C 2E 2E 2E 20
 59   DD20 00
 60   DD21 21 00 D0         ld hl, BDOS_START
 61   DD24 CD 3C EC         call CORE_show_hl_as_hex
 62   DD27 CD 33 EC         call CORE_newline
 63   DD2A
 64   DD2A 21 B0 FF         ld hl, ccp_name
 65   DD2D              show_ccp_name_loop:
 66   DD2D 7E               ld a, (hl)
 67   DD2E FE 00            cp 0
 68   DD30 28 06            jr z, shown_ccp_name
 69   DD32 CD 06 EC         call CORE_print_a
 70   DD35 23               inc hl
 71   DD36 18 F5            jr show_ccp_name_loop
 72   DD38
 73   DD38              shown_ccp_name:
 74   DD38 CD 36 EC         call CORE_space
 75   DD3B 2A BD FF         ld hl, (ccp_location)
 76   DD3E CD 3C EC         call CORE_show_hl_as_hex
 77   DD41 CD 33 EC         call CORE_newline
 78   DD44
 79   DD44 CD 30 EC         call CORE_rom_off
 80   DD47 CD 27 EC         call CORE_user_off
 81   DD4A
 82   DD4A                  ; Set the drive and user to 0
 83   DD4A 3E 00            ld a, 0
 84   DD4C 32 04 00         ld (UDFLAG), a
 85   DD4F
 86   DD4F                  ; Roll through to the warm boot...
 87   DD4F              WBOOT:
 88   DD4F 31 21 DE         ld sp, BIOS_STACK
 89   DD52
 90   DD52 CD 39 EC         call CORE_message
 91   DD55 1B 5B 30 6D      db 27,'[0m',0                  ; clear attributes
 91   DD59 00
 92   DD5A                  ;'Load the CCP to the proper location',13,10,0
 93   DD5A 21 B0 FF         ld hl, ccp_name
 94   DD5D CD 60 EC         call CORE_copy_filename_to_buffer
 95   DD60 ED 5B BD FF      ld de, (ccp_location)
 96   DD64 CD 48 EC         call CORE_load_bin_file
 97   DD67
 98   DD67                  ; Load the BDOS to the proper location - so we can do disk access etc
 99   DD67 21 F1 DD         ld hl, NAME_OF_BDOS
100   DD6A CD 60 EC         call CORE_copy_filename_to_buffer
101   DD6D 11 00 D0         ld de, BDOS_START
102   DD70 CD 48 EC         call CORE_load_bin_file
103   DD73
104   DD73                  ; Pass the current drive and user to the CCP to start it
105   DD73 3A 04 00         ld a, (UDFLAG)
106   DD76 4F               ld c, a
107   DD77 2A BD FF         ld hl, (ccp_location)
108   DD7A
109   DD7A CD 81 EC         call CORE_change_to_slot2
110   DD7D
111   DD7D              ;    jp      CCP_START
112   DD7D 23               inc hl
113   DD7E 23               inc hl
114   DD7F 23               inc hl
115   DD80 E9               jp (hl) ; Note this means jump to hl, not jump to (hl)
116   DD81
117   DD81              CONST:
118   DD81                  ; RETURN 0FFH IF CHARACTER READY, 00H IF NOT
119   DD81 DB BD        	in a,(uart_LSR)			; get status from Line Status Register
120   DD83 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
121   DD85              							; "logic 0 = no data in receive holding register."
122   DD85 CA 8B DD     	jp z,CONST1	            ; zero = no char received
123   DD88 3E FF        	ld a, $FF		        ; return true
124   DD8A C9           	ret						; in A
125   DD8B              CONST1:
126   DD8B 3E 00        	ld a,0					; Return a zero in A
127   DD8D C9           	ret
128   DD8E
129   DD8E              CONIN:
130   DD8E                  ; CONSOLE CHARACTER INTO REGISTER A
131   DD8E DB BD        	in a,(uart_LSR)			; get status from Line Status Register
132   DD90 CB 47        	bit 0,a					; zero flag set to true if bit 0 is 0 (bit 0 = Receive Data Ready)
133   DD92              							; "logic 0 = no data in receive holding register."
134   DD92 CA 8E DD     	jp z,CONIN	            ; zero = no char received
135   DD95 DB B8        	in a,(uart_tx_rx)		; Get the incoming char
136   DD97 C9               ret
137   DD98
138   DD98              CONOUT:
139   DD98 79               ld a, c
140   DD99 CD 06 EC         call CORE_print_a
141   DD9C C9               ret
142   DD9D
143   DD9D              LIST:
144   DD9D C3 98 DD         jp CONOUT
145   DDA0              PUNCH:
146   DDA0 C3 98 DD         jp CONOUT
147   DDA3              READER:
148   DDA3 3E 52            ld a, 'R'
149   DDA5 C3 D5 DD         jp BIOS_MOAN
150   DDA8              HOME:
151   DDA8 3E 48            ld a, 'H'
152   DDAA C3 D5 DD         jp BIOS_MOAN
153   DDAD              SELDSK:
154   DDAD 3E 44            ld a, 'D'
155   DDAF C3 D5 DD         jp BIOS_MOAN
156   DDB2              SETTRK:
157   DDB2 3E 54            ld a, 'T'
158   DDB4 C3 D5 DD         jp BIOS_MOAN
159   DDB7              SETSEC:
160   DDB7 3E 53            ld a, 'S'
161   DDB9 C3 D5 DD         jp BIOS_MOAN
162   DDBC              SETDMA:
163   DDBC 3E 44            ld a, 'D'
164   DDBE C3 D5 DD         jp BIOS_MOAN
165   DDC1              READ:
166   DDC1 3E 3C            ld a, '<'
167   DDC3 C3 D5 DD         jp BIOS_MOAN
168   DDC6              WRITE:
169   DDC6 3E 3E            ld a, '>'
170   DDC8 C3 D5 DD         jp BIOS_MOAN
171   DDCB              LISTST:
172   DDCB 3E 3A            ld a, ':'
173   DDCD C3 D5 DD         jp BIOS_MOAN
174   DDD0              SECTRAN:
175   DDD0 3E 2B            ld a, '+'
176   DDD2 C3 D5 DD         jp BIOS_MOAN
177   DDD5
178   DDD5              BIOS_MOAN:
179   DDD5 CD 39 EC         call CORE_message
180   DDD8 42 41 44 20      db 'BAD BIOS CALL: ',0
180   DDDC 42 49 4F 53
180   DDE0 20 43 41 4C
180   DDE4 4C 3A 20 00
181   DDE8 CD 06 EC         call CORE_print_a
182   DDEB CD 33 EC         call CORE_newline
183   DDEE C3 00 00         jp $0000                    ; Totally abandon anything after a bad BIOS call!
184   DDF1
185   DDF1              NAME_OF_BDOS:
186   DDF1 42 44 4F 53      db 'BDOS.BIN',0
186   DDF5 2E 42 49 4E
186   DDF9 00
187   DDFA              NAME_OF_BIOS:
188   DDFA 42 49 4F 53      db 'BIOS.BIN',0
188   DDFE 2E 42 49 4E
188   DE02 00
189   DE03
190   DE03              BIOS_STACK_START:
191   DE03 00 00 00 00      db 0,0,0,0,0,0,0,0,0,0
191   DE07 00 00 00 00
191   DE0B 00 00
192   DE0D 00 00 00 00      db 0,0,0,0,0,0,0,0,0,0
192   DE11 00 00 00 00
192   DE15 00 00
193   DE17 00 00 00 00      db 0,0,0,0,0,0,0,0,0,0
193   DE1B 00 00 00 00
193   DE1F 00 00
194   DE21              BIOS_STACK:
195   DE21 00 00            db 0,0
196   DE23
197   DE23              UDFLAG	EQU	4		;current drive name and user number.
198   DE23              BIOS_END equ $
199   DE23
200   DE23                  IF BIOS_END-BIOS_START>BIOS_SIZE
201   DE23 ~                    WARNING "The BIOS is too big! ',BIOS_SIZE," bytes max!"
202   DE23                  ENDIF
# file closed: bios.asm
